[{"D:\\Projects\\Scheduler App\\scheduler\\src\\index.js":"1","D:\\Projects\\Scheduler App\\scheduler\\src\\App.js":"2","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase.js":"3","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase.js":"4","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\LoginPage.js":"5","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unauthorized.js":"6","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\index.js":"7","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Predefined.js":"8","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\URLNotFound.js":"9","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unavailable.js":"10","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\UsersClass.js":"11","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\hook.js":"12","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Pages.js":"13","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\index.js":"14","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\index.js":"15","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\index.js":"16","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\MainPage.js":"17","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\hook.js":"18","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Base.js":"19","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\hook.js":"20","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\MainButton.js":"21","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\SidenavMobile.js":"22","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\AuthClass.js":"23","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardGrillingPage.js":"24","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardTransactionPage.js":"25","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardStoreInventory.js":"26","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\pathNames.js":"27","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\AutoSelect.js":"28","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomInput.js":"29","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTitle.js":"30","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\index.js":"31","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\RolesClass.js":"32","D:\\Projects\\Scheduler App\\scheduler\\src\\Validations\\validateAuth\\index.js":"33","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\errorCodes.js":"34","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\hook.js":"35","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDrawer.js":"36","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\validations\\index.js":"37","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\index.js":"38","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTable.js":"39","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\index.js":"40","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\ProductsClass.js":"41","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\types.js":"42","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocuments.js":"43","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\helpers.js":"44","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\SchedulesClass.js":"45","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\PaginateCommands.js":"46","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\dateFormat.js":"47","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\SettingsUserMasterfilePage.js":"48","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsUserMasterfile\\index.js":"49","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\index.js":"50","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\RouteWithSubRoutes.js":"51","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentById.js":"52","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsRoleMasterfile\\index.js":"53","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsDropdownMasterfile\\index.js":"54","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\DropdownsClass.js":"55","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsBranchMasterfile\\index.js":"56","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\BranchClass.js":"57","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\hook.js":"58","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\collectionData.js":"59","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sumArray.js":"60","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\formatNumber.js":"61","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\arrayFuntions.js":"62","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\index.js":"63","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\EditableTagGroup\\index.js":"64","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useQuery.js":"65","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\useModifiedCount.js":"66","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomPopConfirm.js":"67","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringField.js":"68","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringFieldArray.js":"69","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\BooleanField.js":"70","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\FormHandlerAdd.js":"71","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\moduleList.js":"72","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\menuData.js":"73","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderForm.js":"74","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\usePaginate.js":"75","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\index.js":"76","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\hooks.js":"77","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\Scheduler.js":"78","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\ObjectFieldArray.js":"79","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsIncidents\\index.js":"80","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\IncidentReportClass.js":"81","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilterOptions\\index.js":"82","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\RangePicker.js":"83","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\index.js":"84","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\hook.js":"85","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\othersTableColumns.js":"86","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\PrintComponent.js":"87","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\tableColumns.js":"88","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\styles.js":"89","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\rangeHandler.js":"90","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\index.js":"91","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\ComponentToPrint.js":"92","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\SchedulesServicess.js":"93","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\base\\index.js":"94","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\index.js":"95","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\dailyReportType.js":"96","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\servedReportType.js":"97","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\LiquidChart\\index.js":"98","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\addMinusDay.js":"99","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Styles\\index.js":"100","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\checkDate.js":"101","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useRangeHandler.js":"102","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByFn.js":"103","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByKeyword.js":"104","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderDetails.js":"105","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDate.js":"106","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTextArea.js":"107","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\useProductPurchased.js":"108","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\ProductPurchased.js":"109","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomModal.js":"110","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\DiscountAndOthersDialog.js":"111","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\PaymentForm.js":"112","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\hookOrderNoCounter.js":"113","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Upload\\index.js":"114","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Upload\\useGetUploads.js":"115","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\DropdownChannel.js":"116","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\index.js":"117","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\DropdownChannel.js":"118","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\hook.js":"119","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\helpers.js":"120","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\ExportService.js":"121","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\schedulerExcel.js":"122","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\index.js":"123","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\hook.js":"124","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\groupPaymentPrint.js":"125","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\handleAutoFill.js":"126","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\findDataHandler.js":"127","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\rangeHandler.js":"128","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\selectComponentHandler.js":"129","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\DropdownServicess.js":"130","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\vipUsersClass.js":"131","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\index.js":"132","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Panel\\index.js":"133","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Controllers\\useSchedulerFilter.js":"134","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\Documents\\filteringPanelDocs.js":"135","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Controllers\\FilteringPanelMethods.js":"136","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\Controllers\\PrintMethods.js":"137","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Panel\\styles.js":"138","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\styles.js":"139","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Styles.js":"140","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Styled\\index.js":"141","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\produceSalesSummary.js":"142","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sorting.js":"143","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\productStaticPrices.js":"144"},{"size":442,"mtime":1636433527604,"results":"145","hashOfConfig":"146"},{"size":556,"mtime":1636433525136,"results":"147","hashOfConfig":"146"},{"size":1812,"mtime":1638239409237,"results":"148","hashOfConfig":"146"},{"size":1425,"mtime":1636433527495,"results":"149","hashOfConfig":"150"},{"size":1014,"mtime":1636433527254,"results":"151","hashOfConfig":"146"},{"size":1996,"mtime":1637539023876,"results":"152","hashOfConfig":"146"},{"size":1583,"mtime":1637323376567,"results":"153","hashOfConfig":"146"},{"size":1240,"mtime":1637539747719,"results":"154","hashOfConfig":"146"},{"size":830,"mtime":1636433526322,"results":"155","hashOfConfig":"146"},{"size":1898,"mtime":1636953403942,"results":"156","hashOfConfig":"146"},{"size":1758,"mtime":1637076477897,"results":"157","hashOfConfig":"146"},{"size":4126,"mtime":1636433525311,"results":"158","hashOfConfig":"146"},{"size":2791,"mtime":1638782518940,"results":"159","hashOfConfig":"146"},{"size":5402,"mtime":1641195022055,"results":"160","hashOfConfig":"146"},{"size":1296,"mtime":1637539986708,"results":"161","hashOfConfig":"146"},{"size":2069,"mtime":1643915409517,"results":"162","hashOfConfig":"146"},{"size":846,"mtime":1636488739713,"results":"163","hashOfConfig":"146"},{"size":1452,"mtime":1638782459829,"results":"164","hashOfConfig":"146"},{"size":6052,"mtime":1642093689938,"results":"165","hashOfConfig":"146"},{"size":1800,"mtime":1637083316256,"results":"166","hashOfConfig":"146"},{"size":478,"mtime":1638240861454,"results":"167","hashOfConfig":"146"},{"size":1852,"mtime":1636433525499,"results":"168","hashOfConfig":"146"},{"size":2958,"mtime":1636433527336,"results":"169","hashOfConfig":"146"},{"size":214,"mtime":1637149701483,"results":"170","hashOfConfig":"146"},{"size":2120,"mtime":1638780811476,"results":"171","hashOfConfig":"146"},{"size":226,"mtime":1636433527237,"results":"172","hashOfConfig":"146"},{"size":1784,"mtime":1636824064009,"results":"173","hashOfConfig":"146"},{"size":966,"mtime":1637074290298,"results":"174","hashOfConfig":"146"},{"size":1738,"mtime":1637705971390,"results":"175","hashOfConfig":"146"},{"size":479,"mtime":1637587869099,"results":"176","hashOfConfig":"146"},{"size":3538,"mtime":1642061566814,"results":"177","hashOfConfig":"146"},{"size":1398,"mtime":1637079339862,"results":"178","hashOfConfig":"146"},{"size":841,"mtime":1636433527559,"results":"179","hashOfConfig":"146"},{"size":42,"mtime":1636433526275,"results":"180","hashOfConfig":"146"},{"size":231,"mtime":1636433526135,"results":"181","hashOfConfig":"146"},{"size":1034,"mtime":1636433525143,"results":"182","hashOfConfig":"146"},{"size":2953,"mtime":1636958215786,"results":"183","hashOfConfig":"146"},{"size":21183,"mtime":1643920441410,"results":"184","hashOfConfig":"146"},{"size":584,"mtime":1638902063571,"results":"185","hashOfConfig":"146"},{"size":10965,"mtime":1643919064695,"results":"186","hashOfConfig":"146"},{"size":1914,"mtime":1637185767548,"results":"187","hashOfConfig":"146"},{"size":486,"mtime":1637591096637,"results":"188","hashOfConfig":"146"},{"size":1817,"mtime":1638783943629,"results":"189","hashOfConfig":"146"},{"size":592,"mtime":1636561352817,"results":"190","hashOfConfig":"146"},{"size":12523,"mtime":1643620171081,"results":"191","hashOfConfig":"146"},{"size":3383,"mtime":1637092592867,"results":"192","hashOfConfig":"146"},{"size":1139,"mtime":1637605921215,"results":"193","hashOfConfig":"146"},{"size":236,"mtime":1636459596931,"results":"194","hashOfConfig":"146"},{"size":446,"mtime":1638783275591,"results":"195","hashOfConfig":"146"},{"size":633,"mtime":1638783139119,"results":"196","hashOfConfig":"146"},{"size":446,"mtime":1637176771671,"results":"197","hashOfConfig":"146"},{"size":743,"mtime":1638783108827,"results":"198","hashOfConfig":"146"},{"size":486,"mtime":1638783137781,"results":"199","hashOfConfig":"146"},{"size":525,"mtime":1638783917857,"results":"200","hashOfConfig":"146"},{"size":1082,"mtime":1638783379034,"results":"201","hashOfConfig":"146"},{"size":403,"mtime":1638783139807,"results":"202","hashOfConfig":"146"},{"size":1332,"mtime":1637071153955,"results":"203","hashOfConfig":"146"},{"size":7570,"mtime":1643920073906,"results":"204","hashOfConfig":"146"},{"size":9071,"mtime":1643929861841,"results":"205","hashOfConfig":"146"},{"size":2303,"mtime":1639153094189,"results":"206","hashOfConfig":"146"},{"size":251,"mtime":1631116851030,"results":"207","hashOfConfig":"146"},{"size":621,"mtime":1636578226951,"results":"208","hashOfConfig":"146"},{"size":6230,"mtime":1638776042082,"results":"209","hashOfConfig":"146"},{"size":5326,"mtime":1637077991023,"results":"210","hashOfConfig":"146"},{"size":219,"mtime":1636910743021,"results":"211","hashOfConfig":"146"},{"size":449,"mtime":1636915470563,"results":"212","hashOfConfig":"146"},{"size":549,"mtime":1636916754551,"results":"213","hashOfConfig":"146"},{"size":978,"mtime":1637071446314,"results":"214","hashOfConfig":"146"},{"size":1379,"mtime":1637077235797,"results":"215","hashOfConfig":"146"},{"size":981,"mtime":1636921971437,"results":"216","hashOfConfig":"146"},{"size":6442,"mtime":1637073361995,"results":"217","hashOfConfig":"146"},{"size":359,"mtime":1637080250131,"results":"218","hashOfConfig":"146"},{"size":5916,"mtime":1642184248384,"results":"219","hashOfConfig":"146"},{"size":27160,"mtime":1643928179099,"results":"220","hashOfConfig":"146"},{"size":3189,"mtime":1638087472848,"results":"221","hashOfConfig":"146"},{"size":409,"mtime":1637830615351,"results":"222","hashOfConfig":"146"},{"size":1766,"mtime":1637145322570,"results":"223","hashOfConfig":"146"},{"size":11408,"mtime":1642150699328,"results":"224","hashOfConfig":"146"},{"size":4250,"mtime":1637191238785,"results":"225","hashOfConfig":"146"},{"size":287,"mtime":1637249845896,"results":"226","hashOfConfig":"146"},{"size":1456,"mtime":1637251615610,"results":"227","hashOfConfig":"146"},{"size":2438,"mtime":1639241429743,"results":"228","hashOfConfig":"146"},{"size":482,"mtime":1637259201650,"results":"229","hashOfConfig":"146"},{"size":12020,"mtime":1637263024251,"results":"230","hashOfConfig":"146"},{"size":3965,"mtime":1637262893111,"results":"231","hashOfConfig":"146"},{"size":3924,"mtime":1637261970910,"results":"232","hashOfConfig":"146"},{"size":4295,"mtime":1637260954961,"results":"233","hashOfConfig":"146"},{"size":5489,"mtime":1637262025010,"results":"234","hashOfConfig":"146"},{"size":992,"mtime":1637261387153,"results":"235","hashOfConfig":"146"},{"size":2634,"mtime":1637262842012,"results":"236","hashOfConfig":"146"},{"size":850,"mtime":1631116850867,"results":"237","hashOfConfig":"146"},{"size":145,"mtime":1631116850820,"results":"238","hashOfConfig":"146"},{"size":3297,"mtime":1639250437164,"results":"239","hashOfConfig":"146"},{"size":2316,"mtime":1637261900702,"results":"240","hashOfConfig":"146"},{"size":3545,"mtime":1637266649086,"results":"241","hashOfConfig":"146"},{"size":21062,"mtime":1637266643726,"results":"242","hashOfConfig":"243"},{"size":27126,"mtime":1637269649565,"results":"244","hashOfConfig":"146"},{"size":622,"mtime":1631116850789,"results":"245","hashOfConfig":"146"},{"size":705,"mtime":1637612550294,"results":"246","hashOfConfig":"146"},{"size":1576,"mtime":1631116850966,"results":"247","hashOfConfig":"146"},{"size":125,"mtime":1631116851029,"results":"248","hashOfConfig":"146"},{"size":944,"mtime":1638837215778,"results":"249","hashOfConfig":"146"},{"size":760,"mtime":1637592210416,"results":"250","hashOfConfig":"146"},{"size":5001,"mtime":1638769341651,"results":"251","hashOfConfig":"146"},{"size":16495,"mtime":1643196896883,"results":"252","hashOfConfig":"146"},{"size":1186,"mtime":1637903162011,"results":"253","hashOfConfig":"146"},{"size":189,"mtime":1637894578764,"results":"254","hashOfConfig":"146"},{"size":5173,"mtime":1643928068616,"results":"255","hashOfConfig":"146"},{"size":10672,"mtime":1643929658417,"results":"256","hashOfConfig":"146"},{"size":1077,"mtime":1637897443455,"results":"257","hashOfConfig":"146"},{"size":10964,"mtime":1638062385457,"results":"258","hashOfConfig":"146"},{"size":8803,"mtime":1639360616912,"results":"259","hashOfConfig":"146"},{"size":1786,"mtime":1638053915643,"results":"260","hashOfConfig":"146"},{"size":2993,"mtime":1638239012098,"results":"261","hashOfConfig":"146"},{"size":3299,"mtime":1638241977139,"results":"262","hashOfConfig":"146"},{"size":1181,"mtime":1638188682453,"results":"263","hashOfConfig":"146"},{"size":6684,"mtime":1638783070041,"results":"264","hashOfConfig":"146"},{"size":1181,"mtime":1638188682453,"results":"265","hashOfConfig":"146"},{"size":7578,"mtime":1638783517519,"results":"266","hashOfConfig":"146"},{"size":592,"mtime":1636561352817,"results":"267","hashOfConfig":"146"},{"size":2925,"mtime":1643216952365,"results":"268","hashOfConfig":"146"},{"size":24377,"mtime":1643930884679,"results":"269","hashOfConfig":"146"},{"size":5172,"mtime":1639250865987,"results":"270","hashOfConfig":"146"},{"size":11777,"mtime":1639361513042,"results":"271","hashOfConfig":"146"},{"size":2800,"mtime":1639250531102,"results":"272","hashOfConfig":"146"},{"size":1821,"mtime":1639249882646,"results":"273","hashOfConfig":"146"},{"size":622,"mtime":1636433525543,"results":"274","hashOfConfig":"146"},{"size":2618,"mtime":1634996391616,"results":"275","hashOfConfig":"146"},{"size":513,"mtime":1639254032253,"results":"276","hashOfConfig":"146"},{"size":1023,"mtime":1639250524093,"results":"277","hashOfConfig":"146"},{"size":689,"mtime":1639362419455,"results":"278","hashOfConfig":"146"},{"size":3311,"mtime":1642094450713,"results":"279","hashOfConfig":"146"},{"size":1210,"mtime":1642089566565,"results":"280","hashOfConfig":"146"},{"size":5899,"mtime":1642095241671,"results":"281","hashOfConfig":"146"},{"size":5261,"mtime":1633396084391,"results":"282","hashOfConfig":"243"},{"size":3057,"mtime":1642087157333,"results":"283","hashOfConfig":"146"},{"size":1658,"mtime":1631116850821,"results":"284","hashOfConfig":"243"},{"size":646,"mtime":1631116850657,"results":"285","hashOfConfig":"146"},{"size":478,"mtime":1642088740919,"results":"286","hashOfConfig":"146"},{"size":478,"mtime":1642088740919,"results":"287","hashOfConfig":"243"},{"size":1576,"mtime":1631116850966,"results":"288","hashOfConfig":"146"},{"size":8802,"mtime":1643651565359,"results":"289","hashOfConfig":"146"},{"size":481,"mtime":1643619804249,"results":"290","hashOfConfig":"146"},{"size":2579,"mtime":1643927372941,"results":"291","hashOfConfig":"146"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},"1hveaa",{"filePath":"295","messages":"296","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"294"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"294"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"166rgf3",{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"294"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"294"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"294"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"294"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"294"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"294"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"294"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"294"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"294"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"294"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"294"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"294"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"294"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"294"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"294"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"294"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"294"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"294"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"294"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"294"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"294"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"294"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"294"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"294"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"294"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"294"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"294"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"294"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"294"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"294"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"294"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"294"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"294"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"294"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"294"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"294"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"294"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"294"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"294"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"294"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"294"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"294"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"294"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"294"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"294"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"294"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"294"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"294"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"294"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"294"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"294"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"294"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"294"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"294"},{"filePath":"539","messages":"540","errorCount":1,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"g7rryo",{"filePath":"541","messages":"542","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"294"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"294"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"294"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"294"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"294"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"294"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"294"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"294"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577","usedDeprecatedRules":"294"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580","usedDeprecatedRules":"294"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"294"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"294"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"294"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"294"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"294"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"294"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"294"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"294"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"294"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"294"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"294"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"294"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"294"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"294"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"294"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"294"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"294"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"294"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"294"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"647"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"647"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"659"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"294"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"294"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"294"},"D:\\Projects\\Scheduler App\\scheduler\\src\\index.js",[],["671","672"],"D:\\Projects\\Scheduler App\\scheduler\\src\\App.js",["673","674","675"],"import React, { useContext, useEffect } from \"react\"\r\nimport SecuredRoutes from \"Secure\"\r\nimport LoginPage from \"Pages/LoginPage\"\r\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\"\r\nimport Unauthorized, { UnauthorizedContext } from \"Error/Unauthorized\"\r\n\r\nfunction App() {\r\n  const { isAuthenticated } = useContext(UnauthorizedContext)\r\n  return isAuthenticated ? <SecuredRoutes /> : <LoginPage />\r\n}\r\n\r\nexport default () => {\r\n  return (\r\n    <Unauthorized>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Unauthorized>\r\n  )\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase.js",["676"],"// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\"\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  collection,\r\n  getDocs,\r\n  getDoc,\r\n  orderBy,\r\n  query,\r\n  addDoc,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAfter,\r\n  onSnapshot,\r\n  startAt,\r\n  endAt,\r\n  Timestamp,\r\n} from \"firebase/firestore\"\r\nimport {\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\"\r\n\r\nimport {\r\n  getStorage,\r\n  ref,\r\n  deleteObject,\r\n  listAll,\r\n  getDownloadURL,\r\n  uploadBytes,\r\n} from \"firebase/storage\"\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\nconst {\r\n  REACT_APP_API_KEY,\r\n  REACT_APP_AUTH_DOMAIN,\r\n  REACT_APP_PROJECT_ID,\r\n  REACT_APP_STORAGE_BUCKET,\r\n  REACT_APP_MESSAGING_SENDER_ID,\r\n  REACT_APP_APP_ID,\r\n  REACT_APP_MEASUREMENT_ID,\r\n} = process.env\r\n\r\nconst firebaseConfig = {\r\n  apiKey: REACT_APP_API_KEY,\r\n  authDomain: REACT_APP_AUTH_DOMAIN,\r\n  projectId: REACT_APP_PROJECT_ID,\r\n  storageBucket: REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: REACT_APP_APP_ID,\r\n  measurementId: REACT_APP_MEASUREMENT_ID,\r\n}\r\n\r\n// Initialize Firebase\r\nconst firestore = initializeApp(firebaseConfig)\r\nconst db = getFirestore()\r\nexport {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAfter,\r\n  onSnapshot,\r\n  startAt,\r\n  endAt,\r\n  Timestamp,\r\n  getStorage,\r\n  ref,\r\n  listAll,\r\n  deleteObject,\r\n  getDownloadURL,\r\n  uploadBytes,\r\n}\r\nexport default db\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\LoginPage.js",["677"],"import Authentication from \"Components/Features/Authentication\"\r\nimport styled from \"styled-components\"\r\nimport React, { useContext } from \"react\"\r\nimport { Route, Switch } from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { Spin } from \"antd\"\r\n\r\nfunction LoginPage() {\r\n  const { isAuthenticated, isLoading, loaded } = useContext(UnauthorizedContext)\r\n  return (\r\n    <LoginContainer>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Authentication />\r\n        </Route>\r\n        <Route exact path=\"/login\">\r\n          <Authentication />\r\n        </Route>\r\n        <Route exact path=\"*\">\r\n          {!isAuthenticated && loaded ? <URLNotFound /> : <Spin size=\"large\" />}\r\n        </Route>\r\n      </Switch>\r\n    </LoginContainer>\r\n  )\r\n}\r\n\r\nconst LoginContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  background-color: #d6e4ff;\r\n`\r\nexport default LoginPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unauthorized.js",["678","679"],"import useAuthentication from \"Components/Features/Authentication/hook\"\r\nimport React, { createContext, useState, useEffect } from \"react\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nimport { getAuth, onAuthStateChanged } from \"Services/firebase\"\r\n\r\nexport const UnauthorizedContext = createContext({})\r\nfunction Unauthorized({ children }) {\r\n  const [user, setUser] = useState({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [loaded, setLoaded] = useState(false)\r\n  const [isAuthenticated, setIsAuthenticated] = useState(true)\r\n  const [error, setError] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    const auth = getAuth()\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        // User is signed in, see docs for a list of available properties\r\n        // https://firebase.google.com/docs/reference/js/firebase.User\r\n        const uid = user.uid\r\n        if (uid) {\r\n          loadUser(user?.email)\r\n        }\r\n        // ...\r\n      } else {\r\n        // User is signed out\r\n        // ...\r\n        setIsAuthenticated(false)\r\n        setIsLoading(false)\r\n        setLoaded(true)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const loadUser = async (email) => {\r\n    try {\r\n      const user = await UsersClass.getDataById(email)\r\n      if (user) {\r\n        setUser(user)\r\n      }\r\n    } catch (e) {\r\n      setError(\"Oops something went wrong. Please try again\")\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (user?._id) {\r\n      setIsAuthenticated(true)\r\n      setLoaded(true)\r\n      setIsLoading(false)\r\n    }\r\n  }, [user])\r\n\r\n  return (\r\n    <UnauthorizedContext.Provider\r\n      value={{\r\n        setError,\r\n        setIsLoading,\r\n        isAuthenticated,\r\n        user,\r\n        setUser,\r\n        isLoading,\r\n        setIsLoading,\r\n        error,\r\n        setLoaded,\r\n        loaded,\r\n      }}\r\n    >\r\n      {children}\r\n    </UnauthorizedContext.Provider>\r\n  )\r\n}\r\n\r\nexport default Unauthorized\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Predefined.js",["680","681","682","683","684"],"import { useSelectMenus } from \"Components/Features/Sidenav/hook\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport React, { useContext, useEffect } from \"react\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport Pages from \"./Pages\"\r\nimport RouteWithSubRoutes from \"./RouteWithSubRoutes\"\r\n\r\nfunction Predefined({}) {\r\n  const { menus } = useSelectMenus()\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <MainPage />\r\n      </Route>\r\n      {menus.map((menu) => {\r\n        return (\r\n          // <RouteWithSubRoutes key={menu.dataKey} {...menu} />\r\n          <Route key={menu.key} exact path={`${menu.path}`}>\r\n            {Pages[menu.dataKey]}\r\n          </Route>\r\n        )\r\n      })}\r\n\r\n      {menus.map(({ subMenu = [] }) => {\r\n        return subMenu.map((sub) => {\r\n          return (\r\n            <Route key={sub.key} path={`${sub.path}`}>\r\n              {Pages[sub.dataKey]}\r\n            </Route>\r\n          )\r\n        })\r\n      })}\r\n      {menus.length > 0 && (\r\n        <Route path=\"*\">\r\n          <URLNotFound />\r\n        </Route>\r\n      )}\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Predefined\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\URLNotFound.js",["685"],"import { Result } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nfunction URLNotFound() {\r\n  const history = useHistory()\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        width: \"100%\",\r\n        height: \"80vh\",\r\n        backgroundColor: \"transparent\",\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      <Result\r\n        status=\"404\"\r\n        title=\"404\"\r\n        subTitle=\"Sorry, the page you visited does not exist.\"\r\n        subTitle=\"Sorry, the page you visited does not exist.\"\r\n        extra={\r\n          <MainButton label=\"Back Home\" onClick={() => history.push(\"/\")} />\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default URLNotFound\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unavailable.js",["686","687"],"import React, { createContext, useEffect, useState } from \"react\"\r\nimport { Spin, Result } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { useLocation, useHistory } from \"react-router\"\r\n\r\nexport const UnavailableContext = createContext({})\r\nfunction Unavailable({ children }) {\r\n  const location = useLocation()\r\n  const history = useHistory()\r\n  const [error, setError] = useState(\"\")\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [loaded, setLoaded] = useState(true)\r\n\r\n  // cleared the error if the routes changes to render the component requested\r\n  useEffect(() => {\r\n    if (error) {\r\n      setError(\"\")\r\n      setLoaded(true)\r\n    }\r\n  }, [location.pathname])\r\n\r\n  const reloadPage = () => {\r\n    history.push(\"/\")\r\n  }\r\n  return (\r\n    <UnavailableContext.Provider value={{ setError, setIsLoading, setLoaded }}>\r\n      <div\r\n        style={\r\n          isLoading || error\r\n            ? {\r\n                height: \"85vh\",\r\n                overflow: \"hidden\",\r\n              }\r\n            : {}\r\n        }\r\n      >\r\n        {isLoading && (\r\n          <Container>\r\n            <Spin size=\"large\" />\r\n          </Container>\r\n        )}\r\n\r\n        {error && isLoading === false && (\r\n          <Container>\r\n            <Result\r\n              status=\"500\"\r\n              title=\"500\"\r\n              subTitle={error}\r\n              extra={<MainButton label=\"Back Home\" onClick={reloadPage} />}\r\n            />\r\n          </Container>\r\n        )}\r\n\r\n        {children}\r\n      </div>\r\n    </UnavailableContext.Provider>\r\n  )\r\n}\r\n\r\nconst Container = ({ children }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Unavailable\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\UsersClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\hook.js",["688","689"],"import { useContext, useEffect, useState } from \"react\"\r\nimport validateAuth from \"Validations/validateAuth\"\r\nimport { message } from \"antd\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nexport default function useAuthentication() {\r\n  const { user, setUser } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const [data, setData] = useState({})\r\n  const [response, setResponse] = useState({})\r\n  const [branches, setBranches] = useState([])\r\n  const [enableChangePass, setEnabledChangePass] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!response?.valid) {\r\n      for (const key in response.errors) {\r\n        message.error(`${AuthClass.LABELS[key]}: ${response.errors[key]}`)\r\n      }\r\n    }\r\n  }, [response])\r\n\r\n  useEffect(() => {\r\n    loadUser(data[AuthClass.USERNAME])\r\n    setData({ ...data, [AuthClass.BRANCH]: \"\" })\r\n  }, [data[AuthClass.USERNAME]])\r\n\r\n  const loadUser = async (email) => {\r\n    try {\r\n      const user = await UsersClass.getDataById(email)\r\n      if (user) {\r\n        setBranches(user.branches)\r\n      }\r\n    } catch (e) {\r\n      message.error(\"Connection not available\")\r\n      console.log(\"Authentication hook\", e?.message)\r\n    }\r\n  }\r\n\r\n  const handleChange = (value, fieldName) => {\r\n    setData({ ...data, [fieldName]: value })\r\n  }\r\n  const handleCancel = () => {\r\n    const _data = { ...data }\r\n    delete _data[AuthClass.RETYPE_PASSWORD]\r\n    setData({ ..._data, [AuthClass.PASSWORD]: \"\" })\r\n\r\n    setEnabledChangePass(false)\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    const validatedData = validateAuth(data)\r\n    setResponse(validatedData)\r\n    if (validatedData.valid) {\r\n      message.loading({ content: \"Loading...\", key: \"updatable\", duration: 10 })\r\n      try {\r\n        const result = await AuthClass.login(\r\n          data[AuthClass.USERNAME],\r\n          data[AuthClass.PASSWORD],\r\n          data[AuthClass.BRANCH],\r\n          history\r\n        )\r\n        if (result) {\r\n          setUser({ ...user, [AuthClass.BRANCH]: data[AuthClass.BRANCH] })\r\n          message.success({\r\n            content: \"Logged In\",\r\n            key: \"updatable\",\r\n            duration: 2,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        if (error === \"auth/user-not-found\") {\r\n          const result = await AuthClass.checkEmailIfExist(\r\n            data[AuthClass.USERNAME],\r\n            data[AuthClass.PASSWORD]\r\n          )\r\n          if (result === \"Email Exist\") {\r\n            setEnabledChangePass(true)\r\n            setData({ ...data, [AuthClass.PASSWORD]: \"\" })\r\n            message.destroy(\"updatable\")\r\n            message.info(\"Please change your password to proceed\")\r\n          } else {\r\n            message.destroy(\"updatable\")\r\n            message.error(result)\r\n          }\r\n        } else {\r\n          message.destroy(\"updatable\")\r\n          message.error(error)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const onSignup = async () => {\r\n    const _newData = { ...data }\r\n    if (data[AuthClass.PASSWORD] !== data[AuthClass.RETYPE_PASSWORD]) {\r\n      message.error(\"Password mismatch\")\r\n      return\r\n    }\r\n    delete _newData[AuthClass.RETYPE_PASSWORD]\r\n    const validatedData = validateAuth(_newData)\r\n    setResponse(validatedData)\r\n    if (validatedData.valid) {\r\n      message.loading({ content: \"Loading...\", key: \"updatable\", duration: 10 })\r\n      try {\r\n        const result = await AuthClass.createLogin(\r\n          _newData[AuthClass.USERNAME],\r\n          _newData[AuthClass.PASSWORD],\r\n          _newData[AuthClass.BRANCH],\r\n          history\r\n        )\r\n        if (result) {\r\n          message.success({\r\n            content: \"Logged In\",\r\n            key: \"updatable\",\r\n            duration: 2,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        message.destroy(\"updatable\")\r\n        message.error(error)\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    data,\r\n    branches,\r\n    handleChange,\r\n    onSubmit,\r\n    onSignup,\r\n    enableChangePass,\r\n    handleCancel,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Pages.js",["690","691","692","693"],"import {\r\n  BRANCH_MASTERFILE,\r\n  CUSTOMER_REPORTS,\r\n  DAILY_REPORTS,\r\n  DASHBOARD,\r\n  DROPDOWN_MASTERFILE,\r\n  GRILL_RESERVATION,\r\n  INCIDENT_REPORTS,\r\n  INVENTORY,\r\n  MASTER_DATA,\r\n  PAYMENT_TRANSACTION,\r\n  PRODUCTS_MASTERFILE,\r\n  REPORTS,\r\n  ROLES_MASTERFILE,\r\n  USER_MASTERFILE,\r\n} from \"Constants/pathNames\"\r\nimport {\r\n  DashboardOutlined,\r\n  SettingOutlined,\r\n  FolderOutlined,\r\n} from \"@ant-design/icons\"\r\nimport React from \"react\"\r\nimport DashboardGrillingPage from \"Pages/DashboardGrillingPage\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport DashboardStoreInventory from \"Pages/DashboardStoreInventory\"\r\nimport SettingsUserMasterfilePage from \"Pages/SettingsUserMasterfilePage\"\r\nimport SettingsProductMasterfile from \"Components/Features/SettingsProductMasterfile\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport { useRouteMatch } from \"react-router\"\r\nimport SettingsRoleMasterfile from \"Components/Features/SettingsRoleMasterfile\"\r\nimport SettingsDropdownMasterfile from \"Components/Features/SettingsDropdownMasterfile\"\r\nimport SettingsBranchMasterfile from \"Components/Features/SettingsBranchMasterfile\"\r\nimport AnalyticsIncidents from \"Components/Features/AnalyticsIncidents\"\r\nimport AnalyticsCustomer from \"Components/Features/AnalyticsCustomer\"\r\nimport AnalyticsDailyReport from \"Components/Features/AnalyticsDailyReport\"\r\n\r\nconst iconSize = {\r\n  fontSize: \"15rem\",\r\n  color: \"#888\",\r\n}\r\nexport default {\r\n  [DASHBOARD]: (\r\n    <MainPage>\r\n      <DashboardOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [REPORTS]: (\r\n    <MainPage>\r\n      <FolderOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [MASTER_DATA]: (\r\n    <MainPage>\r\n      <SettingOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [GRILL_RESERVATION]: <DashboardGrillingPage />,\r\n  [PAYMENT_TRANSACTION]: <DashboardTransactionPage />,\r\n  [INVENTORY]: <DashboardStoreInventory />,\r\n  [USER_MASTERFILE]: <SettingsUserMasterfilePage />,\r\n  [PRODUCTS_MASTERFILE]: <SettingsProductMasterfile />,\r\n  [ROLES_MASTERFILE]: <SettingsRoleMasterfile />,\r\n  [DROPDOWN_MASTERFILE]: <SettingsDropdownMasterfile />,\r\n  [BRANCH_MASTERFILE]: <SettingsBranchMasterfile />,\r\n  [INCIDENT_REPORTS]: <AnalyticsIncidents />,\r\n  [CUSTOMER_REPORTS]: <AnalyticsCustomer />,\r\n  [DAILY_REPORTS]: <AnalyticsDailyReport />,\r\n}\r\n\r\n// const Pages = (props) => {\r\n//   const { path, url } = useRouteMatch()\r\n//   return (\r\n//     <div>\r\n//       <Switch>\r\n//         <Route path={path}>\r\n//           <DashboardTransactionPage {...props} />\r\n//         </Route>\r\n//         <Route exact path={`${path}/tobehonest`}>\r\n//           <div>Hello world</div>\r\n//         </Route>\r\n//       </Switch>\r\n//     </div>\r\n//   )\r\n// }\r\n// export default Pagess\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\index.js",["694","695","696","697","698"],"import { UserOutlined, LockOutlined } from \"@ant-design/icons\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport styled from \"styled-components\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport useAuthentication from \"./hook\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport VitosLogo from \"Images/vitosLogo.png\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { Result, Space, Spin } from \"antd\"\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\n\r\nfunction Authentication() {\r\n  const {\r\n    data,\r\n    branches = [],\r\n    handleChange,\r\n    onSubmit,\r\n    onSignup,\r\n    enableChangePass,\r\n    handleCancel,\r\n  } = useAuthentication()\r\n  return enableChangePass ? (\r\n    <ConfigSpace>\r\n      <Logo>\r\n        <img src={VitosLogo} style={{ width: \"100%\" }} />\r\n      </Logo>\r\n      <br />\r\n      <CustomTitle typographyType=\"text\" label=\"Setup New Password\" level={5} />\r\n      <br />\r\n      <Password\r\n        onChange={handleChange}\r\n        value={data[AuthClass.PASSWORD]}\r\n        placeholder=\"New Password\"\r\n      />\r\n      <br />\r\n      <RetypePassword\r\n        onChange={handleChange}\r\n        value={data[AuthClass.RETYPE_PASSWORD]}\r\n      />\r\n      <br />\r\n      <br />\r\n      <Space>\r\n        <Cancel onClick={handleCancel} />\r\n        <LoginButton onClick={onSignup} />\r\n      </Space>\r\n    </ConfigSpace>\r\n  ) : (\r\n    <ConfigSpace>\r\n      <Logo>\r\n        <img src={VitosLogo} style={{ width: \"100%\" }} />\r\n      </Logo>\r\n      <br />\r\n      <Username onChange={handleChange} value={data[AuthClass.USERNAME]} />\r\n      <br />\r\n      <Password onChange={handleChange} value={data[AuthClass.PASSWORD]} />\r\n      <br />\r\n      <SelectBranch onChange={handleChange} options={branches} data={data} />\r\n      <br />\r\n      <LoginButton onClick={onSubmit} />\r\n    </ConfigSpace>\r\n  )\r\n}\r\n\r\n// Custom Components\r\nconst ConfigSpace = ({ children }) => {\r\n  const { sm, xs } = useBreakpoint()\r\n  const { isLoading, error } = useContext(UnauthorizedContext)\r\n\r\n  const reloadPage = () => {\r\n    window.location.reload(false)\r\n  }\r\n  if (xs) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          width: \"23rem\",\r\n          padding: \"2rem 2rem 2rem 2rem\",\r\n        }}\r\n      >\r\n        {isLoading && <Spin size=\"large\" />}\r\n        {error && (\r\n          <Result\r\n            status=\"500\"\r\n            title=\"500\"\r\n            subTitle={error}\r\n            extra={<MainButton label=\"Reload page\" onClick={reloadPage} />}\r\n          />\r\n        )}\r\n        {!isLoading && !error && children}\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"23rem\",\r\n        padding: \"2rem 2rem 2rem 2rem\",\r\n        // boxShadow: isLoading || error ? \"none\" : \"0px 1px 1rem #999\",\r\n        borderRadius: \".5rem\",\r\n        backgroundColor: isLoading || error ? \"transparent\" : \"white\",\r\n      }}\r\n    >\r\n      {isLoading && <Spin size=\"large\" />}\r\n      {error && (\r\n        <Result\r\n          status=\"500\"\r\n          title=\"500\"\r\n          subTitle={error}\r\n          extra={<MainButton label=\"Reload page\" onClick={reloadPage} />}\r\n        />\r\n      )}\r\n      {!isLoading && !error && children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Username = (props) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<UserOutlined />}\r\n      size=\"large\"\r\n      placeholder={AuthClass.LABELS[AuthClass.USERNAME]}\r\n      value={props.value}\r\n      onChange={(e) => props.onChange(e.target.value, AuthClass.USERNAME)}\r\n    />\r\n  )\r\n}\r\n\r\nconst Password = ({\r\n  placeholder = AuthClass.LABELS[AuthClass.PASSWORD],\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<LockOutlined />}\r\n      size=\"large\"\r\n      placeholder={placeholder}\r\n      type=\"password\"\r\n      value={rest.value}\r\n      onChange={(e) => rest.onChange(e.target.value, AuthClass.PASSWORD)}\r\n    />\r\n  )\r\n}\r\n\r\nconst RetypePassword = (props) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<LockOutlined />}\r\n      size=\"large\"\r\n      placeholder={AuthClass.LABELS[AuthClass.RETYPE_PASSWORD]}\r\n      type=\"password\"\r\n      value={props.value}\r\n      onChange={(e) =>\r\n        props.onChange(e.target.value, AuthClass.RETYPE_PASSWORD)\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nconst SelectBranch = (props) => {\r\n  return (\r\n    <AutoSelect\r\n      placeholder=\"Select branch\"\r\n      options={[...props.options]}\r\n      value={props.data[AuthClass.BRANCH]}\r\n      onChange={(value) => props.onChange(value, AuthClass.BRANCH)}\r\n      size=\"large\"\r\n      width={\"100%\"}\r\n    />\r\n  )\r\n}\r\n\r\nconst Cancel = (props) => {\r\n  return <MainButton label=\"Cancel\" size=\"large\" danger {...props} />\r\n}\r\n\r\nconst LoginButton = (props) => {\r\n  return <MainButton label=\"Login\" size=\"large\" {...props} />\r\n}\r\n\r\n// additional styles\r\n\r\nconst Logo = styled.div`\r\n  background-color: #333;\r\n  border-radius: 50%;\r\n  height: 10rem;\r\n  width: 10rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\nexport default Authentication\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\index.js",["699"],"import React, { useEffect } from \"react\"\r\nimport { Menu } from \"antd\"\r\nimport { useSelectMenus } from \"./hook\"\r\nimport { useHistory } from \"react-router\"\r\nconst { SubMenu } = Menu\r\n\r\nfunction Sidenav() {\r\n  const history = useHistory()\r\n  const { menus, selectedKeys } = useSelectMenus()\r\n\r\n  return (\r\n    <Menu\r\n      mode=\"inline\"\r\n      theme=\"dark\"\r\n      style={{ display: \"flex\", flexDirection: \"column\" }}\r\n      selectedKeys={selectedKeys}\r\n    >\r\n      {menus.map((menu) => {\r\n        const subMenu = [...menu.subMenu]\r\n        return (\r\n          <SubMenu\r\n            key={menu.key}\r\n            icon={menu.Icon}\r\n            title={menu.title}\r\n            style={{ display: menu.display ? \"block\" : \"none\" }}\r\n            onTitleClick={() => history.push(menu.path)}\r\n          >\r\n            {subMenu.map((sub) => {\r\n              return (\r\n                <Menu.Item\r\n                  key={sub.key}\r\n                  onClick={() => {\r\n                    history.push(sub.path)\r\n                  }}\r\n                  style={{ display: menu.display ? \"block\" : \"none\" }}\r\n                >\r\n                  {sub.title}\r\n                </Menu.Item>\r\n              )\r\n            })}\r\n          </SubMenu>\r\n        )\r\n      })}\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default Sidenav\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\MainPage.js",["700"],"import React, { useEffect } from \"react\"\r\nimport CookedChef from \"Images/cookedChef.jpg\"\r\nimport { Avatar, Space, Typography } from \"antd\"\r\nconst { Title } = Typography\r\n\r\nfunction MainPage({ children = <Welcome /> }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        position: \"relative\",\r\n        height: \"80vh\",\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"transparent\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Welcome = () => {\r\n  return (\r\n    <Space direction=\"vertical\" align=\"center\">\r\n      <Avatar\r\n        src={CookedChef}\r\n        shape=\"circle\"\r\n        style={{ width: \"15rem\", height: \"15rem\" }}\r\n      />\r\n      <Title level={3}>Welcome to Vito's BBQ</Title>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default MainPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\hook.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Base.js",["701"],"import { UNAVAILABLE } from \"Constants/errorCodes\"\r\nimport db, {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAt,\r\n  endAt,\r\n} from \"./firebase\"\r\nexport default class Base {\r\n  static async getData(collectionName) {\r\n    const q = query(collection(db, collectionName))\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataBySort(collectionName, orderedBy) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    console.log(\"responsedata\", data)\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    console.log(\"responsedata\", data)\r\n    return data\r\n  }\r\n\r\n  static async getDataById(collectionName, id) {\r\n    if (!id) {\r\n      return []\r\n    }\r\n    try {\r\n      const docRef = doc(db, collectionName, id)\r\n      const docSnap = await getDoc(docRef)\r\n      if (docSnap.exists()) {\r\n        console.log(\"docSnap\", docSnap.data())\r\n        return docSnap.data()\r\n      } else {\r\n        return {}\r\n      }\r\n    } catch (error) {\r\n      throw new Error(error.code)\r\n    }\r\n  }\r\n\r\n  static async getDataByDate(collectionName, dates, fieldname, branch) {\r\n    const startTime = new Date(dates[0].setHours(0, 0, 0, 0))\r\n    const endTime = new Date(dates[1].setHours(23, 59, 59, 59))\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \">=\", startTime),\r\n      where(fieldname, \"<=\", endTime),\r\n      where(\"branch\", \"==\", branch),\r\n      orderBy(fieldname, \"asc\")\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  // only for filter panel of dashboard scheduler\r\n  static async getDataByDatePanel(collectionName, dates, fieldname, branch) {\r\n    const startTime = new Date(dates[0].setHours(0, 0, 0, 0))\r\n    const endTime = new Date(dates[1].setHours(23, 59, 59, 59))\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \">=\", startTime),\r\n      where(fieldname, \"<=\", endTime),\r\n      where(\"branch\", \"==\", branch),\r\n      orderBy(fieldname, \"asc\")\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataByFieldname(collectionName, fieldname, value) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \"==\", value)\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataByKeyword(collectionName, fieldname, value) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      orderBy(fieldname),\r\n      startAt(value),\r\n      endAt(fieldname + \"\\uf8ff\")\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataNotEqualToFieldname(\r\n    collectionName,\r\n    orderedBy,\r\n    fieldname,\r\n    value\r\n  ) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \"!=\", value),\r\n      orderBy(fieldname),\r\n      orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async addData(collectionName, data) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, collectionName), { ...data })\r\n      if (docRef?.id) {\r\n        return { ...data, _id: docRef.id }\r\n      }\r\n      return {}\r\n    } catch (error) {\r\n      throw new Error(error)\r\n    }\r\n  }\r\n\r\n  static async setData(collectionName, id, data) {\r\n    try {\r\n      return await setDoc(\r\n        doc(db, collectionName, id),\r\n        {\r\n          ...data,\r\n        },\r\n        { merge: true }\r\n      )\r\n    } catch (error) {\r\n      throw new Error(error.code)\r\n    }\r\n  }\r\n\r\n  static async updateDataById(collectionName, id, data) {\r\n    try {\r\n      const docRef = doc(db, collectionName, id)\r\n      updateDoc(docRef, {\r\n        ...data,\r\n      })\r\n    } catch (err) {\r\n      throw new Error(err.code)\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\hook.js",["702","703","704"],"import { useHistory, useLocation } from \"react-router\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { LABEL } from \"Constants/pathNames\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\n\r\n// Notes: The header label of this page is dependent in the constants/pathNames file (if it doesnt exist you must create a variable first)\r\n\r\nexport default function useContentNavigator() {\r\n  const location = useLocation()\r\n  const [breadcrumb, setBreadcrumb] = useState([])\r\n  const [header, setHeader] = useState(\"\")\r\n  const [breadcrumbCount, setBreadcrumbCount] = useState(0)\r\n  useEffect(() => {\r\n    const pathNames = handlePathNames(location.pathname)\r\n    setBreadcrumbCount(pathNames.length)\r\n    const _breadcrumb = []\r\n    if (pathNames.length === 0) {\r\n      setHeader(\"Home\")\r\n    }\r\n    for (const routeName of pathNames) {\r\n      let url = producedURL(routeName, pathNames)\r\n      const title = LABEL[routeName] ? LABEL[routeName] : routeName\r\n      _breadcrumb.push({\r\n        title,\r\n        url: url,\r\n      })\r\n      setHeader(title)\r\n    }\r\n    setBreadcrumb(_breadcrumb)\r\n  }, [location.pathname])\r\n\r\n  // this function will split tha location pathName url and produced an array of strings\r\n  const handlePathNames = (pathUrl) => {\r\n    const pathNameSplit = pathUrl.split(\"/\")\r\n    // to clear empty strings inside array\r\n    const pathNames = pathNameSplit.filter((e) => e)\r\n    return pathNames\r\n  }\r\n  return { header, breadcrumb, breadcrumbCount }\r\n}\r\n\r\n// this function will produced a path url for each breadcrumb click\r\nconst producedURL = (routeName, pathNames) => {\r\n  let url = \"\"\r\n  const pathNameIndex = pathNames.indexOf(routeName)\r\n  for (let index = 0; index <= pathNameIndex; index++) {\r\n    url += `/${pathNames[index]}`\r\n  }\r\n  return url\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\MainButton.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\SidenavMobile.js",["705","706"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport { Menu } from \"antd\"\r\nimport { useSelectMenus } from \"./hook\"\r\nimport { useHistory } from \"react-router\"\r\nimport CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport { MenuOutlined } from \"@ant-design/icons\"\r\nconst { SubMenu } = Menu\r\n\r\nfunction SidenavMobile() {\r\n  const history = useHistory()\r\n  const { menus, selectedKeys } = useSelectMenus()\r\n  const clickedRef = useRef()\r\n  return (\r\n    <CustomDrawer\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      title=\"VITO'S BBQ\"\r\n      Icon={<MenuOutlined />}\r\n      placement=\"left\"\r\n      bodyStyle={{ padding: 0 }}\r\n      clickedRef={clickedRef}\r\n    >\r\n      <Menu\r\n        mode=\"inline\"\r\n        theme=\"light\"\r\n        style={{ display: \"flex\", flexDirection: \"column\" }}\r\n        selectedKeys={selectedKeys}\r\n      >\r\n        {menus.map((menu) => {\r\n          const subMenu = [...menu.subMenu]\r\n          return (\r\n            <SubMenu\r\n              key={menu.key}\r\n              icon={menu.Icon}\r\n              title={menu.title}\r\n              style={{ display: menu.display ? \"block\" : \"none\" }}\r\n              onTitleClick={() => {\r\n                history.push(menu.path)\r\n              }}\r\n            >\r\n              {subMenu.map((sub) => {\r\n                return (\r\n                  <Menu.Item\r\n                    key={sub.key}\r\n                    onClick={() => {\r\n                      history.push(sub.path)\r\n                      clickedRef.current.click()\r\n                    }}\r\n                    style={{ display: menu.display ? \"block\" : \"none\" }}\r\n                  >\r\n                    {sub.title}\r\n                  </Menu.Item>\r\n                )\r\n              })}\r\n            </SubMenu>\r\n          )\r\n        })}\r\n      </Menu>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nexport default SidenavMobile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\AuthClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardGrillingPage.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardTransactionPage.js",["707","708","709","710","711","712","713","714","715","716","717","718","719","720","721"],"import DashboardTransaction from \"Components/Features/DashboardTransaction\"\r\nimport { Link, Route, Switch } from \"react-router-dom\"\r\nimport { useHistory, useRouteMatch, useParams } from \"react-router\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { Space, Tabs } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport OrderForm, {\r\n  StyledContainer,\r\n} from \"Components/Features/DashboardTransaction/OrderForm\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nconst { TabPane } = Tabs\r\n\r\nfunction DashboardTransactionPage() {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const [dataLoaded, setDataLoaded] = useState(null)\r\n  const [modifiedData, setModifiedData] = useState({})\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <DashboardTransaction\r\n        // exposeData={(data) => setDataLoaded(data)}\r\n        modifiedData={modifiedData}\r\n      />\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        <Route exact path={`${path}/add`}>\r\n          <OrderForm\r\n            back={() => history.push(path)}\r\n            formType=\"add\"\r\n            modifiedData={(data) => setModifiedData(data)}\r\n          />\r\n        </Route>\r\n        <Route exact path={`${path}/modified`}>\r\n          <OrderForm\r\n            back={() => history.push(path)}\r\n            formType=\"modified\"\r\n            modifiedData={(data) => setModifiedData(data)}\r\n          />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <StyledContainer>\r\n            <URLNotFound />\r\n          </StyledContainer>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DashboardTransactionPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardStoreInventory.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\pathNames.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\AutoSelect.js",["722"],"import { Select } from \"antd\"\r\nimport React, { useEffect } from \"react\"\r\nconst { Option } = Select\r\n\r\nconst AutoSelect = React.forwardRef((props, ref) => {\r\n  const {\r\n    placeholder = \"\",\r\n    onChange = () => {},\r\n    options = [],\r\n    size = \"default\",\r\n    width = 120,\r\n    value = \"\",\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <Select\r\n      ref={ref}\r\n      style={{ width: width }}\r\n      size={size}\r\n      showSearch\r\n      placeholder={placeholder}\r\n      optionFilterProp=\"children\"\r\n      onChange={onChange}\r\n      value={value}\r\n      {...rest}\r\n      // onFocus={onFocus}\r\n      // onBlur={onBlur}\r\n      // onSearch={onSearch}\r\n      filterOption={(input, option) =>\r\n        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      }\r\n    >\r\n      {options.map((option, index) => (\r\n        <Option value={option} key={index}>\r\n          {option}\r\n        </Option>\r\n      ))}\r\n    </Select>\r\n  )\r\n})\r\n\r\nexport default AutoSelect\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomInput.js",["723","724","725","726"],"import { Input } from \"antd\"\r\nimport React from \"react\"\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\"\r\n\r\nfunction CustomInput({\r\n  prefix = null,\r\n  placeholder = \"\",\r\n  size = \"default\",\r\n  type = \"text\",\r\n  onChange = () => {},\r\n  ...rest\r\n}) {\r\n  if (type !== \"password\") {\r\n    if (!prefix) {\r\n      return (\r\n        <Input\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          {...rest}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <Input\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          prefix={prefix}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          {...rest}\r\n        />\r\n      )\r\n    }\r\n  } else {\r\n    if (!prefix) {\r\n      return (\r\n        <Input.Password\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          iconRender={(visible) =>\r\n            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\r\n          }\r\n          {...rest}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <Input.Password\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          prefix={prefix}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          iconRender={(visible) =>\r\n            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\r\n          }\r\n          {...rest}\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default CustomInput\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTitle.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\index.js",["727"],"import CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport React, { useContext } from \"react\"\r\nimport { UserOutlined, LogoutOutlined } from \"@ant-design/icons\"\r\nimport { Input, message, Space, Tag, Typography } from \"antd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport { useHistory } from \"react-router\"\r\nimport useUserProfile from \"./hook\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\n\r\nfunction UserProfile() {\r\n  const history = useHistory()\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { enablePasswordChange, setEnablePasswordChange } = useUserProfile()\r\n  return (\r\n    <CustomDrawer\r\n      type=\"primary\"\r\n      shape=\"circle\"\r\n      Icon={<UserOutlined />}\r\n      Footer={\r\n        <Space style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n          <MainButton\r\n            label=\"Logout\"\r\n            Icon={<LogoutOutlined />}\r\n            danger={true}\r\n            onClick={async () => {\r\n              const result = await AuthClass.logout()\r\n              console.log(\"logout: \", result)\r\n              if (result) {\r\n                message.info(result)\r\n                history.push(\"/\")\r\n              }\r\n            }}\r\n          />\r\n        </Space>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\" size=\"middle\" style={{ width: \"100%\" }}>\r\n        <Tag color=\"processing\">My Info</Tag>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Name\r\n          </CustomTitle>\r\n          <span>{user.name}</span>\r\n        </Space>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Email\r\n          </CustomTitle>\r\n          <span>{user._id}</span>\r\n        </Space>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Branch\r\n          </CustomTitle>\r\n          <span style={{ color: \"red\", fontWeight: \"bold\" }}>\r\n            {user.branchSelected}\r\n          </span>\r\n        </Space>\r\n        <br />\r\n        <Tag color=\"processing\">Password Settings</Tag>\r\n        {!enablePasswordChange ? (\r\n          <MainButton\r\n            label=\"Change Password\"\r\n            type=\"default\"\r\n            onClick={() => setEnablePasswordChange(true)}\r\n          />\r\n        ) : (\r\n          <ChangePasswordForm\r\n            setEnablePasswordChange={setEnablePasswordChange}\r\n          />\r\n        )}\r\n      </Space>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nconst ChangePasswordForm = (props) => {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n        Current Password\r\n      </CustomTitle>\r\n      <CustomInput placeholder=\"Current Password\" type=\"password\" />\r\n      <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n        New Password\r\n      </CustomTitle>\r\n      <CustomInput placeholder=\"New Password\" type=\"password\" />\r\n      <Input placeholder=\"Re-type Password\" type=\"password\" />\r\n      <Space style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n        <MainButton\r\n          label=\"Cancel\"\r\n          danger\r\n          onClick={() => props.setEnablePasswordChange(false)}\r\n        />\r\n        <MainButton label=\"Save\" />\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default UserProfile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\RolesClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Validations\\validateAuth\\index.js",["728"],"import {\r\n  basicValidation,\r\n  validateEmail,\r\n  validateMaxChar,\r\n} from \"Helpers/validations\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\n\r\nexport default (data) => {\r\n  let validationResponse = { valid: true, errors: {} }\r\n  const optionals = [] // list of optional properties\r\n  const basicData = basicValidation(AuthClass, data, optionals)\r\n  const validateUsername = validateEmail(AuthClass.USERNAME, data)\r\n  const validatePassword = validateMaxChar(AuthClass.PASSWORD, data, 6)\r\n  if (!basicData.valid) {\r\n    return { ...validationResponse, ...basicData }\r\n  }\r\n\r\n  if (!validateUsername.valid) {\r\n    validationResponse = { ...validationResponse, ...validateUsername }\r\n  }\r\n\r\n  if (!validatePassword.valid) {\r\n    validationResponse = { ...validationResponse, ...validatePassword }\r\n  }\r\n  return validationResponse\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\errorCodes.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\hook.js",["729"],"import { useEffect, useState } from \"react\"\r\n\r\nexport default function useUserProfile() {\r\n  const [enablePasswordChange, setEnablePasswordChange] = useState(false)\r\n\r\n  return { enablePasswordChange, setEnablePasswordChange }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDrawer.js",["730","731"],"import { Button, Drawer, Space } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\nfunction CustomDrawer({\r\n  title = \"User Profile\",\r\n  children,\r\n  shape = \"round\",\r\n  type = \"default\",\r\n  Icon = <></>,\r\n  buttonLabel = \"\",\r\n  size = \"large\",\r\n  width = \"375px\",\r\n  Footer = <></>,\r\n  placement = \"right\",\r\n  bodyStyle = {},\r\n  clickedRef,\r\n}) {\r\n  const [visible, setVisible] = useState(false)\r\n  const onClose = () => {\r\n    setVisible(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={clickedRef}\r\n        type={type}\r\n        shape={shape}\r\n        icon={Icon}\r\n        size={size}\r\n        onClick={() => {\r\n          setVisible(!visible)\r\n        }}\r\n      >\r\n        {buttonLabel}\r\n      </Button>\r\n      <Drawer\r\n        title={title}\r\n        placement={placement}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={width}\r\n        footer={Footer}\r\n        bodyStyle={bodyStyle}\r\n      >\r\n        {children}\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomDrawer\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\validations\\index.js",["732","733"],"// check if the properties of the data object is in the array of strings otherwise false if not\r\nexport const arrayContainsKey = (\r\n  array = [], //array of strings\r\n  data = {}\r\n) => {\r\n  const errors = {}\r\n  for (const key in data) {\r\n    if (!array.includes(key)) {\r\n      errors[key] = \"Invalid key\"\r\n    }\r\n  }\r\n  return errors\r\n}\r\n\r\n// check if the object properties contains a value otherwise false if null\r\nexport const objectContainsNull = (data = {}) => {\r\n  const errors = {}\r\n  for (const key in data) {\r\n    if (data[key].trim() === \"\") {\r\n      errors[key] = \"This is required\"\r\n    }\r\n  }\r\n  return errors\r\n}\r\n\r\n// remove key from the data object. If it is optional key and contains null it will be included\r\nexport const validateOptionals = (\r\n  optionalKeys = [], //array of strings\r\n  data = {}\r\n) => {\r\n  const newData = { ...data }\r\n  for (const key in data) {\r\n    if (optionalKeys.includes(key)) {\r\n      if (data[key].trim() === \"\") {\r\n        delete newData[key]\r\n      }\r\n    }\r\n  }\r\n  return newData\r\n}\r\n\r\n// add key if it is not stated in an object and is required\r\nexport const validateRequired = (\r\n  array = [], //array of strings (required keys)\r\n  data = {}\r\n) => {\r\n  const newData = { ...data }\r\n  for (const key of array) {\r\n    if (typeof newData[key] === \"undefined\") {\r\n      newData[key] = \"\"\r\n    }\r\n  }\r\n  return newData\r\n}\r\n\r\nexport const validateMaxChar = (fieldName, data, max = 10) => {\r\n  if (typeof data[fieldName] !== \"undefined\") {\r\n    if (data[fieldName].length < max) {\r\n      return {\r\n        valid: false,\r\n        errors: { [fieldName]: `Must be at least ${max} characters required` },\r\n      }\r\n    }\r\n  }\r\n  return { valid: true }\r\n}\r\n\r\nexport const validateEmail = (fieldName, data) => {\r\n  const res =\r\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n  if (typeof data[fieldName] !== \"undefined\") {\r\n    const validate = res.test(String(data[fieldName]).toLowerCase())\r\n    if (!validate) {\r\n      return {\r\n        valid: false,\r\n        errors: { [fieldName]: `Invalid Email` },\r\n      }\r\n    }\r\n  }\r\n  return { valid: true }\r\n}\r\n\r\n// check if properties are valid, remove optional fields with null values and check if data contains null\r\nexport const basicValidation = (ServiceClass, data, optionals = []) => {\r\n  const ifArrayContainsKey = arrayContainsKey(ServiceClass.PROPERTIES, data)\r\n  const validatedRequired = validateRequired(ServiceClass.PROPERTIES, data)\r\n  const validatedOptionals = validateOptionals(optionals, validatedRequired)\r\n  const isNull = objectContainsNull(validatedOptionals)\r\n\r\n  if (Object.keys(ifArrayContainsKey).length > 0) {\r\n    return { valid: false, errors: ifArrayContainsKey }\r\n  }\r\n\r\n  if (Object.keys(isNull).length > 0) {\r\n    return { valid: false, errors: isNull }\r\n  }\r\n\r\n  return { valid: true }\r\n}\r\n\r\nexport default validateOptionals\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\index.js",["734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750"],"import { Space } from \"antd\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport {\r\n  ReloadOutlined,\r\n  FileExcelOutlined,\r\n  PrinterOutlined,\r\n} from \"@ant-design/icons\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport styled from \"styled-components\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport useTableHandler from \"./hook\"\r\nimport classes from \"./table.module.css\"\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useLocation,\r\n  useRouteMatch,\r\n} from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport FormHandler from \"../FormHandler\"\r\nimport FormHandlerAdd from \"../FormHandler/FormHandlerAdd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport FilterOptions from \"../FilterOptions\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport CustomRangePicker from \"Components/Commons/RangePicker\"\r\nimport useRangeHandler from \"Hooks/useRangeHandler\"\r\nimport useGetDocumentsByKeyword from \"Hooks/useGetDocumentsByKeyword\"\r\nimport DropdownChannel from \"./DropdownChannel\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport ExportService from \"Services/ExportService\"\r\nimport schedulerExcel, {\r\n  calculateTotalRevChannel,\r\n} from \"Helpers/schedulerExcel\"\r\nimport {\r\n  displayOrderVia,\r\n  displayPaymentProp,\r\n  displaySalesType,\r\n} from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport TransactionGroupPayment from \"../TransactionGroupPayments\"\r\nimport { produceSalesSummary } from \"./produceSalesSummary\"\r\nconst produceAmount = (value) => {\r\n  return thousandsSeparators(Number(value).toFixed(2))\r\n}\r\n\r\nfunction TableHandler(props) {\r\n  const {\r\n    ServiceClass,\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableAdd,\r\n    defaultAddForm, // this is true or false\r\n    enableFilter,\r\n    enableRowSelect,\r\n    isLoading,\r\n    setIsLoading,\r\n    rowSelection,\r\n    enableEdit,\r\n    handleModified,\r\n    paginateRequest,\r\n  } = useTableHandler(props)\r\n\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const [isFiltered, setIsFiltered] = useState(false)\r\n  const [filteredData, setFilteredData] = useState([])\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      {data.length > 0 && isLoading === false && (\r\n        <div\r\n          style={\r\n            location.pathname === path\r\n              ? { visibility: \"visible\" }\r\n              : { visibility: \"hidden\" }\r\n          }\r\n        >\r\n          <ActionButtons\r\n            enableFilter={enableFilter}\r\n            enableAdd={enableAdd}\r\n            ServiceClass={ServiceClass}\r\n            setIsLoading={setIsLoading}\r\n            isFiltered={isFiltered}\r\n            setIsFiltered={setIsFiltered}\r\n            loadData={loadData}\r\n            hideColumns={hideColumns}\r\n            setFilteredData={setFilteredData}\r\n            data={data}\r\n            filteredData={filteredData}\r\n            productData={props?.productData}\r\n          />\r\n          <CustomTable\r\n            isFiltered={isFiltered}\r\n            columns={[...columns]}\r\n            dataSource={isFiltered ? [...filteredData] : [...data]}\r\n            size=\"small\"\r\n            scroll={{ x: \"calc(375px + 50%)\", y: \"90vh\" }}\r\n            rowClassName={(data) => {\r\n              if (data?.status === \"CANCELLED\") {\r\n                return classes[`DEFAULT-${data?.status}`]\r\n              }\r\n              return classes[\"DEFAULT\"]\r\n            }}\r\n            onRow={(record) => {\r\n              return enableRowSelect\r\n                ? {\r\n                    onClick: () => {\r\n                      rowSelection(record) // this is for row clicked used by Dashboard Transactions\r\n                    },\r\n                  }\r\n                : {}\r\n            }}\r\n            pagination={{ pageSize: 15, showSizeChanger: false }}\r\n            loadData={paginateRequest ? loadData : () => {}}\r\n            paginateRequest={paginateRequest}\r\n          />\r\n        </div>\r\n      )}\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        {enableAdd && defaultAddForm && (\r\n          <Route exact path={`${path}/add`}>\r\n            <FormHandlerAdd\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {enableEdit && defaultAddForm && (\r\n          <Route exact path={`${path}/modified`}>\r\n            <FormHandler\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              formSave={(data) => {\r\n                handleModified(data)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {defaultAddForm && (\r\n          <Route path=\"*\">\r\n            <StyledURLNotFound>\r\n              <URLNotFound />\r\n            </StyledURLNotFound>\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableHandler\r\n\r\nconst ActionButtons = (props) => {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const {\r\n    enableFilter,\r\n    enableAdd,\r\n    ServiceClass,\r\n    loadData,\r\n    setIsLoading,\r\n    setIsFiltered,\r\n    isFiltered,\r\n    hideColumns,\r\n    setFilteredData,\r\n    filteredData,\r\n    data,\r\n    productData,\r\n  } = props\r\n  const types = ServiceClass.TYPES\r\n  const [rangeData = [], loadRangeData, clearRangeData] =\r\n    useRangeHandler(ServiceClass)\r\n  const [documentData, loadDocumentData, clearDocumentData] =\r\n    useGetDocumentsByKeyword(ServiceClass)\r\n  const [selectedFilter, setSelectedFilter] = useState(\"\")\r\n\r\n  const [filterValue, setFilterValue] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    setFilteredData(rangeData)\r\n  }, [rangeData])\r\n\r\n  useEffect(() => {\r\n    setFilteredData(documentData)\r\n  }, [documentData])\r\n  useEffect(() => {\r\n    clearRangeData()\r\n    clearDocumentData()\r\n  }, [selectedFilter])\r\n\r\n  useEffect(() => {\r\n    if (selectedFilter !== \"NONE\" && filterValue !== \"\") {\r\n      loadDocumentData(selectedFilter, filterValue)\r\n    }\r\n  }, [filterValue, selectedFilter])\r\n\r\n  const handleExportExcel = async (_schedules, branch) => {\r\n    const defaultSheet = await schedulerExcel(\r\n      _schedules,\r\n      productData,\r\n      \"\",\r\n      branch\r\n    )\r\n    const [cashSheet, cashTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => {\r\n        const source = displayPaymentProp(\r\n          obj[SchedulersClass.SOURCE],\r\n          obj,\r\n          SchedulersClass.SOURCE\r\n        )\r\n        return source === \"Cash\"\r\n      }),\r\n      productData,\r\n      \"CASH\",\r\n      branch\r\n    )\r\n\r\n    const [rSheet, rTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"R\"),\r\n      productData,\r\n      \"R\",\r\n      branch\r\n    )\r\n\r\n    const [spwdSheet, spwdTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"SPWD\"),\r\n      productData,\r\n      \"SPWD\",\r\n      branch\r\n    )\r\n\r\n    const [ddSheet, ddTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"D/O\"),\r\n      productData,\r\n      \"DO\",\r\n      branch\r\n    )\r\n    const [wbSheet, wbTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => obj[SchedulersClass.ORDER_VIA_WEBSITE]),\r\n      productData,\r\n      \"WB\",\r\n      branch\r\n    )\r\n    const [ppSheet, ppTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"PP\"),\r\n      productData,\r\n      \"PP\",\r\n      branch\r\n    )\r\n\r\n    const [orderVia, orderViaTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => obj[SchedulersClass.ORDER_VIA]),\r\n      productData,\r\n      \"DIRECT\",\r\n      branch\r\n    )\r\n\r\n    const [ppGF, ppGFTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"GBF\"),\r\n      productData,\r\n      \"PP GBF\",\r\n      branch\r\n    )\r\n    const [ppMMF, ppMMFTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"MMF\"),\r\n      productData,\r\n      \"PP MMF\",\r\n      branch\r\n    )\r\n\r\n    const [ppDN, ppDNTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"DN\"),\r\n      productData,\r\n      \"PP DN\",\r\n      branch\r\n    )\r\n\r\n    const [ppFP, ppFPTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"FP\"),\r\n      productData,\r\n      \"PP FP\",\r\n      branch\r\n    )\r\n    const [ppZAP, ppZAPTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"ZAP\"),\r\n      productData,\r\n      \"PP ZAP\",\r\n      branch\r\n    )\r\n\r\n    const [orderViaWB, orderViaWBTotal] = await schedulerExcel(\r\n      _schedules.filter(\r\n        (obj) =>\r\n          obj[SchedulersClass.ORDER_VIA_WEBSITE] === \"[ ZAP ] ZAP\" ||\r\n          obj[SchedulersClass.ORDER_VIA_PARTNER] === \"[ ZAP ] ZAP\"\r\n      ),\r\n      productData,\r\n      \"WB ZAP\",\r\n      branch\r\n    )\r\n\r\n    const sumRCSheet = {}\r\n    for (const obj of _schedules) {\r\n      const formatDateFromD = formatDateFromDatabase(\r\n        obj[SchedulersClass.DATE_START]\r\n      )\r\n      const dateSheet = formatDateDash(formatDateFromD).substring(0, 5)\r\n      const sheetName = `${dateSheet} RC SUM`\r\n      if (typeof sumRCSheet[sheetName] === \"undefined\") {\r\n        sumRCSheet[sheetName] = [\r\n          [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n          [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n          [formatDateLong(formatDateFromD)],\r\n          [],\r\n          [\"REVENUE CHANNEL REPORT\"],\r\n          [\"CODE\", \"R/C\", \"TOTAL\", \"COLLECTIBLES\", \"AMOUNT PAID\"],\r\n        ]\r\n      }\r\n\r\n      const dSummary = orderViaTotal.find((row) => row.date === dateSheet)\r\n      const ppGFSummary = ppGFTotal.find((row) => row.date === dateSheet)\r\n      const ppMMFSummary = ppMMFTotal.find((row) => row.date === dateSheet)\r\n      const ppDNSummary = ppDNTotal.find((row) => row.date === dateSheet)\r\n      const ppFPSummary = ppFPTotal.find((row) => row.date === dateSheet)\r\n      const ppZAPSummary = ppZAPTotal.find((row) => row.date === dateSheet)\r\n      const wbSummary = orderViaWBTotal.find((row) => row.date === dateSheet)\r\n      if (sumRCSheet[sheetName].length === 6) {\r\n        if (dSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"DR\",\r\n            dSummary?.code,\r\n            produceAmount(dSummary?.totalDue),\r\n            produceAmount(dSummary?.collectibles),\r\n            produceAmount(dSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\"DR\", \"DIRECT\", \"0.00\", \"0.00\", \"0.00\"])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 7) {\r\n        if (ppGFSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP GBF\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppGFSummary?.totalDue),\r\n            produceAmount(ppGFSummary?.collectibles),\r\n            produceAmount(ppGFSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP GF\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 8) {\r\n        if (ppMMFSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP MMF\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppMMFSummary?.totalDue),\r\n            produceAmount(ppMMFSummary?.collectibles),\r\n            produceAmount(ppMMFSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP MMF\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 9) {\r\n        if (ppDNSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP DN\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppDNSummary?.totalDue),\r\n            produceAmount(ppDNSummary?.collectibles),\r\n            produceAmount(ppDNSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP DN\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 10) {\r\n        if (ppFPSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP FP\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppFPSummary?.totalDue),\r\n            produceAmount(ppFPSummary?.collectibles),\r\n            produceAmount(ppFPSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP FP\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 11) {\r\n        if (wbSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"WB\",\r\n            wbSummary?.code,\r\n            produceAmount(wbSummary?.totalDue),\r\n            produceAmount(wbSummary?.collectibles),\r\n            produceAmount(wbSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\"WB\", \"WEBSITE\", \"0.00\", \"0.00\", \"0.00\"])\r\n        }\r\n      }\r\n\r\n      if (sumRCSheet[sheetName].length === 12) {\r\n        const defaultValueIfNull = {\r\n          totalDue: 0,\r\n          amountPaid: 0,\r\n          collectibles: 0,\r\n        }\r\n        const { totalDue, totalAmountPaid, totalCollectibles } =\r\n          calculateTotalRevChannel([\r\n            dSummary || defaultValueIfNull,\r\n            ppGFSummary || defaultValueIfNull,\r\n            ppMMFSummary || defaultValueIfNull,\r\n            ppDNSummary || defaultValueIfNull,\r\n            ppFPSummary || defaultValueIfNull,\r\n            wbSummary || defaultValueIfNull,\r\n          ])\r\n        sumRCSheet[sheetName].push([\r\n          \"TOTAL:\",\r\n          \"\",\r\n          produceAmount(totalDue),\r\n          produceAmount(totalCollectibles),\r\n          produceAmount(totalAmountPaid),\r\n        ])\r\n      }\r\n    }\r\n\r\n    const salesSummary = await produceSalesSummary(_schedules, branch)\r\n\r\n    ExportService.exportExcelReports({\r\n      ...defaultSheet,\r\n      ...cashSheet,\r\n      ...rSheet,\r\n      ...ppSheet,\r\n      ...ppGF,\r\n      ...ppMMF,\r\n      ...ppDN,\r\n      ...ppFP,\r\n      ...spwdSheet,\r\n      ...ddSheet,\r\n      ...wbSheet,\r\n      ...sumRCSheet,\r\n      ...salesSummary,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <StyledContainer enableFilter={enableFilter} wrap>\r\n      <StyledLeftContent enableFilter={enableFilter}>\r\n        <FilterOptions\r\n          ServiceClass={ServiceClass}\r\n          isFiltered={isFiltered}\r\n          setIsFiltered={setIsFiltered}\r\n          hideColumns={hideColumns}\r\n          valueSelected={(data) => {\r\n            setFilterValue(\"\")\r\n            setSelectedFilter(data)\r\n          }}\r\n        />\r\n        {selectedFilter !== \"NONE\" && (\r\n          <Space>\r\n            <CustomTitle\r\n              typographyType=\"text\"\r\n              type=\"secondary\"\r\n              label={`${ServiceClass.LABELS[selectedFilter]} :`}\r\n            />\r\n            {types[selectedFilter] === DATE_TYPE && (\r\n              <CustomRangePicker\r\n                format=\"MM/DD/YYYY\"\r\n                onChange={(dates) => {\r\n                  if (dates) {\r\n                    loadRangeData(dates, selectedFilter)\r\n                  } else {\r\n                    clearRangeData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.SALES_TYPE && (\r\n              <AutoSelect\r\n                value={filterValue}\r\n                options={[\"R\", \"D/O\", \"D/PM\", \"D/IR\", \"D/S\", , \"SPWD\"]}\r\n                onChange={(value) => {\r\n                  setFilterValue(value)\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.REVENUE_CHANNEL && (\r\n              <AutoSelect\r\n                value={filterValue}\r\n                options={[\"DR\", \"PP\", \"WB\"]}\r\n                onChange={(value) => {\r\n                  setFilterValue(value)\r\n                }}\r\n              />\r\n            )}\r\n            {selectedFilter === SchedulersClass.UTAK_NO && (\r\n              <CustomInput\r\n                onChange={(e) => {\r\n                  if (e.target.value) {\r\n                    loadDocumentData(SchedulersClass.UTAK_NO, e.target.value)\r\n                  } else {\r\n                    clearDocumentData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.PARTNER_MERCHANT_ORDER_NO && (\r\n              <CustomInput\r\n                onChange={(e) => {\r\n                  if (e.target.value) {\r\n                    loadDocumentData(\r\n                      SchedulersClass.PARTNER_MERCHANT_ORDER_NO,\r\n                      e.target.value\r\n                    )\r\n                  } else {\r\n                    clearDocumentData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.CUSTOMER && (\r\n              <CustomInput\r\n                onChange={(e) => {\r\n                  if (e.target.value) {\r\n                    loadDocumentData(SchedulersClass.CUSTOMER, e.target.value)\r\n                  } else {\r\n                    clearDocumentData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.MODE_PAYMENT && (\r\n              <CustomInput\r\n                onChange={(e) => {\r\n                  if (e.target.value) {\r\n                    loadDocumentData(\r\n                      SchedulersClass.MODE_PAYMENT,\r\n                      e.target.value\r\n                    )\r\n                  } else {\r\n                    clearDocumentData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n          </Space>\r\n        )}\r\n        <Space>\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<PrinterOutlined />}\r\n          />\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<FileExcelOutlined />}\r\n            onClick={async () => {\r\n              if (isFiltered) {\r\n                if (selectedFilter === SchedulersClass.REVENUE_CHANNEL) {\r\n                  const defaultSheet = await schedulerExcel(\r\n                    filteredData,\r\n                    productData\r\n                  )\r\n                  ExportService.exportExcelReports(defaultSheet)\r\n                } else {\r\n                  handleExportExcel(filteredData, user?.branchSelected)\r\n                }\r\n              } else {\r\n                handleExportExcel(data, user?.branchSelected)\r\n              }\r\n            }}\r\n          />\r\n        </Space>\r\n      </StyledLeftContent>\r\n      <StyledRightContent enableAdd={enableAdd}>\r\n        <MainButton\r\n          Icon={<ReloadOutlined />}\r\n          label=\"\"\r\n          type=\"default\"\r\n          shape=\"circle\"\r\n          onClick={() => {\r\n            loadData({}, user?.branchSelected, true) // refresh data if true\r\n            setIsLoading(true)\r\n          }}\r\n        />\r\n        {props?.ServiceClass.COLLECTION_NAME ===\r\n          SchedulersClass.COLLECTION_NAME && (\r\n          <TransactionGroupPayment />\r\n          // <MainButton label=\"Add Group Payment\" type=\"default\" />\r\n        )}\r\n        {props?.ServiceClass.COLLECTION_NAME ===\r\n        SchedulersClass.COLLECTION_NAME ? (\r\n          <DropdownChannel history={history} path={path} />\r\n        ) : (\r\n          <MainButton\r\n            label=\"Add\"\r\n            onClick={() => {\r\n              history.push(`${path}/add`)\r\n            }}\r\n          />\r\n        )}\r\n      </StyledRightContent>\r\n    </StyledContainer>\r\n  )\r\n}\r\n\r\nconst MobileTableView = (props) => {\r\n  return <div>Mobile view</div>\r\n}\r\n\r\nconst StyledURLNotFound = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledContainer = styled(Space)`\r\n  display: flex;\r\n  width: 100%;\r\n  padding-bottom: 1rem;\r\n  justify-content: ${(props) =>\r\n    props?.enableFilter ? \"space-between\" : \"flex-end\"};\r\n`\r\nconst StyledLeftContent = styled(Space)`\r\n  display: ${(props) => (props.enableFilter ? \"flex\" : \"none\")};\r\n  justify-content: flex-start;\r\n`\r\nconst StyledRightContent = styled(Space)`\r\n  display: ${(props) => (props.enableAdd ? \"flex\" : \"none\")};\r\n  justify-content: flex-end;\r\n`\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTable.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\index.js",["751","752","753","754","755","756","757"],"import { Popover, Space, Table, Tag } from \"antd\"\r\nimport {\r\n  calculateBalanceScheduler,\r\n  producedPaymentList,\r\n  producedProductListOfAllCodes,\r\n  producedTotalQtyOfProduct,\r\n  displayPaymentProp,\r\n  displaySalesType,\r\n  displayOrderVia,\r\n  calculateDiscountScheduler,\r\n} from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n  formatTime,\r\n} from \"Helpers/dateFormat\"\r\nimport sumArray, { sumArrayDatas, sumNumbers } from \"Helpers/sumArray\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport usePaginate from \"Hooks/usePaginate\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { useHistory, useRouteMatch } from \"react-router\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport TableHandler from \"../TableHandler\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nfunction DashboardTransaction({ exposeData = () => {}, modifiedData = {} }) {\r\n  const history = useHistory()\r\n  const { url } = useRouteMatch()\r\n  const [productData] = useGetDocuments(ProductsClass) // this is to determine the product list\r\n\r\n  useEffect(() => {}, [modifiedData])\r\n  return (\r\n    <>\r\n      {productData.length > 0 && (\r\n        <TableHandler\r\n          productData={productData}\r\n          exposeData={exposeData}\r\n          modifiedData={modifiedData}\r\n          hideColumns={[\r\n            SchedulersClass._ID,\r\n            SchedulersClass.BRANCH,\r\n            SchedulersClass.DATE_START,\r\n            SchedulersClass.ORDER_NO,\r\n            SchedulersClass.SUBJECT,\r\n            SchedulersClass.ACCOUNT_NAME,\r\n            SchedulersClass.ORDER_VIA,\r\n            SchedulersClass.ORDER_VIA_WEBSITE,\r\n            SchedulersClass.ORDER_VIA_PARTNER,\r\n            SchedulersClass.END_TIME_ZONE,\r\n            SchedulersClass.START_TIME_ZONE,\r\n            SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS,\r\n            SchedulersClass.PAYMENT_NOTES,\r\n            SchedulersClass.DATE_END,\r\n          ]}\r\n          ServiceClass={SchedulersClass}\r\n          defaultColumnAlign=\"left\"\r\n          defaultFontSize=\"12px\"\r\n          bySort\r\n          enableAdd\r\n          defaultAddForm={false}\r\n          enableFilter\r\n          enableRowSelect\r\n          rowSelection={(record) => {\r\n            // exposeData(record)\r\n            history.push(`${url}/modified?id=${record[SchedulersClass._ID]}`)\r\n          }}\r\n          useHook={usePaginate} // if hook is usePaginate\r\n          paginateRequest={true} // paginateRequest must be true\r\n          customSort={[SchedulersClass.DATE_START, \"desc\"]}\r\n          widths={{\r\n            [SchedulersClass.DATE_START]: 90,\r\n            [SchedulersClass.DATE_ORDER_PLACED]: 90,\r\n            [SchedulersClass.BRANCH]: 150,\r\n            [SchedulersClass.DATE_PAYMENT]: 100,\r\n            [SchedulersClass.OR_NO]: 100,\r\n            [SchedulersClass.SOA_NUMBER]: 100,\r\n            [SchedulersClass.ORDER_NO]: 150,\r\n            [SchedulersClass.UTAK_NO]: 100,\r\n            [SchedulersClass.CUSTOMER]: 120,\r\n            [SchedulersClass.CONTACT_NUMBER]: 100,\r\n            [SchedulersClass.QTY]: 50,\r\n            [SchedulersClass.OTHERS]: 100,\r\n            [SchedulersClass.BALANCE_DUE]: 100,\r\n            [SchedulersClass.TOTAL_DUE]: 100,\r\n            [SchedulersClass.SOURCE]: 100,\r\n            [SchedulersClass.SALES_TYPE]: 60,\r\n            [SchedulersClass.REF_NO]: 100,\r\n            [SchedulersClass.MODE_PAYMENT]: 50,\r\n            [SchedulersClass.ACCOUNT_NUMBER]: 100,\r\n            [SchedulersClass.AMOUNT_PAID]: 100,\r\n            [SchedulersClass.REVENUE_CHANNEL]: 50,\r\n            [SchedulersClass.VIA]: 80,\r\n            [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: 80,\r\n            [SchedulersClass.TIME_SLOT]: 100,\r\n            action: 12,\r\n          }}\r\n          // onCell={(data) => {\r\n          //   switch (data[SchedulersClass.STATUS]) {\r\n          //     case \"CANCELLED\":\r\n          //       return {\r\n          //         style: { backgroundColor: \"orange\", cursor: \"pointer\" },\r\n          //       }\r\n          //     case \"CONFIRMED\":\r\n          //       return {\r\n          //         style: { backgroundColor: \"lightblue\", cursor: \"pointer\" },\r\n          //       }\r\n          //     case \"FULFILLED\":\r\n          //       return {\r\n          //         style: { backgroundColor: \"transparent\", cursor: \"pointer\" },\r\n          //       }\r\n          //     default:\r\n          //       if (data[SchedulersClass.ORDER_VIA]) {\r\n          //         return {\r\n          //           style: {\r\n          //             cursor: \"pointer\",\r\n          //             backgroundColor: \"yellow\",\r\n          //           },\r\n          //         }\r\n          //       }\r\n          //       if (data[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n          //         return {\r\n          //           style: {\r\n          //             cursor: \"pointer\",\r\n          //             backgroundColor: \"pink\",\r\n          //           },\r\n          //         }\r\n          //       }\r\n          //   }\r\n          // }}\r\n          overideRender={{\r\n            [SchedulersClass.OTHERS]: (data, record) => {\r\n              return (\r\n                <span style={{ fontSize: \"12px\" }}>\r\n                  {calculateDiscountScheduler(record)}\r\n                </span>\r\n              )\r\n            },\r\n            [SchedulersClass.DATE_START]: (data, record) => {\r\n              const formattedData = formatDateFromDatabase(data)\r\n              const date = formatDateDash(formattedData)\r\n              const time = formatTime(formattedData)\r\n              return (\r\n                <Space\r\n                  direction=\"vertical\"\r\n                  style={{ position: \"relative\", padding: \".2rem\" }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"12px\",\r\n                      position: \"absolute\",\r\n                      top: \"-1rem\",\r\n                    }}\r\n                  >\r\n                    {date}\r\n                  </span>\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      marginTop: \"-.5rem\",\r\n                      position: \"absolute\",\r\n                      color: \"red\",\r\n                    }}\r\n                  >\r\n                    {time}\r\n                  </span>\r\n                </Space>\r\n              )\r\n            },\r\n            [SchedulersClass.REVENUE_CHANNEL]: (data, record) => {\r\n              if (record[SchedulersClass.ORDER_VIA]) return \"DR\"\r\n              if (record[SchedulersClass.ORDER_VIA_PARTNER]) return \"PP\"\r\n              if (record[SchedulersClass.ORDER_VIA_WEBSITE]) return \"WB\"\r\n              return \"\"\r\n            },\r\n            [SchedulersClass.VIA]: (data, record) => {\r\n              return displayOrderVia(record)\r\n            },\r\n            [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: (data, record) => {\r\n              if (record[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n                return record[SchedulersClass.ZAP_NUMBER]\r\n              }\r\n              return data\r\n            },\r\n            [SchedulersClass.QTY]: (data, record) => {\r\n              const products = producedProductListOfAllCodes(productData)\r\n              const totalQty = producedTotalQtyOfProduct(products, record)\r\n              return <span>{totalQty}</span>\r\n            },\r\n            [SchedulersClass.TOTAL_DUE]: (data, record) => {\r\n              if (typeof data === \"undefined\") {\r\n                return \"0.00\"\r\n              } else {\r\n                return thousandsSeparators(Number(data).toFixed(2))\r\n              }\r\n            },\r\n            [SchedulersClass.AMOUNT_PAID]: (data, record) => {\r\n              const paymentList = producedPaymentList(record)\r\n              const amountPaid =\r\n                paymentList.length > 0 ? sumArray(paymentList, \"amount\") : 0\r\n              return thousandsSeparators(Number(amountPaid).toFixed(2))\r\n            },\r\n            [SchedulersClass.BALANCE_DUE]: (data, record) => {\r\n              let balanceDue = calculateBalanceScheduler(record)\r\n              return <span>{thousandsSeparators(balanceDue.toFixed(2))}</span>\r\n            },\r\n            [SchedulersClass.TIME_SLOT]: (data, record) => {\r\n              const dateStart = formatDateFromDatabase(\r\n                record[SchedulersClass.DATE_START]\r\n              )\r\n              const dateEnd = formatDateFromDatabase(\r\n                record[SchedulersClass.DATE_END]\r\n              )\r\n\r\n              let timeStart = formatTime(dateStart).split(\" \")\r\n              const timeEnd = formatTime(dateEnd)\r\n              const date = formatDateDash(dateStart)\r\n\r\n              return (\r\n                <Space\r\n                  direction=\"vertical\"\r\n                  style={{ position: \"relative\", padding: \".2rem\" }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"12px\",\r\n                      position: \"absolute\",\r\n                      top: \"-1rem\",\r\n                    }}\r\n                  >\r\n                    {date}\r\n                  </span>\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      marginTop: \"-.5rem\",\r\n                      position: \"absolute\",\r\n                      color: \"red\",\r\n                    }}\r\n                  >\r\n                    {`${timeStart[0]}-${timeEnd}`}\r\n                  </span>\r\n                </Space>\r\n              )\r\n            },\r\n            [SchedulersClass.OR_NO]: (data, record) => {\r\n              return displayPaymentProp(data, record, SchedulersClass.OR_NO)\r\n            },\r\n            [SchedulersClass.SOA_NUMBER]: (data, record) => {\r\n              return displayPaymentProp(\r\n                data,\r\n                record,\r\n                SchedulersClass.SOA_NUMBER\r\n              )\r\n            },\r\n            [SchedulersClass.MODE_PAYMENT]: (data, record) => {\r\n              return displayPaymentProp(\r\n                data,\r\n                record,\r\n                SchedulersClass.MODE_PAYMENT\r\n              )\r\n            },\r\n            [SchedulersClass.SOURCE]: (data, record) => {\r\n              return displayPaymentProp(data, record, SchedulersClass.SOURCE)\r\n            },\r\n            [SchedulersClass.REF_NO]: (data, record) => {\r\n              return displayPaymentProp(data, record, SchedulersClass.REF_NO)\r\n            },\r\n            [SchedulersClass.ACCOUNT_NUMBER]: (data, record) => {\r\n              return displayPaymentProp(\r\n                data,\r\n                record,\r\n                SchedulersClass.ACCOUNT_NUMBER\r\n              )\r\n            },\r\n            [SchedulersClass.SALES_TYPE]: (data, record) => {\r\n              return displaySalesType(record)\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DashboardTransaction\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\ProductsClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\types.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocuments.js",["758"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\n\r\nexport default function useGetDocuments(ServiceClass, config) {\r\n  const { setError, setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [data, setData] = useState([])\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [ServiceClass])\r\n  const loadData = async (_data = {}) => {\r\n    // this is for static data changes triggered from formHandler\r\n    if (Object.keys(_data).length > 0) {\r\n      const _dataIndex = data.findIndex(\r\n        (d) => d[ServiceClass._ID] === _data[ServiceClass._ID]\r\n      )\r\n      // this is for new added data in the table\r\n      // if (Object.keys(_dataIndex || {}).length === 0) {\r\n      //   const newData = data.splice(0, 0, _data)\r\n      //   setData(newData)\r\n      //   return\r\n      // }\r\n      const newData = arrayReplace(data, _dataIndex, _data)\r\n      setData(newData)\r\n      return\r\n    }\r\n\r\n    // this is for requesting of data from database\r\n    const customSort = config?.customSort ? config.customSort : []\r\n    const bySort = typeof config?.bySort === \"undefined\" ? false : config.bySort\r\n    setIsLoading(true)\r\n    try {\r\n      if (bySort) {\r\n        const _data = await ServiceClass.getDataBySort(\r\n          customSort,\r\n          user.branchSelected\r\n        )\r\n        setData(_data)\r\n        setIsLoading(false)\r\n      } else {\r\n        const _data = await ServiceClass.getData(user.branchSelected)\r\n        setData(_data)\r\n        setIsLoading(false)\r\n      }\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n  return [data, loadData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\helpers.js",["759"],"import { AMOUNT_TYPE } from \"Constants/types\"\r\n\r\nexport const handleTitle = (ServiceClass, key) => {\r\n  if (typeof ServiceClass?.LABELS === \"undefined\") {\r\n    return key\r\n  } else {\r\n    const title = ServiceClass?.LABELS[key] ? ServiceClass?.LABELS[key] : key\r\n    return title\r\n  }\r\n}\r\n\r\nexport const handleAlignment = (ServiceClass, key, defaultColumnAlign) => {\r\n  let result = defaultColumnAlign\r\n  if (typeof ServiceClass?.TYPES === \"undefined\") {\r\n    return \"left\"\r\n  }\r\n\r\n  switch (ServiceClass.TYPES[key]) {\r\n    case AMOUNT_TYPE:\r\n      result = \"right\"\r\n  }\r\n  return result\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\SchedulesClass.js",["760"],"import {\r\n  AMOUNT_TYPE,\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  DATE_TYPE,\r\n  DROPDOWN_TYPE,\r\n  NUMBER_TYPE,\r\n  TEXT_AREA_TYPE,\r\n} from \"Constants/types\"\r\nimport Base from \"Services/Base\"\r\nimport PaginateCommands from \"Services/PaginateCommands\"\r\nimport db, {\r\n  query,\r\n  where,\r\n  collection,\r\n  getDocs,\r\n  orderBy,\r\n  endAt,\r\n} from \"Services/firebase\"\r\nimport { UNAVAILABLE } from \"Constants/errorCodes\"\r\nimport { startAt } from \"@firebase/firestore\"\r\n\r\nexport default class SchedulersClass {\r\n  static COLLECTION_NAME = \"schedules\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.DATE_START, \"asc\"]\r\n    )\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static getDataByDate(dates, fieldname, branch) {\r\n    return Base.getDataByDate(this.COLLECTION_NAME, dates, fieldname, branch)\r\n  }\r\n\r\n  static async getDataByPartialDate(date, branchSelected = \"\") {\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(this.PARTIAL_DATES_STRING, \"array-contains\", date),\r\n      where(this.BRANCH, \"==\", branchSelected)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n\r\n    console.log(\"data list\", data)\r\n    return data\r\n  }\r\n\r\n  static getDataByDatePanel(dates, fieldname, branch) {\r\n    return Base.getDataByDatePanel(\r\n      this.COLLECTION_NAME,\r\n      dates,\r\n      fieldname,\r\n      branch\r\n    )\r\n  }\r\n\r\n  static getDataByFieldname(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static async getDataByKeyword(fieldname, value = \"\", branchSelected = \"\") {\r\n    // return Base.getDataByKeyword(this.COLLECTION_NAME, fieldname, value)\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      orderBy(fieldname),\r\n      startAt(value),\r\n      endAt(value + \"\\uf8ff\"),\r\n      where(this.BRANCH, \"==\", branchSelected)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n\r\n    console.log(\"data list\", data)\r\n    return data\r\n  }\r\n\r\n  static async getDataNotEqualToFieldname(\r\n    fieldname = \"\",\r\n    value = \"\",\r\n    branchSelected = \"\"\r\n  ) {\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(fieldname, \"!=\", value),\r\n      where(this.BRANCH, \"==\", branchSelected)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n\r\n    console.log(\"data list\", data)\r\n    return data\r\n  }\r\n\r\n  static async getDataOthers(fieldname, value, branchSelected = \"\") {\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(`others.${fieldname}`, \"!=\", value),\r\n      where(this.BRANCH, \"==\", branchSelected)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n\r\n    console.log(\"data list\", data)\r\n    return data\r\n  }\r\n\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getPaginatedData(branch = \"\", customSort = [\"StartTime\", \"desc\"]) {\r\n    return PaginateCommands.getData(\r\n      this.COLLECTION_NAME,\r\n      150,\r\n      branch,\r\n      customSort\r\n    )\r\n  }\r\n\r\n  static getNextPaginatedData(\r\n    lastVisible,\r\n    branch = \"\",\r\n    customSort = [\"StartTime\", \"desc\"]\r\n  ) {\r\n    return PaginateCommands.getMoreData(\r\n      this.COLLECTION_NAME,\r\n      150,\r\n      lastVisible,\r\n      branch,\r\n      customSort\r\n    )\r\n  }\r\n\r\n  static async getGeneratedIdToday(\r\n    branchCode = \"\",\r\n    orderNo = \"\",\r\n    orderNoDate = \"\"\r\n  ) {\r\n    console.log(\"branchCode\", branchCode)\r\n    console.log(\"orderNo\", orderNo)\r\n    console.log(\"orderNoDate\", orderNoDate)\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(this.ORDER_NO, \"<=\", `${branchCode}-${orderNo}-685`),\r\n      where(this.ORDER_NO, \">\", `${branchCode}-${orderNoDate}-685`)\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static QTY = \"qty\" // this is not a firebase field\r\n  static OTHERS = \"others\"\r\n  static MODE_PAYMENT = \"modePayment\"\r\n  static SOURCE = \"source\"\r\n  static AMOUNT_PAID = \"amountPaid\"\r\n  static BRANCH = \"branch\"\r\n  static CUSTOMER = \"customer\"\r\n  static CONTACT_NUMBER = \"contactNumber\"\r\n  static DATE_START = \"StartTime\" // this is default of syncfusion\r\n  static DATE_END = \"EndTime\" // this is default of syncfusion\r\n  static EIGHT = \"gcEight\"\r\n  static TWELVE = \"gcTwelve\"\r\n  static BC = \"gBc\"\r\n  static BC_HALF = \"gBcHalf\"\r\n  static DATE_ORDER_PLACED = \"dateOrderPlaced\"\r\n  static UTAK_NO = \"utakNo\"\r\n  static ACCOUNT_NAME = \"accountName\"\r\n  static ACCOUNT_NUMBER = \"accountNumber\"\r\n  static REF_NO = \"refNo\"\r\n  static PAYMENT_MODE = \"paymentMode\"\r\n  static MERCHANT_ORDER = \"merchantOrder\"\r\n  static STATUS = \"status\"\r\n  static ID = \"Id\" // this is default of syncfusion\r\n  static GUID = \"Guid\" // this is default of syncfusion\r\n  static START_TIME_ZONE = \"StartTimezone\" // this is default of syncfusion\r\n  static END_TIME_ZONE = \"EndTimezone\" // this is default of syncfusion\r\n  static SUBJECT = \"Subject\"\r\n  static _ID = \"_id\"\r\n  static ORDER_NO = \"orderNo\"\r\n  static INDICATE_REASON = \"indicateReason\"\r\n  static DATE_PAYMENT = \"datePayment\"\r\n  static CH_8 = \"ch8\"\r\n  static CH_12 = \"ch12\"\r\n  static CL_8 = \"cl8\"\r\n  static CL_12 = \"cl12\"\r\n  static BC_2 = \"bc2\"\r\n  static BC_4 = \"bc4\"\r\n  static JV_4 = \"jc4\"\r\n  static JV_2 = \"jv2\"\r\n  static BCJ_4 = \"bcj4\"\r\n  static BCJ_2 = \"bcj2\"\r\n  static BCJ_1 = \"bcj1\"\r\n  static FCH_8 = \"fch8\"\r\n  static FCH_12 = \"fch12\"\r\n  static FBC_4 = \"fbc4\"\r\n  static ATCHARA = \"atchara\"\r\n  static BC_SAUCE = \"bcSauce\"\r\n  static SPICED_VINEGAR = \"spiceVinegar\"\r\n  static BASTING_SAUCE = \"bastingSauce\"\r\n  static CHILI_OIL = \"chiliOil\"\r\n  static REPAER = \"reaper\"\r\n  static BAO = \"bao\"\r\n  static TOTAL = \"total\"\r\n  static TOTAL_DUE = \"totalDue\"\r\n  static DELIVERY_DATE = \"deliveryDate\"\r\n  static MENU_GROUP_HEADERS = \"menu_group_headers\"\r\n  static REMARKS = \"remarks\"\r\n  static M_A = \"M-A\"\r\n  static CH_8_PS = \"CH8-PS\"\r\n  static M_B = \"M-B\"\r\n  static PRT = \"PRT\"\r\n  static JV_1 = \"JV_1\"\r\n  static ORDER_VIA = \"orderVia\"\r\n  static ORDER_VIA_PARTNER = \"orderViaPartner\"\r\n  static ORDER_VIA_WEBSITE = \"orderViaWebsite\"\r\n  static PARTNER_MERCHANT_ORDER_NO = \"partnerMerchantOrderNo\"\r\n  static DISCOUNT_ADDITIONAL_DETAILS = \"discountAdditionalDetails\"\r\n  static PAYMENT_NOTES = \"paymentNotes\"\r\n\r\n  static PARTIALS = \"partials\"\r\n  static PARTIAL_DATES_STRING = \"partialDates\"\r\n\r\n  // this is not included in the database post of data, this is only for viewing in print document particular field\r\n  static TIME_SLOT = \"timeSlot\"\r\n  static BALANCE_DUE = \"balanceDue\"\r\n\r\n  static REVENUE_CHANNEL = \"revenueChannel\"\r\n  static OR_NO = \"orNo\"\r\n  static SOA_NUMBER = \"soaNumber\"\r\n  static VIA = \"via\"\r\n  static SALES_TYPE = \"salesType\"\r\n  static FIXED_DEDUCTION = \"fixedDeduction\"\r\n  static IS_VIP = \"isVIP\"\r\n  static ZAP_NUMBER = \"zapNumber\"\r\n\r\n  static PROPERTIES = [\r\n    this._ID,\r\n    this.BRANCH,\r\n    this.DATE_ORDER_PLACED,\r\n    this.DATE_START,\r\n    this.DATE_END,\r\n    this.UTAK_NO,\r\n    this.OR_NO,\r\n    this.ORDER_NO,\r\n    this.REVENUE_CHANNEL,\r\n    this.CUSTOMER,\r\n    this.CONTACT_NUMBER,\r\n    this.VIA,\r\n    this.PARTNER_MERCHANT_ORDER_NO,\r\n    this.TIME_SLOT,\r\n    this.ORDER_VIA_WEBSITE,\r\n    this.ORDER_VIA,\r\n    this.ORDER_VIA_PARTNER,\r\n    this.QTY,\r\n    this.DATE_PAYMENT,\r\n    this.MODE_PAYMENT,\r\n    this.SOURCE,\r\n    this.SOA_NUMBER,\r\n    this.REF_NO,\r\n    this.SUBJECT,\r\n    this.ACCOUNT_NAME,\r\n    this.ACCOUNT_NUMBER,\r\n    this.SALES_TYPE,\r\n    this.DISCOUNT_ADDITIONAL_DETAILS,\r\n    this.END_TIME_ZONE, // should be null value\r\n    this.START_TIME_ZONE, // should be null value\r\n    this.PAYMENT_NOTES,\r\n    this.OTHERS,\r\n    this.TOTAL_DUE,\r\n    this.BALANCE_DUE,\r\n    this.AMOUNT_PAID,\r\n  ]\r\n\r\n  static TYPES = {\r\n    [this.TOTAL_DUE]: AMOUNT_TYPE,\r\n    [this.DATE_PAYMENT]: DATE_TYPE,\r\n    [this.DATE_START]: DATE_TYPE,\r\n    [this.DATE_END]: DATE_TYPE,\r\n    [this.DATE_ORDER_PLACED]: DATE_TYPE,\r\n    [this.OTHERS]: AMOUNT_TYPE,\r\n    [this.AMOUNT_PAID]: AMOUNT_TYPE,\r\n    [this.QTY]: NUMBER_TYPE,\r\n    [this.REMARKS]: TEXT_AREA_TYPE,\r\n    [this.ORDER_VIA]: DROPDOWN_TYPE,\r\n    [this.ORDER_VIA_PARTNER]: DROPDOWN_TYPE,\r\n    [this.ORDER_VIA_WEBSITE]: DROPDOWN_TYPE,\r\n    [this.STATUS]: DROPDOWN_TYPE,\r\n    [this.INDICATE_REASON]: TEXT_AREA_TYPE,\r\n    [this.BALANCE_DUE]: AMOUNT_TYPE,\r\n    [this.PARTIALS]: ARRAY_OF_OBJECT_TYPE,\r\n  }\r\n\r\n  static LABELS = {\r\n    [this.SOA_NUMBER]: \"SOA #\",\r\n    [this.ZAP_NUMBER]: \"ZAP #\",\r\n    [this.TIME_SLOT]: \"TIME SLOT\",\r\n    [this.REVENUE_CHANNEL]: \"R/C\",\r\n    [this.DATE_ORDER_PLACED]: \"DATE PLACED\",\r\n    [this.STATUS]: \"STATUS\",\r\n    [this.REF_NO]: \"REF #\",\r\n    [this.SALES_TYPE]: \"S/T\",\r\n    [this.UTAK_NO]: \"UTAK #\",\r\n    [this.OR_NO]: \"OR #\",\r\n    [this.INDICATE_REASON]: \"REASON\",\r\n    [this.BRANCH]: \"BRANCH\",\r\n    [this.CUSTOMER]: \"CUSTOMER NAME\",\r\n    [this.CONTACT_NUMBER]: \"CONTACT NUMBER\",\r\n    [this.DELIVERY_DATE]: \"DELIVERY DATE/TIME\",\r\n    [this.DATE_START]: \"DATE SERVED\", // cannot be change\r\n    [this.DATE_END]: \"DATE/TIME END\", // cannot be change\r\n    [this.ORDER_VIA]: \"DIRECT\",\r\n    [this.PAYMENT_MODE]: \"PAYMENT CODE\",\r\n    [this.MERCHANT_ORDER]: \"MERCHANT ORDER #\",\r\n    [this.ACCOUNT_NAME]: \"ACCOUNT NAME\",\r\n    [this.ORDER_NO]: \"ORDER #\",\r\n    [this.CH_8]: '8\"',\r\n    [this.CH_12]: '12\"',\r\n    [this.CL_8]: \"CALI 8\",\r\n    [this.CL_12]: \"CALI 12\",\r\n    [this.BC_4]: \"BC FULL [4]\",\r\n    [this.BC_2]: \"BC HALF [2]\",\r\n    [this.BCJ_4]: \"BCJ [4]\",\r\n    [this.BCJ_2]: \"BCJ HALF [2]\",\r\n    [this.BCJ_1]: \"BCJ1\",\r\n    [this.M_A]: 'A - 2pc 8\" w/ JV',\r\n    [this.CH_8_PS]: '*add 8\" STICK',\r\n    [this.M_B]: \"B - 1pc BC w/ JV\",\r\n    [this.JV_4]: \"JAVA FULL [4]\",\r\n    [this.JV_2]: \"JAVA HALF [2]\",\r\n    [this.JV_1]: \"JAVA SOLO [1]\",\r\n    [this.FCH_8]: \"FCH8\",\r\n    [this.FCH_12]: \"FCH12\",\r\n    [this.FBC_4]: \"FBC4\",\r\n    [this.ATCHARA]: \"X-ATC\",\r\n    [this.BC_SAUCE]: \"X-BCS\",\r\n    [this.SPICED_VINEGAR]: \"X-SVN\",\r\n    [this.BASTING_SAUCE]: \"X-BTS\",\r\n    [this.CHILI_OIL]: \"X-DCO\",\r\n    [this.REPAER]: \"RP\",\r\n    [this.BAO]: \"BAO-B-Q\",\r\n    [this.PRT]: \"PARTY TRAY\",\r\n    [this.TOTAL]: \"TOTAL\",\r\n    [this.REMARKS]: \"NOTES\",\r\n    [this.TIME_SLOT]: \"TIME SLOT\",\r\n    [this.PARTNER_MERCHANT_ORDER_NO]: \"PP #\",\r\n    [this.VIA]: \"VIA\",\r\n    [this.ORDER_VIA_PARTNER]: \"PARTNER MERCHANT\",\r\n    [this.ORDER_VIA_WEBSITE]: \"WEBSITE\",\r\n    [this.ACCOUNT_NUMBER]: \"ACCT #\",\r\n    [this.QTY]: \"QTY\",\r\n    [this.DATE_PAYMENT]: \"DATE PAID\",\r\n    [this.MODE_PAYMENT]: \"MOP\",\r\n    [this.SOURCE]: \"SOURCE\",\r\n    [this.TOTAL_DUE]: \"TOTAL\",\r\n    [this.AMOUNT_PAID]: \"AMOUNT PAID\",\r\n    [this.OTHERS]: \"OTHERS\",\r\n    [this.BALANCE_DUE]: \"COLLECTIBLE\",\r\n  }\r\n}\r\n/* (\r\n  <center>\r\n  <span>\r\n    OTHERS / <br />\r\n    DEDUCTIONS\r\n  </span>\r\n</center>\r\n),*/\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\PaginateCommands.js",["761","762","763","764","765","766","767"],"import db, {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  startAfter,\r\n  setDoc,\r\n} from \"./firebase\"\r\nimport { formatDateFromDatabase, formatDateDash } from \"Helpers/dateFormat\"\r\nimport { UNAVAILABLE } from \"Constants/errorCodes\"\r\nexport default class PaginateCommands {\r\n  static async getData(\r\n    collectionName,\r\n    customLimit = 150,\r\n    branch,\r\n    customSort = []\r\n  ) {\r\n    const ref = collection(db, collectionName)\r\n    if (branch) {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    } else {\r\n      const request = query(\r\n        ref,\r\n        orderBy(customSort[0], customSort[1]),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    }\r\n  }\r\n\r\n  static async getMoreData(\r\n    collectionName,\r\n    customLimit = 150,\r\n    lastVisible,\r\n    branch,\r\n    customSort = []\r\n  ) {\r\n    const ref = collection(db, collectionName)\r\n    if (branch) {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        startAfter(lastVisible),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    } else {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        startAfter(lastVisible),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\dateFormat.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\SettingsUserMasterfilePage.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsUserMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\RouteWithSubRoutes.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentById.js",["768"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentById(ServiceClass, id) {\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState({})\r\n  useEffect(() => {\r\n    if (id) {\r\n      loadData(id)\r\n    }\r\n  }, [id])\r\n  const loadData = async (_id) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataById(_id)\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  return [data, loadData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsRoleMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsDropdownMasterfile\\index.js",["769"],"import React, { useEffect } from \"react\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport TableHandler from \"../SettingsTableHandler\"\r\n\r\nfunction SettingsDropdownMasterfile() {\r\n  return (\r\n    <>\r\n      <TableHandler\r\n        ServiceClass={DropdownsClass}\r\n        hideColumns={[DropdownsClass._ID]}\r\n        enableEdit\r\n        enableAdd\r\n        onCell={() => {\r\n          return { style: { verticalAlign: \"top\" } }\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SettingsDropdownMasterfile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\DropdownsClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsBranchMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\BranchClass.js",["770"],"import { ARRAY_OF_STRING_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport Base from \"Services/Base\"\r\n\r\nexport default class BranchClass {\r\n  static COLLECTION_NAME = \"branches\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.NO, \"asc\"]\r\n    )\r\n  }\r\n\r\n  static getDataByFieldName(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n  static _ID = \"_id\"\r\n  static BRANCH_ADDRESS = \"branchAddress\"\r\n  static BRANCH_NAME = \"branchName\"\r\n\r\n  static PROPERTIES = [this._ID, this.BRANCH_NAME, this.BRANCH_ADDRESS]\r\n\r\n  static LABELS = {\r\n    [this.BRANCH_ADDRESS]: \"Address\",\r\n    [this.BRANCH_NAME]: \"Branch\",\r\n  }\r\n  static TYPES = {\r\n    [this.BRANCH_ADDRESS]: STRING_TYPE,\r\n    [this.BRANCH_NAME]: STRING_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\hook.js",["771","772","773","774","775","776"],"import React, { useState, useEffect } from \"react\"\r\nimport { Space, Tag } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport { handleTitle, handleAlignment } from \"./helpers\"\r\nimport {\r\n  AMOUNT_TYPE,\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  DATE_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport { EditOutlined } from \"@ant-design/icons\"\r\nimport { arrayReplace, replaceArrayData } from \"Helpers/arrayFuntions\"\r\nimport { useHistory, useRouteMatch } from \"react-router\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nexport default function useTableHandler({\r\n  ServiceClass, // Class\r\n  hideColumns = [],\r\n  overideRender = {},\r\n  bySort, // boolean\r\n  customSort = [],\r\n  defaultColumnAlign = \"left\",\r\n  widths = {},\r\n  hasWidths = true,\r\n  defaultFontSize = \"12px\",\r\n  enableEdit = false,\r\n  enableFilter = false,\r\n  enableAdd = false,\r\n  defaultAddForm = true,\r\n  enableRowSelect = false,\r\n  rowSelection = () => {},\r\n  onCell = () => {},\r\n  useHook = useGetDocuments,\r\n  paginateRequest = false,\r\n  exposeData = () => {},\r\n  modifiedData,\r\n}) {\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const [collectionData, loadData] = useHook(ServiceClass, {\r\n    bySort,\r\n    customSort,\r\n  })\r\n\r\n  const [data, setData] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    handleColumns(collectionData)\r\n    setIsLoading(false)\r\n    setData(collectionData)\r\n\r\n    // in order to access the data list outside this component\r\n    exposeData(collectionData)\r\n  }, [collectionData])\r\n\r\n  useEffect(() => {\r\n    handleColumns(data)\r\n  }, [data])\r\n\r\n  // if modifiedData is trigger it will automatically update the state base on the new data save\r\n  useEffect(() => {\r\n    // const collectionIndex = data.findIndex(\r\n    //   (obj) => obj[ServiceClass._ID] === modifiedData[ServiceClass._ID]\r\n    // )\r\n    // if (collectionIndex >= 0) {\r\n    //   const updatedData = arrayReplace(data, collectionIndex, modifiedData)\r\n    //   setData(updatedData)\r\n    // }\r\n    // handleModified(modifiedData)\r\n    if (Object.keys(modifiedData || {}).length > 0) {\r\n      loadData(modifiedData)\r\n    }\r\n  }, [modifiedData])\r\n\r\n  const handleColumns = (data) => {\r\n    const _columns = []\r\n    if (typeof ServiceClass?.PROPERTIES === \"undefined\") {\r\n      const properties = data.length > 0 ? Object.keys(data[0]) : []\r\n      for (const key of properties) {\r\n        if (!hideColumns.includes(key)) {\r\n          const columnObj = {\r\n            title: handleTitle(ServiceClass, key),\r\n            key,\r\n            dataIndex: key,\r\n            align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n            ellipsis: {\r\n              showTitle: false,\r\n            },\r\n            onCell,\r\n            render: (value, record) => {\r\n              return handleTypeRender({ value, record }, key)\r\n            },\r\n          }\r\n          if (hasWidths) {\r\n            columnObj.width =\r\n              typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n          }\r\n          _columns.push({ ...columnObj })\r\n        }\r\n      }\r\n      if (enableEdit) {\r\n        _columns.push({\r\n          title: \"\",\r\n          key: \"action\",\r\n          dataIndex: \"action\",\r\n          align: \"right\",\r\n          onCell,\r\n          render: (data, record) => {\r\n            return (\r\n              <MainButton\r\n                type=\"default\"\r\n                shape=\"circle\"\r\n                Icon={<EditOutlined />}\r\n                onClick={() =>\r\n                  history.push(\r\n                    `${path}/modified?id=${record[ServiceClass._ID]}`\r\n                  )\r\n                }\r\n              />\r\n            )\r\n          },\r\n        })\r\n      }\r\n      setColumns(_columns)\r\n      return\r\n    }\r\n\r\n    for (const key of ServiceClass.PROPERTIES) {\r\n      if (!hideColumns.includes(key)) {\r\n        const columnObj = {\r\n          title: handleTitle(ServiceClass, key),\r\n          key,\r\n          dataIndex: key,\r\n          align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n          ellipsis: {\r\n            showTitle: false,\r\n          },\r\n          onCell,\r\n          render: (value, record) => {\r\n            return handleTypeRender({ value, record }, key)\r\n          },\r\n        }\r\n        if (hasWidths) {\r\n          columnObj.width =\r\n            typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n        }\r\n        _columns.push({ ...columnObj })\r\n      }\r\n    }\r\n    if (enableEdit) {\r\n      _columns.push({\r\n        title: \"\",\r\n        key: \"action\",\r\n        dataIndex: \"action\",\r\n        align: \"right\",\r\n        onCell,\r\n        render: (data, record) => {\r\n          return (\r\n            <MainButton\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              Icon={<EditOutlined />}\r\n              onClick={() =>\r\n                history.push(`${path}/modified?id=${record[ServiceClass._ID]}`)\r\n              }\r\n            />\r\n          )\r\n        },\r\n      })\r\n    }\r\n    setColumns(_columns)\r\n  }\r\n\r\n  const handleTypeRender = ({ value, record }, key) => {\r\n    if (typeof overideRender[key] !== \"undefined\") {\r\n      return overideRender[key](value, record)\r\n    }\r\n\r\n    if (typeof ServiceClass.TYPES === \"undefined\") {\r\n      if (typeof value === \"object\") {\r\n        return \"Object without types\"\r\n      }\r\n      return value\r\n    }\r\n\r\n    let result = value\r\n    switch (ServiceClass.TYPES[key]) {\r\n      case STRING_TYPE:\r\n        result = value\r\n        break\r\n      case ARRAY_OF_OBJECT_TYPE:\r\n        const renderObj =\r\n          typeof ServiceClass.OBJECTS === \"undefined\" ? (\r\n            \"Object Undefined\"\r\n          ) : (\r\n            <Space>\r\n              {value.map((valueObj) => {\r\n                const dataObj =\r\n                  typeof ServiceClass.OBJECTS[key] === \"undefined\"\r\n                    ? \"undefined title\"\r\n                    : valueObj[ServiceClass.OBJECTS[key].title]\r\n                return (\r\n                  <Tag style={{ cursor: \"pointer\" }} color=\"cyan\" wrap>\r\n                    {dataObj}\r\n                  </Tag>\r\n                )\r\n              })}\r\n            </Space>\r\n          )\r\n        result = renderObj\r\n        break\r\n      case ARRAY_OF_STRING_TYPE:\r\n        result = (\r\n          <Space wrap>\r\n            {(value || []).map((valueKey) => {\r\n              return <Tag color=\"cyan\">{valueKey}</Tag>\r\n            })}\r\n          </Space>\r\n        )\r\n        break\r\n      case AMOUNT_TYPE:\r\n        result = thousandsSeparators(Number(value).toFixed(2))\r\n        break\r\n      case DATE_TYPE:\r\n        const formattedDate = formatDateFromDatabase(value)\r\n        result = formatDateDash(formattedDate)\r\n        break\r\n      case BOOLEAN_TYPE:\r\n        result = value ? (\r\n          <span style={{ color: \"green\" }}>Active</span>\r\n        ) : (\r\n          <span style={{ color: \"red\" }}>Inactive</span>\r\n        )\r\n        break\r\n    }\r\n    return <div style={{ fontSize: defaultFontSize }}>{result}</div>\r\n  }\r\n\r\n  const handleModified = (data) => {\r\n    loadData(data)\r\n  }\r\n  return {\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableFilter,\r\n    enableEdit,\r\n    enableRowSelect,\r\n    rowSelection,\r\n    enableAdd,\r\n    defaultAddForm,\r\n    setIsLoading,\r\n    isLoading,\r\n    ServiceClass,\r\n    handleModified,\r\n    paginateRequest,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\collectionData.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sumArray.js",["777","778","779"],"import thousandsSeparators from \"./formatNumber\"\r\n\r\nexport default function (array, field) {\r\n  // Getting sum of numbers\r\n  if (array.length > 0) {\r\n    if (field) {\r\n      const sum = array.reduce(function (a = 0, b) {\r\n        let fieldNumber = typeof b[field] !== \"undefined\" ? b[field] : 0\r\n        return Number(a) + Number(fieldNumber)\r\n      }, 0)\r\n      return sum\r\n    }\r\n    const sum = array.reduce(function (a, b) {\r\n      return Number(a) + Number(b)\r\n    }, 0)\r\n    return sum\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const sumArrayDatas = (array, index) => {\r\n  if (array.length > 0) {\r\n    const sum = array.reduce(function (a = 0, b) {\r\n      if (typeof b[index] === \"number\") {\r\n        return parseInt(a) + parseInt(b[index])\r\n      }\r\n      if (b[index]) {\r\n        if (!isNaN(b[index])) {\r\n          return parseInt(a) + parseInt(b[index])\r\n        } else {\r\n          return parseInt(a) + 0\r\n        }\r\n      } else {\r\n        return parseInt(a) + 0\r\n      }\r\n    }, 0)\r\n    return sum\r\n  }\r\n  return 0\r\n}\r\n\r\n// to group the same name of value in an object\r\nexport const sumArrayOfObjectsGrouping = (data, field1, field2) => {\r\n  const newDataByGroup = []\r\n  data.forEach((obj) => {\r\n    let newDataByGroupIndex = 0\r\n\r\n    // check first if data already exist\r\n    const dataExist = newDataByGroup.find((d, index2) => {\r\n      if (typeof d[field1] !== \"undefined\") {\r\n        if (d[field1] === obj[field1]) {\r\n          newDataByGroupIndex = index2\r\n        }\r\n        return d[field1] === obj[field1]\r\n      }\r\n    })\r\n\r\n    if (dataExist) {\r\n      const number1 = Number(dataExist[field2])\r\n      const number2 = Number(obj[field2])\r\n      const sumNumber = number1 + number2\r\n      const renewedData = {\r\n        // ...obj,\r\n        // [field2]: sumNumber.toFixed(2),\r\n        [field1]: obj[field1],\r\n        [field2]: sumNumber.toFixed(2),\r\n      }\r\n      newDataByGroup.splice(newDataByGroupIndex, 1, renewedData)\r\n    } else {\r\n      const number = Number(obj[field2])\r\n      newDataByGroup.push({\r\n        // ...obj,\r\n        // [field2]: number.toFixed(2),\r\n        [field1]: obj[field1],\r\n        [field2]: number.toFixed(2),\r\n      })\r\n    }\r\n  })\r\n  return newDataByGroup\r\n}\r\n\r\nexport const sumNumbers = (array) => {\r\n  return array.reduce((a, b) => Number(a) + Number(b), 0)\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\formatNumber.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\arrayFuntions.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\index.js",["780","781","782","783","784"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport {\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport EditableTagGroup from \"../EditableTagGroup\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport useModifiedCount from \"./useModifiedCount\"\r\nimport CustomPopConfirm from \"Components/Commons/CustomPopConfirm\"\r\nimport StringField from \"./StringField\"\r\nimport StringFieldArray from \"./StringFieldArray\"\r\nimport BooleanField from \"./BooleanField\"\r\nimport ObjectFieldArray from \"./ObjectFieldArray\"\r\nfunction FormHandler({ ServiceClass, back, formSave = () => {} }) {\r\n  const query = useQuery()\r\n  const id = query.get(\"id\")\r\n  const [collectionData] = useGetDocumentById(ServiceClass, id)\r\n  const [properties, setProperties] = useState([])\r\n  const [modifiedData, setModifiedData] = useState({})\r\n  useEffect(() => {\r\n    console.log(ServiceClass.COLLECTION_NAME)\r\n    if (ServiceClass.PROPERTIES.length > 0) {\r\n      const newProperties = ServiceClass.PROPERTIES.filter(\r\n        (field) => field !== \"_id\"\r\n      )\r\n      setProperties(newProperties)\r\n    }\r\n  }, [ServiceClass])\r\n\r\n  const handleModification = (value, name) => {\r\n    const _modifiedData = { ...modifiedData }\r\n    _modifiedData[name] = value\r\n    setModifiedData({ ..._modifiedData })\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    const dataToBeSaved = { ...modifiedData }\r\n    // remove if field is not included in the properties of a class\r\n    for (const key in dataToBeSaved) {\r\n      if (!properties.includes(key)) {\r\n        delete dataToBeSaved[key]\r\n      }\r\n    }\r\n\r\n    await ServiceClass.updateDataById(id, dataToBeSaved)\r\n    formSave({ ...collectionData, ...dataToBeSaved, [ServiceClass._ID]: id })\r\n    back()\r\n  }\r\n\r\n  console.log(\"collectionData\", collectionData)\r\n  return (\r\n    <>\r\n      {Object.keys(collectionData).length > 0 && (\r\n        <StyledContainer>\r\n          <Header back={back} modifiedData={modifiedData} />\r\n          <StyledFormContainer>\r\n            <StyledForm direction=\"vertical\">\r\n              {properties.map((name) => {\r\n                switch (ServiceClass.TYPES[name]) {\r\n                  case STRING_TYPE:\r\n                    return (\r\n                      <StringField\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case ARRAY_OF_STRING_TYPE:\r\n                    return (\r\n                      <StringFieldArray\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case ARRAY_OF_OBJECT_TYPE:\r\n                    return (\r\n                      <ObjectFieldArray\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case BOOLEAN_TYPE:\r\n                    return (\r\n                      <BooleanField\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                }\r\n                return (\r\n                  <StringField\r\n                    ServiceClass={ServiceClass}\r\n                    collectionData={collectionData}\r\n                    name={name}\r\n                    handleModification={handleModification}\r\n                  />\r\n                )\r\n              })}\r\n              <ActionButtons\r\n                modifiedData={modifiedData}\r\n                back={back}\r\n                handleSave={handleSave}\r\n              />\r\n            </StyledForm>\r\n          </StyledFormContainer>\r\n        </StyledContainer>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst Header = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledHeader>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{ Icon: <ArrowLeftOutlined />, shape: \"circle\" }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      Form Data\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nconst ActionButtons = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledActionContainer>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{\r\n          label: \"Cancel\",\r\n          danger: true,\r\n          disabled: modifiedCount > 0 ? false : true,\r\n        }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount} // count is used for notification discard Changes\r\n      />\r\n      <MainButton\r\n        label=\"Save\"\r\n        disabled={modifiedCount > 0 ? false : true}\r\n        onClick={props.handleSave}\r\n      />\r\n    </StyledActionContainer>\r\n  )\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default FormHandler\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\EditableTagGroup\\index.js",["785","786","787"],"import { Input, message, Space, Tag } from \"antd\"\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport styled from \"styled-components\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\n\r\nfunction EditableTag({\r\n  tags = [],\r\n  exposeData = () => {},\r\n  setIsTouched = () => {},\r\n  dropdowns = [],\r\n}) {\r\n  const inputRef = useRef()\r\n  const editInputRef = useRef()\r\n  const [newTags, setNewTags] = useState([])\r\n  const [editableIndex, setEditableIndex] = useState(null)\r\n  const [visibleInput, setVisibleInput] = useState(false)\r\n  useEffect(() => {\r\n    if (tags.length > 0) {\r\n      mergeDuplicates(tags)\r\n    }\r\n  }, [tags])\r\n\r\n  useEffect(() => {\r\n    inputRef?.current?.focus()\r\n  }, [visibleInput])\r\n\r\n  useEffect(() => {\r\n    if (editableIndex) {\r\n      editInputRef?.current?.focus()\r\n    }\r\n  }, [editableIndex])\r\n\r\n  useEffect(() => {\r\n    exposeData(newTags)\r\n  }, [newTags])\r\n\r\n  const mergeDuplicates = (arrayOfStrings) => {\r\n    const newArrayOfStrings = []\r\n    for (const value of arrayOfStrings) {\r\n      if (!newArrayOfStrings.includes(value)) {\r\n        newArrayOfStrings.push(value)\r\n      }\r\n    }\r\n    setNewTags(newArrayOfStrings)\r\n  }\r\n\r\n  const addTag = (value) => {\r\n    if (typeof value === \"object\") {\r\n      setVisibleInput(false)\r\n      setIsTouched(true)\r\n      return\r\n    }\r\n    if (value.trim() !== \"\") {\r\n      const _tags = [...newTags]\r\n      _tags.push(value)\r\n      mergeDuplicates(_tags)\r\n      setIsTouched(true)\r\n    }\r\n    setVisibleInput(false)\r\n  }\r\n\r\n  const removeTag = (e, value) => {\r\n    e.preventDefault()\r\n    let _tags = [...newTags.filter((tag) => tag !== value)]\r\n    setNewTags(_tags)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const editTag = (value, index) => {\r\n    if (newTags.includes(value)) {\r\n      message.warning(`${value} already exist`)\r\n      return\r\n    }\r\n    let _tags = [...newTags]\r\n    _tags[index] = value\r\n    setNewTags(_tags)\r\n    setIsTouched(true)\r\n  }\r\n  return (\r\n    <Space wrap>\r\n      {newTags.map((tag, index) => {\r\n        return index === editableIndex ? (\r\n          <RenderEditField\r\n            dropdowns={dropdowns}\r\n            tag={tag}\r\n            index={index}\r\n            editTag={editTag}\r\n            setEditableIndex={setEditableIndex}\r\n            editInputRef={editInputRef}\r\n          />\r\n        ) : (\r\n          <Tag closable onClose={(e) => removeTag(e, tag)}>\r\n            <span onDoubleClick={() => setEditableIndex(index)}>{tag}</span>\r\n          </Tag>\r\n        )\r\n      })}\r\n      {visibleInput ? (\r\n        <RenderAddField\r\n          dropdowns={dropdowns}\r\n          addTag={addTag}\r\n          inputRef={inputRef}\r\n        />\r\n      ) : (\r\n        <StyledAddButton onClick={() => setVisibleInput(true)} color=\"cyan\">\r\n          <PlusOutlined /> New\r\n        </StyledAddButton>\r\n      )}\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst RenderEditField = (props) => {\r\n  if (props.dropdowns.length > 0) {\r\n    return (\r\n      <AutoSelect\r\n        value={props.tag}\r\n        options={[...props.dropdowns]}\r\n        onChange={(value) => {\r\n          props.editTag(value, props.index)\r\n          props.setEditableIndex(null)\r\n        }}\r\n        onBlur={() => props.setEditableIndex(null)}\r\n        onPressEnter={() => props.setEditableIndex(null)}\r\n        ref={props.editInputRef}\r\n      />\r\n    )\r\n  } else {\r\n    return (\r\n      <Input\r\n        value={props.tag}\r\n        ref={props.editInputRef}\r\n        onChange={(e) => {\r\n          props.editTag(e.target.value, props.index)\r\n        }}\r\n        onBlur={() => props.setEditableIndex(null)}\r\n        onPressEnter={() => props.setEditableIndex(null)}\r\n        ref={props.editInputRef}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst RenderAddField = (props) => {\r\n  if (props.dropdowns.length > 0) {\r\n    return (\r\n      <AutoSelect\r\n        options={[...props.dropdowns]}\r\n        onChange={(value) => {\r\n          props.addTag(value)\r\n        }}\r\n        onBlur={(value) => props.addTag(value)}\r\n        onPressEnter={(value) => props.addTag(value)}\r\n        ref={props.inputRef}\r\n      />\r\n    )\r\n  } else {\r\n    return (\r\n      <Input\r\n        onPressEnter={(e) => props.addTag(e.target.value)}\r\n        onBlur={(e) => props.addTag(e.target.value)}\r\n        size=\"small\"\r\n        ref={props.inputRef}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst StyledAddButton = styled(Tag)`\r\n  cursor: pointer;\r\n`\r\n\r\nexport default EditableTag\r\n\r\n// <AutoSelect\r\n//   value={tag}\r\n//   options={[\"Dashboard\", \"Ronac\"]}\r\n//   onChange={(value) => {\r\n//     editTag(value, index)\r\n//     setEditableIndex(null)\r\n//   }}\r\n//   onBlur={() => setEditableIndex(null)}\r\n//   onPressEnter={() => setEditableIndex(null)}\r\n// />\r\n// <Input\r\n//   value={tag}\r\n//   ref={editInputRef}\r\n//   onChange={(e) => {\r\n//     editTag(e.target.value, index)\r\n//   }}\r\n//   onBlur={() => setEditableIndex(null)}\r\n//   onPressEnter={() => setEditableIndex(null)}\r\n// />\r\n\r\n// <AutoSelect\r\n//   options={[\"Libis\", \"Ronac\"]}\r\n//   onChange={(value) => addTag(value)}\r\n//   onPressEnter={(value) => addTag(value)}\r\n//   onBlur={(value) => addTag(value)}\r\n// />\r\n// <Input\r\n//   onPressEnter={(e) => addTag(e.target.value)}\r\n//   onBlur={(e) => addTag(e.target.value)}\r\n//   size=\"small\"\r\n//   ref={inputRef}\r\n// />\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useQuery.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\useModifiedCount.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomPopConfirm.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringField.js",["788","789"],"import CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\nfunction StringField({ ServiceClass, name, ...rest }) {\r\n  const [value, setValue] = useState(\"\")\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  useEffect(() => {\r\n    if (rest?.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest?.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <CustomInput\r\n        placeholder={ServiceClass.LABELS[name]}\r\n        value={value}\r\n        onChange={handleChange}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StringField\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringFieldArray.js",["790","791"],"import { Space } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport EditableTag from \"../EditableTagGroup\"\r\n\r\nfunction StringFieldArray({ ServiceClass, name, ...rest }) {\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [tags, setTags] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (isTouched === true) {\r\n      rest.handleModification(tags, name)\r\n    }\r\n  }, [isTouched, tags])\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [ServiceClass])\r\n\r\n  const loadDropdowns = async () => {\r\n    if (typeof ServiceClass.getDropdowns === \"undefined\") return\r\n    const _dropdowns = await ServiceClass.getDropdowns()\r\n    if (typeof _dropdowns[name] !== \"undefined\") {\r\n      setDropdowns(_dropdowns[name])\r\n    }\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\">\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <EditableTag\r\n        setIsTouched={setIsTouched}\r\n        tags={rest.collectionData[name]}\r\n        exposeData={(data) => setTags(data)}\r\n        dropdowns={dropdowns} //if field contains data dropdowns when modifying tags, The element should be select if contains a dropdown otherwise input if not.\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default StringFieldArray\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\BooleanField.js",["792","793"],"import { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\nfunction BooleanField({ ServiceClass, name, ...rest }) {\r\n  const [value, setValue] = useState(\"\")\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  useEffect(() => {\r\n    if (rest.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  const handleChange = (value) => {\r\n    setValue(value)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  return (\r\n    <Space direction=\"vertical\">\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <Space>\r\n        <Switch checked={value} onChange={handleChange} />\r\n        {value ? \"Active\" : \"Inactive\"}\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default BooleanField\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\FormHandlerAdd.js",["794","795","796","797","798","799","800"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport {\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport EditableTagGroup from \"../EditableTagGroup\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport useModifiedCount from \"./useModifiedCount\"\r\nimport CustomPopConfirm from \"Components/Commons/CustomPopConfirm\"\r\nimport StringField from \"./StringField\"\r\nimport StringFieldArray from \"./StringFieldArray\"\r\nimport BooleanField from \"./BooleanField\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nfunction FormHandlerAdd({ ServiceClass, back, formSave = () => {} }) {\r\n  const [defaultData, setDefaultData] = useState()\r\n  const [properties, setProperties] = useState([])\r\n  const [modifiedData, setModifiedData] = useState({})\r\n  useEffect(() => {\r\n    if (ServiceClass.PROPERTIES.length > 0) {\r\n      const newProperties = ServiceClass.PROPERTIES.filter(\r\n        (field) => field !== \"_id\"\r\n      )\r\n\r\n      if (ServiceClass.COLLECTION_NAME === UsersClass.COLLECTION_NAME) {\r\n        // includes the _id property if it is user class\r\n        newProperties.splice(0, 0, ServiceClass._ID)\r\n      }\r\n      setProperties(newProperties)\r\n\r\n      const _defaultData = {} // set some default value to prevent error when the fields do not have an input\r\n      for (const key of newProperties) {\r\n        switch (ServiceClass.TYPES[key]) {\r\n          case STRING_TYPE:\r\n            _defaultData[key] = \"\"\r\n            break\r\n          case ARRAY_OF_STRING_TYPE:\r\n            _defaultData[key] = []\r\n            break\r\n          case ARRAY_OF_OBJECT_TYPE:\r\n            _defaultData[key] = []\r\n            break\r\n          case BOOLEAN_TYPE:\r\n            _defaultData[key] = true\r\n            break\r\n          default:\r\n            _defaultData[key] = \"\"\r\n        }\r\n      }\r\n      setDefaultData(_defaultData)\r\n    }\r\n  }, [ServiceClass])\r\n\r\n  const handleModification = (value, name) => {\r\n    const _modifiedData = { ...modifiedData }\r\n    _modifiedData[name] = value\r\n    setModifiedData(_modifiedData)\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    if (ServiceClass.COLLECTION_NAME === UsersClass.COLLECTION_NAME) {\r\n      await ServiceClass.setData(modifiedData[ServiceClass._ID], {\r\n        ...defaultData,\r\n        ...modifiedData,\r\n      })\r\n      back()\r\n      return\r\n    }\r\n    // if the collection is not equal to user this function will be trigger\r\n    await ServiceClass.addData({\r\n      ...defaultData,\r\n      ...modifiedData,\r\n    })\r\n    back()\r\n  }\r\n  return (\r\n    <>\r\n      <StyledContainer>\r\n        <Header back={back} modifiedData={modifiedData} />\r\n        <StyledFormContainer>\r\n          <StyledForm direction=\"vertical\">\r\n            {properties.map((name) => {\r\n              switch (ServiceClass.TYPES[name]) {\r\n                case STRING_TYPE:\r\n                  return (\r\n                    <StringField\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n                case ARRAY_OF_STRING_TYPE:\r\n                  return (\r\n                    <StringFieldArray\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n                case ARRAY_OF_OBJECT_TYPE:\r\n                  return <div>I am array of object</div>\r\n                case BOOLEAN_TYPE:\r\n                  return (\r\n                    <BooleanField\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n              }\r\n              return (\r\n                <StringField\r\n                  ServiceClass={ServiceClass}\r\n                  collectionData={defaultData}\r\n                  name={name}\r\n                  handleModification={handleModification}\r\n                />\r\n              )\r\n            })}\r\n            <ActionButtons\r\n              modifiedData={modifiedData}\r\n              back={back}\r\n              handleSave={handleSave}\r\n            />\r\n          </StyledForm>\r\n        </StyledFormContainer>\r\n      </StyledContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Header = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledHeader>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{ Icon: <ArrowLeftOutlined />, shape: \"circle\" }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      Form Data\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nconst ActionButtons = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledActionContainer>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{\r\n          label: \"Cancel\",\r\n          danger: true,\r\n          disabled: modifiedCount > 0 ? false : true,\r\n        }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      <MainButton\r\n        label=\"Save\"\r\n        disabled={modifiedCount > 0 ? false : true}\r\n        onClick={props.handleSave}\r\n      />\r\n    </StyledActionContainer>\r\n  )\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default FormHandlerAdd\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\moduleList.js",["801"],"// import { menuData } from \"Components/Features/Sidenav/hook\"\r\n\r\nimport menuData from \"Components/Features/Sidenav/menuData\"\r\n\r\nexport default function () {\r\n  const menuList = []\r\n  for (const obj of menuData([])) {\r\n    menuList.push(obj.title)\r\n    for (const subObj of obj.subMenu) {\r\n      menuList.push(subObj.title)\r\n    }\r\n  }\r\n  return menuList\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\menuData.js",["802","803","804"],"import {\r\n  BRANCH_MASTERFILE,\r\n  CUSTOMER_REPORTS,\r\n  DAILY_REPORTS,\r\n  DASHBOARD,\r\n  DIRECT_AND_THIRD_PARTY,\r\n  DISCOUNT_OTHERS,\r\n  DROPDOWN_MASTERFILE,\r\n  GRILL_RESERVATION,\r\n  INCIDENT_REPORTS,\r\n  INVENTORY,\r\n  LABEL,\r\n  MASTER_DATA,\r\n  PAYMENT_TRANSACTION,\r\n  PRODUCTS_MASTERFILE,\r\n  REPORTS,\r\n  ROLES_MASTERFILE,\r\n  TRANSACTION,\r\n  USER_MASTERFILE,\r\n} from \"Constants/pathNames\"\r\nimport React from \"react\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport {\r\n  DashboardOutlined,\r\n  SettingOutlined,\r\n  FolderOutlined,\r\n} from \"@ant-design/icons\"\r\n\r\nexport default function (modules) {\r\n  return [\r\n    {\r\n      title: LABEL[DASHBOARD],\r\n      key: DASHBOARD,\r\n      dataKey: DASHBOARD,\r\n      Icon: <DashboardOutlined />,\r\n      active: true,\r\n      display: modules.includes(LABEL[DASHBOARD]),\r\n      component: MainPage,\r\n      path: \"/dashboard\",\r\n      subMenu: [\r\n        {\r\n          title: LABEL[GRILL_RESERVATION],\r\n          key: GRILL_RESERVATION,\r\n          dataKey: GRILL_RESERVATION,\r\n          active: true,\r\n          path: \"/dashboard/grillReservation\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[GRILL_RESERVATION]),\r\n        },\r\n        {\r\n          title: LABEL[PAYMENT_TRANSACTION],\r\n          key: PAYMENT_TRANSACTION,\r\n          dataKey: PAYMENT_TRANSACTION,\r\n          active: false,\r\n          path: \"/dashboard/paymentTransaction\",\r\n          component: DashboardTransactionPage,\r\n          display: modules.includes(LABEL[PAYMENT_TRANSACTION]),\r\n        },\r\n        {\r\n          title: LABEL[INVENTORY],\r\n          key: INVENTORY,\r\n          dataKey: INVENTORY,\r\n          active: false,\r\n          path: \"/dashboard/inventory\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[INVENTORY]),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: LABEL[REPORTS],\r\n      key: REPORTS,\r\n      dataKey: REPORTS,\r\n      Icon: <FolderOutlined />,\r\n      active: false,\r\n      flex: 1,\r\n      display: modules.includes(LABEL[REPORTS]),\r\n      path: `/${REPORTS}`,\r\n      component: MainPage,\r\n      subMenu: [\r\n        // {\r\n        //   title: LABEL[TRANSACTION],\r\n        //   key: TRANSACTION,\r\n        //   dataKey: TRANSACTION,\r\n        //   active: false,\r\n        //   path: \"/reports/transaction\",\r\n        //   component: MainPage,\r\n        //   display: modules.includes(LABEL[TRANSACTION]),\r\n        // },\r\n        // {\r\n        //   title: LABEL[DIRECT_AND_THIRD_PARTY],\r\n        //   key: DIRECT_AND_THIRD_PARTY,\r\n        //   dataKey: DIRECT_AND_THIRD_PARTY,\r\n        //   active: false,\r\n        //   path: \"/reports/directAndThirdParty\",\r\n        //   component: MainPage,\r\n        //   display: modules.includes(LABEL[DIRECT_AND_THIRD_PARTY]),\r\n        // },\r\n        {\r\n          title: LABEL[INCIDENT_REPORTS],\r\n          key: INCIDENT_REPORTS,\r\n          dataKey: INCIDENT_REPORTS,\r\n          active: false,\r\n          path: \"/reports/incidentReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[INCIDENT_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[DAILY_REPORTS],\r\n          key: DAILY_REPORTS,\r\n          dataKey: DAILY_REPORTS,\r\n          active: false,\r\n          path: \"/reports/dailyReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DAILY_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[CUSTOMER_REPORTS],\r\n          key: CUSTOMER_REPORTS,\r\n          dataKey: CUSTOMER_REPORTS,\r\n          active: false,\r\n          path: \"/reports/customerReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[CUSTOMER_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[DISCOUNT_OTHERS],\r\n          key: DISCOUNT_OTHERS,\r\n          dataKey: DISCOUNT_OTHERS,\r\n          active: false,\r\n          path: \"/reports/analyticsDiscounts\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DISCOUNT_OTHERS]),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: LABEL[MASTER_DATA],\r\n      key: MASTER_DATA,\r\n      dataKey: MASTER_DATA,\r\n      Icon: <SettingOutlined />,\r\n      active: false,\r\n      display: modules.includes(LABEL[MASTER_DATA]),\r\n      path: `/${MASTER_DATA}`,\r\n      component: MainPage,\r\n      subMenu: [\r\n        {\r\n          title: LABEL[USER_MASTERFILE],\r\n          key: USER_MASTERFILE,\r\n          dataKey: USER_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/userMasterFile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[USER_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[BRANCH_MASTERFILE],\r\n          key: BRANCH_MASTERFILE,\r\n          dataKey: BRANCH_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/branchMasterFile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[BRANCH_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[DROPDOWN_MASTERFILE],\r\n          key: DROPDOWN_MASTERFILE,\r\n          dataKey: DROPDOWN_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/dropdownMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DROPDOWN_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[ROLES_MASTERFILE],\r\n          key: ROLES_MASTERFILE,\r\n          dataKey: ROLES_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/rolesMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[ROLES_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[PRODUCTS_MASTERFILE],\r\n          key: PRODUCTS_MASTERFILE,\r\n          dataKey: PRODUCTS_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/productMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[PRODUCTS_MASTERFILE]),\r\n        },\r\n      ],\r\n    },\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderForm.js",["805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824"],"import {\r\n  Card,\r\n  Col,\r\n  Row,\r\n  Space,\r\n  Tabs,\r\n  Table,\r\n  message,\r\n  Alert,\r\n  Spin,\r\n  Button,\r\n} from \"antd\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport React, { useEffect, useState, useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport {\r\n  ArrowLeftOutlined,\r\n  SaveOutlined,\r\n  EditFilled,\r\n  DeleteFilled,\r\n  ReloadOutlined,\r\n} from \"@ant-design/icons\"\r\nimport { Flex } from \"../Styles\"\r\nimport OrderDetails from \"./OrderDetails\"\r\nimport ProductPurchased from \"./ProductPurchased\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport DiscountAndOthersDialog from \"./DiscountAndOthersDialog\"\r\nimport {\r\n  calculateBalanceScheduler,\r\n  calculateDiscountScheduler,\r\n  calculateTotalDueMinusDiscount,\r\n  calculateTotalPayments,\r\n  producedPaymentList,\r\n} from \"Helpers/collectionData\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport PaymentForm from \"./PaymentForm\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport useOrderNoCounter from \"Hooks/hookOrderNoCounter\"\r\nimport UploadFiles from \"../Upload\"\r\nimport { useGetUploads } from \"../Upload/useGetUploads\"\r\nfunction OrderForm({ back, formType, modifiedData = () => {} }) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { handleRemove, handleUpload } = useGetUploads()\r\n  const [generateNewOrder] = useOrderNoCounter()\r\n  const [dropdownCollections] = useGetDocuments(DropdownsClass)\r\n  const [orderData, loadOrderData] = useGetDocumentById(SchedulersClass)\r\n  const query = useQuery()\r\n  const id = query.get(\"id\")\r\n  const channelOption = query.get(\"channelOption\")\r\n  const orderNoHeader = orderData?.orderNo ? `(${orderData?.orderNo})` : \"\"\r\n  const tabs = [\r\n    SchedulersClass.ORDER_VIA,\r\n    SchedulersClass.ORDER_VIA_PARTNER,\r\n    SchedulersClass.ORDER_VIA_WEBSITE,\r\n  ]\r\n  const [channel, setChannel] = useState(tabs[0])\r\n  const [isDiscountReset, setIsDiscountReset] = useState(false)\r\n  const [sched, setSched] = useState({})\r\n  const [paymentList, setPaymentList] = useState([])\r\n  const [uploads, setUploads] = useState({ removedPaths: [], fileList: [] })\r\n\r\n  const [totalPayments, setTotalPayments] = useState(0) // for displaying data purposes only\r\n  const [totalDue, setTotalDue] = useState(0) // for displaying data purposes only\r\n  const [discounts, setDiscounts] = useState(0) // for displaying data purposes only\r\n  const [balanceDue, setBalanceDue] = useState(0) // for displaying data purposes only\r\n\r\n  const [loadingButton, setLoadingButton] = useState(false)\r\n\r\n  const [fixedDeduction, setFixedDeduction] = useState({})\r\n\r\n  console.log(\"sched\", sched)\r\n  console.log(\"paymentList\", paymentList)\r\n  console.log(\"removedPaths\", uploads?.removedPaths)\r\n  console.log(\"fileList\", uploads?.fileList)\r\n\r\n  const handleTab = (value) => {\r\n    setChannel(value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const _totalDue = calculateTotalDueMinusDiscount({\r\n      ...sched,\r\n      [SchedulersClass.PARTIALS]: paymentList,\r\n    })\r\n    const _balanceDue = calculateBalanceScheduler({\r\n      ...sched,\r\n      [SchedulersClass.PARTIALS]: paymentList,\r\n      // ...fixedDeduction,\r\n    })\r\n    const _totalPayments = calculateTotalPayments({\r\n      ...sched,\r\n      [SchedulersClass.PARTIALS]: paymentList,\r\n    })\r\n    const _discounts = calculateDiscountScheduler({ ...sched })\r\n    console.log(\"_discounts\", _discounts)\r\n    setTotalDue(_totalDue)\r\n    setBalanceDue(_balanceDue)\r\n    setTotalPayments(_totalPayments)\r\n    setDiscounts(_discounts)\r\n  }, [paymentList, sched /*fixedDeduction*/])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      Object.keys(sched?.others || {}).length === 0 &&\r\n      Object.keys(orderData).length > 0 &&\r\n      !isDiscountReset\r\n    ) {\r\n      setIsDiscountReset(true)\r\n      message.info(\"Discount/Others has been reset\")\r\n    }\r\n  }, [sched])\r\n\r\n  useEffect(() => {\r\n    if (typeof sched[SchedulersClass.TOTAL_DUE] !== \"undefined\") {\r\n      if (sched[SchedulersClass.ORDER_VIA_WEBSITE] === \"[ ZAP ] ZAP\") {\r\n        const _fixedDeduction = orderData[SchedulersClass.FIXED_DEDUCTION] || {}\r\n        const percentage = 0.95\r\n        const amountDeduction = 10\r\n        const _totalAmount = sched?.totalDue * percentage - amountDeduction\r\n        // setFixedDeduction({\r\n        //   [SchedulersClass.FIXED_DEDUCTION]: {\r\n        //     percentage,\r\n        //     amountDeduction,\r\n        //     totalAmountDeducted: sched?.totalDue - _totalAmount,\r\n        //   },\r\n        // })\r\n        if (sched[SchedulersClass.TOTAL_DUE] === 0) {\r\n          setFixedDeduction({})\r\n        }\r\n      } else {\r\n        setFixedDeduction({})\r\n      }\r\n    }\r\n  }, [sched])\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      loadOrderData(id)\r\n      setSched({ [SchedulersClass._ID]: id })\r\n    }\r\n  }, [id])\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(orderData).length > 0) {\r\n      if (orderData[tabs[0]]) {\r\n        setChannel(tabs[0])\r\n      }\r\n      if (orderData[tabs[1]]) {\r\n        setChannel(tabs[1])\r\n      }\r\n      if (orderData[tabs[2]]) {\r\n        setChannel(tabs[2])\r\n      }\r\n      const _sched = {\r\n        [SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS]:\r\n          orderData[SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS] || {},\r\n        [SchedulersClass.OTHERS]: orderData[SchedulersClass.OTHERS] || {},\r\n        [SchedulersClass.TOTAL_DUE]: orderData[SchedulersClass.TOTAL_DUE] || 0,\r\n        [SchedulersClass.ORDER_VIA]: orderData[SchedulersClass.ORDER_VIA],\r\n        [SchedulersClass.ORDER_VIA_PARTNER]:\r\n          orderData[SchedulersClass.ORDER_VIA_PARTNER],\r\n        [SchedulersClass.ORDER_VIA_WEBSITE]:\r\n          orderData[SchedulersClass.ORDER_VIA_WEBSITE],\r\n        [SchedulersClass._ID]: id,\r\n        [SchedulersClass.FIXED_DEDUCTION]: {}, // replace fixed deduction without data\r\n      }\r\n\r\n      setSched(_sched)\r\n      const _totalDue = calculateTotalDueMinusDiscount(orderData)\r\n      const _balanceDue = calculateBalanceScheduler(orderData)\r\n      const _totalPayments = calculateTotalPayments(orderData)\r\n      const _discounts = calculateDiscountScheduler(orderData)\r\n      setTotalDue(_totalDue)\r\n      setBalanceDue(_balanceDue)\r\n      setTotalPayments(_totalPayments)\r\n      setDiscounts(_discounts)\r\n      const payments = producedPaymentList(orderData)\r\n      const sortedPayments = payments.sort((a, b) => {\r\n        return b.date - a.date\r\n      })\r\n      setPaymentList(sortedPayments)\r\n    } else {\r\n      const _sched = { ...sched }\r\n      if (formType === \"add\") {\r\n        _sched[SchedulersClass.DATE_ORDER_PLACED] = new Date() // this is for default data of dates\r\n        _sched[SchedulersClass.DATE_START] = new Date() // this is for default data of dates\r\n        _sched[SchedulersClass.DATE_END] = new Date() //  this is for default data of dates\r\n        _sched[SchedulersClass.BRANCH] = user.branchSelected\r\n      }\r\n      setSched(_sched)\r\n    }\r\n  }, [orderData, user])\r\n\r\n  useEffect(() => {\r\n    if (channelOption === \"partnerMerchant\")\r\n      setChannel(SchedulersClass.ORDER_VIA_PARTNER)\r\n    if (channelOption === \"website\") {\r\n      setChannel(SchedulersClass.ORDER_VIA_WEBSITE)\r\n      setSched({ ...sched, [SchedulersClass.ORDER_VIA_WEBSITE]: \"[ ZAP ] ZAP\" })\r\n    }\r\n    if (channelOption === \"direct\") setChannel(SchedulersClass.ORDER_VIA)\r\n  }, [channelOption])\r\n\r\n  console.log(\"fixedDedyctuib\", sched)\r\n  const handleSave = async () => {\r\n    if (formType === \"modified\") {\r\n      const data = {\r\n        ...sched,\r\n        [SchedulersClass.PARTIALS]: paymentList,\r\n        [SchedulersClass.SUBJECT]: sched[SchedulersClass.CUSTOMER],\r\n        ...fixedDeduction,\r\n      }\r\n      if (paymentList.length > 0) {\r\n        console.log(\"date payment\", paymentList[0].date)\r\n        data[SchedulersClass.DATE_PAYMENT] = paymentList[0].date\r\n      }\r\n      if (data[SchedulersClass.PARTIALS]?.length > 0) {\r\n        const _partialDates = []\r\n        data[SchedulersClass.PARTIALS].forEach((pObj) => {\r\n          _partialDates.push(formatDateDash(pObj?.date || new Date()))\r\n        })\r\n        data[SchedulersClass.PARTIAL_DATES_STRING] = _partialDates\r\n      }\r\n      const result = await SchedulersClass.updateDataById(id, data)\r\n      modifiedData(data)\r\n      setLoadingButton(true)\r\n      handleRemove(uploads?.removedPaths)\r\n      await handleUpload(uploads?.fileList, id)\r\n      setLoadingButton(false)\r\n      back()\r\n    } else {\r\n      if (user.branchSelected) {\r\n        const newOrderNo = await generateNewOrder(user.branchSelected)\r\n        console.log(\"generatedOrderNo\", newOrderNo)\r\n        const newSched = {\r\n          ...sched,\r\n          [SchedulersClass.PARTIALS]: paymentList,\r\n          [SchedulersClass.ORDER_NO]: newOrderNo,\r\n          [SchedulersClass.BRANCH]: user.branchSelected,\r\n          ...fixedDeduction,\r\n        }\r\n        // this is for added partial dates string\r\n        if (newSched[SchedulersClass.PARTIALS]?.length > 0) {\r\n          const _partialDates = []\r\n          newSched[SchedulersClass.PARTIALS].forEach((pObj) => {\r\n            _partialDates.push(formatDateDash(pObj?.date || new Date()))\r\n          })\r\n          newSched[SchedulersClass.PARTIAL_DATES_STRING] = _partialDates\r\n        }\r\n\r\n        try {\r\n          console.log(\"newSched\", { ...newSched })\r\n          if (paymentList.length > 0) {\r\n            console.log(\"date payment\", paymentList[0].date)\r\n            newSched[SchedulersClass.DATE_PAYMENT] = paymentList[0].date\r\n          }\r\n          const result = await SchedulersClass.addData(newSched)\r\n          modifiedData(result)\r\n          setLoadingButton(true)\r\n          handleRemove(uploads?.removedPaths)\r\n          await handleUpload(uploads?.fileList, result?._id)\r\n          setLoadingButton(false)\r\n          back()\r\n          console.log(\"new ID\", result)\r\n          back()\r\n        } catch (error) {\r\n          console.log(\"error\", error)\r\n          message.error(\"Oops something went wrong\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleRemovePayment = (_index) => {\r\n    const _paymentList = paymentList.filter((obj, index) => index !== _index)\r\n    setPaymentList(_paymentList)\r\n  }\r\n\r\n  if (formType === \"modified\" && Object.keys(orderData).length === 0) {\r\n    return (\r\n      <StyledContainer>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            width: \"100%\",\r\n            height: \"80vh\",\r\n            backgroundColor: \"transparent\",\r\n            bottom: 0,\r\n          }}\r\n        >\r\n          <Spin size=\"large\" />\r\n        </div>\r\n        {/* <URLNotFound /> */}\r\n      </StyledContainer>\r\n    )\r\n  } else {\r\n    return (\r\n      <StyledContainer>\r\n        <Space\r\n          style={{\r\n            width: \"100%\",\r\n            justifyContent: \"space-between\",\r\n            padding: \".5rem\",\r\n          }}\r\n          wrap\r\n        >\r\n          <Space>\r\n            <MainButton\r\n              shape=\"circle\"\r\n              Icon={<ArrowLeftOutlined />}\r\n              onClick={back}\r\n            />\r\n            {`${\r\n              formType === \"add\" ? \"Add \" : \"Modify \"\r\n            }Order Form ${orderNoHeader}`}\r\n          </Space>\r\n\r\n          <Space wrap>\r\n            {tabs.map((key) => {\r\n              return (\r\n                <MainButton\r\n                  label={SchedulersClass.LABELS[key]}\r\n                  type={channel === key ? \"primary\" : \"default\"}\r\n                  shape=\"square\"\r\n                  onClick={() => handleTab(key)}\r\n                />\r\n              )\r\n            })}\r\n          </Space>\r\n        </Space>\r\n\r\n        <Row gutter={[16, 16]}>\r\n          <Col xs={24} sm={24} md={24} xl={6} lg={12}>\r\n            <OrderDetails\r\n              channel={channel}\r\n              modifiedData={(orderDetailsData) => {\r\n                setSched({ ...sched, ...orderDetailsData, _id: id })\r\n              }}\r\n              orderData={orderData}\r\n              tabs={tabs}\r\n              branch={user?.branchSelected}\r\n            />\r\n          </Col>\r\n\r\n          <Col xs={24} sm={24} md={24} lg={12} xl={6}>\r\n            <ProductPurchased\r\n              modifiedData={(products) => {\r\n                console.log(\"sdfsdprod\", products)\r\n                setSched({ ...sched, ...products, _id: id })\r\n              }}\r\n              orderData={orderData}\r\n              orderVia={sched[SchedulersClass.ORDER_VIA_PARTNER]}\r\n            />\r\n            <br />\r\n            <Card\r\n              title=\"Discounts and Others\"\r\n              extra={\r\n                Object.keys(sched[SchedulersClass.OTHERS] || {}).length > 0 ? (\r\n                  <MainButton\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    type=\"text\"\r\n                    danger\r\n                    Icon={<DeleteFilled />}\r\n                    onClick={() => {\r\n                      setSched({ ...sched, [SchedulersClass.OTHERS]: {} })\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <></>\r\n                )\r\n              }\r\n            >\r\n              <Space\r\n                style={{\r\n                  justifyContent: \"space-between\",\r\n                  width: \"100%\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <Space direction=\"vertical\">\r\n                  {Object.keys(sched?.others || {}).length > 0 && (\r\n                    <Space direction=\"vertical\">\r\n                      <CustomTitle\r\n                        typographyType=\"text\"\r\n                        label={Object.keys(sched?.others || {}).map(\r\n                          (key) => key\r\n                        )}\r\n                        type=\"secondary\"\r\n                      />\r\n                      <CustomTitle\r\n                        typographyType=\"text\"\r\n                        label={Object.keys(sched?.others || {}).map((key) =>\r\n                          thousandsSeparators(\r\n                            Number(sched?.others[key]).toFixed(2)\r\n                          )\r\n                        )}\r\n                      />\r\n                    </Space>\r\n                  )}\r\n\r\n                  {(sched[SchedulersClass.ORDER_VIA_WEBSITE] ===\r\n                    \"[ ZAP ] ZAP\" &&\r\n                    totalDue > 0) ||\r\n                  (orderData[SchedulersClass.ORDER_VIA_WEBSITE] ===\r\n                    \"[ ZAP ] ZAP\" &&\r\n                    totalDue > 0) ? (\r\n                    <Space direction=\"vertical\">\r\n                      {/* <CustomTitle\r\n                        typographyType=\"text\"\r\n                        label=\"ZAP 5% + Fixed Fee 10\"\r\n                        type=\"secondary\"\r\n                      />\r\n                      <CustomTitle\r\n                        typographyType=\"text\"\r\n                        label={\r\n                          fixedDeduction[SchedulersClass.FIXED_DEDUCTION]\r\n                            ?.totalAmountDeducted\r\n                        }\r\n                      /> */}\r\n                    </Space>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </Space>\r\n                {/* <ActionButton label=\"Less\" danger /> */}\r\n                <DiscountAndOthersDialog\r\n                  orderNo={orderData?.orderNo}\r\n                  formFields={\r\n                    sched[SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS] || {}\r\n                  }\r\n                  others={sched[SchedulersClass.OTHERS] || {}}\r\n                  totalDue={sched.totalDue}\r\n                  modifiedData={(additional, others = \"\") => {\r\n                    setIsDiscountReset(false)\r\n                    setSched({\r\n                      ...sched,\r\n                      [SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS]: additional,\r\n                      [SchedulersClass.OTHERS]: {\r\n                        [others]: additional[others]?.amount || 0,\r\n                      },\r\n                    })\r\n                  }}\r\n                />\r\n              </Space>\r\n            </Card>\r\n            <br />\r\n            <Card title=\"Attachments\">\r\n              <div\r\n                style={{\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <UploadFiles\r\n                  id={id}\r\n                  modifiedData={(fileLists, removedPaths) => {\r\n                    setUploads({\r\n                      fileList: fileLists,\r\n                      removedPaths: removedPaths,\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={24} sm={24} md={24} lg={24} xl={12}>\r\n            <Card\r\n              title=\"Payment Details\"\r\n              actions={[\r\n                <Due label=\"Total Payment\" value={totalPayments} />,\r\n                <Due label=\"Balance Due\" value={balanceDue} />,\r\n                <PaymentForm\r\n                  paymentList={paymentList}\r\n                  index={null}\r\n                  modifiedData={(data) => {\r\n                    setPaymentList(data)\r\n                  }}\r\n                  fixedDeduction={\r\n                    fixedDeduction[SchedulersClass.FIXED_DEDUCTION]\r\n                      ?.totalAmountDeducted || 0\r\n                  }\r\n                  balanceDue={balanceDue}\r\n                  enabledButton={balanceDue <= 0 ? false : true}\r\n                  dropdownCollections={dropdownCollections}\r\n                />,\r\n              ]}\r\n              extra={\r\n                balanceDue < 0 ? (\r\n                  <Alert\r\n                    message=\"Conflicts: Balance Due is Negative\"\r\n                    type=\"error\"\r\n                    showIcon\r\n                  />\r\n                ) : (\r\n                  <MainButton\r\n                    shape=\"circle\"\r\n                    Icon={<ReloadOutlined />}\r\n                    type=\"default\"\r\n                    onClick={() => {\r\n                      if (formType === \"modified\") {\r\n                        const _paymentList = producedPaymentList(orderData)\r\n                        setPaymentList(_paymentList)\r\n                      }\r\n                    }}\r\n                  />\r\n                )\r\n              }\r\n            >\r\n              <Table\r\n                size=\"small\"\r\n                scroll={{ x: \"calc(320px + 50%)\", y: \"50vh\" }}\r\n                pagination={false}\r\n                columns={[\r\n                  {\r\n                    title: \"Date\",\r\n                    dataIndex: \"date\",\r\n                    width: 100,\r\n                    render: (data) => {\r\n                      return formatDateDash(data)\r\n                    },\r\n                  },\r\n                  {\r\n                    title: \"OR #\",\r\n                    dataIndex: SchedulersClass.OR_NO,\r\n                    width: 100,\r\n                  },\r\n                  {\r\n                    title: \"SOA #\",\r\n                    dataIndex: SchedulersClass.SOA_NUMBER,\r\n                    width: 100,\r\n                  },\r\n                  {\r\n                    title: \"MOP\",\r\n                    dataIndex: SchedulersClass.MODE_PAYMENT,\r\n                    width: 150,\r\n                  },\r\n                  {\r\n                    title: \"Source\",\r\n                    dataIndex: SchedulersClass.SOURCE,\r\n                    width: 150,\r\n                  },\r\n                  {\r\n                    title: \"Ref #\",\r\n                    dataIndex: SchedulersClass.REF_NO,\r\n                    width: 150,\r\n                  },\r\n                  {\r\n                    title: \"Receiving Acct\",\r\n                    dataIndex: SchedulersClass.ACCOUNT_NUMBER,\r\n                    width: 150,\r\n                  },\r\n                  {\r\n                    title: \"Amount Paid\",\r\n                    dataIndex: \"amount\",\r\n                    align: \"right\",\r\n                    width: 130,\r\n                    render: (data) => {\r\n                      return thousandsSeparators(Number(data).toFixed(2))\r\n                    },\r\n                  },\r\n                  // {\r\n                  //   title: \"Payment Notes\",\r\n                  //   dataIndex: SchedulersClass.PAYMENT_NOTES,\r\n                  // },\r\n                  {\r\n                    title: \"\",\r\n                    dataIndex: \"actions\",\r\n                    width: 80,\r\n                    render: (value, record, index) => {\r\n                      return (\r\n                        <Space>\r\n                          <PaymentForm\r\n                            paymentList={paymentList}\r\n                            buttonSize=\"small\"\r\n                            ButtonIcon={<EditFilled />}\r\n                            buttonShape=\"circle\"\r\n                            buttonLabel=\"\" // value is equal to \"\" to disable default label value Add Product\r\n                            padding=\"rem\"\r\n                            index={index}\r\n                            modifiedData={(data) => {\r\n                              setPaymentList(data)\r\n                            }}\r\n                            balanceDue={balanceDue} // use for conditioning amount input of payment form only for add\r\n                            totalDue={totalDue} // use for conditioning amount input of payment form only for update\r\n                            discounts={discounts} // use for conditioning amount input of payment form for update\r\n                            dropdownCollections={dropdownCollections}\r\n                            fixedDeduction={\r\n                              fixedDeduction[SchedulersClass.FIXED_DEDUCTION]\r\n                                ?.totalAmountDeducted || 0\r\n                            }\r\n                          />\r\n                          <MainButton\r\n                            shape=\"circle\"\r\n                            Icon={<DeleteFilled />}\r\n                            size=\"small\"\r\n                            type=\"text\"\r\n                            danger\r\n                            onClick={() => handleRemovePayment(index)}\r\n                          />\r\n                        </Space>\r\n                      )\r\n                    },\r\n                  },\r\n                ]}\r\n                dataSource={[...paymentList]}\r\n              />\r\n            </Card>\r\n            <br />\r\n            <Card title=\"Transaction Summary\">\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                size=\"small\"\r\n                columns={[\r\n                  { title: \"Description\", dataIndex: \"description\" },\r\n                  { title: \"Amount\", dataIndex: \"amount\", align: \"right\" },\r\n                ]}\r\n                dataSource={[\r\n                  {\r\n                    description: \"Total Due\",\r\n                    amount: thousandsSeparators(\r\n                      (Number(sched?.totalDue) || 0).toFixed(2)\r\n                    ),\r\n                    // amount: thousandsSeparators(\r\n                    //   (Number(totalDue) + Number(discounts)).toFixed(2)\r\n                    // ),\r\n                  },\r\n                  {\r\n                    description: \"Discount / Others\",\r\n                    amount: discounts, //thousandsSeparators(Number(discounts).toFixed(2)),\r\n                  },\r\n                  {\r\n                    description: \"ZAP 5% + Fixed Fee 10\",\r\n                    amount: thousandsSeparators(\r\n                      Number(\r\n                        fixedDeduction[SchedulersClass.FIXED_DEDUCTION]\r\n                          ?.totalAmountDeducted || 0\r\n                      ).toFixed(2)\r\n                    ),\r\n                  },\r\n                  {\r\n                    description: \"Total Payment\",\r\n                    amount: thousandsSeparators(\r\n                      Number(totalPayments).toFixed(2)\r\n                    ),\r\n                  },\r\n                  {\r\n                    description: \"Balance Due\",\r\n                    amount: thousandsSeparators(Number(balanceDue).toFixed(2)),\r\n                  },\r\n                ]}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            right: \"3rem\",\r\n            bottom: \"1rem\",\r\n          }}\r\n        >\r\n          {Object.keys(sched).length > 0 && (\r\n            <Space style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\r\n              {loadingButton ? (\r\n                <MainButton\r\n                  size=\"large\"\r\n                  type=\"default\"\r\n                  Icon={<Spin />}\r\n                  shape=\"circle\"\r\n                />\r\n              ) : (\r\n                <MainButton\r\n                  label=\"Save\"\r\n                  Icon={<SaveOutlined />}\r\n                  size=\"large\"\r\n                  onClick={handleSave}\r\n                />\r\n              )}\r\n            </Space>\r\n          )}\r\n        </div>\r\n      </StyledContainer>\r\n    )\r\n  }\r\n}\r\n\r\nconst Due = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <span style={{ position: \"absolute\", fontSize: \"10px\" }}>\r\n        {props.label}\r\n      </span>\r\n      <span style={{ position: \"absolute\", top: \"1rem\", color: \"red\" }}>\r\n        {thousandsSeparators(Number(props.value).toFixed(2))}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ActionButton = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <MainButton label={props.label} type=\"default\" danger={props.danger} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StyledContainer = styled.div`\r\n  display: flex;\r\n  /* grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr; */\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: transparent;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default OrderForm\r\n// backgroundColor: \"#1890ff\"\r\n// backgroundColor: \"#1890ff\"\r\n// backgroundColor: \"#1890ff\"\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\usePaginate.js",["825","826","827"],"import React, { useState, useEffect, useContext } from \"react\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\nimport { Timestamp } from \"Services/firebase\"\r\n\r\n// this is default config = { bySort: true, customSort: [\"StartTime\": \"asc\" or \"desc\"]}\r\nfunction usePaginate(ServiceClass, config) {\r\n  const { setError, setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [lastVisible, setLastVisible] = useState(null)\r\n  const [dataSource, setDataSource] = useState([])\r\n  useEffect(() => {\r\n    if (lastVisible === null && user?.branchSelected) {\r\n      const branch = user?.branchSelected\r\n      loadData({}, branch)\r\n    }\r\n  }, [lastVisible, user])\r\n  const loadData = async (data = {}, branch, refresh = false) => {\r\n    if (Object.keys(data).length > 0) {\r\n      // this is for static data changes triggered from formHandler\r\n      const _dataIndex = dataSource.findIndex(\r\n        (d) => d[ServiceClass._ID] === data[ServiceClass._ID]\r\n      )\r\n      // this is for new added data in the table\r\n      if (_dataIndex < 0) {\r\n        let newData = [...dataSource]\r\n        const updatedData = { ...data }\r\n        if (ServiceClass.COLLECTION_NAME) {\r\n          updatedData[ServiceClass.DATE_START] = Timestamp.fromDate(\r\n            data[ServiceClass.DATE_START]\r\n          )\r\n          updatedData[ServiceClass.DATE_END] = Timestamp.fromDate(\r\n            data[ServiceClass.DATE_END]\r\n          )\r\n          updatedData[ServiceClass.DATE_ORDER_PLACED] = Timestamp.fromDate(\r\n            data[ServiceClass.DATE_ORDER_PLACED]\r\n          )\r\n          newData.unshift(updatedData)\r\n        }\r\n        setDataSource(newData)\r\n        return\r\n      }\r\n      const newData = arrayReplace(dataSource, _dataIndex, {\r\n        ...dataSource[_dataIndex],\r\n        ...data,\r\n      })\r\n      setDataSource(newData)\r\n      return\r\n    }\r\n\r\n    setIsLoading(true)\r\n    if (lastVisible && refresh === false) {\r\n      const [_lastVisible, colData = []] =\r\n        await ServiceClass.getNextPaginatedData(\r\n          lastVisible,\r\n          user?.branchSelected\r\n        )\r\n      if (colData.length > 0) {\r\n        const newData = [...dataSource, ...colData]\r\n        setDataSource(newData)\r\n        setLastVisible(_lastVisible)\r\n      }\r\n      setIsLoading(false)\r\n    } else {\r\n      // this will be the first load of data\r\n      const [_lastVisible, colData] = await ServiceClass.getPaginatedData(\r\n        branch\r\n      )\r\n      setDataSource(colData)\r\n      setLastVisible(_lastVisible)\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // const modifiedData = async (id) => {\r\n  //   const dataSourceCopy = [...dataSource]\r\n  //   const dataIndex = dataSourceCopy.findIndex((row) => row._id === id)\r\n  //   const dataObj = await FirestoreCommands.getDataById(\"schedules\", id)\r\n  //   if (dataObj) {\r\n  //     dataSourceCopy[dataIndex] = { ...dataObj }\r\n  //   }\r\n  //   setDataSource(dataSourceCopy)\r\n  // }\r\n\r\n  // return { dataSource, loadData }\r\n  return [dataSource, loadData, lastVisible]\r\n}\r\n\r\nexport default usePaginate\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\hooks.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\Scheduler.js",["828","829","830","831","832","833","834","835","836"],"import React, { useState, useEffect, useContext } from \"react\"\r\nimport { PrinterFilled, FilterFilled } from \"@ant-design/icons\"\r\nimport {\r\n  ScheduleComponent,\r\n  ViewDirective,\r\n  ViewsDirective,\r\n  Inject,\r\n  Week,\r\n  Month,\r\n  Agenda,\r\n  DragAndDrop,\r\n  Resize,\r\n  Day,\r\n  ResourcesDirective,\r\n  ResourceDirective,\r\n} from \"@syncfusion/ej2-react-schedule\"\r\nimport { DataManager, Predicate, Query } from \"@syncfusion/ej2-data\"\r\n// import db, { collection, onSnapshot, where, query } from \"Services/firebase\"\r\nimport {\r\n  collection,\r\n  getFirestore,\r\n  where,\r\n  query,\r\n  onSnapshot,\r\n} from \"firebase/firestore\"\r\nimport SchedulesClass from \"Services/Classes/SchedulesClass\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { Space, Tag, Table } from \"antd\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport {\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n} from \"Helpers/collectionData\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport Print from \"../Print\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport FilteringPanel from \"Components/Features/FilteringPanel\"\r\n\r\nconst db = getFirestore()\r\nconst CellTemplate = (props) => {\r\n  const [subject, setSubject] = useState(\"\")\r\n  useEffect(() => {\r\n    console.log(\"productData\", props)\r\n    const productOrders = []\r\n    const productList = producedProductListOfAllCodes(props?.productData)\r\n    for (const value of productList) {\r\n      if (typeof props[value] !== \"undefined\") {\r\n        if (Number(props[value]) > 0) {\r\n          productOrders.push(`${value}: ${props[value]}`)\r\n        }\r\n      }\r\n    }\r\n    setSubject(productOrders.join(\", \"))\r\n  }, [props])\r\n  return <span>{props?.status === \"CANCELLED\" ? \"VOID\" : subject}</span>\r\n}\r\nfunction Scheduler({ handleNavigate, navigate }) {\r\n  const [productData, loadProductData] = useGetDocuments(ProductsClass)\r\n  const { setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [eventSettings, setEventSettings] = useState({\r\n    dataSource: [],\r\n    template: (props) => {\r\n      return <CellTemplate {...props} productData={productData} />\r\n    },\r\n    allowDeleting: false,\r\n    allowEditing: false,\r\n    allowAdding: false,\r\n  })\r\n\r\n  useEffect(() => {\r\n    loadProductData()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const productList = producedProductListOfAllCodes(productData)\r\n    if (navigate.currentView === \"Day\") return\r\n    if (!user.branchSelected) return\r\n    const _startTime = new Date(navigate?.dateRange[0].setHours(0, 0, 0, 0))\r\n    const _endTime = new Date(navigate?.dateRange[1].setHours(23, 59, 59, 59))\r\n    const req = query(\r\n      collection(db, SchedulesClass.COLLECTION_NAME),\r\n      where(SchedulesClass.BRANCH, \"==\", user?.branchSelected),\r\n      where(SchedulesClass.DATE_START, \">=\", _startTime),\r\n      where(SchedulesClass.DATE_START, \"<=\", _endTime)\r\n    )\r\n    setIsLoading(true)\r\n    const unsubscribe = onSnapshot(req, (snapshot) => {\r\n      const dataSource = [...eventSettings.dataSource]\r\n      snapshot.docChanges().forEach((change) => {\r\n        if (change.type === \"added\") {\r\n          const data = change.doc.data()\r\n          const productOrders = []\r\n          for (const value of productList) {\r\n            if (typeof data[value] !== \"undefined\") {\r\n              if (Number(data[value]) > 0) {\r\n                productOrders.push(`${value}: ${data[value]}`)\r\n              }\r\n            }\r\n          }\r\n          const dateStart = formatDateFromDatabase(\r\n            data[SchedulesClass.DATE_START]\r\n          )\r\n          const dateEnd = formatDateFromDatabase(data[SchedulesClass.DATE_END])\r\n          dataSource.push({\r\n            ...data,\r\n            [SchedulesClass.DATE_START]: dateStart,\r\n            [SchedulesClass.DATE_END]: dateEnd,\r\n            [SchedulesClass.SUBJECT]: productOrders.join(\", \"),\r\n          })\r\n        }\r\n        if (change.type === \"modified\") {\r\n          console.log(\"Modified city: \", change.doc.data())\r\n        }\r\n        if (change.type === \"removed\") {\r\n          console.log(\"Removed city: \", change.doc.data())\r\n        }\r\n      })\r\n\r\n      setIsLoading(false)\r\n      setEventSettings({\r\n        ...eventSettings,\r\n        template: (props) => {\r\n          return <CellTemplate {...props} productData={productData} />\r\n        },\r\n        dataSource,\r\n      })\r\n    })\r\n    return () => {\r\n      setEventSettings({\r\n        ...eventSettings,\r\n        dataSource: [],\r\n      })\r\n      unsubscribe()\r\n    }\r\n  }, [navigate?.dateRange, user, productData])\r\n\r\n  const onEventRendered = (args) => {\r\n    const { element, data } = args\r\n    if (data[SchedulesClass.STATUS] === \"CANCELLED\") {\r\n      element.style.background = \"orange\"\r\n    } else {\r\n      element.style.background = \"transparent\"\r\n    }\r\n    element.style.color = \"#333\"\r\n  }\r\n  const HeaderTemplate = (props) => {\r\n    return (\r\n      <div\r\n        style={\r\n          props?.status === \"CANCELLED\"\r\n            ? { padding: \"1rem\" }\r\n            : { padding: \"1rem\", backgroundColor: \"#1890ff\" }\r\n        }\r\n      >\r\n        {props.status === \"CANCELLED\" ? (\r\n          <CustomTitle label=\"VOID\" typographyType=\"text\" />\r\n        ) : (\r\n          <CustomTitle label={props?.Subject} typographyType=\"text\" />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const ContentTemplate = (props) => {\r\n    const productOrders = []\r\n    const productList = producedProductListOfAllCodes(productData)\r\n    for (const value of productList) {\r\n      if (typeof props[value] !== \"undefined\") {\r\n        if (Number(props[value]) > 0) {\r\n          const productGroups =\r\n            producedProductListWithGroupAndAmounts(productData)\r\n          const productDetails = productGroups.find(\r\n            (data) => data[ProductsClass.CODE] === value\r\n          )\r\n          const price =\r\n            props[`customPrice${value}`] || productDetails[ProductsClass.PRICE]\r\n          const total = Number(price) * Number(props[value])\r\n          productOrders.push({\r\n            ...productDetails,\r\n            qty: props[value],\r\n            price,\r\n            total,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    const subTotal = sumArray(productOrders, \"total\") || 0\r\n    const _columns = [\r\n      {\r\n        title: \"Code\",\r\n        dataIndex: ProductsClass.CODE,\r\n        render: (data) => {\r\n          return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n        },\r\n      },\r\n      {\r\n        title: \"Products\",\r\n        dataIndex: ProductsClass.DESCRIPTION,\r\n        render: (data) => {\r\n          return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n        },\r\n      },\r\n      {\r\n        title: \"Qty\",\r\n        dataIndex: \"qty\",\r\n        render: (data) => {\r\n          return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n        },\r\n      },\r\n      {\r\n        title: \"Price\",\r\n        dataIndex: ProductsClass.PRICE,\r\n        align: \"right\",\r\n        render: (data) => {\r\n          return (\r\n            <span style={{ fontSize: \"10px\" }}>\r\n              {thousandsSeparators(Number(data).toFixed(2))}\r\n            </span>\r\n          )\r\n        },\r\n      },\r\n      {\r\n        title: \"Total\",\r\n        dataIndex: \"total\",\r\n        align: \"right\",\r\n        render: (data) => {\r\n          return (\r\n            <span style={{ fontSize: \"10px\" }}>\r\n              {thousandsSeparators(Number(data || 0).toFixed(2))}\r\n            </span>\r\n          )\r\n        },\r\n      },\r\n    ]\r\n    return (\r\n      <>\r\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n          <Table\r\n            columns={_columns}\r\n            dataSource={productOrders}\r\n            size=\"small\"\r\n            pagination={false}\r\n          />\r\n          <Space\r\n            style={{\r\n              justifyContent: \"space-between\",\r\n              width: \"100%\",\r\n              padding: \"0rem .5rem\",\r\n              color: \"red\",\r\n            }}\r\n          >\r\n            <span>Total</span>\r\n            <span>{thousandsSeparators(Number(subTotal).toFixed(2))}</span>\r\n          </Space>\r\n          <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n            <Print\r\n              component={\r\n                <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                  <Table\r\n                    size=\"small\"\r\n                    pagination={false}\r\n                    columns={_columns}\r\n                    dataSource={productOrders}\r\n                  />\r\n                  <Space\r\n                    style={{\r\n                      justifyContent: \"space-between\",\r\n                      width: \"100%\",\r\n                      padding: \"0rem .5rem\",\r\n                      color: \"red\",\r\n                    }}\r\n                  >\r\n                    <span>Total</span>\r\n                    <span>\r\n                      {thousandsSeparators(Number(subTotal).toFixed(2))}\r\n                    </span>\r\n                  </Space>\r\n                </Space>\r\n              }\r\n              button={<PrinterFilled fontSize=\"2.5rem\" />}\r\n            />\r\n          </div>\r\n        </Space>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const FooterTemplate = (props) => {\r\n    return <div>Footer</div>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <CustomSchedule testing=\"nevermind\" /> */}\r\n      <ScheduleComponent\r\n        startHour=\"08:00\"\r\n        endHour=\"19:00\"\r\n        eventSettings={eventSettings}\r\n        views={[\r\n          {\r\n            option: \"Day\",\r\n            startHour: \"09:00\",\r\n            endHour: \"19:00\",\r\n            timeScale: { enable: true, slotCount: 3 },\r\n          },\r\n        ]}\r\n        navigating={handleNavigate}\r\n        height=\"100vh\"\r\n        width=\"100%\"\r\n        currentView={navigate?.currentView}\r\n        selectedDate={navigate?.selectedDate}\r\n        eventRendered={onEventRendered}\r\n        quickInfoTemplates={{\r\n          header: HeaderTemplate,\r\n          content: ContentTemplate,\r\n          footer: FooterTemplate,\r\n        }}\r\n      >\r\n        <ResourcesDirective>\r\n          <ResourceDirective\r\n            field=\"CalendarId\"\r\n            title=\"Calendars\"\r\n            name=\"Calendars\"\r\n            // dataSource={this.calendarCollections}\r\n            query={new Query().where(\"CalendarId\", \"equal\", 1)}\r\n            textField=\"CalendarText\"\r\n            idField=\"CalendarId\"\r\n            colorField=\"CalendarColor\"\r\n          ></ResourceDirective>\r\n        </ResourcesDirective>\r\n        <ViewsDirective>\r\n          <ViewDirective option=\"Day\" />\r\n          <ViewDirective option=\"Week\" />\r\n          <ViewDirective option=\"Month\" />\r\n          <ViewDirective option=\"Agenda\" />\r\n        </ViewsDirective>\r\n        <Inject services={[Day, Week, Month, Agenda]} />\r\n      </ScheduleComponent>\r\n      <div style={{ position: \"fixed\", bottom: 0, right: 0, padding: \"1rem\" }}>\r\n        <CustomDrawer Icon={<FilterFilled />} shape=\"circle\" title=\"Schedules\">\r\n          <FilteringPanel />\r\n        </CustomDrawer>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Scheduler\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\ObjectFieldArray.js",["837","838","839","840","841"],"import { Input, message, Space, Tag } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { AMOUNT_TYPE } from \"Constants/types\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\n\r\nfunction ObjectFieldArray({ ServiceClass, name, ...rest }) {\r\n  const inputRef = useRef(null)\r\n  const [value, setValue] = useState([])\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [editable, setEditable] = useState(null)\r\n  const properties = ServiceClass.OBJECTS[name][\"properties\"] || []\r\n  const types = ServiceClass.OBJECTS[name][\"types\"] || {}\r\n  const title = ServiceClass.OBJECTS[name][\"title\"] // this title will serve as an id field of each sub object\r\n  useEffect(() => {\r\n    if (rest?.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest?.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  useEffect(() => {\r\n    inputRef?.current?.focus()\r\n  }, [editable])\r\n\r\n  const handleChange = (fieldValue, key, title, data) => {\r\n    if (key === title) {\r\n      const idExist = value.find((obj) => obj[key] === fieldValue)\r\n      if (idExist) {\r\n        message.warning(`${key} already exist`)\r\n        return\r\n      }\r\n    }\r\n    const valueIndex = value.findIndex((obj) => obj[title] === data[title])\r\n    const valueCopy = [...value]\r\n    const formatValue =\r\n      types[key] === AMOUNT_TYPE ? Number(fieldValue) : fieldValue\r\n    valueCopy[valueIndex] = { ...value[valueIndex], [key]: formatValue }\r\n    setValue(valueCopy)\r\n    setIsTouched(true)\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <table style={{ width: \"100%\" }}>\r\n        <tr>\r\n          {properties.map((key) => {\r\n            return (\r\n              <th>\r\n                {\r\n                  <Tag color=\"cyan\" style={{ display: \"block\" }}>\r\n                    {ServiceClass.LABELS[key] || key}\r\n                  </Tag>\r\n                }\r\n              </th>\r\n            )\r\n          })}\r\n        </tr>\r\n        {value.map((obj) => {\r\n          return (\r\n            <tr style={{ justifyContent: \"flex-start\" }}>\r\n              {properties.map((key, index) => {\r\n                return (\r\n                  <td align={types[key] === AMOUNT_TYPE ? \"right\" : \"center\"}>\r\n                    {editable === index ? (\r\n                      <Input\r\n                        ref={inputRef}\r\n                        value={obj[key]}\r\n                        onChange={(e) => {\r\n                          handleChange(e.target.value, key, title, obj)\r\n                        }}\r\n                        onPressEnter={(e) => {\r\n                          // handleChange(e.target.value, key, title, obj[title])\r\n                          setEditable(null)\r\n                        }}\r\n                      />\r\n                    ) : (\r\n                      <Tag\r\n                        onDoubleClick={() => {\r\n                          setEditable(index)\r\n                        }}\r\n                      >\r\n                        {types[key] === AMOUNT_TYPE\r\n                          ? Number(obj[key]).toFixed(2)\r\n                          : obj[key]}\r\n                      </Tag>\r\n                    )}\r\n                  </td>\r\n                )\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n      <Space style={{ justifyContent: \"flex-end\", width: \"100%\" }}>\r\n        <Tag\r\n          color=\"cyan\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            const valueCopy = [...value]\r\n            const obj = {}\r\n            for (const key of properties) {\r\n              if (types[key] === AMOUNT_TYPE) {\r\n                obj[key] = 0\r\n              } else {\r\n                obj[key] = key\r\n              }\r\n            }\r\n            valueCopy.push(obj)\r\n            setValue(valueCopy)\r\n          }}\r\n        >\r\n          <PlusOutlined />\r\n          Add new\r\n        </Tag>\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default ObjectFieldArray\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsIncidents\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\IncidentReportClass.js",["842","843"],"import { ARRAY_OF_STRING_TYPE, DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport { producedIncidents } from \"Helpers/collectionData\"\r\nimport Base from \"Services/Base\"\r\n\r\nexport default class IncidentReportClass {\r\n  static COLLECTION_NAME = \"schedules\"\r\n\r\n  static async getDataBySort(customSort = [], branch) {\r\n    const data = await Base.getDataNotEqualToFieldname(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.DATE, \"desc\"],\r\n      \"others.Incidents\",\r\n      \"\"\r\n    )\r\n    return producedIncidents(data, branch)\r\n  }\r\n\r\n  static _ID = \"_id\"\r\n  static DATE_AND_TIME = \"dateAndTime\"\r\n  static DATE = \"dateOrderPlaced\"\r\n  static ACTION_TAKEN = \"actionTaken\"\r\n  static AMOUNT = \"amount\"\r\n  static CLIENT_NAME = \"clientName\"\r\n  static CONTACT_NO = \"contactNo\"\r\n  static ON_DUTY = \"onDuty\"\r\n  static ORDER_NO = \"orderNo\"\r\n  static BRIEF_DESCRIPTION = \"briefDescription\"\r\n\r\n  static PROPERTIES = [\r\n    this.DATE,\r\n    this.ORDER_NO,\r\n    this.CLIENT_NAME,\r\n    this.CONTACT_NO,\r\n    this.BRIEF_DESCRIPTION,\r\n    this.ON_DUTY,\r\n  ]\r\n\r\n  static LABELS = {\r\n    [this.BRANCH_ADDRESS]: \"Address\",\r\n    [this.BRANCH_NAME]: \"Branch\",\r\n    [this.DATE]: \"Date\",\r\n    [this.ORDER_NO]: \"Order #\",\r\n    [this.CLIENT_NAME]: \"Client Name\",\r\n    [this.CONTACT_NO]: \"Contact No\",\r\n    [this.BRIEF_DESCRIPTION]: \"Brief Description\",\r\n    [this.ON_DUTY]: \"On Duty\",\r\n  }\r\n  static TYPES = {\r\n    [this.DATE]: DATE_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilterOptions\\index.js",["844","845","846"],"import CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport { FilterOutlined } from \"@ant-design/icons\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { Radio, Space } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction FilterOptions({\r\n  ServiceClass,\r\n  hideColumns,\r\n  setIsFiltered,\r\n  valueSelected = () => {},\r\n}) {\r\n  const ref = useRef(null)\r\n  const [value, setValue] = useState(\"NONE\")\r\n  const [properties, setProperties] = useState([])\r\n\r\n  useEffect(() => {\r\n    const properties = ServiceClass.PROPERTIES.filter(\r\n      (key) => !hideColumns.includes(key)\r\n    )\r\n    const selectedProperties = properties.filter(\r\n      (key) => ServiceClass.TYPES[key] === DATE_TYPE\r\n    )\r\n\r\n    if ((ServiceClass.COLLECTION_NAME = SchedulersClass.COLLECTION_NAME)) {\r\n      // selectedProperties.push(ServiceClass.SOURCE)\r\n      // selectedProperties.push(ServiceClass.MODE_PAYMENT)\r\n      selectedProperties.push(ServiceClass.DATE_START)\r\n      selectedProperties.push(ServiceClass.REVENUE_CHANNEL)\r\n      selectedProperties.push(ServiceClass.SALES_TYPE)\r\n      selectedProperties.push(ServiceClass.PARTNER_MERCHANT_ORDER_NO)\r\n      selectedProperties.push(ServiceClass.UTAK_NO)\r\n      selectedProperties.push(ServiceClass.CUSTOMER)\r\n    }\r\n\r\n    setProperties(selectedProperties)\r\n  }, [ServiceClass, hideColumns])\r\n\r\n  useEffect(() => {\r\n    valueSelected(value)\r\n  }, [value])\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value)\r\n    ref?.current?.click()\r\n    if (e.target.value !== \"NONE\") {\r\n      setIsFiltered(true)\r\n    } else {\r\n      setIsFiltered(false)\r\n    }\r\n  }\r\n  return (\r\n    <CustomDrawer\r\n      type={value !== \"NONE\" ? \"primary\" : \"default\"}\r\n      shape=\"circle\"\r\n      title=\"Filter Options\"\r\n      size=\"medium\"\r\n      placement=\"left\"\r\n      Icon={<FilterOutlined />}\r\n      clickedRef={ref}\r\n    >\r\n      <Radio.Group value={value} onChange={handleChange}>\r\n        <Space direction=\"vertical\">\r\n          {[\"NONE\", ...properties].map((data) => {\r\n            return (\r\n              <>\r\n                <Radio value={data}>{ServiceClass.LABELS[data] || data}</Radio>\r\n              </>\r\n            )\r\n          })}\r\n        </Space>\r\n      </Radio.Group>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nexport default FilterOptions\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\RangePicker.js",["847"],"import React from \"react\"\r\nimport { DatePicker, Space } from \"antd\"\r\nconst { RangePicker } = DatePicker\r\n\r\nfunction CustomRangePicker({\r\n  onChange,\r\n  value,\r\n  disabled,\r\n  showTime = false,\r\n  format = \"MM/DD/YYYY hh:mm A\",\r\n}) {\r\n  return (\r\n    <RangePicker\r\n      showTime={showTime}\r\n      use12Hours\r\n      format={format}\r\n      minuteStep={30}\r\n      onChange={onChange}\r\n      disabled={disabled}\r\n      value={value}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CustomRangePicker\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\index.js",["848","849","850"],"import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Button,\r\n  DatePicker,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Tabs,\r\n  Input,\r\n  Tooltip,\r\n  Card,\r\n} from \"antd\"\r\nimport { SearchOutlined, FilterOutlined } from \"@ant-design/icons\"\r\nimport useAnalyticsCustomer from \"./hook\"\r\nimport { VerticalAutoScroll, Grid } from \"./styles\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport PrintComponent from \"./PrintComponent\"\r\nimport othersTableColumns from \"./othersTableColumns\"\r\nimport Animate, {\r\n  FadeIn,\r\n  SlideInRight,\r\n  SlideOutRight,\r\n  Wobble,\r\n} from \"animate-css-styled-components\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nconst { RangePicker } = DatePicker\r\nconst { TabPane } = Tabs\r\n\r\nconst numbeStyle = {\r\n  style: {\r\n    fontSize: \"1.5rem\",\r\n  },\r\n}\r\n\r\nconst AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\nconst TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\nfunction AnalyticsCustomer() {\r\n  const [scrollPosition, setScrollPosition] = useState(0)\r\n  const [tabValue, setTabValue] = useState(\"\")\r\n  const [filteredCustomer, setFilteredCustomer] = useState([])\r\n  const [grandTotals, setGrandTotals] = useState({\r\n    totalDue: 0,\r\n    discount: 0,\r\n    amountPaid: 0,\r\n    balanceDue: 0,\r\n  })\r\n\r\n  useEffect(() => {\r\n    window.onscroll = (e) => {\r\n      setScrollPosition(document.documentElement.scrollTop)\r\n    }\r\n  }, [])\r\n  /// main hook\r\n  const [\r\n    { rangeProps, searchButtonProps, tableProps },\r\n    customerList,\r\n    dataByCustomer,\r\n    filteredData,\r\n  ] = useAnalyticsCustomer()\r\n\r\n  const style = {\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    padding: \"1rem\",\r\n  }\r\n\r\n  const othersTableProps = {\r\n    ...tableProps,\r\n    columns: [...othersTableColumns],\r\n    pagination: true,\r\n  }\r\n  const handleFilter = (e) => {\r\n    const _filteredCustomer = customerList.filter(\r\n      (key) =>\r\n        key.includes(e.target.value) ||\r\n        key.includes(e.target.value.toUpperCase())\r\n    )\r\n    setFilteredCustomer(_filteredCustomer)\r\n    if (tabValue.includes(e.target.value)) {\r\n    } else {\r\n      setTabValue(\"\")\r\n      setGrandTotals({\r\n        totalDue: 0,\r\n        discount: 0,\r\n        amountPaid: 0,\r\n        balanceDue: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleClickCustomer = (customer) => {\r\n    setTabValue(customer)\r\n    const customerData =\r\n      typeof dataByCustomer[customer] !== \"undefined\"\r\n        ? dataByCustomer[customer]\r\n        : []\r\n\r\n    const dataWithDiscount = []\r\n    for (const obj of customerData) {\r\n      let disc = 0\r\n      if (typeof obj.others !== \"undefined\") {\r\n        for (const key of Object.keys(obj.others)) {\r\n          disc = obj.others[key]\r\n          break\r\n        }\r\n      }\r\n      dataWithDiscount.push({ ...obj, others: Number(disc) })\r\n    }\r\n\r\n    const totalDue = sumArray(customerData, TOTAL_DUE)\r\n    const amountPaid = sumArray(customerData, AMOUNT_PAID)\r\n    const discount = sumArray(dataWithDiscount, \"others\")\r\n    const balanceDue = totalDue - amountPaid - Number(discount)\r\n    setGrandTotals({\r\n      totalDue,\r\n      discount: Number(discount),\r\n      amountPaid,\r\n      balanceDue,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Space direction=\"horizontal\" style={style}>\r\n          <span>\r\n            {customerList.length > 0 && (\r\n              <Space>\r\n                <label>Name </label>\r\n                <Input\r\n                  placeholder=\"Filter\"\r\n                  onChange={handleFilter}\r\n                  suffix={\r\n                    <Tooltip title=\"Filter by name\">\r\n                      <FilterOutlined style={{ color: \"rgba(0,0,0,.45)\" }} />\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              </Space>\r\n            )}\r\n          </span>\r\n          <Space wrap>\r\n            Date Order:\r\n            <RangePicker {...rangeProps} />\r\n            <Button\r\n              {...searchButtonProps}\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </Space>\r\n\r\n        <VerticalAutoScroll>\r\n          <Row style={{ padding: \"1rem\" }}>\r\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\r\n              <Tabs\r\n                activeKey={tabValue}\r\n                tabPosition=\"top\"\r\n                style={{ height: \"77vh\", position: \"relative\" }}\r\n                size=\"small\"\r\n                onChange={handleClickCustomer}\r\n              >\r\n                {filteredCustomer.length > 0\r\n                  ? filteredCustomer.map((customer) => {\r\n                      if (!customer) {\r\n                        return <></>\r\n                      }\r\n                      const recordFound =\r\n                        typeof dataByCustomer[customer] !== \"undefined\"\r\n                          ? dataByCustomer[customer].length\r\n                          : 0\r\n                      return (\r\n                        <TabPane\r\n                          tab={customer}\r\n                          key={customer}\r\n                          style={{\r\n                            backgroundColor: \"#eee\",\r\n                            padding: \"1rem\",\r\n                            height: \"80vh\",\r\n                          }}\r\n                        >\r\n                          <Card\r\n                            title={customer}\r\n                            extra={\r\n                              <PrintComponent\r\n                                dataByCustomer={[...dataByCustomer[customer]]}\r\n                                customer={customer}\r\n                                grandTotals={grandTotals}\r\n                              />\r\n                            }\r\n                            actions={[\r\n                              <div>{`Records Found: ${recordFound}`}</div>,\r\n                            ]}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <Table\r\n                                {...tableProps}\r\n                                dataSource={[...dataByCustomer[customer]]}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                        </TabPane>\r\n                      )\r\n                    })\r\n                  : customerList.map((customer) => {\r\n                      if (!customer) {\r\n                        return <></>\r\n                      }\r\n                      const recordFound =\r\n                        typeof dataByCustomer[customer] !== \"undefined\"\r\n                          ? dataByCustomer[customer].length\r\n                          : 0\r\n                      return (\r\n                        <TabPane\r\n                          tab={customer}\r\n                          key={customer}\r\n                          style={{\r\n                            backgroundColor: \"#eee\",\r\n                            padding: \"1rem\",\r\n                            height: \"80vh\",\r\n                            position: \"relative\",\r\n                          }}\r\n                        >\r\n                          <Card\r\n                            title={customer}\r\n                            extra={\r\n                              <PrintComponent\r\n                                dataByCustomer={[...dataByCustomer[customer]]}\r\n                                customer={customer}\r\n                                grandTotals={grandTotals}\r\n                              />\r\n                            }\r\n                            actions={[\r\n                              <div>{`Records Found: ${recordFound}`}</div>,\r\n                            ]}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <Table\r\n                                {...tableProps}\r\n                                dataSource={[...dataByCustomer[customer]]}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                        </TabPane>\r\n                      )\r\n                    })}\r\n              </Tabs>\r\n            </Col>\r\n            <Col\r\n              xs={24}\r\n              sm={24}\r\n              md={24}\r\n              lg={24}\r\n              xl={24}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Space wrap size={[16, 5]}>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Total Due\r\n                  </span>\r\n                  <span {...numbeStyle}>\r\n                    <b>{grandTotals.totalDue.toFixed(2)}</b>\r\n                  </span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Discount\r\n                  </span>\r\n                  <span {...numbeStyle}>{grandTotals.discount.toFixed(2)}</span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Amount Paid\r\n                  </span>\r\n                  <span {...numbeStyle}>\r\n                    {grandTotals.amountPaid.toFixed(2)}\r\n                  </span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Balance Due\r\n                  </span>\r\n                  <span\r\n                    style={\r\n                      grandTotals.balanceDue > 0\r\n                        ? { color: \"red\", ...numbeStyle.style }\r\n                        : { ...numbeStyle.style }\r\n                    }\r\n                  >\r\n                    {grandTotals.balanceDue.toFixed(2)}\r\n                  </span>\r\n                </Space>\r\n              </Space>\r\n            </Col>\r\n          </Row>\r\n        </VerticalAutoScroll>\r\n\r\n        <VerticalAutoScroll>\r\n          <Space\r\n            direction=\"vertical\"\r\n            style={{ padding: \"1rem\", height: \"100vh\", width: \"100%\" }}\r\n          >\r\n            <Card\r\n              title=\"OTHER ORDERS\"\r\n              extra={\r\n                scrollPosition > 800 && (\r\n                  <Animate\r\n                    Animation={[SlideInRight]}\r\n                    duration={[\"1s\"]}\r\n                    delay={[\"0.2s\"]}\r\n                  >\r\n                    <Space wrap>\r\n                      Date Order:\r\n                      <RangePicker {...rangeProps} />\r\n                      <Button\r\n                        {...searchButtonProps}\r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        icon={<SearchOutlined />}\r\n                      />\r\n                    </Space>\r\n                  </Animate>\r\n                )\r\n              }\r\n            >\r\n              <VerticalAutoScroll>\r\n                <Table\r\n                  {...othersTableProps}\r\n                  dataSource={[\r\n                    ...filteredData.filter(\r\n                      (data) => data.orderVia === \"[ OTH ] OTHER\"\r\n                    ),\r\n                  ]}\r\n                />\r\n              </VerticalAutoScroll>\r\n            </Card>\r\n          </Space>\r\n        </VerticalAutoScroll>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnalyticsCustomer\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\hook.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\othersTableColumns.js",["851","852"],"import { Tag, Space } from \"antd\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport React from \"react\"\r\n\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst CUSTOMER = SchedulersClass.CUSTOMER\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\nconst REF_NO = SchedulersClass.REF_NO\r\n\r\nconst othersTableColumns = [\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"13%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"UTAK #\",\r\n    dataIndex: UTAK_NO,\r\n    key: UTAK_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"CUSTOMER\",\r\n    dataIndex: CUSTOMER,\r\n    key: CUSTOMER,\r\n  },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      let disc = 0\r\n      if (typeof data !== \"undefined\") {\r\n        for (const key of Object.keys(data)) {\r\n          disc = data[key]\r\n          break\r\n        }\r\n      }\r\n      if (disc > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(disc).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (typeof data !== \"undefined\") {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(\"0\").toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      let amountPaid =\r\n        typeof record?.amountPaid !== \"undefined\" ? record?.amountPaid : 0\r\n      let totalDue =\r\n        typeof record?.totalDue !== \"undefined\" ? record?.totalDue : 0\r\n      let disc = 0\r\n      if (typeof record?.others !== \"undefined\") {\r\n        for (const key of Object.keys(record?.others)) {\r\n          disc = record?.others[key]\r\n          break\r\n        }\r\n      }\r\n      const balanceDue = Number(totalDue) - Number(amountPaid) - Number(disc)\r\n      return <span>{Number(balanceDue).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default othersTableColumns\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\PrintComponent.js",["853","854","855"],"import React from \"react\"\r\nimport Print from \"../Print\"\r\nimport { Divider, Space } from \"antd\"\r\nimport { PrinterFilled } from \"@ant-design/icons\"\r\nimport { formatDateFromDatabase, formatDateSlash } from \"Helpers/dateFormat\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction PrintComponent(props) {\r\n  const DATE_START = SchedulersClass.DATE_START\r\n  const ORDER_NO = SchedulersClass.ORDER_NO\r\n  const SOURCE = SchedulersClass.SOURCE\r\n  const STATUS = SchedulersClass.STATUS\r\n  const ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\n  const AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\n  const MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\n  const REF_NO = SchedulersClass.REF_NO\r\n  const TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\n  const handleDiscount = (data) => {\r\n    let disc = 0\r\n    if (typeof data !== \"undefined\") {\r\n      for (const key of Object.keys(data)) {\r\n        disc = data[key]\r\n        break\r\n      }\r\n    }\r\n    if (disc > 0) {\r\n      return Number(disc).toFixed(2)\r\n    }\r\n    return Number(disc).toFixed(2)\r\n  }\r\n\r\n  const handleBalance = (totalDue = 0, amountPaid = 0, others = {}) => {\r\n    const _discount = Number(handleDiscount(others))\r\n    const _amountPaid = Number(amountPaid)\r\n    const _totalDue = Number(totalDue)\r\n    const balanceDue = _totalDue - _amountPaid - _discount\r\n    return balanceDue.toFixed(2)\r\n  }\r\n  return (\r\n    <Print\r\n      component={\r\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n          <span>{props.customer}</span>\r\n          <table style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n            <tr\r\n              style={{\r\n                fontWeight: 700,\r\n                backgroundColor: \"#999\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <td>ORDER #</td>\r\n              <td>DATE ORDER</td>\r\n              <td>MODE</td>\r\n              <td>SOURCE</td>\r\n              <td>REF #</td>\r\n              <td>ACCT #</td>\r\n              <td align=\"right\">TOTAL DUE</td>\r\n              <td align=\"right\">DISCOUNT</td>\r\n              <td align=\"right\">AMOUNT PAID</td>\r\n              <td align=\"right\">BALANCE DUE</td>\r\n              <td align=\"right\">STATUS</td>\r\n            </tr>\r\n            {props.dataByCustomer.map((data, index) => {\r\n              return (\r\n                <tr\r\n                  style={\r\n                    index % 2 === 0\r\n                      ? { backgroundColor: \"white\" }\r\n                      : { backgroundColor: \"#999\" }\r\n                  }\r\n                >\r\n                  <td>{data[ORDER_NO]}</td>\r\n                  <td>{data[DATE_START]}</td>\r\n                  <td>{data[MODE_PAYMENT]}</td>\r\n                  <td>{data[SOURCE]}</td>\r\n                  <td>{data[REF_NO]}</td>\r\n                  <td>{data[ACCOUNT_NUMBER]}</td>\r\n                  <td align=\"right\">{data[TOTAL_DUE]}</td>\r\n                  <td align=\"right\">{handleDiscount(data?.others)}</td>\r\n                  <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                  <td align=\"right\">\r\n                    {handleBalance(\r\n                      data[TOTAL_DUE],\r\n                      data[AMOUNT_PAID],\r\n                      data?.others\r\n                    )}\r\n                  </td>\r\n                  <td align=\"right\">{data[STATUS]}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n          </table>\r\n          <span>Grand Totals</span>\r\n          <table style={{ fontSize: \"8px\", width: \"20%\" }}>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Total Due:</td>\r\n              <td align=\"right\">{props?.grandTotals.totalDue}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Discount:</td>\r\n              <td align=\"right\">{props?.grandTotals.discount}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Amount Paid:</td>\r\n              <td align=\"right\">{props?.grandTotals.amountPaid}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Balance Due:</td>\r\n              <td align=\"right\">{props?.grandTotals.balanceDue}</td>\r\n            </tr>\r\n          </table>\r\n        </Space>\r\n      }\r\n      button={<PrinterFilled fontSize=\"2.5rem\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrintComponent\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\tableColumns.js",["856","857"],"import { Tag, Space } from \"antd\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport React from \"react\"\r\n\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\nconst REF_NO = SchedulersClass.REF_NO\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\n\r\nconst tableColumns = [\r\n  // {\r\n  //   title: \"DATE PLACED\",\r\n  //   dataIndex: DATE_ORDER_PLACED,\r\n  //   key: DATE_ORDER_PLACED,\r\n  //   render: (text) => <a>{text}</a>,\r\n  //   width: \"8%\",\r\n  // },\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"13%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"UTAK #\",\r\n    dataIndex: UTAK_NO,\r\n    key: UTAK_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n    render: (text) => <a>{text}</a>,\r\n    width: \"8%\",\r\n  },\r\n  // {\r\n  //   title: \"NAME\",\r\n  //   dataIndex: CUSTOMER,\r\n  //   key: CUSTOMER,\r\n  // },\r\n  // {\r\n  //   title: \"CONTACT #\",\r\n  //   dataIndex: CONTACT_NUMBER,\r\n  //   key: CONTACT_NUMBER,\r\n  // },\r\n  // {\r\n  //   title: \"VIA\",\r\n  //   dataIndex: ORDER_VIA,\r\n  //   key: ORDER_VIA,\r\n  // },\r\n  // {\r\n  //   title: \"DATE ORDER\",\r\n  //   dataIndex: DATE_START,\r\n  //   key: DATE_START,\r\n  // },\r\n  // {\r\n  //   title: \"TIME\",\r\n  //   dataIndex: \"time\",\r\n  //   key: \"time\",\r\n  // },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  // },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      let disc = 0\r\n      if (typeof data !== \"undefined\") {\r\n        for (const key of Object.keys(data)) {\r\n          disc = data[key]\r\n          break\r\n        }\r\n      }\r\n      if (disc > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(disc).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (typeof data !== \"undefined\") {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(\"0\").toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      let amountPaid =\r\n        typeof record?.amountPaid !== \"undefined\" ? record?.amountPaid : 0\r\n      let totalDue =\r\n        typeof record?.totalDue !== \"undefined\" ? record?.totalDue : 0\r\n      let disc = 0\r\n      if (typeof record?.others !== \"undefined\") {\r\n        for (const key of Object.keys(record?.others)) {\r\n          disc = record?.others[key]\r\n          break\r\n        }\r\n      }\r\n      const balanceDue = Number(totalDue) - Number(amountPaid) - Number(disc)\r\n      return <span>{Number(balanceDue).toFixed(2)}</span>\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"TOTAL AMOUNT\",\r\n  //   dataIndex: \"totalDue\",\r\n  //   key: \"totalDue\",\r\n  //   align: \"right\",\r\n  // },\r\n  // {\r\n  //   title: \"OTHERS/DEDUCTION\",\r\n  //   dataIndex: \"others\",\r\n  //   key: \"others\",\r\n  //   align: \"right\",\r\n  //   render: (tags) => {\r\n  //     return (\r\n  //       <>\r\n  //         {typeof tags !== \"undefined\" ? (\r\n  //           Object.keys(tags).map((tag) => {\r\n  //             return <Tag key={tag}>{`${tags[tag]}`}</Tag>\r\n  //           })\r\n  //         ) : (\r\n  //           <Tag></Tag>\r\n  //         )}\r\n  //       </>\r\n  //     )\r\n  //   },\r\n  // },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  //   render: (data) => {\r\n  //     if (data === \"Discounted\") {\r\n  //       return <span style={{ color: \"red\" }}>{data}</span>\r\n  //     } else {\r\n  //       return <span>{data}</span>\r\n  //     }\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default tableColumns\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\styles.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\rangeHandler.js",["858","859","860"],"import moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(Service) {\r\n  // example instance class: SchedulerServicess\r\n  // how to call hook example: const [rangeHandler, loadData] = useRangeHandler(ScheduleServicess)\r\n  const format = \"MM/DD/YYYY\"\r\n  const defaultDate = moment(new Date(), format)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState([defaultDate, defaultDate])\r\n  const [rangeData, setRangeData] = useState([])\r\n  const [searchData, setSearchData] = useState([])\r\n\r\n  const loadData = async (args) => {\r\n    const { search = null, dateField, orderBy } = args\r\n    setIsLoading(true)\r\n    let dateRange = []\r\n    if (value.length > 0) {\r\n      dateRange = [value[0]._d, value[1]._d]\r\n      let _data = []\r\n      _data = await new Service({\r\n        _dateField: dateField,\r\n        _orderBy: orderBy,\r\n        _dateRange: dateRange,\r\n      }).getRange()\r\n      if (_data.length > 0 && search) {\r\n        const _searchData = _data.filter((data) => {\r\n          let filterResult = true\r\n          for (const key in search) {\r\n            if (search[key] && data[key]) {\r\n              if (data[key].includes(search[key])) {\r\n                // console.log(\"result\", true)\r\n                filterResult = filterResult && true\r\n              } else {\r\n                // console.log(\"result\", false)\r\n                filterResult = filterResult && false\r\n              }\r\n            } else {\r\n              if (search[key]) {\r\n                filterResult = filterResult && false\r\n              } else {\r\n                filterResult = filterResult && true\r\n              }\r\n            }\r\n          }\r\n          return filterResult\r\n        })\r\n        console.log(\"_searchData\", _searchData)\r\n        setSearchData(_searchData)\r\n      } else {\r\n        setSearchData([])\r\n      }\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const onChange = (value) => {\r\n    if (value) {\r\n      setValue(value)\r\n    }\r\n  }\r\n\r\n  return [\r\n    { showTime: false, format, value, onChange }, // rangeComponentHandler\r\n    { value /*rangeData*/, searchData }, // filtered data result\r\n    loadData,\r\n    isLoading,\r\n    // load data example : loadRangeHandlerData({\r\n    //   dateField: \"StartTime\", // required\r\n    //   orderBy: \"StartTime\", // required\r\n    //   search: { //optional\r\n    //     partnerMerchantOrderNo: searchValue,\r\n    //     orderViaPartner: selectHandler.value,\r\n    //   },\r\n    //   specialSearch: \"datePayment\", // use in filter together with search check if value already has a payment //optional\r\n    // })\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\ComponentToPrint.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\SchedulesServicess.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\base\\index.js",["861"],"import db from \"Services/firebase\"\r\n\r\nexport default class Commands {\r\n  #collectionName\r\n  #id\r\n  #data\r\n  #fieldName\r\n  #fieldValue\r\n  #orderBy\r\n  constructor(args) {\r\n    const {\r\n      _collectionName,\r\n      _id,\r\n      _data = {},\r\n      _fieldName = \"\",\r\n      _fieldValue = \"\",\r\n      _orderBy = \"\",\r\n    } = args\r\n    this.#collectionName = _collectionName\r\n    this.#id = _id\r\n    this.#data = _data\r\n    this.#fieldName = _fieldName\r\n    this.#fieldValue = _fieldValue\r\n    this.#orderBy = _orderBy\r\n  }\r\n\r\n  async getData() {\r\n    const ref = db.collection(this.#collectionName)\r\n    const snapshot = await ref.get()\r\n    if (snapshot.empty) {\r\n      console.log(\"No matching documents.\")\r\n      return []\r\n    }\r\n\r\n    const data = []\r\n    snapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  async getDataWithId() {\r\n    if (this.#id) {\r\n      const ref = db.collection(this.#collectionName).doc(this.#id)\r\n      const doc = await ref.get()\r\n      if (!doc.exists) {\r\n        return {}\r\n      } else {\r\n        const data = { ...doc.data() }\r\n        return data\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n\r\n  getDataWithFieldName() {\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(this.#collectionName)\r\n        .where(this.#fieldName, \"==\", this.#fieldValue)\r\n        .orderBy(this.#orderBy, \"desc\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            _dataFetched.push({ ..._data, _id: doc.id })\r\n          })\r\n          resolve(_dataFetched)\r\n        })\r\n        .catch((error) => {\r\n          reject(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    }).catch((error) => {\r\n      console.log(\"code error\", error)\r\n    })\r\n  }\r\n\r\n  async mergeData() {\r\n    const ref = db.collection(this.#collectionName).doc(this.#id)\r\n    const setWithMerge = ref.set(\r\n      {\r\n        ...this.#data,\r\n      },\r\n      { merge: true }\r\n    )\r\n  }\r\n\r\n  async updateData() {\r\n    if (this.#id) {\r\n      console.log(`Updated ${this.#id}`, this.#data)\r\n    }\r\n  }\r\n\r\n  async deleteData() {\r\n    if (this.#id) {\r\n      console.log(`Deleted ${this.#id}`, this.#data)\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\index.js",["862","863","864","865","866"],"import React, { useEffect, useState } from \"react\"\r\n// import DailyReportType from \"./dailyReportType\"\r\nimport { Flex, Grid, Item } from \"../Styles\"\r\nimport { Card } from \"antd\"\r\nimport SalesImage from \"Images/sales.jpg\"\r\nimport ServedReportType from \"./servedReportType\"\r\n// import ReportDirectSales from \"components/features/AnalyticsReportDirectSales\"\r\n// import ReportThirdPartySales from \"components/features/AnalyticsReportThirdPartySales\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nconst { Meta } = Card\r\n\r\nconst ORDER_VIA = SchedulersClass.ORDER_VIA\r\nconst ORDER_VIA_PARTNER = SchedulersClass.ORDER_VIA_PARTNER\r\nconst ORDER_VIA_WEBSITE = SchedulersClass.ORDER_VIA_WEBSITE\r\nfunction AnalyticsDailyReport() {\r\n  const [clickedReport, setClickedReport] = useState(null)\r\n  return (\r\n    <div>\r\n      {clickedReport === null && (\r\n        <>\r\n          <Grid padding=\"1rem\">\r\n            <h1>DAILY SALES REPORT</h1>\r\n          </Grid>\r\n          <Grid padding=\"1rem\" height=\"70vh\" alignItems=\"center\">\r\n            <Flex justifyContent=\"center\">\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={<img alt=\"sales-image\" src={SalesImage} />}\r\n                  onClick={() => {\r\n                    setClickedReport(\"DIRECT\")\r\n                  }}\r\n                >\r\n                  <Meta title=\"DIRECT ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={\r\n                    <img\r\n                      alt=\"sales-image\"\r\n                      src={SalesImage}\r\n                      onClick={() => {\r\n                        setClickedReport(\"THIRD PARTY\")\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Meta title=\"THIRD PARTY ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={<img alt=\"sales-image\" src={SalesImage} />}\r\n                  onClick={() => {\r\n                    setClickedReport(\"SERVED\")\r\n                  }}\r\n                >\r\n                  <Meta title=\"SERVED ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n            </Flex>\r\n          </Grid>\r\n        </>\r\n      )}\r\n\r\n      {/* {clickedReport === \"DIRECT\" && (\r\n        <ReportDirectSales back={() => setClickedReport(null)} />\r\n        <DailyReportType\r\n          Services={ScheduleServices}\r\n          filterBasis={ORDER_VIA}\r\n          title=\"DAILY SALES DIRECT ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )} */}\r\n      {/*\r\n      {clickedReport === \"THIRD PARTY\" && (\r\n        <ReportThirdPartySales back={() => setClickedReport(null)} />\r\n        <DailyReportType\r\n          Services={ScheduleServices}\r\n          filterBasis={ORDER_VIA}\r\n          title=\"DAILY SALES DIRECT ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )} */}\r\n\r\n      {clickedReport === \"SERVED\" && (\r\n        <ServedReportType\r\n          filterBasis={[ORDER_VIA, ORDER_VIA_PARTNER]}\r\n          title=\"DAILY SALES SERVED ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDailyReport\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\dailyReportType.js",["867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\servedReportType.js",["883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901"],"import { Button, DatePicker, Input, Switch, Table, Tag } from \"antd\"\r\nimport moment from \"moment\"\r\nimport React, { useState, useEffect, useContext } from \"react\"\r\nimport { Flex, Grid, Item } from \"../Styles\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n  formatDateSlash,\r\n} from \"Helpers/dateFormat\"\r\nimport {\r\n  AiFillCaretLeft,\r\n  AiFillCaretRight,\r\n  AiFillPrinter,\r\n  AiOutlineArrowLeft,\r\n} from \"react-icons/ai\"\r\nimport addMinusDay from \"Helpers/addMinusDay\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport LiquidChart from \"./LiquidChart\"\r\nimport sumArray, {\r\n  sumArrayDatas,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Helpers/sumArray\"\r\nimport checkDate from \"Helpers/checkDate\"\r\nimport Print from \"../Print\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nconst { RangePicker } = DatePicker\r\nconst dateFormat = (date) => {\r\n  return moment(date, \"MM/DD/YYYY\")\r\n}\r\n\r\nconst CUSTOMER = SchedulersClass.CUSTOMER\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst DATE_ORDER_PLACED = SchedulersClass.DATE_ORDER_PLACED\r\nconst ORDER_VIA_PARTNER = SchedulersClass.ORDER_VIA_PARTNER\r\nconst AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\nconst TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\nconst ORDER_VIA = SchedulersClass.ORDER_VIA\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\n\r\nfunction ServedReportType({ Services, filterBasis, title, back }) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [date, setDate] = useState(dateFormat(new Date()))\r\n  const [dateTo, setDateTo] = useState(dateFormat(new Date()))\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [dataList, setDataList] = useState([])\r\n  const [subTotalOfDataList, setSubTotalOfDataList] = useState([])\r\n  const [subTotalOfOrderVia, setSubTotalOfOrderVia] = useState([])\r\n  const [subTotalOfSources, setSubTotalOfSources] = useState([])\r\n  const [grandTotalDue, setGrandTotalDue] = useState(0)\r\n  const [grandAmountPaid, setGrandAmountPaid] = useState(0)\r\n  const [targetAmount, setTargetAmount] = useState(0)\r\n  const [isSwitch, setIsSwitch] = useState(true)\r\n  const [targets, setTargets] = useState([35000, 5000, 15000])\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [Services, date, dateTo])\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [Services])\r\n\r\n  const loadDropdowns = async () => {\r\n    if (typeof filterBasis === \"object\") {\r\n      setIsSwitch(false)\r\n      let dropdowns = []\r\n      for (const value of filterBasis) {\r\n        const _dropdowns = await DropdownsClass.getDataByFieldName(\r\n          \"name\",\r\n          value\r\n        )\r\n        if (_dropdowns?.list) {\r\n          dropdowns = [...dropdowns, ..._dropdowns?.list]\r\n        }\r\n      }\r\n      setDropdowns(dropdowns)\r\n    } else {\r\n      const dropdowns = await DropdownsClass.getDataByFieldName(\r\n        \"name\",\r\n        filterBasis\r\n      )\r\n      if (dropdowns?.list) {\r\n        setDropdowns(dropdowns?.list)\r\n      }\r\n    }\r\n  }\r\n\r\n  const loadData = async () => {\r\n    if (dropdowns.length > 0) {\r\n      const data = await SchedulersClass.getDataByDate(\r\n        [date._d, dateTo._d],\r\n        SchedulersClass.DATE_START,\r\n        user?.branchSelected\r\n      )\r\n      let newData = []\r\n      if (typeof filterBasis === \"object\") {\r\n        for (const value of filterBasis) {\r\n          const _data = data.filter((row) => dropdowns.includes(row[value]))\r\n          for (const obj of _data) {\r\n            if (typeof obj?.partials === \"object\") delete obj.partials\r\n            newData.push({\r\n              ...obj,\r\n              [ORDER_VIA]: obj[ORDER_VIA_PARTNER]\r\n                ? obj[ORDER_VIA_PARTNER]\r\n                : obj[ORDER_VIA],\r\n            })\r\n          }\r\n        }\r\n        console.log(\"newDDD\", newData)\r\n      } else {\r\n        newData = data.filter((row) => dropdowns.includes(row[filterBasis]))\r\n      }\r\n\r\n      /// set the dataSources of SALES DIRECT ORDERS TABLE\r\n      const formattedDataList = []\r\n      for (const obj of newData) {\r\n        const datePaid =\r\n          typeof obj[DATE_PAYMENT] === \"undefined\"\r\n            ? null\r\n            : formatDateFromDatabase(obj[DATE_PAYMENT])\r\n        const dateOrderPlaced = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n        const dateStart = formatDateFromDatabase(obj[DATE_START])\r\n        formattedDataList.push({\r\n          [ORDER_VIA]: obj[ORDER_VIA],\r\n          [SOURCE]: obj[SOURCE],\r\n          [TOTAL_DUE]: obj[TOTAL_DUE],\r\n          [ACCOUNT_NUMBER]: obj[ACCOUNT_NUMBER],\r\n          [CUSTOMER]: obj[CUSTOMER],\r\n          [ORDER_NO]: obj[ORDER_NO],\r\n          [UTAK_NO]: obj[UTAK_NO],\r\n          [DATE_PAYMENT]: datePaid ? formatDateSlash(datePaid) : 0,\r\n          [DATE_START]: formatDateSlash(dateStart),\r\n          [DATE_ORDER_PLACED]: formatDateSlash(dateOrderPlaced),\r\n          [AMOUNT_PAID]: datePaid ? obj[AMOUNT_PAID] : 0,\r\n        })\r\n      }\r\n      setDataList(formattedDataList)\r\n\r\n      // dataList sub total\r\n      const subtotalDue = sumArray(formattedDataList, TOTAL_DUE)\r\n      const subAmountPaid = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfDataList([\r\n        {\r\n          [DATE_PAYMENT]: \"\",\r\n          [DATE_ORDER_PLACED]: \"\",\r\n          [ORDER_NO]: \"\",\r\n          [CUSTOMER]: \"Sub Total\",\r\n          [TOTAL_DUE]: subtotalDue.toFixed(2),\r\n          [AMOUNT_PAID]: subAmountPaid.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // orderVia sub total\r\n      const subAmountPaidOrderVia = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfOrderVia([\r\n        {\r\n          [ORDER_VIA]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidOrderVia.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // sources sub total\r\n      const subAmountPaidSources = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfSources([\r\n        {\r\n          [ACCOUNT_NUMBER]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidSources,\r\n        },\r\n      ])\r\n\r\n      /// set the dataSources of SUMMARY OF SALES\r\n      const totalDue = sumArray([...newData], TOTAL_DUE)\r\n      const totalAmountPaid = sumArray([...newData], AMOUNT_PAID)\r\n      setGrandTotalDue(totalDue.toFixed(2))\r\n      setGrandAmountPaid(totalAmountPaid.toFixed(2))\r\n      setTargetAmount(totalDue.toFixed(2))\r\n    }\r\n  }\r\n\r\n  const calculatePercent = (paidValue, totalValue) => {\r\n    // if (isSwitch) {\r\n    return paidValue / totalValue\r\n    // } else {\r\n    //   if (targetAmount) {\r\n    //     return grandAmountPaid / targetAmount\r\n    //   } else {\r\n    //     return grandAmountPaid / 0\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  const columnsOfOrders = [\r\n    {\r\n      title: \"DATE SERVED\",\r\n      key: DATE_START,\r\n      dataIndex: DATE_START,\r\n    },\r\n    {\r\n      title: \"ORDER DATE\",\r\n      key: DATE_ORDER_PLACED,\r\n      dataIndex: DATE_ORDER_PLACED,\r\n    },\r\n    {\r\n      title: \"UTAK #\",\r\n      key: UTAK_NO,\r\n      dataIndex: UTAK_NO,\r\n    },\r\n    {\r\n      title: \"VBS #\",\r\n      key: ORDER_NO,\r\n      dataIndex: ORDER_NO,\r\n    },\r\n    {\r\n      title: \"CUSTOMER\",\r\n      key: CUSTOMER,\r\n      dataIndex: CUSTOMER,\r\n    },\r\n    {\r\n      title: \"VIA\",\r\n      key: ORDER_VIA,\r\n      dataIndex: ORDER_VIA,\r\n    },\r\n    {\r\n      title: \"TOTAL\",\r\n      key: TOTAL_DUE,\r\n      dataIndex: TOTAL_DUE,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n    {\r\n      title: \"AMT PAID\",\r\n      key: AMOUNT_PAID,\r\n      dataIndex: AMOUNT_PAID,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n  ]\r\n\r\n  const getPageMargins = () => {\r\n    return `@page { margin: 1rem 1rem 1rem 1rem !important; }`\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <Grid padding=\"1rem\">\r\n          <Flex justifyContent=\"center\">\r\n            <div style={{ padding: \"1rem\", flex: 1 }}>\r\n              <Button\r\n                icon={<AiOutlineArrowLeft />}\r\n                size=\"large\"\r\n                shape=\"circle\"\r\n                type=\"primary\"\r\n                danger\r\n                onClick={back}\r\n              />\r\n            </div>\r\n            <RangePicker\r\n              showTime={false}\r\n              value={[date, dateTo]}\r\n              format=\"MM/DD/YYYY\"\r\n              onChange={(date) => {\r\n                if (date) {\r\n                  setDate(date[0])\r\n                  setDateTo(date[1])\r\n                }\r\n              }}\r\n            />\r\n            <div style={{ padding: \"1rem\" }}>{formatDateLong(date._d)}</div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretLeft />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"minus\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretRight />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"add\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n        <Grid padding=\" 1rem 4rem\">\r\n          <h1>{title}</h1>\r\n          <Table\r\n            dataSource={[...dataList, ...subTotalOfDataList]}\r\n            columns={columnsOfOrders}\r\n            pagination={false}\r\n          />\r\n        </Grid>\r\n        <Grid padding=\"1rem 4rem\">\r\n          <h1>SUMMARY OF SALES</h1>\r\n          <Flex\r\n            alignItems=\"flex-start\"\r\n            justifyContent=\"flex-end\"\r\n            flexFlow=\"row\"\r\n          >\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ORDER_VIA,\r\n                    AMOUNT_PAID\r\n                  ),\r\n                  ...subTotalOfOrderVia,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"ORDER VIA\",\r\n                    key: \"orderVia\",\r\n                    dataIndex: \"orderVia\",\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ACCOUNT_NUMBER,\r\n                    AMOUNT_PAID\r\n                  ).filter((obj) => {\r\n                    if (parseInt(obj[AMOUNT_PAID]) > 0) {\r\n                      return obj\r\n                    }\r\n                  }),\r\n                  ...subTotalOfSources,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"SOURCES\",\r\n                    key: ACCOUNT_NUMBER,\r\n                    dataIndex: ACCOUNT_NUMBER,\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n\r\n            {/* this is the percentage portion */}\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n                marginTop: \"-5rem\",\r\n              }}\r\n            >\r\n              <Flex justifyContent=\"flex-end\">\r\n                <div style={{ width: \"15rem\" }}>\r\n                  <LiquidChart\r\n                    percent={() =>\r\n                      calculatePercent(grandAmountPaid, grandTotalDue)\r\n                    }\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"green\">Target</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[0])}\r\n                      </span>\r\n                      <span style={{ marginLeft: \"6rem\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[0]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"red\">Below</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[1])}\r\n                      </span>\r\n                      <span style={{ marginLeft: \"6rem\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[1]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"orange\">Above</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[2])}\r\n                      </span>\r\n                      <span style={{ float: \"left\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[2]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                </div>\r\n              </Flex>\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n      </div>\r\n      {/* this is print */}\r\n      <div style={{ position: \"fixed\", right: 0, bottom: 0, padding: \"1rem\" }}>\r\n        <Print\r\n          component={\r\n            <div>\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SERVED ORDERS\r\n                </thead>\r\n                <tbody style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      {columnsOfOrders.map((field) => {\r\n                        return <th>{field?.title}</th>\r\n                      })}\r\n                    </tr>\r\n                    {[...dataList].reverse().map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    {subTotalOfDataList.map((data) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (dataList.length + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n              <br />\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SUMMARY OF SALES\r\n                </thead>\r\n                <tbody\r\n                  style={{ fontSize: \"8px\", display: \"flex\", width: \"100%\" }}\r\n                >\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                      marginRight: \"1rem\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>ORDER VIA</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ].map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          <td>{data[ORDER_VIA]}</td>\r\n                          <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                  <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>RECEIVING ACCT</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ACCOUNT_NUMBER,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ]\r\n                      .filter((obj) => {\r\n                        if (parseInt(obj[AMOUNT_PAID]) > 0) {\r\n                          return obj\r\n                        }\r\n                      })\r\n                      .map((data, index) => {\r\n                        return (\r\n                          <tr\r\n                            style={\r\n                              (index + 1) % 2 === 0\r\n                                ? { backgroundColor: \"white\" }\r\n                                : { backgroundColor: \"#999\" }\r\n                            }\r\n                          >\r\n                            <td>{data[ACCOUNT_NUMBER]}</td>\r\n                            <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                          </tr>\r\n                        )\r\n                      })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          }\r\n          button={<AiFillPrinter fontSize=\"2.5rem\" />}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ServedReportType\r\n\r\n{\r\n  /* <Grid>\r\n              <div>\r\n                <h4>VITOS BBQ DAILY REPORT</h4>\r\n              </div>\r\n              <Grid>\r\n                <h5>SERVED ORDER</h5>\r\n                <table>\r\n                  <thead>\r\n                    {columnsOfOrders.map((data) => (\r\n                      <th>{data.title}</th>\r\n                    ))}\r\n                  </thead>\r\n                  <tbody>\r\n                    {[...dataList, ...subTotalOfDataList].map((data) => {\r\n                      return (\r\n                        <tr>\r\n                          {Object.keys(data).map((field) => (\r\n                            <td>{data[field]}</td>\r\n                          ))}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    <tr>\r\n                      <td>data 1</td>\r\n                      <td>data 2</td>\r\n                      <td>data 3</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <Table\r\n                  size=\"small\"\r\n                  dataSource={[...dataList, ...subTotalOfDataList]}\r\n                  columns={columnsOfOrders}\r\n                  pagination={false}\r\n                />\r\n              </Grid>\r\n              <Grid>\r\n                <h5>SUMMARY OF SALES</h5>\r\n                <Flex alignItems=\"flex-start\">\r\n                  <Table\r\n                    size=\"small\"\r\n                    showHeader={false}\r\n                    pagination={false}\r\n                    dataSource={[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ]}\r\n                    columns={[\r\n                      {\r\n                        title: \"ORDER VIA\",\r\n                        key: \"orderVia\",\r\n                        dataIndex: \"orderVia\",\r\n                      },\r\n                      {\r\n                        title: \"AMOUNT PAID\",\r\n                        key: \"amountPaid\",\r\n                        dataIndex: \"amountPaid\",\r\n                        align: \"right\",\r\n                        render: (value) => {\r\n                          return <a>{thousandsSeparators(value)}</a>\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                  <Table\r\n                    showHeader={false}\r\n                    pagination={false}\r\n                    size=\"small\"\r\n                    dataSource={[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ]}\r\n                    columns={[\r\n                      {\r\n                        title: \"SOURCES\",\r\n                        key: \"source\",\r\n                        dataIndex: \"source\",\r\n                      },\r\n                      {\r\n                        title: \"AMOUNT PAID\",\r\n                        key: \"amountPaid\",\r\n                        dataIndex: \"amountPaid\",\r\n                        align: \"right\",\r\n                        render: (value) => {\r\n                          return <a>{thousandsSeparators(value)}</a>\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                </Flex>\r\n              </Grid>\r\n            </Grid> */\r\n}\r\n\r\n{\r\n  /* <Flex>\r\n                  <div style={{ flex: 1 }}>\r\n                    <h1>TOTAL AMOUNT PAID</h1>\r\n                  </div>\r\n                  {isSwitch ? (\r\n                    <span style={{ marginRight: \".5rem\" }}>Total Due</span>\r\n                  ) : (\r\n                    <span style={{ marginRight: \".5rem\" }}>Target Amount</span>\r\n                  )}\r\n                  <Switch\r\n                    checked={isSwitch}\r\n                    onChange={() => {\r\n                      setIsSwitch(!isSwitch)\r\n                    }}\r\n                  />\r\n                </Flex> */\r\n}\r\n{\r\n  /* <Flex>\r\n                  <LiquidChart percent={calculatePercent} />\r\n                  <div>\r\n                    <Tag color={isSwitch ? \"#2db7f5\" : \"\"}>\r\n                      {isSwitch ? \"Total Due\" : \"Target Amount\"}\r\n                    </Tag>\r\n                    {isSwitch ? (\r\n                      <div style={{ marginLeft: \".7rem\" }}>\r\n                        {thousandsSeparators(grandTotalDue)}\r\n                      </div>\r\n                    ) : (\r\n                      <div style={{ width: \"10rem\" }}>\r\n                        <Input\r\n                          value={targetAmount}\r\n                          bordered={false}\r\n                          onChange={(e) => setTargetAmount(e.target.value)}\r\n                          onBlur={(e) => {\r\n                            if (\r\n                              Number(e.target.value) < Number(grandAmountPaid)\r\n                            ) {\r\n                              setTargetAmount(grandAmountPaid)\r\n                            }\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    <br />\r\n                    <Tag color=\"#ff4d4f\">Amount Paid</Tag>\r\n                    <div style={{ marginLeft: \".7rem\" }}>\r\n                      {thousandsSeparators(grandAmountPaid)}\r\n                    </div>\r\n                  </div>\r\n                </Flex> */\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\LiquidChart\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\addMinusDay.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Styles\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\checkDate.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useRangeHandler.js",["902"],"import { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(ServiceClass) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n\r\n  const loadData = async (dates, fieldname) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataByDate(\r\n        [dates[0]._d, dates[1]._d],\r\n        fieldname,\r\n        user?.branchSelected\r\n      )\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByFn.js",["903"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentsByFn(ServiceClass) {\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n  const loadData = async (fieldname, value) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataByFieldname(fieldname, value)\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByKeyword.js",["904","905","906"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentsByKeyword(ServiceClass) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n  const loadData = async (fieldname, value) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      let _data = []\r\n      switch (fieldname) {\r\n        case ServiceClass.MODE_PAYMENT:\r\n          _data = await ServiceClass.getDataByKeyword(\r\n            fieldname,\r\n            value,\r\n            user.branchSelected\r\n          )\r\n        case ServiceClass.SOURCE:\r\n          _data = await ServiceClass.getDataByKeyword(\r\n            fieldname,\r\n            value,\r\n            user.branchSelected\r\n          )\r\n        case ServiceClass.REVENUE_CHANNEL:\r\n          if (value === \"DR\") {\r\n            _data = await ServiceClass.getDataNotEqualToFieldname(\r\n              ServiceClass.ORDER_VIA,\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            setData(_data)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          } else if (value === \"PP\") {\r\n            _data = await ServiceClass.getDataNotEqualToFieldname(\r\n              ServiceClass.ORDER_VIA_PARTNER,\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            setData(_data)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          } else {\r\n            _data = await ServiceClass.getDataNotEqualToFieldname(\r\n              ServiceClass.ORDER_VIA_WEBSITE,\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            setData(_data)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n        case ServiceClass.SALES_TYPE:\r\n          if (value === \"D/O\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Automatic 50 percent off\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => obj[ServiceClass.ORDER_VIA]\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"D/PM\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Promo\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => obj[ServiceClass.ORDER_VIA]\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"D/IR\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Incidents\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => obj[ServiceClass.ORDER_VIA]\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"D/S\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Special\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => obj[ServiceClass.ORDER_VIA]\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"SPWD\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Senior Citizen\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            setData(_data)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"R\") {\r\n            _data = await ServiceClass.getDataNotEqualToFieldname(\r\n              ServiceClass.ORDER_VIA,\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => Object.keys(obj?.others || {}).length === 0\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n          return\r\n        default:\r\n          _data = await ServiceClass.getDataByKeyword(\r\n            fieldname,\r\n            value,\r\n            user.branchSelected\r\n          )\r\n      }\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderDetails.js",["907","908","909","910","911","912","913","914","915","916","917","918"],"import { Card, Col, DatePicker, Row, Space, Switch } from \"antd\"\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\"\r\nimport CustomDate from \"Components/Commons/CustomDate\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport {\r\n  DATE_TYPE,\r\n  DROPDOWN_TYPE,\r\n  STRING_TYPE,\r\n  TEXT_AREA_TYPE,\r\n} from \"Constants/types\"\r\nimport useGetDocumentsByFn from \"Hooks/useGetDocumentsByFn\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport CustomTextArea from \"Components/Commons/CustomTextArea\"\r\nimport {\r\n  producedDropdowns,\r\n  producedProductListOfAllCodes,\r\n} from \"Helpers/collectionData\"\r\nimport addMinusDay, { addMinutes, minusMinutes } from \"Helpers/addMinusDay\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatTime,\r\n} from \"Helpers/dateFormat\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport moment from \"moment\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport VIPUsersClass from \"Services/Classes/vipUsersClass\"\r\n\r\nfunction OrderDetails({\r\n  channel,\r\n  modifiedData = () => {},\r\n  orderData,\r\n  tabs,\r\n  ...rest\r\n}) {\r\n  const [vip, loadVIP] = useGetDocumentById(VIPUsersClass)\r\n  const [data] = useGetDocuments(ProductsClass)\r\n  const [dropdownCollections] = useGetDocuments(DropdownsClass)\r\n  const types = {\r\n    ...SchedulersClass.TYPES,\r\n    customDate: \"customDate\",\r\n    space: \"space\",\r\n  }\r\n  const rowColumns = [SchedulersClass.DATE_START, SchedulersClass.DATE_END]\r\n\r\n  // this is for the value data States\r\n  const [dates, setDates] = useState({\r\n    [SchedulersClass.DATE_ORDER_PLACED]: new Date(),\r\n    [SchedulersClass.DATE_START]: new Date(),\r\n    [SchedulersClass.DATE_END]: addMinutes(new Date()),\r\n  })\r\n  const [dataValue, setDataValue] = useState({\r\n    [SchedulersClass.REMARKS]: \"RIDER DETAILS:\\nNAME:\\nCONTACT NUMBER:\",\r\n  })\r\n  //------------------//\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [firstColumns, setFirstColumns] = useState([\r\n    SchedulersClass.UTAK_NO,\r\n    \"space\",\r\n    SchedulersClass.CUSTOMER,\r\n    SchedulersClass.CONTACT_NUMBER,\r\n  ])\r\n  const [rowColumnsBottom, setRowColumnsBottom] = useState([])\r\n  const [enableTimeGap, setEnableTimeGap] = useState(true)\r\n  const [enableVIP, setEnableVIP] = useState(false)\r\n  const [secondColumns, setSecondColumns] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (vip) {\r\n      setEnableVIP(vip[SchedulersClass.IS_VIP])\r\n      handleChanges(SchedulersClass.IS_VIP, !enableVIP)\r\n    }\r\n  }, [vip])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      modifiedData({ ...dates, ...dataValue })\r\n    }\r\n  }, [dates, dataValue])\r\n\r\n  useEffect(() => {\r\n    const _secondColumns = [channel, SchedulersClass.ACCOUNT_NAME]\r\n    const _rowColumnsBot = [\r\n      \"customDate\", //this the date time start and time field\r\n      SchedulersClass.STATUS,\r\n      SchedulersClass.INDICATE_REASON,\r\n      SchedulersClass.REMARKS,\r\n    ]\r\n    if (channel === SchedulersClass.ORDER_VIA_PARTNER) {\r\n      _rowColumnsBot.splice(0, 0, SchedulersClass.PARTNER_MERCHANT_ORDER_NO)\r\n    }\r\n    if (channel === SchedulersClass.ORDER_VIA_WEBSITE) {\r\n      _rowColumnsBot.splice(0, 0, SchedulersClass.ZAP_NUMBER)\r\n    }\r\n\r\n    setSecondColumns(_secondColumns)\r\n    setRowColumnsBottom(_rowColumnsBot)\r\n\r\n    // dataValue reset\r\n    const productCodes = producedProductListOfAllCodes(data)\r\n    const _orderData = { ...orderData }\r\n    for (const key of productCodes) {\r\n      delete _orderData[key]\r\n      delete _orderData[`customPrice${key}`]\r\n    }\r\n    delete _orderData[SchedulersClass.TOTAL_DUE]\r\n    let _dataValue = {\r\n      ..._orderData,\r\n    }\r\n\r\n    // order via renewed\r\n    for (const key of tabs) {\r\n      if (channel !== key) {\r\n        _dataValue[key] = null\r\n      }\r\n    }\r\n\r\n    if (Object.keys(_orderData).length > 0) {\r\n      // _dataValue = { ..._dataValue, ...orderData }\r\n\r\n      // this is for the date fields from database\r\n      const dateStart = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_START]\r\n      )\r\n      const dateEnd = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_END]\r\n      )\r\n      const dateTimePlaced = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_ORDER_PLACED]\r\n      )\r\n      setDates({\r\n        [SchedulersClass.DATE_START]: dateStart,\r\n        [SchedulersClass.DATE_END]: dateEnd,\r\n        [SchedulersClass.DATE_ORDER_PLACED]: dateTimePlaced,\r\n      })\r\n\r\n      //ramove date properties since it will be on the separate state called dates\r\n      delete _dataValue[SchedulersClass.DATE_START]\r\n      delete _dataValue[SchedulersClass.DATE_END]\r\n      delete _dataValue[SchedulersClass.DATE_ORDER_PLACED]\r\n      delete _dataValue[SchedulersClass.DATE_PAYMENT]\r\n    } else {\r\n      _dataValue[SchedulersClass.REMARKS] =\r\n        \"RIDER DETAILS:\\nNAME:\\nCONTACT NUMBER:\"\r\n    }\r\n\r\n    if (channel === SchedulersClass.ORDER_VIA_WEBSITE) {\r\n      _dataValue[SchedulersClass.ORDER_VIA_WEBSITE] = \"[ ZAP ] ZAP\"\r\n    }\r\n    setDataValue(_dataValue)\r\n\r\n    if (orderData[SchedulersClass.IS_VIP]) {\r\n      setEnableVIP(orderData[SchedulersClass.IS_VIP])\r\n    }\r\n  }, [channel, data])\r\n\r\n  const handleChanges = (fieldName, value) => {\r\n    setIsTouched(true)\r\n    const _dataValue = { ...dataValue }\r\n    _dataValue[fieldName] = value\r\n    setDataValue(_dataValue)\r\n  }\r\n\r\n  const handleDateChanges = (fieldName, value) => {\r\n    setIsTouched(true)\r\n    const _dates = { ...dates }\r\n    _dates[fieldName] = value\r\n    if (enableTimeGap) {\r\n      if (fieldName === SchedulersClass.DATE_START) {\r\n        const datetime = addMinutes(value)\r\n        _dates[SchedulersClass.DATE_END] = datetime\r\n      }\r\n      if (fieldName === SchedulersClass.DATE_END) {\r\n        const datetime = minusMinutes(value)\r\n        _dates[SchedulersClass.DATE_START] = datetime\r\n      }\r\n    }\r\n    setDates(_dates)\r\n  }\r\n  return (\r\n    <Card\r\n      title=\"Order Details\"\r\n      extra={\r\n        <Space>\r\n          {enableVIP ? \"VIP\" : \"Regular\"}\r\n          <Switch\r\n            onChange={() => {\r\n              setEnableVIP(!enableVIP)\r\n              handleChanges(SchedulersClass.IS_VIP, !enableVIP)\r\n            }}\r\n            checked={enableVIP}\r\n          />\r\n        </Space>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\" style={{ marginBottom: \"1rem\" }}>\r\n        <Space>\r\n          <CustomTitle\r\n            typographyType=\"text\"\r\n            label=\"BRANCH: \"\r\n            type=\"secondary\"\r\n          />\r\n          <CustomTitle\r\n            typographyType=\"text\"\r\n            label={orderData[SchedulersClass.BRANCH] || rest?.branch}\r\n          />\r\n        </Space>\r\n        {orderData?.orderNo && (\r\n          <Space>\r\n            <CustomTitle\r\n              typographyType=\"text\"\r\n              label=\"ORDER #: \"\r\n              type=\"secondary\"\r\n            />\r\n            <CustomTitle\r\n              typographyType=\"text\"\r\n              label={orderData[SchedulersClass.ORDER_NO]}\r\n            />\r\n          </Space>\r\n        )}\r\n      </Space>\r\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n        <CustomTitle\r\n          typographyType=\"text\"\r\n          label={SchedulersClass.LABELS[SchedulersClass.DATE_ORDER_PLACED]}\r\n        />\r\n        <DatePicker\r\n          value={moment(\r\n            dates[SchedulersClass.DATE_ORDER_PLACED],\r\n            \"MM/DD/YYYY hh:mm\"\r\n          )}\r\n          showTime={true}\r\n          onChange={(obj) => {\r\n            if (obj) {\r\n              handleDateChanges(SchedulersClass.DATE_ORDER_PLACED, obj?._d)\r\n            }\r\n          }}\r\n          format=\"MM/DD/YYYY hh:mm\"\r\n          use12Hours\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </Space>\r\n      {/* <DateField\r\n        fieldName={SchedulersClass.DATE_ORDER_PLACED}\r\n        onChange={handleDateChanges}\r\n        value={dates[SchedulersClass.DATE_ORDER_PLACED]}\r\n        showTime={true}\r\n      /> */}\r\n      <Row gutter={[8, 10]} style={{ width: \"100%\", marginTop: \"1rem\" }}>\r\n        {firstColumns.map((key) => {\r\n          switch (types[key]) {\r\n            case DROPDOWN_TYPE:\r\n              return (\r\n                <Col xs={24} sm={12} style={{ width: \"100%\" }}>\r\n                  <SelectField\r\n                    key={key}\r\n                    fieldName={key}\r\n                    onChange={handleChanges}\r\n                    value={dataValue[key]}\r\n                    dropdowns={dropdownCollections}\r\n                  />\r\n                </Col>\r\n              )\r\n            case \"space\":\r\n              return <Col xs={24} sm={12} style={{ width: \"100%\" }}></Col>\r\n            default:\r\n              return (\r\n                <Col xs={24} sm={12} style={{ width: \"100%\" }}>\r\n                  <StringField\r\n                    key={key}\r\n                    fieldName={key}\r\n                    value={dataValue[key]}\r\n                    onChange={handleChanges}\r\n                    loadVIP={loadVIP}\r\n                  />\r\n                </Col>\r\n              )\r\n          }\r\n        })}\r\n        {secondColumns.map((key) => {\r\n          switch (types[key]) {\r\n            case DROPDOWN_TYPE:\r\n              return (\r\n                <Col xs={24} sm={12} style={{ width: \"100%\" }}>\r\n                  <SelectField\r\n                    key={key}\r\n                    fieldName={key}\r\n                    onChange={handleChanges}\r\n                    dropdowns={dropdownCollections}\r\n                    value={dataValue[key]}\r\n                  />\r\n                </Col>\r\n              )\r\n            default:\r\n              return (\r\n                <Col xs={24} sm={12} style={{ width: \"100%\" }}>\r\n                  <StringField\r\n                    key={key}\r\n                    fieldName={key}\r\n                    onChange={handleChanges}\r\n                    value={dataValue[key]}\r\n                  />\r\n                </Col>\r\n              )\r\n          }\r\n        })}\r\n      </Row>\r\n\r\n      <Space direction=\"vertical\" style={{ width: \"100%\", marginTop: \"1rem\" }}>\r\n        {rowColumnsBottom.map((key) => {\r\n          switch (types[key]) {\r\n            case TEXT_AREA_TYPE:\r\n              return (\r\n                <TextAreaField\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n\r\n            case \"customDate\":\r\n              return (\r\n                <Row gutter={[10, 12]} style={{}}>\r\n                  <Col xs={12}>\r\n                    <DateField\r\n                      fieldName={SchedulersClass.DATE_START}\r\n                      onChange={handleDateChanges}\r\n                      value={dates[SchedulersClass.DATE_START]}\r\n                      showTime={false}\r\n                    />\r\n                  </Col>\r\n                  <Col xs={12}>\r\n                    <TimeField\r\n                      fieldName={SchedulersClass.DATE_START}\r\n                      onChange={handleDateChanges}\r\n                      value={dates[SchedulersClass.DATE_START]}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              )\r\n            case DROPDOWN_TYPE:\r\n              return (\r\n                <SelectField\r\n                  key={key}\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  dropdowns={dropdownCollections}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n            default:\r\n              return (\r\n                <StringField\r\n                  key={key}\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n          }\r\n        })}\r\n      </Space>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst StringField = (props) => {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <CustomInput\r\n        placeholder=\"Enter here\"\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(props.fieldName, e.target.value)}\r\n        onBlur={(e) => {\r\n          if (SchedulersClass.CUSTOMER === props.fieldName) {\r\n            props.loadVIP(e.target.value)\r\n          }\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst DateField = (props) => {\r\n  const { sm } = useBreakpoint()\r\n  let format = sm\r\n    ? {\r\n        format: props.showTime ? \"MM/DD/YYYY hh:mm A\" : \"MM/DD/YYYY\",\r\n      }\r\n    : {\r\n        format: props.showTime ? \"MM/DD/YY hh:mm A\" : \"MM/DD/YYYY\",\r\n      }\r\n\r\n  let label = SchedulersClass.LABELS[props.fieldName]\r\n  if (SchedulersClass.DATE_START === props.fieldName) {\r\n    label = \"DATE\"\r\n  }\r\n\r\n  if (SchedulersClass.DATE_ORDER_PLACED === props.fieldName) {\r\n    label = \"DATE/TIME PLACED\"\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" label={label} />\r\n      <CustomDate\r\n        value={props.value}\r\n        showTime={props.showTime}\r\n        onChange={(obj) => {\r\n          if (obj) {\r\n            props.onChange(props.fieldName, obj?._d)\r\n          }\r\n        }}\r\n        {...format}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst TimeField = (props) => {\r\n  const timeList = {\r\n    \"8:00 AM - 8:30 AM\": \"08:00:00\",\r\n    \"8:30 AM - 9:00 AM\": \"08:30:00\",\r\n    \"9:00 AM - 9:30 AM\": \"09:00:00\",\r\n    \"9:30 AM - 10:00 AM\": \"09:30:00\",\r\n    \"10:00 AM - 10:30 AM\": \"10:00:00\",\r\n    \"10:30 AM - 11:00 AM\": \"10:30:00\",\r\n    \"11:00 AM - 11:30 AM\": \"11:00:00\",\r\n    \"11:30 AM - 12:00 AM\": \"11:30:00\",\r\n    \"12:00 AM - 12:30 PM\": \"12:00:00\",\r\n    \"12:30 PM - 1:00 PM\": \"12:30:00\",\r\n    \"1:00 PM - 1:30 PM\": \"13:00:00\",\r\n    \"1:30 PM - 2:00 PM\": \"13:30:00\",\r\n    \"2:00 AM - 2:30 PM\": \"14:00:00\",\r\n    \"2:30 PM - 3:00 PM\": \"14:30:00\",\r\n    \"3:00 PM - 3:30 PM\": \"15:00:00\",\r\n    \"3:30 PM - 4:00 PM\": \"15:30:00\",\r\n    \"4:00 PM - 4:30 PM\": \"16:00:00\",\r\n    \"4:30 PM - 5:00 PM\": \"16:30:00\",\r\n    \"5:00 AM - 5:30 PM\": \"17:00:00\",\r\n    \"5:30 PM - 6:00 PM\": \"17:30:00\",\r\n    \"6:00 PM - 6:30 PM\": \"18:00:00\",\r\n    \"6:30 PM - 7:00 PM\": \"18:30:00\",\r\n  }\r\n  const dateFormat = formatDateDash(props.value)\r\n  const timeSplit = props?.value.toTimeString().split(\" \")\r\n  const timeValue = timeSplit.length > 0 ? timeSplit[0] : \"8:00:00\"\r\n\r\n  let timeListValue = \"8:00 AM - 8:30 AM\"\r\n  for (const key in timeList) {\r\n    if (timeList[key] === timeValue) {\r\n      timeListValue = key\r\n      break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" label=\"TIME\" />\r\n\r\n      <AutoSelect\r\n        options={[...Object.keys(timeList).map((time) => time)]}\r\n        width=\"100%\"\r\n        value={timeListValue}\r\n        onChange={(value) =>\r\n          props.onChange(\r\n            props.fieldName,\r\n            new Date(`${dateFormat} ${timeList[value]}`)\r\n          )\r\n        }\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst SelectField = (props) => {\r\n  const dropdowns = props?.dropdowns || []\r\n  const findDropdownWithKey = dropdowns.find(\r\n    (data) => data[DropdownsClass.NAME] === props.fieldName\r\n  )\r\n  const list = findDropdownWithKey?.list || []\r\n\r\n  let label = SchedulersClass.LABELS[props.fieldName]\r\n  if (\r\n    SchedulersClass.ORDER_VIA === props.fieldName ||\r\n    SchedulersClass.ORDER_VIA_PARTNER === props.fieldName ||\r\n    SchedulersClass.ORDER_VIA_WEBSITE === props.fieldName\r\n  ) {\r\n    label = \"ORDER VIA\"\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" label={label} />\r\n      <AutoSelect\r\n        options={[...list]}\r\n        width=\"100%\"\r\n        value={props.value}\r\n        onChange={(value) => props.onChange(props.fieldName, value)}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst TextAreaField = (props) => {\r\n  return (\r\n    <>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <CustomTextArea\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(props.fieldName, e.target.value)}\r\n      />\r\n    </>\r\n  )\r\n}\r\nexport default OrderDetails\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDate.js",["919","920"],"import { DatePicker } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport moment from \"moment\"\r\n\r\nconst handleDateFormatting = (date) => {\r\n  const minutes = date.getMinutes()\r\n  const hours = date.getHours()\r\n  const defaultMin = minutes >= 30 ? 30 : 0\r\n  return new Date(date.setHours(hours, defaultMin, 0, 0))\r\n}\r\n\r\nfunction CustomDate({\r\n  width = \"100%\",\r\n  onChange = () => {},\r\n  value = handleDateFormatting(new Date()),\r\n  format = \"MM/DD/YYYY hh:mm\",\r\n  showTime = true,\r\n  ...rest\r\n}) {\r\n  const dateValue = moment(handleDateFormatting(value), format)\r\n  return (\r\n    <div style={{ width }}>\r\n      <DatePicker\r\n        {...rest}\r\n        style={{ width: width }}\r\n        value={dateValue}\r\n        format={format}\r\n        showTime={\r\n          showTime\r\n            ? {\r\n                minuteStep: 30,\r\n                use12Hours: true,\r\n                disabledHours: () => {\r\n                  return [1, 2, 3, 4, 5, 6, 7, 20, 21, 22, 23, 24]\r\n                },\r\n                hideDisabledOptions: true,\r\n              }\r\n            : showTime\r\n        }\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CustomDate\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTextArea.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\useProductPurchased.js",["921","922","923","924","925"],"import {\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n} from \"Helpers/collectionData\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport productStaticPrices from \"./productStaticPrices\"\r\nexport default function useProductPurchased(orderData, orderVia = \"\") {\r\n  const [data] = useGetDocuments(ProductsClass)\r\n  const [editableId, setEditableId] = useState(null)\r\n  const [codeObjList, setCodeObjList] = useState([])\r\n  const [productList, setProductList] = useState([])\r\n  const [products, setProducts] = useState([])\r\n  const [dataSource, setDataSource] = useState([])\r\n  const [totalDue, setTotalDue] = useState(0)\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  // this is for active product button selected load when modified\r\n\r\n  useEffect(() => {\r\n    if (orderData) {\r\n      const productList = producedProductListOfAllCodes(data)\r\n      const checkedProductCodes = []\r\n      for (const key of productList) {\r\n        if (typeof orderData[key] !== \"undefined\") {\r\n          if (Number(orderData[key]) > 0) {\r\n            checkedProductCodes.push(key)\r\n          }\r\n        }\r\n      }\r\n      loadProductStates(data, checkedProductCodes)\r\n    }\r\n  }, [orderData, codeObjList])\r\n\r\n  // this is for product class loading\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      setProductList(data)\r\n      loadProductStates(data)\r\n\r\n      const _codeObjList = []\r\n      for (const { productList = [] } of data) {\r\n        for (const obj of productList) {\r\n          const productObj = { ...obj }\r\n          productObj.price = productStaticPrices(\r\n            orderVia,\r\n            obj?.code,\r\n            obj?.price\r\n          )\r\n          _codeObjList.push(productObj)\r\n        }\r\n      }\r\n      setCodeObjList(_codeObjList)\r\n    }\r\n  }, [data, orderVia])\r\n\r\n  useEffect(() => {\r\n    if (codeObjList) {\r\n      const _dataSource = []\r\n      for (const code in products) {\r\n        if (products[code]) {\r\n          const _data = codeObjList.find(\r\n            (obj) => obj[ProductsClass.CODE] === code\r\n          )\r\n\r\n          const isDataExist = dataSource.find(\r\n            (obj) => obj[ProductsClass.CODE] === code\r\n          )\r\n          if (!isDataExist) {\r\n            const ifPriceEditable =\r\n              _data[ProductsClass.PRICE] === 0\r\n                ? {\r\n                    editable: true,\r\n                    [`customPrice${code}`]:\r\n                      orderData[[`customPrice${code}`]] || 0,\r\n                    price: orderData[[`customPrice${code}`]] || 0,\r\n                  }\r\n                : {}\r\n\r\n            _dataSource.push({\r\n              ..._data,\r\n              qty: orderData[code] > 0 ? orderData[code] : 1,\r\n              ...ifPriceEditable,\r\n            })\r\n          } else {\r\n            _dataSource.push({ ...isDataExist })\r\n          }\r\n        }\r\n      }\r\n\r\n      setDataSource(_dataSource)\r\n      handleTotalDue(_dataSource)\r\n    }\r\n  }, [products])\r\n\r\n  const handleTotalDue = (_dataSource) => {\r\n    //this is for total due\r\n    let _totalDue = 0\r\n    for (const obj of _dataSource) {\r\n      _totalDue = _totalDue + Number(obj?.price) * Number(obj?.qty)\r\n    }\r\n    setTotalDue(_totalDue)\r\n  }\r\n\r\n  const addProduct = (code, checked) => {\r\n    const _products = { ...products }\r\n    _products[code] = checked\r\n    setProducts(_products)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const loadProductStates = (_data, checkedProducts = []) => {\r\n    const list = producedProductListOfAllCodes(_data)\r\n    const _products = {}\r\n    for (const code of list) {\r\n      if (checkedProducts.includes(code)) {\r\n        _products[code] = true\r\n      } else {\r\n        _products[code] = false\r\n      }\r\n    }\r\n\r\n    setProducts(_products)\r\n  }\r\n\r\n  const handleEditing = (value, fieldName) => {\r\n    if (fieldName === \"qty\") {\r\n      if (isNaN(value)) return\r\n      if (Number(value) < 0) return\r\n    }\r\n    const _dataSource = [...dataSource]\r\n    const dataIndex = dataSource.findIndex((obj) => obj?.code === editableId)\r\n    const dataSourceObj = { ..._dataSource[dataIndex] }\r\n    dataSourceObj[fieldName] = Number(value)\r\n    _dataSource[dataIndex] = dataSourceObj\r\n    setDataSource(_dataSource)\r\n    handleTotalDue(_dataSource)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const handleEditPrice = (e) => {\r\n    const value = e.target.value\r\n    if (isNaN(value)) return\r\n    if (Number(value) < 0) return\r\n    const _dataSource = [...dataSource]\r\n    const dataIndex = dataSource.findIndex((obj) => obj?.code === editableId)\r\n    const dataSourceObj = { ..._dataSource[dataIndex] }\r\n    dataSourceObj[`customPrice${editableId}`] = Number(value)\r\n    dataSourceObj.price = Number(value)\r\n    _dataSource[dataIndex] = dataSourceObj\r\n    setDataSource(_dataSource)\r\n    handleTotalDue(_dataSource)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  return {\r\n    products,\r\n    addProduct,\r\n    productList,\r\n    codeObjList,\r\n    dataSource,\r\n    handleEditing,\r\n    handleEditPrice,\r\n    editableId,\r\n    setEditableId,\r\n    totalDue,\r\n    isTouched,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\ProductPurchased.js",["926","927","928","929"],"import { Card, Space, Table, Tag } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport CustomModal from \"Components/Commons/CustomModal\"\r\nimport useProductPurchased from \"./useProductPurchased\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction ProductPurchased({\r\n  modifiedData = () => {},\r\n  orderData,\r\n  orderVia = \"\",\r\n}) {\r\n  const {\r\n    products,\r\n    addProduct,\r\n    productList,\r\n    dataSource,\r\n    handleEditing,\r\n    editableId,\r\n    setEditableId,\r\n    handleEditPrice,\r\n    totalDue,\r\n    isTouched,\r\n  } = useProductPurchased(orderData, orderVia)\r\n  useEffect(() => {\r\n    const modifiedObj = {}\r\n    for (const key in products) {\r\n      modifiedObj[key] = 0\r\n    }\r\n    if (isTouched) {\r\n      if (dataSource.length > 0) {\r\n        // set default list of products\r\n        for (const obj of dataSource) {\r\n          modifiedObj[obj?.code] = obj?.qty\r\n          const customPrice = `customPrice${obj?.code}`\r\n          if (typeof obj[customPrice] !== \"undefined\") {\r\n            modifiedObj[customPrice] = obj[customPrice]\r\n          }\r\n        }\r\n        modifiedObj[SchedulersClass.TOTAL_DUE] = Number(totalDue)\r\n        modifiedObj[SchedulersClass.OTHERS] = {}\r\n        modifiedData(modifiedObj)\r\n      } else {\r\n        modifiedObj[SchedulersClass.TOTAL_DUE] = 0\r\n        modifiedObj[SchedulersClass.OTHERS] = {}\r\n        modifiedData(modifiedObj)\r\n      }\r\n    }\r\n    if (orderVia) {\r\n      modifiedObj[SchedulersClass.TOTAL_DUE] = Number(totalDue)\r\n      modifiedData(modifiedObj)\r\n    }\r\n  }, [dataSource, isTouched, totalDue, orderVia])\r\n\r\n  const sortedProductList = productList.sort(\r\n    (a, b) => a[ProductsClass.NO] - b[ProductsClass.NO]\r\n  )\r\n  return (\r\n    <Card\r\n      title=\"Product Purchased\"\r\n      actions={[\r\n        <Due label=\"Total Due\" value={totalDue} />,\r\n        <ActionButton\r\n          productList={sortedProductList}\r\n          addProduct={addProduct}\r\n          products={products}\r\n          dataSource={dataSource}\r\n          setEditableId={setEditableId}\r\n          handleEditing={handleEditing}\r\n        />,\r\n      ]}\r\n    >\r\n      <Table\r\n        pagination={{ pageSize: 4 }}\r\n        dataSource={[...dataSource]}\r\n        columns={[\r\n          {\r\n            title: \"Code\",\r\n            dataIndex: \"code\",\r\n            key: \"code\",\r\n            width: 50,\r\n            onCell: (data) => {\r\n              return {\r\n                onClick: () => {\r\n                  setEditableId(data?.code)\r\n                },\r\n              }\r\n            },\r\n            render: (data) => {\r\n              return <span>{data}</span>\r\n            },\r\n          },\r\n          {\r\n            title: \"Price\",\r\n            dataIndex: \"price\",\r\n            key: \"price\",\r\n            align: \"right\",\r\n            width: 100,\r\n            onCell: (data) => {\r\n              return {\r\n                onClick: () => {\r\n                  setEditableId(data?.code)\r\n                },\r\n              }\r\n            },\r\n            render: (value, record) => {\r\n              const isCustomPrice =\r\n                typeof record[`customPrice${record?.code}`] !== \"undefined\"\r\n              const customPrice = record[`customPrice${record?.code}`] || value\r\n              return editableId === record?.code && isCustomPrice ? (\r\n                <CustomInput\r\n                  value={customPrice}\r\n                  onChange={handleEditPrice}\r\n                  onPressEnter={() => setEditableId(null)}\r\n                />\r\n              ) : (\r\n                <span>\r\n                  {thousandsSeparators(Number(customPrice).toFixed(2))}\r\n                </span>\r\n              )\r\n            },\r\n          },\r\n          {\r\n            title: \"Qty\",\r\n            dataIndex: \"qty\",\r\n            key: \"qty\",\r\n            width: 80,\r\n            onCell: (data) => {\r\n              return {\r\n                onClick: () => {\r\n                  setEditableId(data?.code)\r\n                },\r\n              }\r\n            },\r\n            render: (value, record) => {\r\n              return editableId === record?.code ? (\r\n                <CustomInput\r\n                  value={value}\r\n                  onChange={(e) => handleEditing(e.target.value, \"qty\")}\r\n                  onPressEnter={() => setEditableId(null)}\r\n                />\r\n              ) : (\r\n                <span>{value}</span>\r\n              )\r\n            },\r\n          },\r\n          {\r\n            title: \"Total\",\r\n            dataIndex: \"total\",\r\n            key: \"total\",\r\n            align: \"right\",\r\n            width: 100,\r\n            onCell: (data) => {\r\n              return {\r\n                onClick: () => {\r\n                  setEditableId(data?.code)\r\n                },\r\n              }\r\n            },\r\n            render: (value, record) => {\r\n              return (\r\n                <span>\r\n                  {thousandsSeparators(\r\n                    (Number(record?.price) * Number(record?.qty)).toFixed(2)\r\n                  )}\r\n                </span>\r\n              )\r\n            },\r\n          },\r\n        ]}\r\n        size=\"small\"\r\n      />\r\n    </Card>\r\n  )\r\n}\r\nconst Due = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <span style={{ position: \"absolute\", fontSize: \"10px\" }}>\r\n        {props.label}\r\n      </span>\r\n      <span style={{ position: \"absolute\", top: \"1rem\", color: \"red\" }}>\r\n        {thousandsSeparators(Number(props.value).toFixed(2))}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ActionButton = ({\r\n  productList = [],\r\n  addProduct = () => {},\r\n  products,\r\n  dataSource = [],\r\n  handleEditing,\r\n  setEditableId,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <CustomModal\r\n        title=\"Product list\"\r\n        buttonLabel=\"Add Product\"\r\n        buttonType=\"default\"\r\n        footer={false}\r\n      >\r\n        <Space\r\n          direction=\"vertical\"\r\n          wrap\r\n          style={{ width: \"100%\", justifyContent: \"center\" }}\r\n        >\r\n          {productList.map((obj, index) => {\r\n            const customCol = [\r\n              {\r\n                title: \"Code\",\r\n                dataIndex: \"code\",\r\n                render: (data) => {\r\n                  return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n                },\r\n                width: \"12rem\",\r\n              },\r\n              {\r\n                title: \"Description\",\r\n                dataIndex: \"description\",\r\n                render: (data) => {\r\n                  return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n                },\r\n                width: \"10rem\",\r\n              },\r\n              {\r\n                title: \"Price\",\r\n                dataIndex: \"price\",\r\n                render: (data) => {\r\n                  return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n                },\r\n                width: \"7rem\",\r\n                align: \"right\",\r\n              },\r\n              {\r\n                title: \"Qty\",\r\n                dataIndex: \"qty\",\r\n                render: (data, record) => {\r\n                  return (\r\n                    <CustomInput\r\n                      type=\"number\"\r\n                      style={{ fontSize: \"10px\", width: \"5rem\" }}\r\n                      value={data}\r\n                      onClick={() => {\r\n                        addProduct(record?.code, true)\r\n                        setEditableId(record?.code)\r\n                      }}\r\n                      onChange={(e) => {\r\n                        if (e.target.value === \"\") {\r\n                          addProduct(record?.code, false)\r\n                        }\r\n                        handleEditing(e.target.value, \"qty\")\r\n                      }}\r\n                    />\r\n                  )\r\n                },\r\n                width: \"7rem\",\r\n              },\r\n              {\r\n                title: \"Total\",\r\n                dataIndex: \"total\",\r\n                render: (data, record) => {\r\n                  const qty = Number(record?.qty)\r\n                  const price = Number(record?.price)\r\n                  const total = qty * price\r\n                  return (\r\n                    <span style={{ fontSize: \"10px\" }}>\r\n                      {thousandsSeparators(total.toFixed(2))}\r\n                    </span>\r\n                  )\r\n                },\r\n                align: \"right\",\r\n                width: \"7rem\",\r\n              },\r\n            ]\r\n            return (\r\n              <Space direction=\"vertical\">\r\n                <CustomTitle\r\n                  typographyType=\"text\"\r\n                  type=\"secondary\"\r\n                  label={obj[ProductsClass.GROUP_HEADER]}\r\n                />\r\n                <Table\r\n                  style={{ width: \"100%\" }}\r\n                  size=\"small\"\r\n                  pagination={false}\r\n                  showHeader={index === 0}\r\n                  columns={customCol}\r\n                  dataSource={[\r\n                    ...obj[ProductsClass.PRODUCT_LIST].map((data) => {\r\n                      const prodDetails = dataSource.find(\r\n                        (d) => d.code === data.code\r\n                      )\r\n                      if (Object.keys(prodDetails || {}).length > 0) {\r\n                        return { ...prodDetails }\r\n                      }\r\n                      return { ...data, qty: 0 }\r\n                    }),\r\n                  ]}\r\n                />\r\n                <Space wrap>\r\n                  {/* {obj[ProductsClass.PRODUCT_LIST].map(\r\n                    ({ code, description, price  }) => {\r\n                      return (\r\n                        <MainButton\r\n                          label={`${code} : ${description}`}\r\n                          type=\"default\"\r\n                          onClick={() => addProduct(code, !products[code])}\r\n                          type={products[code] ? \"primary\" : \"default\"}\r\n                        />\r\n                      )\r\n                    }\r\n                  )} */}\r\n                </Space>\r\n              </Space>\r\n            )\r\n          })}\r\n        </Space>\r\n      </CustomModal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductPurchased\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomModal.js",["930"],"import { Modal } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport MainButton from \"./MainButton\"\r\n\r\nfunction CustomModal({\r\n  buttonLabel = \"\",\r\n  handleOk = () => {},\r\n  buttonType = \"primary\",\r\n  buttonShape = \"round\",\r\n  buttonSize = \"medium\",\r\n  ButtonIcon = <></>,\r\n  ...rest\r\n}) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true)\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    handleOk()\r\n    setIsModalVisible(false)\r\n  }\r\n  return (\r\n    <>\r\n      <MainButton\r\n        type={buttonType}\r\n        onClick={showModal}\r\n        label={buttonLabel}\r\n        shape={buttonShape}\r\n        size={buttonSize}\r\n        Icon={ButtonIcon}\r\n      />\r\n      <Modal\r\n        title={rest.title}\r\n        visible={isModalVisible}\r\n        onOk={handleConfirm}\r\n        onCancel={handleCancel}\r\n        footer={rest.footer}\r\n      >\r\n        {rest.children}\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomModal\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\DiscountAndOthersDialog.js",["931"],"import React, { useEffect, useState } from \"react\"\r\nimport { Modal, Button } from \"antd\"\r\nimport { Radio, Input, Space, Slider } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nconst { TextArea } = Input\r\n\r\nconst SENIOR = \"Senior Citizen\"\r\nconst PWD = \"PWD\"\r\nconst AUTOMATIC = \"Automatic 50 percent off\"\r\nconst PROMO = \"Promo\"\r\nconst SPECIAL = \"Special\"\r\nconst INCIDENTS = \"Incidents\"\r\nconst REFUND = \"Refund\"\r\n\r\nconst fields = {\r\n  name: \"Name\",\r\n  city: \"City\",\r\n  id: \"ID#\",\r\n  amount: \"Amount\",\r\n  remarks: \"REMARKS\",\r\n}\r\n\r\nconst initialState = {\r\n  [SENIOR]: {\r\n    name: \"\",\r\n    city: \"\",\r\n    id: \"\",\r\n    amount: 0,\r\n  },\r\n  [PWD]: {\r\n    name: \"\",\r\n    city: \"\",\r\n    id: \"\",\r\n    amount: 0,\r\n  },\r\n  [AUTOMATIC]: {\r\n    amount: 0,\r\n    remarks: \"\",\r\n  },\r\n  [REFUND]: {\r\n    amount: 0,\r\n    remarks: \"\",\r\n  },\r\n  [PROMO]: {\r\n    percentage: 0,\r\n    amount: 0,\r\n  },\r\n  [INCIDENTS]: {\r\n    orderNo: \"\",\r\n    clientName: \"\",\r\n    contactNo: \"\",\r\n    dateAndTime: \"\",\r\n    briefDescription: \"\",\r\n    actionTaken: \"\",\r\n    onDuty: \"\",\r\n    amount: 0,\r\n  },\r\n  [SPECIAL]: {\r\n    orderNo: \"\",\r\n    clientName: \"\",\r\n    contactNo: \"\",\r\n    dateAndTime: \"\",\r\n    onDuty: \"\",\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nfunction DiscountAndOthersDialog(props) {\r\n  const [visible, setVisible] = useState(false)\r\n  const [state, setState] = useState(SENIOR)\r\n  const [additionalDetails, setAdditionalDetails] = useState({\r\n    ...initialState,\r\n  })\r\n\r\n  useEffect(() => {\r\n    const { formFields = {}, others = {}, orderNo = \"\" } = props\r\n    if (Object.keys(others).length > 0) {\r\n      for (const discName of Object.keys(others)) {\r\n        setState(discName)\r\n      }\r\n    } else {\r\n      setState(SENIOR)\r\n    }\r\n    if (formFields) {\r\n      setAdditionalDetails({\r\n        ...initialState,\r\n        ...formFields,\r\n      })\r\n    } else {\r\n      setAdditionalDetails({\r\n        ...initialState,\r\n        [AUTOMATIC]: { remarks: \"\", amount: props.totalDue * 0.5 },\r\n        [INCIDENTS]: { ...initialState[INCIDENTS], orderNo: orderNo },\r\n        [SPECIAL]: { ...initialState[INCIDENTS], orderNo: orderNo },\r\n      })\r\n    }\r\n  }, [props, visible])\r\n\r\n  const onChange = (e) => {\r\n    const automatic = { ...additionalDetails[AUTOMATIC] }\r\n    const incidents = { ...additionalDetails[INCIDENTS], orderNo: \"\" }\r\n    setAdditionalDetails({\r\n      ...additionalDetails,\r\n      [AUTOMATIC]: {\r\n        remarks: automatic?.remarks,\r\n        amount: props.totalDue * 0.5,\r\n      },\r\n      [INCIDENTS]: { ...incidents, orderNo: props?.orderNo || \"\" },\r\n    })\r\n    setState(e.target.value)\r\n  }\r\n\r\n  const handleFormChange = (e, discName, fieldName) => {\r\n    const _additionalDetails = { ...additionalDetails }\r\n    const _discName = { ..._additionalDetails[discName] }\r\n    _discName[fieldName] = e.target.value\r\n    _additionalDetails[discName] = _discName\r\n    setAdditionalDetails(_additionalDetails)\r\n  }\r\n\r\n  const handlePercentage = (value) => {\r\n    const _additionalDetails = { ...additionalDetails }\r\n    const _discName = { ..._additionalDetails[PROMO] }\r\n    _discName[\"percentage\"] = value\r\n    _discName[\"amount\"] = value * 0.01 * props.totalDue\r\n    _additionalDetails[PROMO] = _discName\r\n    setAdditionalDetails(_additionalDetails)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MainButton\r\n        disabled={\r\n          Number(props.totalDue) === 0 || typeof props?.totalDue === \"undefined\"\r\n        }\r\n        label=\"Less\"\r\n        danger\r\n        type=\"default\"\r\n        onClick={() => setVisible(true)}\r\n      />\r\n      <Modal\r\n        title=\"Discount and Others\"\r\n        centered\r\n        visible={visible}\r\n        onOk={() => {\r\n          setVisible(false)\r\n          // console.log(\"additionalDetails\", additionalDetails)\r\n          props.modifiedData(additionalDetails, state)\r\n        }}\r\n        onCancel={() => setVisible(false)}\r\n        width={1000}\r\n      >\r\n        <div style={{ minHeight: \"30rem\" }}>\r\n          <Radio.Group onChange={onChange} value={state}>\r\n            <Space direction=\"horizontal\">\r\n              <Radio value={SENIOR}>SENIOR CITIZEN</Radio>\r\n              <Radio value={PWD}>PWD</Radio>\r\n              <Radio value={AUTOMATIC}>AUTOMATIC 50% OFF</Radio>\r\n              <Radio value={PROMO}>PROMO</Radio>\r\n              <Radio value={SPECIAL}>SPECIAL</Radio>\r\n              <Radio value={INCIDENTS}>INCIDENTS</Radio>\r\n              <Radio value={REFUND}>REFUND</Radio>\r\n            </Space>\r\n          </Radio.Group>\r\n          <br />\r\n          <br />\r\n          <br />\r\n\r\n          {/* SENIOR AND PWD */}\r\n          <div\r\n            style={\r\n              state === SENIOR || state === PWD\r\n                ? { display: \"grid\", justifyContent: \"center\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            {(state === SENIOR || state === PWD) &&\r\n              Object.keys(additionalDetails[state]).map((fieldName) => {\r\n                return (\r\n                  <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n                    <label>{fields[fieldName]}</label>\r\n                    <Input\r\n                      value={additionalDetails[state][fieldName]}\r\n                      type={fieldName === \"amount\" ? \"number\" : \"text\"}\r\n                      onChange={(e) => handleFormChange(e, state, fieldName)}\r\n                    />\r\n                  </div>\r\n                )\r\n              })}\r\n          </div>\r\n\r\n          {/* AUTOMATIC AND REFUND */}\r\n          <div\r\n            style={\r\n              state === AUTOMATIC || state === REFUND\r\n                ? { display: \"grid\", justifyContent: \"center\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            {(state === AUTOMATIC || state === REFUND) &&\r\n              Object.keys(additionalDetails[state]).map((fieldName) => {\r\n                return fieldName === \"remarks\" ? (\r\n                  <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n                    <label>{fields[fieldName]}</label>\r\n                    <TextArea\r\n                      value={additionalDetails[state][fieldName]}\r\n                      onChange={(e) => handleFormChange(e, state, fieldName)}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n                    <label>{fields[fieldName]}</label>\r\n                    <Input\r\n                      value={additionalDetails[state][fieldName]}\r\n                      type={fieldName === \"amount\" ? \"number\" : \"text\"}\r\n                      onChange={(e) =>\r\n                        state !== AUTOMATIC &&\r\n                        handleFormChange(e, state, fieldName)\r\n                      }\r\n                    />\r\n                  </div>\r\n                )\r\n              })}\r\n          </div>\r\n\r\n          {/* PROMO */}\r\n\r\n          <div\r\n            style={\r\n              state === PROMO\r\n                ? { display: \"grid\", justifyContent: \"center\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                width: \"25rem\",\r\n                marginBottom: \".6rem\",\r\n                display: \"flex\",\r\n                alignItems: \"flex-end\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <div style={{ flex: \"1\" }}>\r\n                <label>Percentage:</label>\r\n                <Slider\r\n                  defaultValue={additionalDetails[PROMO]?.percentage}\r\n                  onChange={(value) => handlePercentage(value)}\r\n                />\r\n              </div>\r\n              <div style={{ padding: \".4rem\" }}>\r\n                <label>{`${additionalDetails[PROMO]?.percentage}%`}</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Amount:</label>\r\n              <Input type=\"number\" value={additionalDetails[PROMO]?.amount} />\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            style={\r\n              state === INCIDENTS || state === SPECIAL\r\n                ? { display: \"grid\", justifyContent: \"center\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Order #:</label>\r\n              <Input\r\n                value={additionalDetails[state].orderNo}\r\n                onChange={(e) => handleFormChange(e, state, \"orderNo\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Client name:</label>\r\n              <Input\r\n                value={additionalDetails[state].clientName}\r\n                onChange={(e) => handleFormChange(e, state, \"clientName\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Contact #:</label>\r\n              <Input\r\n                value={additionalDetails[state].contactNo}\r\n                onChange={(e) => handleFormChange(e, state, \"contactNo\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Date and time of Order #:</label>\r\n              <Input\r\n                type=\"text\"\r\n                value={additionalDetails[state].dateAndTime}\r\n                onChange={(e) => handleFormChange(e, state, \"dateAndTime\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Brief Description:</label>\r\n              <TextArea\r\n                type=\"text\"\r\n                value={additionalDetails[state].briefDescription}\r\n                onChange={(e) => handleFormChange(e, state, \"briefDescription\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Action Taken:</label>\r\n              <TextArea\r\n                type=\"text\"\r\n                value={additionalDetails[state].actionTaken}\r\n                onChange={(e) => handleFormChange(e, state, \"actionTaken\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>On duty:</label>\r\n              <Input\r\n                type=\"text\"\r\n                value={additionalDetails[state].onDuty}\r\n                onChange={(e) => handleFormChange(e, state, \"onDuty\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Amount:</label>\r\n              <Input\r\n                value={additionalDetails[state].amount}\r\n                type=\"number\"\r\n                onChange={(e) => handleFormChange(e, state, \"amount\")}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DiscountAndOthersDialog\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\PaymentForm.js",["932","933","934","935","936"],"import { Col, message, Row, Space } from \"antd\"\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport CustomDate from \"Components/Commons/CustomDate\"\r\nimport CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomModal from \"Components/Commons/CustomModal\"\r\nimport CustomTextArea from \"Components/Commons/CustomTextArea\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction PaymentForm({\r\n  paymentList = [],\r\n  index = null,\r\n  buttonLabel = \"Add Payment\",\r\n  buttonShape = \"round\",\r\n  buttonSize = \"medium\",\r\n  ButtonIcon = <></>,\r\n  padding = \"0rem 1rem\",\r\n  modifiedData = () => {},\r\n  addData = () => {},\r\n  balanceDue,\r\n  totalDue,\r\n  fixedDeduction = 0,\r\n  discounts,\r\n  enabledButton = true,\r\n  dropdownCollections,\r\n}) {\r\n  const [dataIndex, setDataIndex] = useState(null)\r\n  const [data, setData] = useState({\r\n    date: new Date(),\r\n    [SchedulersClass.MODE_PAYMENT]: \"\",\r\n    [SchedulersClass.SOURCE]: \"\",\r\n    [SchedulersClass.ACCOUNT_NUMBER]: \"\",\r\n    [SchedulersClass.PAYMENT_NOTES]: \"\",\r\n    amount: 0,\r\n  })\r\n  useEffect(() => {\r\n    if (!isNaN(index) && paymentList.length > 0) {\r\n      if (typeof paymentList[index] !== \"undefined\") {\r\n        setData({ ...paymentList[index] })\r\n        setDataIndex(index)\r\n      } else {\r\n        setData({\r\n          ...data,\r\n          date: new Date(),\r\n          [SchedulersClass.MODE_PAYMENT]: \"\",\r\n          [SchedulersClass.SOURCE]: \"\",\r\n          [SchedulersClass.ACCOUNT_NUMBER]: \"\",\r\n          [SchedulersClass.PAYMENT_NOTES]: \"\",\r\n        })\r\n      }\r\n    }\r\n  }, [index, paymentList])\r\n\r\n  useEffect(() => {\r\n    if (index === null) {\r\n      setData({ ...data, amount: balanceDue })\r\n    }\r\n  }, [balanceDue, index])\r\n\r\n  const handleChange = (fieldName, value) => {\r\n    if (fieldName === \"amount\") {\r\n      const numberValue = Number(value)\r\n      if (isNaN(numberValue)) return\r\n\r\n      const newBalance = Number(balanceDue) - numberValue\r\n      if (dataIndex === null) {\r\n        if (newBalance < 0) {\r\n          message.warning(\"Amount must not exceed Balance Due\")\r\n          return\r\n        }\r\n      }\r\n      setData({ ...data, [fieldName]: numberValue })\r\n      return\r\n    }\r\n    setData({ ...data, [fieldName]: value })\r\n  }\r\n\r\n  const handleOk = () => {\r\n    const _paymentList = [...paymentList]\r\n    let updatedData = { ...data }\r\n    updatedData.date = updatedData?.date || new Date()\r\n\r\n    // if add payment is triggered\r\n    if (dataIndex === null) {\r\n      _paymentList.push({ ...updatedData })\r\n      const sortedPayments = _paymentList.sort((a, b) => b.date - a.date)\r\n      modifiedData(sortedPayments)\r\n      return\r\n    }\r\n\r\n    // if update payment is triggered\r\n    if (dataIndex >= 0) {\r\n      console.log(\"amountUpdated\", totalDue)\r\n      let newBalance =\r\n        totalDue -\r\n        Number(\r\n          sumArray(\r\n            paymentList.filter((d, i) => i !== dataIndex),\r\n            \"amount\"\r\n          )\r\n        )\r\n\r\n      console.log(\"fixedBalance\", fixedDeduction)\r\n      newBalance = newBalance - fixedDeduction\r\n      console.log(\"newBalance\", newBalance)\r\n      if (Number(updatedData?.amount) > newBalance) {\r\n        updatedData.amount = newBalance\r\n        message.info(`Resetted Payment to Remaining balance: ${newBalance}`)\r\n      }\r\n      updatedData.date = updatedData?.date || new Date()\r\n      _paymentList[dataIndex] = updatedData\r\n      const sortedPayments = _paymentList.sort((a, b) => b.date - a.date)\r\n      modifiedData(sortedPayments)\r\n      return\r\n    }\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        padding: padding,\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      {enabledButton ? (\r\n        <CustomModal\r\n          title=\"Payment Form\"\r\n          buttonLabel={buttonLabel}\r\n          buttonType=\"default\"\r\n          buttonSize={buttonSize}\r\n          buttonShape={buttonShape}\r\n          ButtonIcon={ButtonIcon}\r\n          handleOk={handleOk}\r\n        >\r\n          <Row gutter={[5, 20]}>\r\n            <Col xs={12}>\r\n              <StringField\r\n                label=\"OR #\"\r\n                fieldName={SchedulersClass.OR_NO}\r\n                value={data[SchedulersClass.OR_NO] || \"\"}\r\n                onChange={handleChange}\r\n              />\r\n            </Col>\r\n            <Col xs={12}>\r\n              <DateField\r\n                onChange={handleChange}\r\n                value={data?.date}\r\n                fieldName=\"date\"\r\n              />\r\n            </Col>\r\n            <Col xs={12}>\r\n              <StringField\r\n                label=\"SOA #\"\r\n                fieldName={SchedulersClass.SOA_NUMBER}\r\n                value={data[SchedulersClass.SOA_NUMBER]}\r\n                onChange={handleChange}\r\n              />\r\n            </Col>\r\n            <Col xs={12}>\r\n              <SelectField\r\n                fieldName={SchedulersClass.MODE_PAYMENT}\r\n                onChange={handleChange}\r\n                value={data[SchedulersClass.MODE_PAYMENT]}\r\n                dropdowns={dropdownCollections}\r\n              />\r\n            </Col>\r\n            <Col xs={12}>\r\n              <SelectField\r\n                fieldName={SchedulersClass.SOURCE}\r\n                onChange={handleChange}\r\n                value={data[SchedulersClass.SOURCE]}\r\n                dropdowns={dropdownCollections}\r\n              />\r\n            </Col>\r\n            <Col xs={12}>\r\n              <SelectField\r\n                fieldName={SchedulersClass.ACCOUNT_NUMBER}\r\n                onChange={handleChange}\r\n                value={data[SchedulersClass.ACCOUNT_NUMBER]}\r\n                dropdowns={dropdownCollections}\r\n              />\r\n            </Col>\r\n            <Col xs={12}>\r\n              <StringField\r\n                label=\"REF #\"\r\n                fieldName={SchedulersClass.REF_NO}\r\n                value={data[SchedulersClass.REF_NO]}\r\n                onChange={handleChange}\r\n              />\r\n            </Col>\r\n            <Col xs={12}>\r\n              <StringField\r\n                label=\"AMOUNT\"\r\n                fieldName=\"amount\"\r\n                value={data?.amount}\r\n                onChange={handleChange}\r\n              />\r\n            </Col>\r\n            <Col xs={24}>\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <CustomTitle typographyType=\"text\" label=\"PAYMENT NOTES\" />\r\n                <CustomTextArea\r\n                  rows={10}\r\n                  value={data[SchedulersClass.PAYMENT_NOTES]}\r\n                  onChange={(e) =>\r\n                    handleChange(SchedulersClass.PAYMENT_NOTES, e.target.value)\r\n                  }\r\n                />\r\n              </Space>\r\n            </Col>\r\n          </Row>\r\n        </CustomModal>\r\n      ) : (\r\n        <MainButton label=\"Fully Paid\" type=\"default\" disabled />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst StringField = (props) => {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" label={props?.label} />\r\n      <CustomInput\r\n        placeholder=\"Enter here\"\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(props.fieldName, e.target.value)}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst DateField = (props) => {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" label=\"Date\" />\r\n      <CustomDate\r\n        format=\"MM/DD/YYYY\"\r\n        value={props.value}\r\n        showTime={false}\r\n        onChange={(obj) => {\r\n          if (obj) {\r\n            props.onChange(props.fieldName, obj?._d)\r\n          }\r\n        }}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst SelectField = (props) => {\r\n  const dropdowns = props?.dropdowns || []\r\n  const findDropdownWithKey = dropdowns.find(\r\n    (data) => data[DropdownsClass.NAME] === props.fieldName\r\n  )\r\n  const list = findDropdownWithKey?.list || []\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <AutoSelect\r\n        options={[...list]}\r\n        width=\"100%\"\r\n        value={props.value}\r\n        onChange={(value) => props.onChange(props.fieldName, value)}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\nexport default PaymentForm\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\hookOrderNoCounter.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Upload\\index.js",["937","938","939"],"import React, { useEffect, useState } from \"react\"\r\nimport { Upload, Modal } from \"antd\"\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\nimport { useGetUploads } from \"./useGetUploads\"\r\nfunction getBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.readAsDataURL(file)\r\n    reader.onload = () => resolve(reader.result)\r\n    reader.onerror = (error) => reject(error)\r\n  })\r\n}\r\nfunction UploadFiles({ id, modifiedData = () => {} }) {\r\n  const [removedPaths, setRemovedPaths] = useState([])\r\n  const { fileURLs, loadUploads } = useGetUploads()\r\n  const [state, setState] = useState({\r\n    previewVisible: false,\r\n    previewImage: \"\",\r\n    previewTitle: \"\",\r\n    fileList: [],\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (fileURLs.length > 0) {\r\n      const _fileList = []\r\n      let count = 0\r\n      for (const { url, path } of fileURLs) {\r\n        const pathSplit = path.split(\"/\")\r\n        const pathName = pathSplit[pathSplit.length - 1]\r\n        count = count - 1\r\n        _fileList.push({\r\n          uid: count,\r\n          name: pathName,\r\n          status: \"done\",\r\n          url,\r\n          path,\r\n        })\r\n      }\r\n      setState({ ...state, fileList: _fileList })\r\n    }\r\n  }, [fileURLs])\r\n\r\n  useEffect(() => {\r\n    modifiedData(state?.fileList, removedPaths)\r\n  }, [removedPaths, state])\r\n\r\n  const handleCancel = () => {\r\n    setState({ ...state, previewVisible: false })\r\n  }\r\n\r\n  const handlePreview = async (file) => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj)\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      previewImage: file.url || file.preview,\r\n      previewVisible: true,\r\n      previewTitle:\r\n        file.name || file.url.substring(file.url.lastIndexOf(\"/\") + 1),\r\n    })\r\n  }\r\n\r\n  const handleChange = ({ fileList = [] }) => {\r\n    setState({ ...state, fileList: fileList })\r\n  }\r\n\r\n  const handleRemove = (data) => {\r\n    if (!isNaN(data?.uid)) {\r\n      const _paths = [...removedPaths]\r\n      _paths.push(data?.path)\r\n      setRemovedPaths(_paths)\r\n    }\r\n  }\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  )\r\n\r\n  useEffect(() => {\r\n    loadUploads(id)\r\n  }, [id])\r\n\r\n  return (\r\n    <>\r\n      <Upload\r\n        // action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        listType=\"picture-card\"\r\n        fileList={state?.fileList}\r\n        onPreview={handlePreview}\r\n        onChange={handleChange}\r\n        onRemove={handleRemove}\r\n      >\r\n        {state?.fileList.length >= 8 ? null : uploadButton}\r\n      </Upload>\r\n      <Modal\r\n        visible={state?.previewVisible}\r\n        title={state?.previewTitle}\r\n        footer={null}\r\n        onCancel={handleCancel}\r\n      >\r\n        <img\r\n          alt=\"example\"\r\n          style={{ width: \"100%\" }}\r\n          src={state?.previewImage}\r\n        />\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UploadFiles\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Upload\\useGetUploads.js",["940"],"import { useEffect, useState } from \"react\"\r\nimport {\r\n  ref,\r\n  getStorage,\r\n  listAll,\r\n  getDownloadURL,\r\n  deleteObject,\r\n  uploadBytes,\r\n} from \"Services/firebase\"\r\nconst storage = getStorage()\r\n\r\nexport function useGetUploads(documentId) {\r\n  const [fileURLs, setFileURLs] = useState([])\r\n\r\n  useEffect(() => {\r\n    loadUploads(documentId)\r\n  }, [documentId])\r\n\r\n  const addUpload = async (data) => {\r\n    // const newFileListFilter = fileList.filter(file => file.status !== 'uploading')\r\n    // const newFileList = [...newFileListFilter]\r\n    // const docRefId = await addData({ collection: 'uploads', data })\r\n    // newFileList.push({ ...data, uploadId: docRefId })\r\n    // setFileList(newFileList)\r\n  }\r\n\r\n  const handleUpload = async (fileList = [], id = \"\") => {\r\n    if (typeof id !== \"undefined\" || id) {\r\n      for (const obj of fileList) {\r\n        if (isNaN(obj?.uid)) {\r\n          const fileRef = ref(storage, `uploads/${id}/${obj.name}`)\r\n          console.log(\"fileRef\", fileRef)\r\n          await uploadBytes(fileRef, obj?.originFileObj)\r\n        }\r\n      }\r\n    }\r\n    // console.log('file', file)\r\n    // const newFileList = [...fileList]\r\n    // newFileList.push({ name: file?.name, status: 'uploading', uid: file?.uid, percent: 50, url: '' })\r\n    // setFileList(newFileList)\r\n    // const uploadTask = storage.ref(`uploads/${documentId}/${file.name}`).put(file)\r\n    // uploadTask.on(\r\n    //   'state_changed',\r\n    //   snapshot => { },\r\n    //   error => {\r\n    //     console.log(error)\r\n    //   },\r\n    //   () => {\r\n    //     storage\r\n    //       .ref(`uploads/${documentId}`)\r\n    //       .child(file.name)\r\n    //       .getDownloadURL()\r\n    //       .then(url => {\r\n    //         if (url) {\r\n    //           const data = { name: file?.name, url, thumbUrl: url, idRef: documentId, status: 'done', uid: file?.uid }\r\n    //           addUpload(data)\r\n    //         }\r\n    //       })\r\n    //   }\r\n    // )\r\n  }\r\n  const handleRemove = (fileList = []) => {\r\n    for (const path of fileList) {\r\n      const fileRef = ref(storage, path)\r\n\r\n      deleteObject(fileRef)\r\n        .then(() => {\r\n          // File deleted successfully\r\n          console.log(\"Successfully removed file: \", path)\r\n        })\r\n        .catch((error) => {\r\n          console.log(`Removed failed ${path}: `, error)\r\n          // Uh-oh, an error occurred!\r\n        })\r\n    }\r\n  }\r\n\r\n  const loadUploads = async (id) => {\r\n    const fileRef = ref(storage, `uploads/${id}`)\r\n    listAll(fileRef)\r\n      .then(async (res) => {\r\n        res.prefixes.forEach((folderRef) => {\r\n          // All the prefixes under listRef.\r\n          // You may call listAll() recursively on them.\r\n        })\r\n        const fileList = []\r\n        for (const itemRef of res?.items) {\r\n          const { _location } = itemRef\r\n          const imageRef = ref(storage, _location?.path)\r\n          const file = await getDownloadURL(imageRef)\r\n          fileList.push({ url: file, path: _location?.path })\r\n        }\r\n        console.log(\"fileList\", fileList)\r\n        setFileURLs(fileList)\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"file list: \", error)\r\n        setFileURLs([])\r\n        // Uh-oh, an error occurred!\r\n      })\r\n  }\r\n  return { fileURLs, handleUpload, handleRemove, loadUploads }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\DropdownChannel.js",["941","942","943"],"import { Dropdown, Menu, Button } from \"antd\"\r\nimport { UserOutlined, DownOutlined } from \"@ant-design/icons\"\r\nimport React from \"react\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\n\r\nfunction DropdownChannel({ history, path }) {\r\n  const handleButtonClick = (e) => {\r\n    console.log(\"click left button\", e)\r\n  }\r\n\r\n  const handleMenuClick = (e) => {\r\n    console.log(\"click\", e)\r\n  }\r\n\r\n  const menu = (\r\n    <Menu onClick={handleMenuClick}>\r\n      <Menu.Item\r\n        key=\"1\"\r\n        onClick={() => history.push(`${path}/add?channelOption=direct`)}\r\n      >\r\n        Direct\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key=\"2\"\r\n        onClick={() =>\r\n          history.push(`${path}/add?channelOption=partnerMerchant`)\r\n        }\r\n      >\r\n        Partner Merchant\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key=\"3\"\r\n        onClick={() => history.push(`${path}/add?channelOption=website`)}\r\n      >\r\n        Website\r\n      </Menu.Item>\r\n    </Menu>\r\n  )\r\n\r\n  return (\r\n    <Dropdown overlay={menu}>\r\n      <Button shape=\"round\" type=\"primary\">\r\n        Add Order <DownOutlined />\r\n      </Button>\r\n    </Dropdown>\r\n  )\r\n}\r\n\r\nexport default DropdownChannel\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\index.js",["944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960"],"import { Space } from \"antd\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport {\r\n  ReloadOutlined,\r\n  FileExcelOutlined,\r\n  PrinterOutlined,\r\n} from \"@ant-design/icons\"\r\nimport styled from \"styled-components\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport useTableHandler from \"./hook\"\r\nimport classes from \"./table.module.css\"\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useLocation,\r\n  useRouteMatch,\r\n} from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport FormHandler from \"../FormHandler\"\r\nimport FormHandlerAdd from \"../FormHandler/FormHandlerAdd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport FilterOptions from \"../FilterOptions\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport CustomRangePicker from \"Components/Commons/RangePicker\"\r\nimport useRangeHandler from \"Hooks/useRangeHandler\"\r\nimport useGetDocumentsByKeyword from \"Hooks/useGetDocumentsByKeyword\"\r\nimport DropdownChannel from \"./DropdownChannel\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nfunction TableHandler(props) {\r\n  const {\r\n    ServiceClass,\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableAdd,\r\n    defaultAddForm, // this is true or false\r\n    enableFilter,\r\n    enableRowSelect,\r\n    isLoading,\r\n    setIsLoading,\r\n    rowSelection,\r\n    enableEdit,\r\n    handleModified,\r\n    paginateRequest,\r\n  } = useTableHandler(props)\r\n\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const [isFiltered, setIsFiltered] = useState(false)\r\n  const [filteredData, setFilteredData] = useState([])\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      {data.length > 0 && isLoading === false && (\r\n        <div\r\n          style={\r\n            location.pathname === path\r\n              ? { visibility: \"visible\" }\r\n              : { visibility: \"hidden\" }\r\n          }\r\n        >\r\n          <ActionButtons\r\n            enableFilter={enableFilter}\r\n            enableAdd={enableAdd}\r\n            ServiceClass={ServiceClass}\r\n            setIsLoading={setIsLoading}\r\n            isFiltered={isFiltered}\r\n            setIsFiltered={setIsFiltered}\r\n            loadData={loadData}\r\n            hideColumns={hideColumns}\r\n            setFilteredData={setFilteredData}\r\n          />\r\n          <CustomTable\r\n            isFiltered={isFiltered}\r\n            columns={[...columns]}\r\n            dataSource={isFiltered ? [...filteredData] : [...data]}\r\n            size=\"small\"\r\n            scroll={{ x: \"calc(375px + 50%)\", y: \"90vh\" }}\r\n            rowClassName={() => {\r\n              return classes[\"DEFAULT\"]\r\n            }}\r\n            onRow={(record) => {\r\n              return enableRowSelect\r\n                ? {\r\n                    onClick: () => {\r\n                      rowSelection(record) // this is for row clicked used by Dashboard Transactions\r\n                    },\r\n                  }\r\n                : {}\r\n            }}\r\n            pagination={{ pageSize: 15, showSizeChanger: false }}\r\n            loadData={paginateRequest ? loadData : () => {}}\r\n            paginateRequest={paginateRequest}\r\n          />\r\n        </div>\r\n      )}\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        {enableAdd && defaultAddForm && (\r\n          <Route exact path={`${path}/add`}>\r\n            <FormHandlerAdd\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {enableEdit && defaultAddForm && (\r\n          <Route exact path={`${path}/modified`}>\r\n            <FormHandler\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              formSave={(data) => {\r\n                handleModified(data)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {defaultAddForm && (\r\n          <Route path=\"*\">\r\n            <StyledURLNotFound>\r\n              <URLNotFound />\r\n            </StyledURLNotFound>\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableHandler\r\n\r\nconst ActionButtons = (props) => {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const {\r\n    enableFilter,\r\n    enableAdd,\r\n    ServiceClass,\r\n    loadData,\r\n    setIsLoading,\r\n    setIsFiltered,\r\n    isFiltered,\r\n    hideColumns,\r\n    setFilteredData,\r\n  } = props\r\n  return (\r\n    <StyledContainer enableFilter={enableFilter} wrap>\r\n      <StyledLeftContent enableFilter={enableFilter}>\r\n        <Space>\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<PrinterOutlined />}\r\n          />\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<FileExcelOutlined />}\r\n          />\r\n        </Space>\r\n      </StyledLeftContent>\r\n      <StyledRightContent enableAdd={enableAdd}>\r\n        <MainButton\r\n          Icon={<ReloadOutlined />}\r\n          label=\"\"\r\n          type=\"default\"\r\n          shape=\"circle\"\r\n          onClick={() => {\r\n            loadData({}, user?.branchSelected, true) // refresh data if true\r\n            setIsLoading(true)\r\n          }}\r\n        />\r\n        <MainButton\r\n          label=\"Add\"\r\n          onClick={() => {\r\n            history.push(`${path}/add`)\r\n          }}\r\n        />\r\n      </StyledRightContent>\r\n    </StyledContainer>\r\n  )\r\n}\r\n\r\nconst MobileTableView = (props) => {\r\n  return <div>Mobile view</div>\r\n}\r\n\r\nconst StyledURLNotFound = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledContainer = styled(Space)`\r\n  display: flex;\r\n  width: 100%;\r\n  padding-bottom: 1rem;\r\n  justify-content: ${(props) =>\r\n    props?.enableFilter ? \"space-between\" : \"flex-end\"};\r\n`\r\nconst StyledLeftContent = styled(Space)`\r\n  display: ${(props) => (props.enableFilter ? \"flex\" : \"none\")};\r\n  justify-content: flex-start;\r\n`\r\nconst StyledRightContent = styled(Space)`\r\n  display: ${(props) => (props.enableAdd ? \"flex\" : \"none\")};\r\n  justify-content: flex-end;\r\n`\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\DropdownChannel.js",["961","962","963"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\hook.js",["964","965","966","967","968","969"],"import React, { useState, useEffect } from \"react\"\r\nimport { Space, Tag } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport { handleTitle, handleAlignment } from \"./helpers\"\r\nimport {\r\n  AMOUNT_TYPE,\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  DATE_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport { EditOutlined } from \"@ant-design/icons\"\r\nimport { arrayReplace, replaceArrayData } from \"Helpers/arrayFuntions\"\r\nimport { useHistory, useRouteMatch } from \"react-router\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nexport default function useTableHandler({\r\n  ServiceClass, // Class\r\n  hideColumns = [],\r\n  overideRender = {},\r\n  bySort, // boolean\r\n  customSort = [],\r\n  defaultColumnAlign = \"left\",\r\n  widths = {},\r\n  hasWidths = true,\r\n  defaultFontSize = \"12px\",\r\n  enableEdit = false,\r\n  enableFilter = false,\r\n  enableAdd = false,\r\n  defaultAddForm = true,\r\n  enableRowSelect = false,\r\n  rowSelection = () => {},\r\n  onCell = () => {},\r\n  useHook = useGetDocuments,\r\n  paginateRequest = false,\r\n  exposeData = () => {},\r\n  modifiedData,\r\n}) {\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const [collectionData, loadData] = useGetDocuments(ServiceClass, {\r\n    bySort,\r\n    customSort,\r\n  })\r\n\r\n  const [data, setData] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    handleColumns(collectionData)\r\n    setIsLoading(false)\r\n    setData(collectionData)\r\n\r\n    // in order to access the data list outside this component\r\n    exposeData(collectionData)\r\n  }, [collectionData])\r\n\r\n  useEffect(() => {\r\n    handleColumns(data)\r\n  }, [data])\r\n\r\n  // if modifiedData is trigger it will automatically update the state base on the new data save\r\n  useEffect(() => {\r\n    // const collectionIndex = data.findIndex(\r\n    //   (obj) => obj[ServiceClass._ID] === modifiedData[ServiceClass._ID]\r\n    // )\r\n    // if (collectionIndex >= 0) {\r\n    //   const updatedData = arrayReplace(data, collectionIndex, modifiedData)\r\n    //   setData(updatedData)\r\n    // }\r\n    // handleModified(modifiedData)\r\n    if (Object.keys(modifiedData || {}).length > 0) {\r\n      loadData(modifiedData)\r\n    }\r\n  }, [modifiedData])\r\n\r\n  const handleColumns = (data) => {\r\n    const _columns = []\r\n    if (typeof ServiceClass?.PROPERTIES === \"undefined\") {\r\n      const properties = data.length > 0 ? Object.keys(data[0]) : []\r\n      for (const key of properties) {\r\n        if (!hideColumns.includes(key)) {\r\n          const columnObj = {\r\n            title: handleTitle(ServiceClass, key),\r\n            key,\r\n            dataIndex: key,\r\n            align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n            ellipsis: {\r\n              showTitle: false,\r\n            },\r\n            onCell,\r\n            render: (value, record) => {\r\n              return handleTypeRender({ value, record }, key)\r\n            },\r\n          }\r\n          if (hasWidths) {\r\n            columnObj.width =\r\n              typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n          }\r\n          _columns.push({ ...columnObj })\r\n        }\r\n      }\r\n      if (enableEdit) {\r\n        _columns.push({\r\n          title: \"\",\r\n          key: \"action\",\r\n          dataIndex: \"action\",\r\n          align: \"right\",\r\n          onCell,\r\n          render: (data, record) => {\r\n            return (\r\n              <MainButton\r\n                type=\"default\"\r\n                shape=\"circle\"\r\n                Icon={<EditOutlined />}\r\n                onClick={() =>\r\n                  history.push(\r\n                    `${path}/modified?id=${record[ServiceClass._ID]}`\r\n                  )\r\n                }\r\n              />\r\n            )\r\n          },\r\n        })\r\n      }\r\n      setColumns(_columns)\r\n      return\r\n    }\r\n\r\n    for (const key of ServiceClass.PROPERTIES) {\r\n      if (!hideColumns.includes(key)) {\r\n        const columnObj = {\r\n          title: handleTitle(ServiceClass, key),\r\n          key,\r\n          dataIndex: key,\r\n          align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n          ellipsis: {\r\n            showTitle: false,\r\n          },\r\n          onCell,\r\n          render: (value, record) => {\r\n            return handleTypeRender({ value, record }, key)\r\n          },\r\n        }\r\n        if (hasWidths) {\r\n          columnObj.width =\r\n            typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n        }\r\n        _columns.push({ ...columnObj })\r\n      }\r\n    }\r\n    if (enableEdit) {\r\n      _columns.push({\r\n        title: \"\",\r\n        key: \"action\",\r\n        dataIndex: \"action\",\r\n        align: \"right\",\r\n        onCell,\r\n        render: (data, record) => {\r\n          return (\r\n            <MainButton\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              Icon={<EditOutlined />}\r\n              onClick={() =>\r\n                history.push(`${path}/modified?id=${record[ServiceClass._ID]}`)\r\n              }\r\n            />\r\n          )\r\n        },\r\n      })\r\n    }\r\n    setColumns(_columns)\r\n  }\r\n\r\n  const handleTypeRender = ({ value, record }, key) => {\r\n    if (typeof overideRender[key] !== \"undefined\") {\r\n      return overideRender[key](value, record)\r\n    }\r\n\r\n    if (typeof ServiceClass.TYPES === \"undefined\") {\r\n      if (typeof value === \"object\") {\r\n        return \"Object without types\"\r\n      }\r\n      return value\r\n    }\r\n\r\n    let result = value\r\n    switch (ServiceClass.TYPES[key]) {\r\n      case STRING_TYPE:\r\n        result = value\r\n        break\r\n      case ARRAY_OF_OBJECT_TYPE:\r\n        const renderObj =\r\n          typeof ServiceClass.OBJECTS === \"undefined\" ? (\r\n            \"Object Undefined\"\r\n          ) : (\r\n            <Space>\r\n              {value.map((valueObj) => {\r\n                const dataObj =\r\n                  typeof ServiceClass.OBJECTS[key] === \"undefined\"\r\n                    ? \"undefined title\"\r\n                    : valueObj[ServiceClass.OBJECTS[key].title]\r\n                return (\r\n                  <Tag style={{ cursor: \"pointer\" }} color=\"cyan\" wrap>\r\n                    {dataObj}\r\n                  </Tag>\r\n                )\r\n              })}\r\n            </Space>\r\n          )\r\n        result = renderObj\r\n        break\r\n      case ARRAY_OF_STRING_TYPE:\r\n        result = (\r\n          <Space wrap>\r\n            {(value || []).map((valueKey) => {\r\n              return <Tag color=\"cyan\">{valueKey}</Tag>\r\n            })}\r\n          </Space>\r\n        )\r\n        break\r\n      case AMOUNT_TYPE:\r\n        result = thousandsSeparators(Number(value).toFixed(2))\r\n        break\r\n      case DATE_TYPE:\r\n        const formattedDate = formatDateFromDatabase(value)\r\n        result = formatDateDash(formattedDate)\r\n        break\r\n      case BOOLEAN_TYPE:\r\n        result = value ? (\r\n          <span style={{ color: \"green\" }}>Active</span>\r\n        ) : (\r\n          <span style={{ color: \"red\" }}>Inactive</span>\r\n        )\r\n        break\r\n    }\r\n    return <div style={{ fontSize: defaultFontSize }}>{result}</div>\r\n  }\r\n\r\n  const handleModified = (data) => {\r\n    loadData(data)\r\n  }\r\n  return {\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableFilter,\r\n    enableEdit,\r\n    enableRowSelect,\r\n    rowSelection,\r\n    enableAdd,\r\n    defaultAddForm,\r\n    setIsLoading,\r\n    isLoading,\r\n    ServiceClass,\r\n    handleModified,\r\n    paginateRequest,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\helpers.js",["970"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\ExportService.js",["971"],"import XLSX from \"xlsx\"\r\nimport path from \"path\"\r\nexport default class ExportService {\r\n  static produceSheets(workBook, arrayOfArrayData = [], sheetName = \"\") {\r\n    const customMerge = [\r\n      { s: { r: 0, c: 0 }, e: { r: 0, c: 23 } },\r\n      { s: { r: 1, c: 0 }, e: { r: 1, c: 23 } },\r\n      { s: { r: 2, c: 0 }, e: { r: 2, c: 23 } },\r\n      { s: { r: 3, c: 0 }, e: { r: 3, c: 23 } },\r\n      { s: { r: 4, c: 0 }, e: { r: 4, c: 23 } },\r\n      // s = row start, e = row end\r\n      // r = row index, c = column index\r\n      // { s: { r: 5, c: 0 }, e: { r: 5, c: 6 } },\r\n      // { s: { r: 5, c: 7 }, e: { r: 5, c: 14 } },\r\n    ]\r\n\r\n    const [date, name] = sheetName\r\n    const numberMerges = []\r\n    let noColumn = 0\r\n    let noIndex = 0\r\n    arrayOfArrayData.forEach((row, index) => {\r\n      if (typeof row[0] !== \"undefined\") {\r\n        if (row[0] === \"TOTALS\") {\r\n          // customMerge.push({ s: { r: index, c: 0 }, e: { r: index, c: 17 } })\r\n        }\r\n\r\n        // this is for the merging of NO column\r\n        if (name !== \"RC\") {\r\n          // if (Number(row[0]) > 0) {\r\n          //   numberMerges[row[0]] = {\r\n          //     s: { r: index + 1, c: 0 },\r\n          //     e: { r: index, c: 0 },\r\n          //   }\r\n          //   noColumn = Number(row[0])\r\n          //   noIndex = index + 1\r\n          // }\r\n\r\n          if (noColumn > 0 && row[0] !== \"__\") {\r\n            if (row[1] !== \"\") {\r\n              numberMerges[noColumn] = {\r\n                s: { r: noIndex, c: 0 },\r\n                e: { r: index + 1, c: 0 },\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // this is for the merging of Recap Summary of Discounts\r\n        if (row[0] === \"__\") {\r\n          customMerge.push({ s: { r: index, c: 0 }, e: { r: index, c: 19 } })\r\n          customMerge.push({ s: { r: index, c: 20 }, e: { r: index, c: 22 } })\r\n        }\r\n\r\n        if (row[0] === \"ORDER DETAILS\") {\r\n          customMerge.push({ s: { r: index, c: 0 }, e: { r: index, c: 12 } })\r\n          customMerge.push({ s: { r: index, c: 13 }, e: { r: index, c: 23 } })\r\n        }\r\n      }\r\n    })\r\n    numberMerges.forEach((obj) => customMerge.push(obj))\r\n\r\n    const workSheet = XLSX.utils.aoa_to_sheet(arrayOfArrayData)\r\n    // workSheet.A1.s = {\r\n    //   font: {\r\n    //     name: \"Calibri Light\",\r\n    //   },\r\n    //   alignment: {\r\n    //     horizontal: \"center\",\r\n    //   },\r\n    // }\r\n    if (!workSheet[\"!merges\"]) workSheet[\"!merges\"] = []\r\n    for (const mergeObj of customMerge) {\r\n      workSheet[\"!merges\"].push(mergeObj)\r\n    }\r\n\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, sheetName)\r\n  }\r\n\r\n  static exportExcelReports(sheets = {}) {\r\n    const workBook = XLSX.utils.book_new()\r\n    const sheetNames = Object.keys(sheets)\r\n    for (const key of sheetNames) {\r\n      this.produceSheets(workBook, sheets[key], key)\r\n    }\r\n\r\n    XLSX.writeFile(workBook, path.resolve(\"./excel-report.xlsx\"))\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\schedulerExcel.js",["972","973","974","975","976","977","978","979","980"],"import productStaticPrices from \"Components/Features/DashboardTransaction/productStaticPrices\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport {\r\n  calculateBalanceScheduler,\r\n  producedPaymentList,\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n  displaySalesType,\r\n  calculateDiscountScheduler,\r\n} from \"./collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n  formatTime,\r\n} from \"./dateFormat\"\r\nimport thousandsSeparators from \"./formatNumber\"\r\nimport sorting, { sortByNumber } from \"./sorting\"\r\nimport sumArray, { sumArrayDatas, sumArrayOfObjectsGrouping } from \"./sumArray\"\r\n\r\nconst dateSheetName = (string) => {\r\n  return string.substring(0, 5)\r\n  // return string\r\n}\r\n\r\nconst produceLabels = (key) => {\r\n  return typeof SchedulersClass.LABELS[key] !== \"undefined\"\r\n    ? SchedulersClass.LABELS[key]\r\n    : key\r\n}\r\n\r\nconst produceAmount = (value) => {\r\n  return thousandsSeparators(Number(value).toFixed(2))\r\n}\r\n\r\nconst produceExcelHeaders = () => {\r\n  const properties = [\"no\"]\r\n  const labels = [\"NO\"]\r\n  for (const key of SchedulersClass.PROPERTIES) {\r\n    if (\r\n      key === SchedulersClass.BRANCH ||\r\n      key === SchedulersClass._ID ||\r\n      key === SchedulersClass.DATE_START ||\r\n      key === SchedulersClass.DATE_END ||\r\n      key === SchedulersClass.ORDER_NO ||\r\n      key === SchedulersClass.ORDER_VIA ||\r\n      key === SchedulersClass.ORDER_VIA_PARTNER ||\r\n      key === SchedulersClass.ORDER_VIA_WEBSITE ||\r\n      key === SchedulersClass.SUBJECT ||\r\n      key === SchedulersClass.ACCOUNT_NAME ||\r\n      key === SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS ||\r\n      key === SchedulersClass.END_TIME_ZONE ||\r\n      key === SchedulersClass.START_TIME_ZONE ||\r\n      key === SchedulersClass.PAYMENT_NOTES\r\n    ) {\r\n    } else {\r\n      if (key === SchedulersClass.TIME_SLOT) {\r\n        labels.push(produceLabels(key))\r\n        properties.push(key)\r\n        labels.push(\"PRODUCT CODE\")\r\n        properties.push(\"productCode\")\r\n      } else if (key === SchedulersClass.QTY) {\r\n        labels.push(produceLabels(key))\r\n        properties.push(key)\r\n        labels.push(\"PRICE\")\r\n        properties.push(\"price\")\r\n      } else {\r\n        labels.push(produceLabels(key))\r\n        properties.push(key)\r\n      }\r\n    }\r\n  }\r\n  return { labels, properties }\r\n}\r\n\r\nconst handlePayments = (key, partials) => {\r\n  if (typeof partials !== \"undefined\") {\r\n    if (partials.length === 0) return null\r\n    // const lastPayment = partials[partials.length - 1]\r\n    const lastPayment = partials[0]\r\n    if (key === SchedulersClass.DATE_PAYMENT) {\r\n      if (Object.keys(lastPayment?.date || {}).length > 0) {\r\n        const formatDate = formatDateFromDatabase(lastPayment[key])\r\n        const datePaid = formatDateDash(formatDate)\r\n        return datePaid || null\r\n      }\r\n      return null\r\n    }\r\n    return lastPayment[key] || null\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const paymentDetails = (key, data) => {\r\n  if (typeof data[SchedulersClass.PARTIALS] === \"undefined\") return \"\"\r\n  const payments = handlePayments(key, data[SchedulersClass.PARTIALS])\r\n  if (payments) {\r\n    return payments\r\n  } else {\r\n    if (typeof data[key] !== \"undefined\") {\r\n      if (key === SchedulersClass.DATE_PAYMENT) {\r\n        const dateFormat = formatDateFromDatabase(data[key])\r\n        const datePaid = formatDateDash(dateFormat)\r\n        return datePaid\r\n      }\r\n      return data[key] || \"\"\r\n    } else {\r\n      return \"\"\r\n    }\r\n  }\r\n}\r\n\r\nconst salesType = (data) => {\r\n  if (typeof data[SchedulersClass.OTHERS] === \"undefined\") return \"\"\r\n  if (typeof data[SchedulersClass.OTHERS] !== \"undefined\") {\r\n    for (const key in data[SchedulersClass.OTHERS]) {\r\n      if (key === \"Senior Citizen\" || key === \"PWD\") {\r\n        return \"SPWD\"\r\n      }\r\n    }\r\n  }\r\n  if (data[SchedulersClass.ORDER_VIA]) {\r\n    if (typeof data[SchedulersClass.OTHERS] !== \"undefined\") {\r\n      for (const key in data[SchedulersClass.OTHERS]) {\r\n        if (key === \"Automatic 50 percent off\") {\r\n          return \"D/O\"\r\n        }\r\n        if (key === \"Incidents\") {\r\n          return \"D/IR\"\r\n        }\r\n        if (key === \"Promo\") {\r\n          return \"D/PM\"\r\n        }\r\n      }\r\n    }\r\n    return \"R\"\r\n  }\r\n  if (data[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n    return \"PP\"\r\n  }\r\n\r\n  if (data[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n    return \"PP\"\r\n  }\r\n  return \"\"\r\n}\r\n\r\nconst timeSlot = (data) => {\r\n  if (typeof data[SchedulersClass.DATE_START] === \"undefined\") return \"\"\r\n  const dateStart = formatDateFromDatabase(data[SchedulersClass.DATE_START])\r\n  const dateEnd = formatDateFromDatabase(data[SchedulersClass.DATE_END])\r\n\r\n  let timeStart = formatTime(dateStart).split(\" \")\r\n  const timeEnd = formatTime(dateEnd)\r\n  const date = formatDateDash(dateStart)\r\n  return `${timeStart[0]}-${timeEnd}`\r\n}\r\n\r\nconst via = (data) => {\r\n  if (data[SchedulersClass.ORDER_VIA]) {\r\n    const split1 = data[SchedulersClass.ORDER_VIA].split(\" ]\")\r\n    const split2 = split1[0].split(\"[ \")\r\n    return split2[1]\r\n  }\r\n  if (data[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n    const split1 = data[SchedulersClass.ORDER_VIA_PARTNER].split(\" ]\")\r\n    const split2 = split1[0].split(\"[ \")\r\n    return split2[1]\r\n  }\r\n  if (data[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n    const split1 = data[SchedulersClass.ORDER_VIA_WEBSITE].split(\" ]\")\r\n    const split2 = split1[0].split(\"[ \")\r\n    return split2[1]\r\n  }\r\n  return \"\"\r\n}\r\n\r\nconst revenueChan = (data) => {\r\n  if (data[SchedulersClass.ORDER_VIA]) return \"DR\"\r\n  if (data[SchedulersClass.ORDER_VIA_PARTNER]) return \"PP\"\r\n  if (data[SchedulersClass.ORDER_VIA_WEBSITE]) return \"WB\"\r\n  return \"\"\r\n}\r\n\r\nconst balanceDue = (data, count, numCount) => {\r\n  const renewedData = {\r\n    ...data,\r\n    [SchedulersClass.TOTAL_DUE]: data[SchedulersClass.TOTAL],\r\n  }\r\n  if (numCount) return \"\"\r\n  if (count > 0) return \"\"\r\n  let _balanceDue = calculateBalanceScheduler(renewedData)\r\n  return produceAmount(_balanceDue) || 0\r\n}\r\n\r\nexport const amountPaid = (data, count, numCount) => {\r\n  if (numCount) return \"\"\r\n  if (count > 0) return \"\"\r\n\r\n  const paymentList = producedPaymentList(data)\r\n  const _amountPaid =\r\n    paymentList.length > 0 ? sumArray(paymentList, \"amount\") : 0\r\n  return produceAmount(_amountPaid)\r\n}\r\n\r\nconst totalDue = (data, count) => {\r\n  if (typeof data[SchedulersClass.TOTAL_DUE] === \"undefined\" && count > 0)\r\n    return \"\"\r\n  let _totalDue =\r\n    typeof data[SchedulersClass.TOTAL_DUE] === \"undefined\"\r\n      ? 0\r\n      : data[SchedulersClass.TOTAL_DUE]\r\n  return produceAmount(_totalDue)\r\n}\r\n\r\nconst producePurchasedProducts = (\r\n  data,\r\n  properties,\r\n  count,\r\n  numCount /*schedules length by row*/,\r\n  hiddenRevenueChannelData = false,\r\n  numberOfPurchased = 0\r\n) => {\r\n  const row = []\r\n  for (const key of properties) {\r\n    switch (key) {\r\n      case \"no\":\r\n        row.push(count === 0 && numCount ? numCount : \"\")\r\n        break\r\n      case SchedulersClass.REVENUE_CHANNEL:\r\n        if (hiddenRevenueChannelData === false) {\r\n          row.push(revenueChan(data))\r\n          // if (count === 0) {\r\n          //   row.push(revenueChan(data))\r\n          // } else {\r\n          //   row.push(\"\")\r\n          // }\r\n        } else {\r\n          row.push(\"\")\r\n        }\r\n        break\r\n      case SchedulersClass.DATE_PAYMENT:\r\n        row.push(paymentDetails(SchedulersClass.DATE_PAYMENT, data))\r\n        break\r\n      case SchedulersClass.MODE_PAYMENT:\r\n        row.push(paymentDetails(SchedulersClass.MODE_PAYMENT, data))\r\n        break\r\n      case SchedulersClass.SOURCE:\r\n        row.push(paymentDetails(SchedulersClass.SOURCE, data))\r\n        break\r\n      case SchedulersClass.REF_NO:\r\n        row.push(paymentDetails(SchedulersClass.REF_NO, data))\r\n        break\r\n      case SchedulersClass.ACCOUNT_NUMBER:\r\n        row.push(paymentDetails(SchedulersClass.ACCOUNT_NUMBER, data))\r\n        break\r\n      case SchedulersClass.OR_NO:\r\n        if (count > 0 && hiddenRevenueChannelData) {\r\n          row.push(\"\")\r\n        } else {\r\n          row.push(paymentDetails(SchedulersClass.OR_NO, data))\r\n        }\r\n        break\r\n      case SchedulersClass.SALES_TYPE:\r\n        row.push(displaySalesType(data))\r\n        break\r\n      case SchedulersClass.TIME_SLOT:\r\n        if (data?.timeSlot) {\r\n          row.push(timeSlot(data))\r\n        } else {\r\n          row.push(\"\")\r\n        }\r\n        break\r\n      case SchedulersClass.VIA:\r\n        if (count > 0 && hiddenRevenueChannelData) {\r\n          row.push(\"\")\r\n        } else {\r\n          row.push(via(data))\r\n        }\r\n        break\r\n      case SchedulersClass.AMOUNT_PAID:\r\n        if (numberOfPurchased === 1) {\r\n          row.push(amountPaid(data, 0, \"\"))\r\n          break\r\n        } else {\r\n          row.push(amountPaid(data, count, numCount))\r\n          break\r\n        }\r\n      case SchedulersClass.BALANCE_DUE:\r\n        if (numberOfPurchased === 1) {\r\n          row.push(balanceDue(data, 0, \"\"))\r\n          break\r\n        } else {\r\n          row.push(balanceDue(data, count, numCount))\r\n          break\r\n        }\r\n      case SchedulersClass.TOTAL_DUE:\r\n        row.push(totalDue(data, count))\r\n        break\r\n      case SchedulersClass.DATE_ORDER_PLACED:\r\n        if (typeof data[SchedulersClass.DATE_ORDER_PLACED] !== \"undefined\") {\r\n          const dateFormat = formatDateFromDatabase(\r\n            data[SchedulersClass.DATE_ORDER_PLACED]\r\n          )\r\n          const dateStart = formatDateDash(dateFormat)\r\n          row.push(dateStart)\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case SchedulersClass.UTAK_NO:\r\n        if (typeof data[SchedulersClass.UTAK_NO] !== \"undefined\") {\r\n          row.push(data[SchedulersClass.UTAK_NO])\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case SchedulersClass.OTHERS:\r\n        if (typeof data[SchedulersClass.OTHERS] !== \"undefined\") {\r\n          if (numberOfPurchased === 0) {\r\n            // row.push(produceAmount(calculateDiscountScheduler(data)))\r\n            row.push(calculateDiscountScheduler(data))\r\n            break\r\n          } else {\r\n            if (numberOfPurchased === 1) {\r\n              // row.push(produceAmount(calculateDiscountScheduler(data)))\r\n              row.push(calculateDiscountScheduler(data))\r\n              break\r\n            } else {\r\n              row.push(\"\")\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case \"price\":\r\n        row.push(data[key] || \"\")\r\n        break\r\n\r\n      case SchedulersClass.QTY:\r\n        if (typeof data[key] !== \"undefined\") {\r\n          row.push(data[key])\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case \"productCode\":\r\n        if (typeof data[key] !== \"undefined\") {\r\n          row.push(data[key])\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case SchedulersClass.TOTAL:\r\n        row.push(data[key])\r\n        break\r\n      default:\r\n        if (typeof data[key] !== \"undefined\") {\r\n          if (count > 0 && hiddenRevenueChannelData) {\r\n            row.push(\"\")\r\n          } else {\r\n            row.push(data[key])\r\n          }\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n    }\r\n  }\r\n  return row\r\n}\r\n\r\nexport default async function (\r\n  schedules = [],\r\n  productData = [],\r\n  additionalSheetInfo = \"\",\r\n  branch = \"\"\r\n) {\r\n  const productList = producedProductListOfAllCodes(productData)\r\n  const productListWithAmounts =\r\n    producedProductListWithGroupAndAmounts(productData)\r\n\r\n  const reversedSchedules = [\r\n    ...schedules.filter((obj) => obj[SchedulersClass.STATUS] !== \"CANCELLED\"),\r\n  ]\r\n\r\n  // creation of sheets and its data rows happened here\r\n  const sheets = {}\r\n  let numCount = 0\r\n  for (const data of sortByNumber(reversedSchedules, SchedulersClass.UTAK_NO)) {\r\n    numCount = numCount + 1\r\n    const startTime = data[SchedulersClass.DATE_START]\r\n    if (typeof startTime !== \"undefined\") {\r\n      const formatDate = formatDateFromDatabase(startTime)\r\n      const headerDate = formatDateLong(formatDate)\r\n      const startDate = formatDateDash(formatDate)\r\n      const sheetName = `${dateSheetName(startDate)} ${additionalSheetInfo}`\r\n      const headers = produceExcelHeaders()\r\n      if (typeof sheets[sheetName] === \"undefined\") {\r\n        sheets[sheetName] = [\r\n          [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n          [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n          [headerDate],\r\n          [],\r\n          [],\r\n          [\"ORDER DETAILS\", ...new Array(12), \"PAYMENT DETAILS\"],\r\n          headers.labels,\r\n        ]\r\n      }\r\n\r\n      let numberOfPurchased = 0\r\n      let totalQty = 0\r\n      let totalProductPrice = 0\r\n      const totalPrice = {}\r\n      const productPrice = {}\r\n      for (const code of productList) {\r\n        if (typeof data[code] !== \"undefined\") {\r\n          const qty = Number(data[code])\r\n          if (qty > 0) {\r\n            numberOfPurchased = numberOfPurchased + 1\r\n            totalQty = totalQty + qty\r\n            const prodDetails = productListWithAmounts.find((obj) => {\r\n              return obj?.code === code\r\n            })\r\n            const defaultPrice = productStaticPrices(\r\n              data[SchedulersClass.ORDER_VIA_PARTNER],\r\n              code,\r\n              prodDetails?.price\r\n            )\r\n            console.log(`default price ${code}`, defaultPrice)\r\n            // totalProductPrice =\r\n            // productPrice[code] = Number(defaultPrice) + totalProductPrice\r\n            productPrice[code] =\r\n              Number(defaultPrice) || data[`customPrice${code}`]\r\n            // productPrice[code] =\r\n            //   Number(prodDetails?.price) || data[`customPrice${code}`]\r\n            totalPrice[code] =\r\n              qty * Number(defaultPrice) || data[`customPrice${code}`]\r\n          }\r\n        }\r\n      }\r\n\r\n      // producing row details of schedules by looping each product purchased that is not equal to zero\r\n      let count = 0\r\n      for (const code of productList) {\r\n        if (typeof data[code] !== \"undefined\") {\r\n          const qty = Number(data[code])\r\n          let propertyHeaders = [...headers.properties]\r\n          if (qty > 0) {\r\n            let renewedData = {\r\n              ...data,\r\n              productCode: code,\r\n              qty,\r\n              price: produceAmount(productPrice[code]),\r\n              [SchedulersClass.TOTAL]: data[SchedulersClass.TOTAL_DUE], // the original value of totalDue is transferred to total since it is already been setup to logic (prevent logical errors)\r\n              [SchedulersClass.TOTAL_DUE]: totalPrice[code],\r\n              timeSlot: true,\r\n            }\r\n            if (count > 0) {\r\n              // delete renewedData[SchedulersClass.DATE_ORDER_PLACED]\r\n              delete renewedData[SchedulersClass.UTAK_NO]\r\n              // delete renewedData[SchedulersClass.OR_NO]\r\n              // delete renewedData[SchedulersClass.CUSTOMER]\r\n              // delete renewedData[SchedulersClass.CONTACT_NUMBER]\r\n              // delete renewedData[SchedulersClass.ORDER_VIA]\r\n              // delete renewedData[SchedulersClass.ORDER_VIA_PARTNER]\r\n              // delete renewedData[SchedulersClass.ORDER_VIA_WEBSITE]\r\n              // delete renewedData[SchedulersClass.PARTNER_MERCHANT_ORDER_NO]\r\n              // delete renewedData[SchedulersClass.PARTIALS]\r\n              // delete renewedData[SchedulersClass.OTHERS]\r\n              // delete renewedData[SchedulersClass.DATE_START]\r\n              delete renewedData[SchedulersClass.BALANCE_DUE]\r\n              delete renewedData[SchedulersClass.AMOUNT_PAID]\r\n              // delete renewedData?.timeSlot\r\n            }\r\n            if (count === 0) {\r\n              // delete renewedData[SchedulersClass.OTHERS]\r\n            }\r\n            const _producedPurchasedProducts = producePurchasedProducts(\r\n              renewedData,\r\n              propertyHeaders,\r\n              count,\r\n              numCount,\r\n              false, // view data of revenueChannel cell\r\n              numberOfPurchased\r\n            )\r\n            count = count + 1\r\n\r\n            if (numberOfPurchased !== count) {\r\n              sheets[sheetName].push(_producedPurchasedProducts)\r\n            } else {\r\n              let _totalRow = {\r\n                ...data,\r\n                productCode: code,\r\n                qty,\r\n                price: produceAmount(productPrice[code]),\r\n                [SchedulersClass.UTAK_NO]: \"\",\r\n                [SchedulersClass.TOTAL]: data[SchedulersClass.TOTAL_DUE], // the original value of totalDue is transferred to total since it is already been setup to logic (prevent logical errors)\r\n                [SchedulersClass.TOTAL_DUE]: totalPrice[code],\r\n                timeSlot: true,\r\n              }\r\n              if (numberOfPurchased === 1) {\r\n                sheets[sheetName].push(_producedPurchasedProducts)\r\n              } else {\r\n                sheets[sheetName].push(\r\n                  producePurchasedProducts(\r\n                    {\r\n                      ..._totalRow,\r\n                    },\r\n                    propertyHeaders,\r\n                    0, // important do not remove,\r\n                    \"\",\r\n                    false // view data of revenueChannel cell\r\n                  )\r\n                )\r\n              }\r\n              numberOfPurchased = 0\r\n            }\r\n            // if (numberOfPurchased === count) {\r\n            // let _totalRow = {\r\n            //   ...data,\r\n            //   productCode: code,\r\n            //   qty: \"\",\r\n            // }\r\n            // sheets[sheetName].push(\r\n            //   producePurchasedProducts(\r\n            //     {\r\n            //       ..._totalRow,\r\n            //       productCode: \"\",\r\n            //       [SchedulersClass.QTY]: \"\",\r\n            //       price: \"__\",\r\n            //       [SchedulersClass.UTAK_NO]: \"\",\r\n            //       // [SchedulersClass.DATE_ORDER_PLACED]: \"\",\r\n            //       // productCode: \"TOTAL\",\r\n            //       // [SchedulersClass.QTY]: totalQty,\r\n            //       // price: produceAmount(totalProductPrice),\r\n            //     },\r\n            //     headers.properties,\r\n            //     0, // important do not remove,\r\n            //     \"\",\r\n            //     true\r\n            //   )\r\n            // )\r\n            // numberOfPurchased = 0\r\n            // }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const sumOfRevenues = []\r\n  for (const key in sheets) {\r\n    // const subTotals = {}\r\n    const subTotals = []\r\n    const sources = {}\r\n    const summaries = {}\r\n    sheets[key].forEach((list) => {\r\n      if (list.length > 0) {\r\n        console.log(\"list\", list)\r\n        const amountPaid = list[list.length - 1] || \"0\" // amountPaid column\r\n        const collectibles = list[list.length - 2] || \"0\" // collectibles column\r\n        const totalDue = list[list.length - 3] || \"0\" // total Column\r\n        const others = list[list.length - 4] || \"0\" // others Column\r\n        const totalQty = isNaN(Number(list[11])) ? \"0\" : Number(list[11]) // qty column\r\n        const revenueChannel = list[4] // R/C column\r\n        const price = list[12] // PRICE column\r\n        const salesType = list[19] // S/T column\r\n        const source = list[15] // Source column\r\n        console.log(\"others\", others)\r\n        if (revenueChannel) {\r\n          if (revenueChannel === \"R/C\") return\r\n          // if (typeof subTotals[revenueChannel] === \"undefined\") {\r\n          //   subTotals[revenueChannel] = []\r\n          // }\r\n          subTotals.push({\r\n            others: Number(others.replace(/,/g, \"\")),\r\n            totalDue: Number(totalDue.replace(/,/g, \"\")),\r\n            collectibles: Number(collectibles.replace(/,/g, \"\")),\r\n            amountPaid: Number(amountPaid.replace(/,/g, \"\")),\r\n            totalQty: totalQty,\r\n          })\r\n        }\r\n\r\n        if (salesType) {\r\n          if (salesType === \"S/T\") return\r\n          if (typeof summaries[salesType] === \"undefined\") {\r\n            summaries[salesType] = []\r\n          }\r\n\r\n          summaries[salesType].push({\r\n            others: Number(others.replace(/,/g, \"\")),\r\n            totalDue: Number(totalDue.replace(/,/g, \"\")),\r\n            collectibles: Number(collectibles.replace(/,/g, \"\")),\r\n            amountPaid: Number(amountPaid.replace(/,/g, \"\")),\r\n          })\r\n        }\r\n\r\n        if (source) {\r\n          if (source === \"SOURCE\") return\r\n          if (typeof sources[source] === \"undefined\") {\r\n            sources[source] = []\r\n          }\r\n          sources[source].push({\r\n            others: Number(others.replace(/,/g, \"\")),\r\n            totalDue: Number(totalDue.replace(/,/g, \"\")),\r\n            collectibles: Number(collectibles.replace(/,/g, \"\")),\r\n            amountPaid: Number(amountPaid.replace(/,/g, \"\")),\r\n          })\r\n        }\r\n      }\r\n    })\r\n\r\n    const others = sumArray(subTotals, \"others\")\r\n    const totalDue = sumArray(subTotals, \"totalDue\")\r\n    const collectibles = sumArray(subTotals, \"collectibles\")\r\n    const amountPaid = sumArray(subTotals, \"amountPaid\")\r\n    const totalQty = sumArray(subTotals, \"totalQty\")\r\n    const blankColumns = [...new Array(19)].map((d, i) => {\r\n      return i === 11 ? \"\" /*totalQty*/ : \"\"\r\n    })\r\n\r\n    sheets[key].push([\r\n      ...blankColumns,\r\n      \"TOTAL:\",\r\n      produceAmount(others),\r\n      produceAmount(totalDue),\r\n      produceAmount(collectibles),\r\n      produceAmount(amountPaid),\r\n    ])\r\n\r\n    if (additionalSheetInfo) {\r\n      const [date = \"\", code = \"\"] = key.split(\" \")\r\n      sumOfRevenues.push({\r\n        sheetName: key,\r\n        date,\r\n        code,\r\n        totalDue,\r\n        collectibles,\r\n        amountPaid,\r\n      })\r\n    }\r\n\r\n    if (!additionalSheetInfo) {\r\n      // This is for Summary Area:\r\n      const rowOrder = [\r\n        \"R\",\r\n        \"PP\",\r\n        \"SPWD\",\r\n        \"D/O\",\r\n        \"D/IR\",\r\n        \"D/PM\",\r\n        \"--\",\r\n        \"\",\r\n        \"CASH RECEIVED\", //\"CASH RECEIVABLE\",\r\n      ]\r\n      const finalSummary = []\r\n      let firstPartTotal = 0\r\n      for (const subKey of rowOrder) {\r\n        if (typeof summaries[subKey] !== \"undefined\") {\r\n          const summaryList = [...summaries[subKey]]\r\n          // const others = sumArray(summaryList, \"others\")\r\n          // const totalDue = sumArray(summaryList, \"totalDue\")\r\n          const collectibles = sumArray(summaryList, \"collectibles\")\r\n          const amountPaid = sumArray(summaryList, \"amountPaid\")\r\n          firstPartTotal = firstPartTotal + (amountPaid + collectibles)\r\n          finalSummary.push([\r\n            forRecapLabel(subKey),\r\n            \"\",\r\n            \"\",\r\n            produceAmount(amountPaid + collectibles),\r\n          ])\r\n        } else {\r\n          if (subKey === \"--\") {\r\n            finalSummary.push([subKey, \"\", \"\", produceAmount(firstPartTotal)])\r\n          } else if (subKey === \"CASH RECEIVED\") {\r\n            const cashList = sources[\"Cash\"] || []\r\n            const cash = sumArray(cashList, \"amountPaid\")\r\n            finalSummary.push([subKey, \"\", \"\", produceAmount(cash)])\r\n          } else if (subKey === \"\") {\r\n            finalSummary.push([])\r\n            finalSummary.push([])\r\n          } else {\r\n            finalSummary.push([subKey, \"\", \"\", produceAmount(0)])\r\n          }\r\n        }\r\n      }\r\n      sheets[key].push([])\r\n      sheets[key].push([])\r\n      const _blankColumns = new Array(19).map(() => \"\")\r\n      finalSummary.forEach((list) =>\r\n        sheets[key].push([\"__\", ..._blankColumns, ...list])\r\n      )\r\n    }\r\n  }\r\n  if (additionalSheetInfo) {\r\n    return [sheets, sumOfRevenues]\r\n  }\r\n  return sheets\r\n}\r\n\r\nconst forRecapLabel = (subKey) => {\r\n  switch (subKey) {\r\n    case \"R\":\r\n      return `${subKey} - REGULAR`\r\n    case \"PP\":\r\n      return `${subKey} - PARTNER PROVIDER`\r\n    case \"SPWD\":\r\n      return `${subKey} - SENIOR SPWD`\r\n    case \"D/PM\":\r\n      return `${subKey} - PROMO`\r\n    default:\r\n      return subKey\r\n  }\r\n}\r\n\r\nexport const calculateTotalRevChannel = (list) => {\r\n  const totalDue = sumArray(list, \"totalDue\")\r\n  const totalAmountPaid = sumArray(list, \"amountPaid\")\r\n  const totalCollectibles = sumArray(list, \"collectibles\")\r\n  return { totalDue, totalAmountPaid, totalCollectibles }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\index.js",["981"],"import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Modal,\r\n  Button,\r\n  DatePicker,\r\n  Table,\r\n  Space,\r\n  Input,\r\n  Select,\r\n  Card,\r\n  Switch,\r\n  Alert,\r\n} from \"antd\"\r\nimport { SearchOutlined } from \"@ant-design/icons\"\r\nimport useGroupPaymentHook from \"./hook\"\r\nimport GroupPaymentPrint from \"./groupPaymentPrint\"\r\nconst { Option } = Select\r\nconst { RangePicker } = DatePicker\r\n\r\nconst CustomModal = ({ visible, setVisible }) => {\r\n  const [\r\n    {\r\n      rangeProps,\r\n      searchInputProps,\r\n      selectProps,\r\n      searchButtonProps,\r\n      refNoProps,\r\n      datePaymentProps,\r\n      editButtonProps,\r\n      discardButtonProps,\r\n      saveButtonProps,\r\n      switchProps,\r\n      tableProps,\r\n    },\r\n    { filteredData, selectData },\r\n  ] = useGroupPaymentHook()\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Group Payments\"\r\n      visible={visible}\r\n      width={2000}\r\n      onCancel={() => setVisible(false)}\r\n      footer={[\r\n        <Button key=\"back\" onClick={() => setVisible(false)}>\r\n          Cancel\r\n        </Button>,\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            saveButtonProps.onClick()\r\n            setVisible(false)\r\n          }}\r\n          disabled={saveButtonProps.disabled}\r\n          danger\r\n        >\r\n          Save\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Space\r\n        direction=\"vertical\"\r\n        style={{\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <Space>\r\n            <Switch {...switchProps} />\r\n            {filteredData.length > 0 && (\r\n              <GroupPaymentPrint filteredData={filteredData} />\r\n            )}\r\n          </Space>\r\n          <Space direction=\"horizontal\" wrap>\r\n            Order Date:\r\n            <RangePicker {...rangeProps} />\r\n            <Input\r\n              // value={searchValue}\r\n              // onChange={(e) => setSearchValue(e.target.value)}\r\n              {...searchInputProps}\r\n              addonAfter={\r\n                <Select {...selectProps}>\r\n                  {selectData.map((value) => (\r\n                    <Option key={value} value={value}>\r\n                      {value}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              }\r\n            />\r\n            <Button\r\n              {...searchButtonProps}\r\n              danger\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </div>\r\n        <div style={{ width: \"100%\", display: \"flex\", flexFlow: \"row wrap\" }}>\r\n          <Card\r\n            style={{ width: \"100%\", maxWidth: \"375px\", position: \"relative\" }}\r\n          >\r\n            <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n              {filteredData.length > 0 && (\r\n                <Alert\r\n                  message=\"Informational Notes\"\r\n                  description={\r\n                    discardButtonProps.disabled\r\n                      ? \"Step 1: Click Edit button below to show the checkboxes in the table\"\r\n                      : \"Step 2: Please input the Ref No first before checking the box\"\r\n                  }\r\n                  type=\"info\"\r\n                  showIcon\r\n                  closable\r\n                />\r\n              )}\r\n              <label>Ref No</label>\r\n              <Input {...refNoProps} />\r\n              <label>Date Payment</label>\r\n              <DatePicker\r\n                allowClear={false}\r\n                style={{ width: \"100%\" }}\r\n                format=\"MM/DD/YYYY\"\r\n                {...datePaymentProps}\r\n                onKeyDown={(e) => {\r\n                  e.preventDefault()\r\n                  return false\r\n                }}\r\n              />\r\n            </Space>\r\n            <br />\r\n            <br />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"right\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <Space>\r\n                <Button {...discardButtonProps}>Discard</Button>\r\n                <Button danger {...editButtonProps}>\r\n                  Edit\r\n                </Button>\r\n              </Space>\r\n            </div>\r\n          </Card>\r\n          {/* <div style={{ overflowY: \"auto\", flex: 1, minWidth: \"375px\" }}> */}\r\n          <Table\r\n            {...tableProps}\r\n            style={{ flex: 1, minWidth: \"375px\" }}\r\n            pagination={{\r\n              size: \"small\",\r\n              defaultPageSize: 20,\r\n            }}\r\n            size=\"small\"\r\n            // scroll={{ y: 690 }}\r\n          />\r\n          {/* </div> */}\r\n        </div>\r\n      </Space>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst GroupPayments = () => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"default\" shape=\"round\" onClick={() => setVisible(true)}>\r\n        Add Group Payment\r\n      </Button>\r\n      {visible && <CustomModal visible={visible} setVisible={setVisible} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GroupPayments\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\hook.js",["982"],"import React from \"react\"\r\nimport ScheduleServicess from \"Services/firebase/SchedulesServicess\"\r\nimport DropdownServicess from \"Services/firebase/DropdownServicess\"\r\nimport useSelectComponentHandler from \"./selectComponentHandler\"\r\nimport useRangeHandler from \"./rangeHandler\"\r\n// import useFindDataHandler from \"hooks/findDataHandler\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n} from \"Helpers/dateFormat\"\r\nimport handleAutoFill from \"./handleAutoFill\"\r\nimport { useState, useEffect, useContext } from \"react\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport moment from \"moment\"\r\nimport useFindDataHandlers from \"./findDataHandler\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport { displayPaymentProp } from \"Helpers/collectionData\"\r\n\r\nexport default function useGroupPaymentHook() {\r\n  const format = \"MM/DD/YYYY\"\r\n  // user slice from redux\r\n  const { user } = useContext(UnauthorizedContext)\r\n  // reusableHook from hooks folder for dateFrom and dateTo\r\n  const [rangeProps, rangeHandlerFilteredData, loadRangeHandlerData] =\r\n    useRangeHandler(ScheduleServicess)\r\n\r\n  // find data on firebase dropdown collection\r\n  const [dataHandler] = useFindDataHandlers(\r\n    new DropdownServicess({\r\n      _fieldName: \"name\",\r\n      _fieldValue: \"orderViaPartner\",\r\n    })\r\n  )\r\n  // this selectHandler is dependent on dataHandler\r\n  const [selectHandler] = useSelectComponentHandler(dataHandler.data?.list)\r\n\r\n  // states\r\n  const [searchValue, setSearchValue] = useState(\"\")\r\n  const [filteredData, setFilteredData] = useState([])\r\n  const [cacheFilteredData, setCacheFilteredData] = useState([])\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n  const [isChecked, setIsChecked] = useState(false)\r\n  const [isEditClicked, setIsEditClicked] = useState(true)\r\n  const [isDiscardClicked, setIsDiscardClicked] = useState(true)\r\n  const [additionalInfo, setAdditionalInfo] = useState({\r\n    refNo: \"\",\r\n    datePayment: new Date(),\r\n  })\r\n  useEffect(() => {\r\n    switchHandler(isChecked)\r\n    if (rangeHandlerFilteredData.searchData.length > 0) {\r\n      setIsEditClicked(false)\r\n      setIsDiscardClicked(true)\r\n    } else {\r\n      setIsEditClicked(true)\r\n      setIsDiscardClicked(true)\r\n    }\r\n  }, [rangeHandlerFilteredData.searchData, isChecked])\r\n\r\n  const switchHandler = (value) => {\r\n    setIsChecked(value)\r\n    setCacheFilteredData([])\r\n    setSelectedRows([])\r\n    if (rangeHandlerFilteredData.searchData.length > 0) {\r\n      const _filteredData = [...rangeHandlerFilteredData.searchData]\r\n      if (isChecked) {\r\n        const _newFilteredData = _filteredData.filter(\r\n          (data) => data?.datePayment\r\n        )\r\n        setFilteredData(_newFilteredData)\r\n      } else {\r\n        const _newFilteredData = _filteredData.filter(\r\n          (data) => typeof data?.datePayment === \"undefined\"\r\n        )\r\n        setFilteredData(_newFilteredData)\r\n      }\r\n    } else {\r\n      setFilteredData([])\r\n    }\r\n  }\r\n\r\n  const searchHandler = () => {\r\n    setSelectedRows([])\r\n    setCacheFilteredData([])\r\n    loadRangeHandlerData({\r\n      dateField: \"StartTime\", // required\r\n      orderBy: \"StartTime\", // required\r\n      search: {\r\n        //optional\r\n        partnerMerchantOrderNo: searchValue,\r\n        [SchedulersClass.ORDER_VIA_WEBSITE]: selectHandler.value,\r\n        branch: user?.branchSelected,\r\n      },\r\n    })\r\n  }\r\n\r\n  const amountPaidChangeHandler = (e, id) => {\r\n    // const _amountPaidList = [...amountPaidList]\r\n    const _dataIndex = cacheFilteredData.findIndex(\r\n      (dataRow) => dataRow._id === id\r\n    )\r\n    // _amountPaidList[_dataIndex] = e.target.value\r\n    // setAmountPaidList(_amountPaidList)\r\n\r\n    const _cacheFilteredData = { ...cacheFilteredData[_dataIndex] }\r\n    _cacheFilteredData.amountPaid = Number(e.target.value).toFixed(2)\r\n    const newCache = arrayReplace(\r\n      cacheFilteredData,\r\n      _dataIndex,\r\n      _cacheFilteredData\r\n    )\r\n    setCacheFilteredData(newCache)\r\n  }\r\n\r\n  const submitHandler = () => {\r\n    if (selectedRows.length > 0) {\r\n      for (const obj of cacheFilteredData) {\r\n        console.log(\"cacheFilteredData\", cacheFilteredData)\r\n        if (selectedRows.includes(obj._id)) {\r\n          let others = 0\r\n          for (const key of Object.keys(obj[SchedulersClass.OTHERS] || {})) {\r\n            others = obj[SchedulersClass.OTHERS][key]\r\n          }\r\n          console.log(\"others\", others)\r\n          const _totalAmountDeducted =\r\n            Number(obj[SchedulersClass.TOTAL_DUE]) -\r\n            Number(obj[SchedulersClass.AMOUNT_PAID])\r\n          const submissionData = {\r\n            [SchedulersClass.PARTIALS]: [\r\n              {\r\n                [SchedulersClass.ACCOUNT_NUMBER]:\r\n                  obj[SchedulersClass.ACCOUNT_NUMBER],\r\n                [SchedulersClass.REF_NO]: obj[SchedulersClass.REF_NO],\r\n                [SchedulersClass.MODE_PAYMENT]:\r\n                  obj[SchedulersClass.MODE_PAYMENT],\r\n                [SchedulersClass.SOURCE]: obj[SchedulersClass.SOURCE],\r\n                date: obj[SchedulersClass.DATE_PAYMENT],\r\n                amount: Number(obj?.amountPaid) - Number(others),\r\n                [SchedulersClass.SOA_NUMBER]:\r\n                  obj[SchedulersClass.SOA_NUMBER] || \"\",\r\n                [SchedulersClass.PAYMENT_NOTES]:\r\n                  obj[SchedulersClass.PAYMENT_NOTES] || \"\",\r\n                [SchedulersClass.OR_NO]: obj[SchedulersClass.OR_NO] || \"\",\r\n              },\r\n            ],\r\n            [SchedulersClass.FIXED_DEDUCTION]: {\r\n              amountDeduction: 10,\r\n              percentage: 0.95,\r\n              totalAmountDeducted: _totalAmountDeducted, // not yet done\r\n            },\r\n          }\r\n          console.log(\"submissionData\", submissionData)\r\n          // const service = new ScheduleServicess({\r\n          //   _id: obj._id,\r\n          //   _data: submissionData,\r\n          // })\r\n          // service.mergeData()\r\n        }\r\n      }\r\n    } else {\r\n      alert(\"no data\")\r\n    }\r\n  }\r\n\r\n  const componentProps = {\r\n    rangeProps,\r\n    searchInputProps: {\r\n      value: searchValue,\r\n      onChange: (e) => setSearchValue(e.target.value),\r\n    },\r\n    selectProps: {\r\n      ...selectHandler,\r\n      loading: dataHandler.isLoading,\r\n      disabled: true,\r\n    },\r\n    searchButtonProps: { onClick: searchHandler },\r\n    refNoProps: {\r\n      value: additionalInfo?.refNo,\r\n      onChange: (e) => {\r\n        setAdditionalInfo({\r\n          ...additionalInfo,\r\n          refNo: e.target.value,\r\n        })\r\n      },\r\n    },\r\n    datePaymentProps: {\r\n      value: moment(additionalInfo.datePayment, format),\r\n      onChange: (date, dateString) => {\r\n        if (!date) return\r\n        setAdditionalInfo({\r\n          ...additionalInfo,\r\n          datePayment: date._d,\r\n        })\r\n      },\r\n    },\r\n    editButtonProps: {\r\n      onClick: () => {\r\n        setIsEditClicked(true)\r\n        setIsDiscardClicked(false)\r\n        setCacheFilteredData([...filteredData])\r\n      },\r\n      disabled: isEditClicked,\r\n    },\r\n    discardButtonProps: {\r\n      onClick: () => {\r\n        setIsDiscardClicked(true)\r\n        setIsEditClicked(!rangeHandlerFilteredData.searchData.length > 0)\r\n        setCacheFilteredData([])\r\n        setSelectedRows([])\r\n      },\r\n      disabled: isDiscardClicked,\r\n    },\r\n    saveButtonProps: {\r\n      onClick: submitHandler,\r\n      disabled: selectedRows.length === 0,\r\n    },\r\n    switchProps: {\r\n      onChange: switchHandler,\r\n      checked: isChecked,\r\n      checkedChildren: \"Paid\",\r\n      unCheckedChildren: \"Unpaid\",\r\n    },\r\n    tableProps: {\r\n      rowSelection: !isDiscardClicked\r\n        ? {\r\n            type: isChecked ? \"radio\" : \"checkbox\",\r\n            onChange: (record) => {\r\n              if (additionalInfo.refNo && additionalInfo.datePayment) {\r\n                const newData = handleAutoFill(\r\n                  record,\r\n                  cacheFilteredData, // this is a copy of the original\r\n                  additionalInfo.refNo,\r\n                  additionalInfo.datePayment,\r\n                  filteredData // this the original data cannot be modified to prevent error\r\n                )\r\n                setSelectedRows(record)\r\n                setCacheFilteredData(newData)\r\n              }\r\n            },\r\n            getCheckboxProps: (record) =>\r\n              additionalInfo.refNo && additionalInfo.datePayment\r\n                ? { disabled: false }\r\n                : { disabled: true },\r\n          }\r\n        : false,\r\n      dataSource:\r\n        cacheFilteredData.length > 0\r\n          ? [\r\n              ...cacheFilteredData.map((data) => {\r\n                return { ...data, key: data._id }\r\n              }),\r\n            ]\r\n          : [\r\n              ...filteredData.map((data) => {\r\n                return { ...data, key: data._id }\r\n              }),\r\n            ],\r\n      columns: [\r\n        {\r\n          title: \"ORDER DATE/TIME\",\r\n          key: \"StartTime\",\r\n          dataIndex: \"StartTime\",\r\n          render: (date) => {\r\n            const formatDate = formatDateFromDatabase(date)\r\n            const dateSlash = formatDateDashWithTime(formatDate)\r\n            return <span>{dateSlash}</span>\r\n          },\r\n        },\r\n        {\r\n          title: \"ORDER #\",\r\n          key: \"orderNo\",\r\n          dataIndex: \"orderNo\",\r\n        },\r\n        {\r\n          title: \"UTAK #\",\r\n          key: \"utakNo\",\r\n          dataIndex: \"utakNo\",\r\n        },\r\n        {\r\n          title: \"PARTNER MERCH ORDER #\",\r\n          key: \"partnerMerchantOrderNo\",\r\n          dataIndex: \"partnerMerchantOrderNo\",\r\n        },\r\n        {\r\n          title: \"CUSTOMER\",\r\n          key: \"customer\",\r\n          dataIndex: \"customer\",\r\n        },\r\n        {\r\n          title: \"REF #\",\r\n          key: \"refNo\",\r\n          dataIndex: \"refNo\",\r\n          render: (data, record) => {\r\n            if (typeof record[SchedulersClass.PARTIALS] !== \"undefined\") {\r\n              if (record[SchedulersClass.PARTIALS].length > 0) {\r\n                return displayPaymentProp(data, record, SchedulersClass.REF_NO)\r\n              }\r\n            }\r\n            return data\r\n          },\r\n        },\r\n        {\r\n          title: \"DATE PAID\",\r\n          key: \"datePayment\",\r\n          dataIndex: \"datePayment\",\r\n          render: (date) => {\r\n            if (date) {\r\n              const formatDate = formatDateFromDatabase(date)\r\n              const dateSlash = formatDateDash(formatDate)\r\n              return <span>{dateSlash}</span>\r\n            } else {\r\n              return <></>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"TOTAL DUE\",\r\n          key: \"totalDue\",\r\n          dataIndex: \"totalDue\",\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          key: \"amountPaid\",\r\n          dataIndex: \"amountPaid\",\r\n          align: \"right\",\r\n          render: (value, record) => {\r\n            const _dataIndex = cacheFilteredData.findIndex(\r\n              (dataRow) => dataRow._id === record._id\r\n            )\r\n            return cacheFilteredData.length > 0 &&\r\n              selectedRows.includes(record._id) ? (\r\n              <input\r\n                type=\"number\"\r\n                step=\".00\"\r\n                placeholder=\"0\"\r\n                value={cacheFilteredData[_dataIndex]?.amountPaid}\r\n                onChange={(e) => {\r\n                  amountPaidChangeHandler(e, record._id)\r\n                }}\r\n              />\r\n            ) : (\r\n              <span>{value || \"0.00\"}</span>\r\n            )\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  }\r\n\r\n  const dataResponses = {\r\n    filteredData,\r\n    selectData: dataHandler?.data?.list || [],\r\n    selectedRows,\r\n  }\r\n\r\n  return [componentProps, dataResponses]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\groupPaymentPrint.js",["983","984","985","986","987","988","989","990"],"import { Button, DatePicker, Input } from \"antd\"\r\nimport React from \"react\"\r\n// import {\r\n//   AMOUNT_PAID,\r\n//   DATE_PAYMENT,\r\n//   REF_NO,\r\n// } from \"components/PaymentDetails/types\"\r\nimport moment from \"moment\"\r\nimport {\r\n  AiFillCloseCircle,\r\n  AiFillFilter,\r\n  AiFillPrinter,\r\n  AiOutlineClose,\r\n} from \"react-icons/ai\"\r\nimport Print from \"Components/Features/Print\"\r\n// import {\r\n//   CUSTOMER,\r\n//   DATE_START,\r\n//   ORDER_NO,\r\n//   PARTNER_MERCHANT_ORDER_NO,\r\n// } from \"Constants/schedules\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Helpers/dateFormat\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nconst defaultDate = moment(new Date(), \"MM/DD/YYYY\")\r\nfunction GroupPaymentPrint({ filteredData }) {\r\n  const startDate = formatDateFromDatabase(\r\n    filteredData[SchedulersClass.DATE_START]\r\n  )\r\n  const datePayment = formatDateFromDatabase(\r\n    filteredData[SchedulersClass.DATE_PAYMENT]\r\n  )\r\n  return (\r\n    <Print\r\n      component={\r\n        <div>\r\n          <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n            <tr style={{ width: \"100%\" }}>\r\n              <th>ORDER DATE/TIME</th>\r\n              <th>ORDER #</th>\r\n              <th>PARTNER MERCH ORDER #</th>\r\n              <th>CUSTOMER</th>\r\n              <th>REF NO</th>\r\n              <th>DATE PAID</th>\r\n              <th align=\"right\">TOTAL DUE</th>\r\n              <th align=\"right\">AMOUNT PAID</th>\r\n            </tr>\r\n            {filteredData.map((data) => {\r\n              return (\r\n                <tr>\r\n                  <td>{formatDateSlash(startDate)}</td>\r\n                  <td>{data[SchedulersClass.ORDER_NO]}</td>\r\n                  <td>{data[SchedulersClass.PARTNER_MERCHANT_ORDER_NO]}</td>\r\n                  <td>{data[SchedulersClass.CUSTOMER]}</td>\r\n                  <td>{data[SchedulersClass.REF_NO]}</td>\r\n                  <td>{formatDateSlash(datePayment)}</td>\r\n                  <td align=\"right\">{data?.totalDue}</td>\r\n                  <td align=\"right\">{data[SchedulersClass.AMOUNT_PAID]}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n            <tr style={{ color: \"red\" }}>\r\n              <td>TOTAL</td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td align=\"right\">\r\n                {sumArray(filteredData, \"totalDue\").toFixed(2)}\r\n              </td>\r\n              <td align=\"right\">\r\n                {sumArray(filteredData, SchedulersClass.AMOUNT_PAID).toFixed(2)}\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      }\r\n      button={<AiFillPrinter fontSize=\"2rem\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default GroupPaymentPrint\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\handleAutoFill.js",["991"],"import { formatDateDash } from \"Helpers/dateFormat\"\r\n\r\nconst ifOrigHasRef = (originalData) => {\r\n  if (originalData?.refNo && originalData?.datePayment) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nconst handleAutoFill = (\r\n  checkedId,\r\n  cacheFilteredData,\r\n  refNo,\r\n  datePayment,\r\n  filteredData\r\n) => {\r\n  const result = []\r\n  for (const obj of cacheFilteredData) {\r\n    const originalData = filteredData.find((data) => data._id === obj._id)\r\n    let withPercent = 0\r\n    let totalAmountPaid = 0\r\n    if (originalData?.totalDue) {\r\n      withPercent = Number(originalData?.totalDue) * 0.05\r\n      totalAmountPaid = Number(originalData?.totalDue) - (withPercent + 10)\r\n    }\r\n    if (checkedId.includes(obj?._id)) {\r\n      result.push({\r\n        ...obj,\r\n        modePayment: \"Zap\",\r\n        source: \"Zap\",\r\n        accountNumber: \"BDO / 609\",\r\n        amountPaid: ifOrigHasRef(originalData)\r\n          ? obj?.amountPaid\r\n          : Number(obj?.amountPaid) > 0\r\n          ? Number(obj?.amountPaid).toFixed(2)\r\n          : totalAmountPaid.toFixed(2),\r\n        refNo: ifOrigHasRef(originalData)\r\n          ? refNo\r\n          : obj.refNo\r\n          ? obj.refNo\r\n          : refNo,\r\n        datePayment: ifOrigHasRef(originalData)\r\n          ? datePayment\r\n          : obj.datePayment\r\n          ? obj.datePayment\r\n          : datePayment,\r\n      })\r\n    } else {\r\n      result.push({\r\n        ...obj,\r\n        modePayment: \"\",\r\n        source: \"\",\r\n        accountNumber: \"\",\r\n        amountPaid: originalData?.amountPaid\r\n          ? originalData?.amountPaid\r\n          : \"0.00\",\r\n        refNo: originalData?.refNo ? originalData?.refNo : \"\",\r\n        datePayment: originalData?.datePayment ? originalData?.datePayment : \"\",\r\n      })\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nexport default handleAutoFill\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\findDataHandler.js",["992"],"import { useEffect, useState } from \"react\"\r\n\r\nexport default function useFindDataHandlers(service) {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [data, setData] = useState(null)\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [])\r\n\r\n  // will cause an error in the develeopment server database due to indexing but will work in production\r\n  const loadData = async () => {\r\n    setIsLoading(true)\r\n    const _data = await service.getDataWithFieldName()\r\n    if (typeof _data === \"object\") {\r\n      setData(_data[0])\r\n    }\r\n    setData(_data)\r\n    setIsLoading(false)\r\n  }\r\n  return [{ data, isLoading }]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\rangeHandler.js",["993","994","995"],"import moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(Service) {\r\n  // example instance class: SchedulerServicess\r\n  // how to call hook example: const [rangeHandler, loadData] = useRangeHandler(ScheduleServicess)\r\n  const format = \"MM/DD/YYYY\"\r\n  const defaultDate = moment(new Date(), format)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState([defaultDate, defaultDate])\r\n  const [rangeData, setRangeData] = useState([])\r\n  const [searchData, setSearchData] = useState([])\r\n\r\n  const loadData = async (args) => {\r\n    const { search = null, dateField, orderBy } = args\r\n    setIsLoading(true)\r\n    let dateRange = []\r\n    if (value.length > 0) {\r\n      dateRange = [value[0]._d, value[1]._d]\r\n      const _data = await new Service({\r\n        _dateField: dateField,\r\n        _orderBy: orderBy,\r\n        _dateRange: dateRange,\r\n      }).getRange()\r\n      if (_data.length > 0 && search) {\r\n        const _searchData = _data.filter((data) => {\r\n          let filterResult = true\r\n          for (const key in search) {\r\n            if (search[key] && data[key]) {\r\n              if (data[key].includes(search[key])) {\r\n                // console.log(\"result\", true)\r\n                filterResult = filterResult && true\r\n              } else {\r\n                // console.log(\"result\", false)\r\n                filterResult = filterResult && false\r\n              }\r\n            } else {\r\n              if (search[key]) {\r\n                filterResult = filterResult && false\r\n              } else {\r\n                filterResult = filterResult && true\r\n              }\r\n            }\r\n          }\r\n          return filterResult\r\n        })\r\n        console.log(\"_searchData\", _searchData)\r\n        setSearchData(_searchData)\r\n      } else {\r\n        setSearchData([])\r\n      }\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const onChange = (value) => {\r\n    if (value) {\r\n      setValue(value)\r\n    }\r\n  }\r\n\r\n  return [\r\n    { showTime: false, format, value, onChange }, // rangeComponentHandler\r\n    { value /*rangeData*/, searchData }, // filtered data result\r\n    loadData,\r\n    isLoading,\r\n    // load data example : loadRangeHandlerData({\r\n    //   dateField: \"StartTime\", // required\r\n    //   orderBy: \"StartTime\", // required\r\n    //   search: { //optional\r\n    //     partnerMerchantOrderNo: searchValue,\r\n    //     orderViaPartner: selectHandler.value,\r\n    //   },\r\n    //   specialSearch: \"datePayment\", // use in filter together with search check if value already has a payment //optional\r\n    // })\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\selectComponentHandler.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\DropdownServicess.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\vipUsersClass.js",["996","997","998","999","1000"],"import { ARRAY_OF_STRING_TYPE, BOOLEAN_TYPE } from \"Constants/types\"\r\nimport { producedBranches, producedRoles } from \"Helpers/collectionData\"\r\nimport Base from \"Services/Base\"\r\nimport BranchClass from \"./BranchClass\"\r\nimport RolesClass from \"./RolesClass\"\r\n\r\nexport default class VIPUsersClass {\r\n  static COLLECTION_NAME = \"vipUsers\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static IS_VIP = \"isVIP\"\r\n\r\n  static PROPERTIES = [this.IS_VIP]\r\n\r\n  static TYPES = {\r\n    [this.IS_VIP]: BOOLEAN_TYPE,\r\n  }\r\n\r\n  static LABELS = {\r\n    [this.IS_VIP]: \"IS VIP\",\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\index.js",["1001","1002","1003","1004","1005","1006"],"import React, { useState } from \"react\"\r\n// import { DATE, DATE_START, DATE_END, BRANCH } from \"Constants/schedules\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport { Grid } from \"./Styled\"\r\nimport RangePicker from \"Components/Commons/RangePicker\"\r\nimport Panel from \"./Panel\"\r\nimport useSchedulerFilter from \"./Controllers/useSchedulerFilter\"\r\nimport Animate, { FadeInLeft } from \"animate-css-styled-components\"\r\nimport { FloatContainer } from \"./styles\"\r\nimport { AiFillPrinter } from \"react-icons/ai\"\r\n// import { STATUS } from \"components/SchedulerComponent/orderSlip/types\"\r\nimport SchedulesClass from \"Services/Classes/SchedulesClass\"\r\nimport ProductClass from \"Services/Classes/ProductsClass\"\r\nimport { Card } from \"antd\"\r\n\r\nconst DATE = \"date\"\r\nconst DATE_START = SchedulesClass.DATE_START\r\nconst DATE_END = SchedulesClass.DATE_END\r\nfunction FilteringPanel({ isToggled }) {\r\n  const [\r\n    dataFetched,\r\n    dataFiltered,\r\n    branch,\r\n    branchDatasource,\r\n    products,\r\n    productLabels,\r\n    getDataByBranch,\r\n    getDataByDate,\r\n  ] = useSchedulerFilter(SchedulersClass)\r\n\r\n  console.log(\"printDataFetched\", dataFetched)\r\n  return (\r\n    <Grid style={{ position: \"relative\" }}>\r\n      {/* <Select\r\n        label=\"Branch\"\r\n        dataSource={branchDatasource}\r\n        value={branch}\r\n        onChange={(value) => getDataByBranch(value)}\r\n      /> */}\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"5rem\",\r\n          right: \"3rem\",\r\n          zIndex: 1000,\r\n          backgroundColor: \"white\",\r\n        }}\r\n      >\r\n        <RangePicker\r\n          label=\"Date\"\r\n          onChange={(value) => {\r\n            getDataByDate({ dates: value })\r\n          }}\r\n          style={{ width: \"100%\" }}\r\n          format=\"MM/DD/YYYY\"\r\n          // disabled={products.length > 0 ? false : true}\r\n        />\r\n      </div>\r\n      <Grid style={{ marginTop: \"3rem\" }}>\r\n        {dataFiltered.map((data, index) => {\r\n          const chips = []\r\n          for (const key in data) {\r\n            if (products.includes(key)) {\r\n              chips.push(`${productLabels[key]}: ${data[key]}`)\r\n            }\r\n          }\r\n          return (\r\n            <Animate\r\n              key={index}\r\n              Animation={[FadeInLeft]}\r\n              duration={[\"1s\"]}\r\n              delay={[`0.${1 + index}s`]}\r\n            >\r\n              <Card>\r\n                <Panel\r\n                  date={data[DATE]}\r\n                  timeStart={data[DATE_START]}\r\n                  timeEnd={data[DATE_END]}\r\n                  backgroundColor=\"transparent\"\r\n                  chips={[...chips]}\r\n                />\r\n              </Card>\r\n            </Animate>\r\n          )\r\n        })}\r\n      </Grid>\r\n      <FloatContainer display={isToggled}>\r\n        {/* {dataFetched.length > 0 && branch && (\r\n          <Print\r\n            component={\r\n              <FilteringPanelDocs\r\n                documentPrintInfo={{\r\n                  dataFetched: dataFetched,\r\n                  products,\r\n                  productLabels,\r\n                }}\r\n                branch={branch}\r\n              />\r\n            }\r\n            button={<AiFillPrinter fontSize=\"1.5rem\" />}\r\n          />\r\n        )} */}\r\n      </FloatContainer>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default FilteringPanel\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Panel\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Controllers\\useSchedulerFilter.js",["1007","1008"],"import { useEffect, useState, useContext } from \"react\"\r\nimport { formatDateFromDatabase } from \"Helpers/dateFormat\"\r\n// import { selectuser } from \"containers/0.login/loginSlice\"\r\n// import { selectuser } from \"components/SchedulerComponent/user\"\r\nimport { useSelector } from \"react-redux\"\r\nimport FilteringPanelMethods from \"./FilteringPanelMethods\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\n\r\nimport SchedulesClass from \"Services/Classes/SchedulesClass\"\r\nimport ProductClass from \"Services/Classes/ProductsClass\"\r\nfunction useSchedulerFilter() {\r\n  // const user = useSelector(selectuser)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [branchDatasource, setBranchDatasource] = useState([])\r\n  const [dataFetched, setDataFetched] = useState([])\r\n  const [dataFiltered, setDataFiltered] = useState([])\r\n  const [products, setProducts] = useState([])\r\n  const [productLabels, setProductLabels] = useState({})\r\n  const [branch, setBranch] = useState(\"\")\r\n\r\n  // to get the branch colors from user redux store\r\n  useEffect(() => {\r\n    if (user?.branchSelected) {\r\n      setBranch(user?.branchSelected)\r\n    }\r\n  }, [user])\r\n\r\n  // to set default branch value and its dropdown list of value\r\n  // useEffect(() => {\r\n  //   if (branchDatasource.length === 0) {\r\n  //     setBranchDatasource(user.branchSelected)\r\n  //   } else {\r\n  //     setBranch(branchDatasource[0])\r\n  //   }\r\n  // }, [user, branchDatasource])\r\n\r\n  useEffect(() => {\r\n    getProducts()\r\n  }, [])\r\n\r\n  // to get the product list from database\r\n  const getProducts = async () => {\r\n    const _productList = await ProductClass.getData()\r\n    const { _products, _productLabels } =\r\n      FilteringPanelMethods.produceProductList(_productList)\r\n    setProducts(_products)\r\n    setProductLabels(_productLabels)\r\n    // db.collection(\"products\")\r\n    //   .get()\r\n    //   .then((querySnapshot) => {\r\n    //     const _dataFetched = []\r\n    //     querySnapshot.forEach((doc) => {\r\n    //       const _data = doc.data()\r\n    //       _dataFetched.push({\r\n    //         ..._data,\r\n    //       })\r\n    //     })\r\n    //     const { _products, _productLabels } =\r\n    //       FilteringPanelMethods.produceProductList(_dataFetched)\r\n    //     setProducts(_products)\r\n    //     setProductLabels(_productLabels)\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(\"Error getting documents: \", error)\r\n    //   })\r\n  }\r\n\r\n  const getDataByDate = async ({ dates }) => {\r\n    if (dates !== null /*&& branchDatasource.length > 0*/) {\r\n      const MS_PER_MINUTE = 60000\r\n      const startTime = new Date(dates[0]?._d)\r\n      const endTime = new Date(dates[1]?._d)\r\n      const _dateFrom = new Date(startTime - 30 * MS_PER_MINUTE)\r\n      const _dateTo = new Date(endTime - 30 * MS_PER_MINUTE)\r\n      const schedules = await SchedulesClass.getDataByDatePanel(\r\n        [_dateFrom, _dateTo],\r\n        SchedulesClass.DATE_START,\r\n        user.branchSelected\r\n      )\r\n\r\n      const _dataFetched = []\r\n      schedules.forEach((doc) => {\r\n        const _data = doc\r\n        const _productList = FilteringPanelMethods.produceProductListWithData({\r\n          products,\r\n          dataList: _data,\r\n        })\r\n        const _startTime = formatDateFromDatabase(_data.StartTime)\r\n        const _endTime = formatDateFromDatabase(_data.EndTime)\r\n        _dataFetched.push({\r\n          ..._productList,\r\n          [SchedulesClass.BRANCH]: _data[SchedulesClass.BRANCH],\r\n          StartTime: _startTime,\r\n          EndTime: _endTime,\r\n          [SchedulesClass.STATUS]: _data[SchedulesClass.STATUS],\r\n          _id: doc._id,\r\n        })\r\n      })\r\n      console.log(\"schedules panel\", _dataFetched)\r\n      setDataFetched(_dataFetched)\r\n      const args = {\r\n        branch: user.branchSelected,\r\n        dataFetched: [..._dataFetched],\r\n      }\r\n      const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n      setDataFiltered(_orders)\r\n      // db.collection(\"schedules\")\r\n      //   .where(\"StartTime\", \">=\", _dateFrom)\r\n      //   .where(\"StartTime\", \"<=\", _dateTo)\r\n      //   .get()\r\n      //   .then((querySnapshot) => {\r\n      //     const _dataFetched = []\r\n      //     querySnapshot.forEach((doc) => {\r\n      //       const _data = doc.data()\r\n      //       const _productList =\r\n      //         FilteringPanelMethods.produceProductListWithData({\r\n      //           products,\r\n      //           dataList: _data,\r\n      //         })\r\n      //       const _startTime = formatDateFromDatabase(_data.StartTime)\r\n      //       const _endTime = formatDateFromDatabase(_data.EndTime)\r\n      //       _dataFetched.push({\r\n      //         ..._productList,\r\n      //         [BRANCH]: _data[BRANCH],\r\n      //         StartTime: _startTime,\r\n      //         EndTime: _endTime,\r\n      //         [STATUS]: _data[STATUS],\r\n      //         _id: doc.id,\r\n      //       })\r\n      //     })\r\n      //     setDataFetched(_dataFetched)\r\n\r\n      //     const args = {\r\n      //       branch,\r\n      //       dataFetched: [..._dataFetched],\r\n      //     }\r\n      //     const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n      //     setDataFiltered(_orders)\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(\"Error getting documents: \", error)\r\n      //   })\r\n    } else {\r\n      setDataFiltered([])\r\n      setDataFetched([])\r\n    }\r\n  }\r\n\r\n  const getDataByBranch = (value) => {\r\n    setBranch(value)\r\n    if (dataFetched.length > 0) {\r\n      const args = {\r\n        branch: value,\r\n        dataFetched: [...dataFetched],\r\n      }\r\n      const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n      setDataFiltered(_orders)\r\n    }\r\n  }\r\n\r\n  return [\r\n    dataFetched,\r\n    dataFiltered,\r\n    branch,\r\n    branchDatasource,\r\n    products,\r\n    productLabels,\r\n    getDataByBranch,\r\n    getDataByDate,\r\n  ]\r\n}\r\n\r\nexport default useSchedulerFilter\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\Documents\\filteringPanelDocs.js",["1009","1010","1011"],"import React, { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport { CODE, DESCRIPTION, QUANTITY } from \"Restructured/Constants/products\"\r\nimport { DATE_END, DATE_START } from \"Restructured/Constants/schedules\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport { Space } from \"antd\"\r\nimport FilteringPanelMethods from \"../../FilteringPanel/Controllers/FilteringPanelMethods\"\r\nimport PrintMethods from \"../Controllers/PrintMethods\"\r\n\r\nfunction FilteringPanelDocs(props) {\r\n  const [documentPrintInfo, setDocumentPrintInfo] = useState({})\r\n  const [products, setProducts] = useState([])\r\n  const [productLabels, setProductLabels] = useState({})\r\n  const [summary, setSummary] = useState([])\r\n  const [printDetailsPerSched, setPrintDetailsPerSched] = useState([])\r\n  useEffect(() => {\r\n    setDocumentPrintInfo(props.documentPrintInfo)\r\n    setProducts(products)\r\n    setProductLabels(productLabels)\r\n    handlePrintDetailsPerSched(props.documentPrintInfo, props.branch)\r\n  }, [props.documentPrintInfo, props.branch])\r\n\r\n  const handlePrintDetailsPerSched = (printInfo, branch) => {\r\n    const _dataFetched = [...printInfo.dataFetched]\r\n    const args = {\r\n      branch,\r\n      dataFetched: _dataFetched,\r\n    }\r\n    console.log(\"console\", _dataFetched)\r\n    const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n    const _detailsPerSched = PrintMethods.producePrintDetailsPerSchedule({\r\n      branch,\r\n      orders: _orders,\r\n      products: printInfo?.products,\r\n      productLabels: printInfo?.productLabels,\r\n    })\r\n    const _summaryPerProduct =\r\n      PrintMethods.producePrintSummaryPerProduct(_detailsPerSched)\r\n    console.log(\"console\", _summaryPerProduct)\r\n    setSummary(_summaryPerProduct)\r\n    setPrintDetailsPerSched(_detailsPerSched)\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <span>ORDER LIST</span>\r\n      <table style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n        <tr style={{ fontWeight: 700, backgroundColor: \"#999\" }}>\r\n          <th>DATE</th>\r\n          <th>SLOT</th>\r\n          <th>CODE</th>\r\n          <th>PRODUCT</th>\r\n          <th>QUANTITY</th>\r\n        </tr>\r\n        {printDetailsPerSched.map((data, index) => {\r\n          return (\r\n            <tr\r\n              style={\r\n                index % 2 === 0\r\n                  ? { backgroundColor: \"white\" }\r\n                  : { backgroundColor: \"#999\" }\r\n              }\r\n            >\r\n              <td>{data.date}</td>\r\n              <td>{`${data[DATE_START]} - ${data[DATE_END]}`}</td>\r\n              <td>{data[CODE]}</td>\r\n              <td>{data[DESCRIPTION]}</td>\r\n              <td>{data[QUANTITY]}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n      <span>SUMMARY PER PRODUCT</span>\r\n      <table style={{ fontSize: \"8px\", width: \"30%\" }}>\r\n        <tr style={{ fontWeight: 700, backgroundColor: \"#999\" }}>\r\n          <th>CODE</th>\r\n          <th>PRODUCT</th>\r\n          <th>QUANTITY</th>\r\n        </tr>\r\n        {summary.map((data, index) => {\r\n          return (\r\n            <tr\r\n              style={\r\n                index % 2 === 0\r\n                  ? { backgroundColor: \"white\" }\r\n                  : { backgroundColor: \"#999\" }\r\n              }\r\n            >\r\n              <td>{data[CODE]}</td>\r\n              <td>{data[DESCRIPTION]}</td>\r\n              <td>{data[QUANTITY]}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n    </Space>\r\n    // <Grid padding=\"3rem\">\r\n    //   <Grid>\r\n    //     <h3>VITOS BBQ</h3>\r\n    //   </Grid>\r\n    //   <Grid>\r\n    //     <h3>ORDER LIST FORM</h3>\r\n    //   </Grid>\r\n    //   <Grid>\r\n    //     <div>DETAILS PER PRODUCT</div>\r\n    //     <table>\r\n    //       <tr>\r\n    //         <th>Date</th>\r\n    //         <th>Slot</th>\r\n    //         <th>Code</th>\r\n    //         <th>Product</th>\r\n    //         <th style={{ display: \"flex\", justifyContent: \"flex-end\" }}>Qty</th>\r\n    //       </tr>\r\n    //       {printDetailsPerSched.map((data) => {\r\n    //         return (\r\n    //           <tr>\r\n    //             <td>{data.date}</td>\r\n    //             <td>{`${data[DATE_START]} - ${data[DATE_END]}`}</td>\r\n    //             <td>{data[CODE]}</td>\r\n    //             <td>{data[DESCRIPTION]}</td>\r\n    //             <td style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n    //               {data[QUANTITY]}\r\n    //             </td>\r\n    //           </tr>\r\n    //         )\r\n    //       })}\r\n    //     </table>\r\n    //   </Grid>\r\n    //   <br />\r\n    //   <Grid>\r\n    //     <div>SUMMARY PER PRODUCT</div>\r\n    //     <table>\r\n    //       <tr>\r\n    //         <th>Code</th>\r\n    //         <th>Product</th>\r\n    //         <th style={{ display: \"flex\", justifyContent: \"flex-end\" }}>Qty</th>\r\n    //       </tr>\r\n    //       {summary.map((data) => {\r\n    //         return (\r\n    //           <tr>\r\n    //             <td>{data[CODE]}</td>\r\n    //             <td>{data[DESCRIPTION]}</td>\r\n    //             <td style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n    //               {data[QUANTITY]}\r\n    //             </td>\r\n    //           </tr>\r\n    //         )\r\n    //       })}\r\n    //     </table>\r\n    //   </Grid>\r\n    // </Grid>\r\n  )\r\n}\r\n\r\nexport default FilteringPanelDocs\r\n",["1012","1013"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Controllers\\FilteringPanelMethods.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\Controllers\\PrintMethods.js",["1014"],"import sort from \"Restructured/Utilities/sorting\"\r\nimport { CODE, DESCRIPTION, QUANTITY } from \"Restructured/Constants/products\"\r\nimport { BRANCH, DATE_END, DATE_START } from \"Restructured/Constants/schedules\"\r\n\r\nexport default class PrintMethods {\r\n  //produce filtering panels array of data\r\n  static producePrintDetailsPerSchedule = ({\r\n    orders,\r\n    products,\r\n    productLabels,\r\n    branch,\r\n  }) => {\r\n    const _data = []\r\n\r\n    for (const obj of orders) {\r\n      if (obj[BRANCH] === branch) {\r\n        for (const key in obj) {\r\n          if (products.includes(key)) {\r\n            _data.push({\r\n              date: obj?.date,\r\n              [DATE_START]: obj[DATE_START],\r\n              [DATE_END]: obj[DATE_END],\r\n              [DESCRIPTION]: productLabels[key],\r\n              [CODE]: key,\r\n              [QUANTITY]: obj[key],\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _data //sort(_data, CODE)\r\n  }\r\n\r\n  static producePrintSummaryPerProduct = (dataList) => {\r\n    const _newData = []\r\n    const conditions = (_obj, obj) => {\r\n      return _obj[CODE] === obj[CODE]\r\n    }\r\n\r\n    for (const obj of dataList) {\r\n      const _newDataExist = _newData.some((_obj) => conditions(_obj, obj))\r\n      if (!_newDataExist) {\r\n        _newData.push(obj)\r\n      } else {\r\n        const _data = _newData.find((_obj) => conditions(_obj, obj))\r\n        const _dataIndex = _newData.findIndex((_obj) => conditions(_obj, obj))\r\n        let _modifiedData = { ..._data }\r\n        _modifiedData[QUANTITY] = _data[QUANTITY] + obj[QUANTITY]\r\n        _newData.splice(_dataIndex, 1, _modifiedData)\r\n      }\r\n    }\r\n    return _newData\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Panel\\styles.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\styles.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Styles.js",[],["1015","1016"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Styled\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\produceSalesSummary.js",["1017","1018","1019","1020","1021"],"import { calculateBalanceScheduler } from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport { amountPaid, balanceDue, paymentDetails } from \"Helpers/schedulerExcel\"\r\nimport sorting from \"Helpers/sorting\"\r\nimport sumArray, { sumNumbers } from \"Helpers/sumArray\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nconst dateSheetName = (string) => {\r\n  return string.substring(0, 5)\r\n  // return string\r\n}\r\n\r\nexport const produceSalesSummary = async (schedules, branch) => {\r\n  let dateTobeFilter = \"\"\r\n\r\n  if (schedules.length > 0) {\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      schedules[0][SchedulersClass.DATE_START]\r\n    )\r\n    dateTobeFilter = dateFromDatabase\r\n  } else {\r\n    return {}\r\n  }\r\n\r\n  // this is where the data came from (firebase)\r\n  const partials = await SchedulersClass.getDataByPartialDate(\r\n    formatDateDash(dateTobeFilter),\r\n    branch\r\n  )\r\n\r\n  const dateServedSched = await SchedulersClass.getDataByDate(\r\n    [dateTobeFilter, dateTobeFilter],\r\n    SchedulersClass.DATE_START,\r\n    branch\r\n  )\r\n  const datePlacedSched = await SchedulersClass.getDataByDate(\r\n    [dateTobeFilter, dateTobeFilter],\r\n    SchedulersClass.DATE_ORDER_PLACED,\r\n    branch\r\n  )\r\n  //------------------------------------//\r\n\r\n  let sheet = {}\r\n  const formattedDate = formatDateDash(dateTobeFilter)\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`] = [\r\n    [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n    [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n    [formatDateLong(dateTobeFilter)],\r\n    [],\r\n  ]\r\n\r\n  const fullfilledSched = dateServedSched.filter((obj) => {\r\n    const balance = calculateBalanceScheduler(obj)\r\n    return (\r\n      obj[SchedulersClass.STATUS] === \"FULFILLED\" &&\r\n      balance === 0 &&\r\n      paymentDetails(SchedulersClass.MODE_PAYMENT, obj) === \"OFT\"\r\n    )\r\n  })\r\n  const [A_TRANS, A_TOTAL] = produceTRANS(\r\n    fullfilledSched,\r\n    formattedDate,\r\n    \"[A] TRANSACTIONS OF ORDERS PLACED - PAID - FULFILLED\"\r\n  )\r\n\r\n  const unfulfilledSched = datePlacedSched.filter((obj) => {\r\n    const balance = calculateBalanceScheduler(obj)\r\n    return (\r\n      typeof obj[SchedulersClass.STATUS] !== \"undefined\" &&\r\n      obj[SchedulersClass.STATUS] !== \"FULFILLED\" &&\r\n      balance === 0\r\n    )\r\n  })\r\n\r\n  const [B_TRANS, B_TOTAL] = produceTRANS(\r\n    unfulfilledSched,\r\n    formattedDate,\r\n    \"[B] TRANSACTIONS OF ORDERS PLACED - PAID - NOT YET FULFILLED (ADVANCE ORDERS)\"\r\n  )\r\n\r\n  const unfulfilledSchedWithBalance = partials.filter((obj) => {\r\n    const balance = calculateBalanceScheduler(obj)\r\n    return balance > 0\r\n  })\r\n\r\n  const [C_TRANS, C_TOTAL] = produceTRANS(\r\n    unfulfilledSchedWithBalance,\r\n    formattedDate,\r\n    \"[C] COLLECTIONS ON PREVIOUS BALANCES\"\r\n  )\r\n\r\n  const fulfilledSchedCashPaid = dateServedSched.filter((obj) => {\r\n    return (\r\n      paymentDetails(SchedulersClass.SOURCE, obj) === \"Cash\" &&\r\n      obj[SchedulersClass.STATUS] === \"FULFILLED\"\r\n    )\r\n  })\r\n\r\n  const [D_TRANS, D_TOTAL, D_COLLECTIBLES] = produceTRANS(\r\n    fulfilledSchedCashPaid,\r\n    formattedDate,\r\n    \"[D] TRANSACTIONS OF ORDERS PLACED - FULFILLED - CASH PAID (FOR DEPOSIT)\"\r\n  )\r\n\r\n  const fulfilledSchedNotPaid = dateServedSched.filter((obj) => {\r\n    const collectible = calculateBalanceScheduler(obj)\r\n    return collectible > 0 && obj[SchedulersClass.STATUS] === \"FULFILLED\"\r\n  })\r\n\r\n  const [E_TRANS, E_TOTAL, E_COLLECTIBLES] = produceTRANS(\r\n    fulfilledSchedNotPaid,\r\n    formattedDate,\r\n    \"[E] TRANSACTIONS OF ORDERS PLACED - FULFILLED - NOT PAID (COLLECTIBLES)\"\r\n  )\r\n\r\n  const SUMMARY = produceSummary(\r\n    A_TOTAL,\r\n    B_TOTAL,\r\n    C_TOTAL,\r\n    D_TOTAL,\r\n    E_COLLECTIBLES\r\n  )\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`] = [\r\n    ...sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`],\r\n    ...A_TRANS,\r\n    ...B_TRANS,\r\n    ...C_TRANS,\r\n    ...D_TRANS,\r\n    ...E_TRANS,\r\n    ...SUMMARY,\r\n  ]\r\n\r\n  return sheet\r\n}\r\n\r\nconst produceTRANS = (schedules, formattedDate, title = \"\") => {\r\n  const renewedSched = schedules.filter(\r\n    (obj) => obj[SchedulersClass.STATUS] !== \"CANCELLED\"\r\n  )\r\n\r\n  const headers = [\r\n    \"DATE PLACED\",\r\n    \"SERVE DATE\",\r\n    \"UTAK #\",\r\n    \"PP#\",\r\n    \"DATE PAID\",\r\n    \"MODE\",\r\n    \"SOURCE\",\r\n    \"REF #\",\r\n    \"ACCT #\",\r\n    \"AMOUNT PAID\",\r\n    \"COLLECTIBLES\",\r\n  ]\r\n\r\n  const blankColumns = [...new Array(10)].map((d, i) => {\r\n    if (i === 0) return \"ORDER DETAILS \"\r\n    if (i === 4) return \"PAYMENT DETAILS \"\r\n  })\r\n\r\n  const TRANS = [[], [title], blankColumns, headers]\r\n\r\n  const amountPaidList = []\r\n  const collectibleList = []\r\n\r\n  for (const originalObj of sorting(renewedSched, SchedulersClass.UTAK_NO)) {\r\n    let obj = { ...originalObj }\r\n    console.log(\"partials sched\", obj[SchedulersClass.PARTIALS])\r\n    if (title === \"[C] COLLECTIONS ON PREVIOUS BALANCES\") {\r\n      if (obj[SchedulersClass.PARTIALS].length > 0) {\r\n        const partialList = [...obj[SchedulersClass.PARTIALS]]\r\n        const partialFilter = partialList.filter((pObj) => {\r\n          const partialDate = formatDateFromDatabase(pObj?.date)\r\n          return formatDateDash(partialDate) === formattedDate\r\n        })\r\n\r\n        obj[SchedulersClass.PARTIALS] = partialFilter\r\n      }\r\n    }\r\n\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      obj[SchedulersClass.DATE_ORDER_PLACED]\r\n    )\r\n    const dateFromDatabaseDateStart = formatDateFromDatabase(\r\n      obj[SchedulersClass.DATE_START]\r\n    )\r\n    const datePlacedDateFormat = formatDateDash(dateFromDatabase)\r\n    const dateServeDateFormat = formatDateDash(dateFromDatabaseDateStart)\r\n    const utakNo = obj[SchedulersClass.UTAK_NO]\r\n    const ppNo = obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO]\r\n\r\n    const datePayment = formatDateDash(\r\n      formatDateFromDatabase(obj[SchedulersClass.PARTIALS][0]?.date)\r\n    ) // paymentDetails(SchedulersClass.DATE_PAYMENT, obj)\r\n    const modePayment = paymentDetails(SchedulersClass.MODE_PAYMENT, obj)\r\n    const source = paymentDetails(SchedulersClass.SOURCE, obj)\r\n    const refNo = paymentDetails(SchedulersClass.REF_NO, obj)\r\n    const accountNo = paymentDetails(SchedulersClass.ACCOUNT_NUMBER, obj)\r\n    const _amountPaid = amountPaid(\r\n      obj,\r\n      0 /*  this 0 value is just to satisfy the logic of a function since we are reusing it*/\r\n    )\r\n    const collectibles = calculateBalanceScheduler(originalObj)\r\n    amountPaidList.push(Number(_amountPaid.replace(/,/g, \"\")))\r\n    collectibleList.push(collectibles)\r\n    TRANS.push([\r\n      datePlacedDateFormat,\r\n      dateServeDateFormat,\r\n      utakNo,\r\n      ppNo,\r\n      datePayment,\r\n      modePayment,\r\n      source,\r\n      refNo,\r\n      accountNo,\r\n      _amountPaid,\r\n      thousandsSeparators(collectibles.toFixed(2)),\r\n    ])\r\n  }\r\n\r\n  const total = sumNumbers(amountPaidList).toFixed(2)\r\n  const totalCollectibles = sumNumbers(collectibleList).toFixed(2)\r\n  TRANS.push([\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"Total\",\r\n    thousandsSeparators(total),\r\n    thousandsSeparators(totalCollectibles),\r\n  ])\r\n\r\n  return [TRANS, total, totalCollectibles]\r\n}\r\n\r\nconst produceSummary = (A_TOTAL, B_TOTAL, C_TOTAL, D_TOTAL, E_COLLECTIBLES) => {\r\n  const aTotal = A_TOTAL.replace(/,/g, \"\")\r\n  const bTotal = B_TOTAL.replace(/,/g, \"\")\r\n  const cTotal = C_TOTAL.replace(/,/g, \"\")\r\n  const dTotal = D_TOTAL.replace(/,/g, \"\")\r\n  const eCollectibles = E_COLLECTIBLES.replace(/,/g, \"\")\r\n  const paymentReceivedTotal = Number(aTotal) + Number(bTotal) + Number(cTotal)\r\n  const collectiblesTotal = Number(dTotal) + Number(eCollectibles)\r\n  const SUMMARY = [\r\n    [],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"SUMMARY\"],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"PAYMENT RECEIVED\"],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"A\", thousandsSeparators(A_TOTAL)],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"B\", thousandsSeparators(B_TOTAL)],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"C\", thousandsSeparators(C_TOTAL)],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      thousandsSeparators(paymentReceivedTotal.toFixed(2)),\r\n    ],\r\n    [],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"COLLECTIBLES\"],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"D\", thousandsSeparators(D_TOTAL)],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"E\",\r\n      thousandsSeparators(E_COLLECTIBLES),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      thousandsSeparators(collectiblesTotal.toFixed(2)),\r\n    ],\r\n    [],\r\n  ]\r\n  return SUMMARY\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sorting.js",["1022"],"export const sortByNumber = (array, field) => {\r\n  return array.sort((a, b) => {\r\n    const numA = Number(a[field])\r\n    const numB = Number(b[field])\r\n    if (numA < numB) {\r\n      return -1\r\n    }\r\n    if (numA > numB) {\r\n      return 1\r\n    }\r\n    return 0\r\n  })\r\n}\r\n\r\nexport default function (array, field) {\r\n  return array.sort((a, b) => {\r\n    if (a[field] < b[field]) {\r\n      return -1\r\n    }\r\n    if (a[field] > b[field]) {\r\n      return 1\r\n    }\r\n    return 0\r\n  })\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\productStaticPrices.js",["1023"],"export default function (orderVia, code, defaultPrice) {\r\n  const productObj = {\r\n    price: defaultPrice,\r\n  }\r\n  if (orderVia) {\r\n    // start boundary of FP\r\n    if (orderVia.includes(\"FP\")) {\r\n      switch (code) {\r\n        case \"CH8\":\r\n          productObj.price = 445\r\n          break\r\n        case \"CH12\":\r\n          productObj.price = 660\r\n          break\r\n        case \"BC4\":\r\n          productObj.price = 665\r\n          break\r\n        case \"BC2\":\r\n          productObj.price = 345\r\n          break\r\n        case \"M-A\":\r\n          productObj.price = 185\r\n          break\r\n        case \"M-B\":\r\n          productObj.price = 235\r\n          break\r\n        case \"PRT\":\r\n          productObj.price = 1745\r\n          break\r\n        case \"JV4\":\r\n          productObj.price = 220\r\n          break\r\n        case \"JV2\":\r\n          productObj.price = 120\r\n          break\r\n        case \"JV1\":\r\n          productObj.price = 65\r\n          break\r\n        case \"ATC\":\r\n          productObj.price = 30\r\n          break\r\n        case \"SPV\":\r\n          productObj.price = 20\r\n          break\r\n        case \"BCS\":\r\n          productObj.price = 30\r\n          break\r\n        case \"DCO-S1\":\r\n          productObj.price = 85\r\n          break\r\n        case \"DCO LARGE\":\r\n          productObj.price = 155\r\n          break\r\n        default:\r\n          productObj.price = defaultPrice\r\n      }\r\n    }\r\n    // end boundary of FP\r\n\r\n    // start boundary of DN\r\n    if (orderVia.includes(\"DD\") || orderVia.includes(\"DN\")) {\r\n      switch (code) {\r\n        case \"CH8\":\r\n          productObj.price = 440\r\n          break\r\n        case \"CH12\":\r\n          productObj.price = 635\r\n          break\r\n        case \"BC4\":\r\n          productObj.price = 635\r\n          break\r\n        case \"BC2\":\r\n          productObj.price = 330\r\n          break\r\n        case \"M-4\":\r\n          productObj.price = 180\r\n          break\r\n        case \"M-B\":\r\n          productObj.price = 225\r\n          break\r\n        case \"ATC\":\r\n          productObj.price = 30\r\n          break\r\n        case \"SPV\":\r\n          productObj.price = 20\r\n          break\r\n        case \"BCS\":\r\n          productObj.price = 30\r\n          break\r\n        case \"DCO-S\":\r\n          productObj.price = 75\r\n          break\r\n        case \"DCO-L\":\r\n          productObj.price = 145\r\n          break\r\n        case \"CHF8\":\r\n          productObj.price = 390\r\n          break\r\n        case \"CHF12\":\r\n          productObj.price = 555\r\n          break\r\n        default:\r\n          productObj.price = defaultPrice\r\n      }\r\n    }\r\n  }\r\n  return productObj.price\r\n}\r\n",{"ruleId":"1024","replacedBy":"1025"},{"ruleId":"1026","replacedBy":"1027"},{"ruleId":"1028","severity":1,"message":"1029","line":1,"column":29,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":38},{"ruleId":"1028","severity":1,"message":"1032","line":4,"column":35,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":41},{"ruleId":"1033","severity":1,"message":"1034","line":12,"column":1,"nodeType":"1035","endLine":20,"endColumn":2},{"ruleId":"1028","severity":1,"message":"1036","line":63,"column":7,"nodeType":"1030","messageId":"1031","endLine":63,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1037","line":10,"column":28,"nodeType":"1030","messageId":"1031","endLine":10,"endColumn":37},{"ruleId":"1028","severity":1,"message":"1038","line":1,"column":8,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1040","line":66,"column":9,"nodeType":"1041","messageId":"1042","endLine":66,"endColumn":21},{"ruleId":"1028","severity":1,"message":"1043","line":3,"column":8,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1044","line":5,"column":17,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":27},{"ruleId":"1028","severity":1,"message":"1029","line":5,"column":29,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":38},{"ruleId":"1028","severity":1,"message":"1045","line":8,"column":8,"nodeType":"1030","messageId":"1031","endLine":8,"endColumn":26},{"ruleId":"1046","severity":1,"message":"1047","line":10,"column":21,"nodeType":"1048","messageId":"1042","endLine":10,"endColumn":23},{"ruleId":"1049","severity":1,"message":"1050","line":24,"column":9,"nodeType":"1051","endLine":24,"endColumn":63},{"ruleId":"1028","severity":1,"message":"1052","line":12,"column":10,"nodeType":"1030","messageId":"1031","endLine":12,"endColumn":16},{"ruleId":"1053","severity":1,"message":"1054","line":20,"column":6,"nodeType":"1055","endLine":20,"endColumn":25,"suggestions":"1056"},{"ruleId":"1053","severity":1,"message":"1057","line":27,"column":6,"nodeType":"1055","endLine":27,"endColumn":32,"suggestions":"1058"},{"ruleId":"1053","severity":1,"message":"1059","line":27,"column":7,"nodeType":"1060","endLine":27,"endColumn":31},{"ruleId":"1028","severity":1,"message":"1032","line":29,"column":10,"nodeType":"1030","messageId":"1031","endLine":29,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1061","line":29,"column":18,"nodeType":"1030","messageId":"1031","endLine":29,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1062","line":30,"column":10,"nodeType":"1030","messageId":"1031","endLine":30,"endColumn":23},{"ruleId":"1033","severity":1,"message":"1063","line":42,"column":1,"nodeType":"1035","endLine":69,"endColumn":2},{"ruleId":"1028","severity":1,"message":"1029","line":4,"column":29,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":38},{"ruleId":"1028","severity":1,"message":"1064","line":4,"column":40,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":48},{"ruleId":"1065","severity":1,"message":"1066","line":28,"column":9,"nodeType":"1067","endLine":28,"endColumn":58},{"ruleId":"1065","severity":1,"message":"1066","line":53,"column":9,"nodeType":"1067","endLine":53,"endColumn":58},{"ruleId":"1028","severity":1,"message":"1068","line":69,"column":11,"nodeType":"1030","messageId":"1031","endLine":69,"endColumn":13},{"ruleId":"1028","severity":1,"message":"1029","line":1,"column":17,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1029","line":1,"column":17,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1069","line":12,"column":3,"nodeType":"1030","messageId":"1031","endLine":12,"endColumn":8},{"ruleId":"1028","severity":1,"message":"1070","line":1,"column":10,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1044","line":2,"column":10,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1071","line":4,"column":10,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":28},{"ruleId":"1028","severity":1,"message":"1029","line":1,"column":17,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1064","line":1,"column":36,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":44},{"ruleId":"1028","severity":1,"message":"1072","line":2,"column":10,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":14},{"ruleId":"1028","severity":1,"message":"1073","line":3,"column":37,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":46},{"ruleId":"1028","severity":1,"message":"1029","line":4,"column":29,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":38},{"ruleId":"1028","severity":1,"message":"1074","line":5,"column":8,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1075","line":6,"column":8,"nodeType":"1030","messageId":"1031","endLine":6,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1076","line":8,"column":8,"nodeType":"1030","messageId":"1031","endLine":8,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1077","line":9,"column":10,"nodeType":"1030","messageId":"1031","endLine":9,"endColumn":15},{"ruleId":"1028","severity":1,"message":"1078","line":10,"column":8,"nodeType":"1030","messageId":"1031","endLine":10,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1079","line":11,"column":8,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1080","line":12,"column":8,"nodeType":"1030","messageId":"1031","endLine":12,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1081","line":16,"column":8,"nodeType":"1030","messageId":"1031","endLine":16,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1082","line":18,"column":9,"nodeType":"1030","messageId":"1031","endLine":18,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1083","line":21,"column":11,"nodeType":"1030","messageId":"1031","endLine":21,"endColumn":15},{"ruleId":"1028","severity":1,"message":"1084","line":24,"column":10,"nodeType":"1030","messageId":"1031","endLine":24,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1085","line":24,"column":22,"nodeType":"1030","messageId":"1031","endLine":24,"endColumn":35},{"ruleId":"1028","severity":1,"message":"1029","line":2,"column":17,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":26},{"ruleId":"1049","severity":1,"message":"1050","line":19,"column":11,"nodeType":"1051","endLine":19,"endColumn":22},{"ruleId":"1049","severity":1,"message":"1050","line":31,"column":11,"nodeType":"1051","endLine":31,"endColumn":22},{"ruleId":"1049","severity":1,"message":"1050","line":46,"column":11,"nodeType":"1051","endLine":46,"endColumn":22},{"ruleId":"1049","severity":1,"message":"1050","line":61,"column":11,"nodeType":"1051","endLine":61,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1086","line":4,"column":38,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":48},{"ruleId":"1033","severity":1,"message":"1034","line":8,"column":1,"nodeType":"1035","endLine":26,"endColumn":2},{"ruleId":"1028","severity":1,"message":"1029","line":1,"column":10,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1077","line":1,"column":26,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":31},{"ruleId":"1028","severity":1,"message":"1029","line":2,"column":17,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1088","line":70,"column":15,"nodeType":"1089","messageId":"1090","endLine":70,"endColumn":16,"suggestions":"1091"},{"ruleId":"1087","severity":1,"message":"1088","line":70,"column":40,"nodeType":"1089","messageId":"1090","endLine":70,"endColumn":41,"suggestions":"1092"},{"ruleId":"1028","severity":1,"message":"1093","line":28,"column":21,"nodeType":"1030","messageId":"1031","endLine":28,"endColumn":32},{"ruleId":"1053","severity":1,"message":"1094","line":201,"column":6,"nodeType":"1055","endLine":201,"endColumn":17,"suggestions":"1095"},{"ruleId":"1053","severity":1,"message":"1094","line":205,"column":6,"nodeType":"1055","endLine":205,"endColumn":20,"suggestions":"1096"},{"ruleId":"1053","severity":1,"message":"1097","line":209,"column":6,"nodeType":"1055","endLine":209,"endColumn":22,"suggestions":"1098"},{"ruleId":"1053","severity":1,"message":"1099","line":215,"column":6,"nodeType":"1055","endLine":215,"endColumn":35,"suggestions":"1100"},{"ruleId":"1028","severity":1,"message":"1101","line":224,"column":23,"nodeType":"1030","messageId":"1031","endLine":224,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1102","line":238,"column":20,"nodeType":"1030","messageId":"1031","endLine":238,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1103","line":245,"column":23,"nodeType":"1030","messageId":"1031","endLine":245,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1104","line":252,"column":21,"nodeType":"1030","messageId":"1031","endLine":252,"endColumn":28},{"ruleId":"1028","severity":1,"message":"1105","line":258,"column":21,"nodeType":"1030","messageId":"1031","endLine":258,"endColumn":28},{"ruleId":"1028","severity":1,"message":"1106","line":264,"column":21,"nodeType":"1030","messageId":"1031","endLine":264,"endColumn":28},{"ruleId":"1028","severity":1,"message":"1107","line":271,"column":12,"nodeType":"1030","messageId":"1031","endLine":271,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1108","line":304,"column":12,"nodeType":"1030","messageId":"1031","endLine":304,"endColumn":17},{"ruleId":"1028","severity":1,"message":"1109","line":311,"column":12,"nodeType":"1030","messageId":"1031","endLine":311,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1110","line":345,"column":13,"nodeType":"1030","messageId":"1031","endLine":345,"endColumn":25},{"ruleId":"1111","severity":1,"message":"1112","line":530,"column":26,"nodeType":"1055","messageId":"1113","endLine":530,"endColumn":71},{"ruleId":"1028","severity":1,"message":"1114","line":663,"column":7,"nodeType":"1030","messageId":"1031","endLine":663,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1115","line":1,"column":10,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":17},{"ruleId":"1028","severity":1,"message":"1116","line":1,"column":26,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":31},{"ruleId":"1028","severity":1,"message":"1117","line":1,"column":33,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":36},{"ruleId":"1028","severity":1,"message":"1118","line":14,"column":3,"nodeType":"1030","messageId":"1031","endLine":14,"endColumn":25},{"ruleId":"1028","severity":1,"message":"1119","line":18,"column":20,"nodeType":"1030","messageId":"1031","endLine":18,"endColumn":33},{"ruleId":"1028","severity":1,"message":"1120","line":18,"column":35,"nodeType":"1030","messageId":"1031","endLine":18,"endColumn":45},{"ruleId":"1028","severity":1,"message":"1064","line":21,"column":28,"nodeType":"1030","messageId":"1031","endLine":21,"endColumn":36},{"ruleId":"1053","severity":1,"message":"1121","line":12,"column":6,"nodeType":"1055","endLine":12,"endColumn":20,"suggestions":"1122"},{"ruleId":"1123","severity":1,"message":"1124","line":18,"column":3,"nodeType":"1125","messageId":"1126","endLine":21,"endColumn":4},{"ruleId":"1028","severity":1,"message":"1127","line":4,"column":3,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1128","line":3,"column":3,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":9},{"ruleId":"1028","severity":1,"message":"1129","line":5,"column":3,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":9},{"ruleId":"1028","severity":1,"message":"1130","line":6,"column":3,"nodeType":"1030","messageId":"1031","endLine":6,"endColumn":6},{"ruleId":"1028","severity":1,"message":"1131","line":10,"column":3,"nodeType":"1030","messageId":"1031","endLine":10,"endColumn":12},{"ruleId":"1028","severity":1,"message":"1132","line":13,"column":3,"nodeType":"1030","messageId":"1031","endLine":13,"endColumn":9},{"ruleId":"1028","severity":1,"message":"1133","line":15,"column":10,"nodeType":"1030","messageId":"1031","endLine":15,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1134","line":15,"column":34,"nodeType":"1030","messageId":"1031","endLine":15,"endColumn":48},{"ruleId":"1053","severity":1,"message":"1121","line":11,"column":6,"nodeType":"1055","endLine":11,"endColumn":10,"suggestions":"1135"},{"ruleId":"1028","severity":1,"message":"1029","line":1,"column":17,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1127","line":1,"column":10,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":30},{"ruleId":"1028","severity":1,"message":"1136","line":16,"column":10,"nodeType":"1030","messageId":"1031","endLine":16,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1137","line":16,"column":24,"nodeType":"1030","messageId":"1031","endLine":16,"endColumn":40},{"ruleId":"1053","severity":1,"message":"1138","line":59,"column":6,"nodeType":"1055","endLine":59,"endColumn":22,"suggestions":"1139"},{"ruleId":"1053","severity":1,"message":"1140","line":63,"column":6,"nodeType":"1055","endLine":63,"endColumn":12,"suggestions":"1141"},{"ruleId":"1053","severity":1,"message":"1121","line":78,"column":6,"nodeType":"1055","endLine":78,"endColumn":20,"suggestions":"1142"},{"ruleId":"1123","severity":1,"message":"1124","line":192,"column":5,"nodeType":"1125","messageId":"1126","endLine":240,"endColumn":6},{"ruleId":"1028","severity":1,"message":"1143","line":1,"column":8,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":27},{"ruleId":"1033","severity":1,"message":"1144","line":3,"column":1,"nodeType":"1035","endLine":19,"endColumn":2},{"ruleId":"1145","severity":1,"message":"1146","line":49,"column":55,"nodeType":"1147","messageId":"1148","endLine":49,"endColumn":57},{"ruleId":"1028","severity":1,"message":"1149","line":1,"column":28,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":34},{"ruleId":"1028","severity":1,"message":"1032","line":4,"column":17,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1079","line":5,"column":8,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1150","line":13,"column":8,"nodeType":"1030","messageId":"1031","endLine":13,"endColumn":24},{"ruleId":"1123","severity":1,"message":"1124","line":67,"column":17,"nodeType":"1125","messageId":"1126","endLine":104,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1078","line":4,"column":8,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":19},{"ruleId":"1053","severity":1,"message":"1151","line":37,"column":6,"nodeType":"1055","endLine":37,"endColumn":15,"suggestions":"1152"},{"ruleId":"1049","severity":1,"message":"1050","line":139,"column":9,"nodeType":"1051","endLine":139,"endColumn":33},{"ruleId":"1053","severity":1,"message":"1153","line":12,"column":6,"nodeType":"1055","endLine":12,"endColumn":28,"suggestions":"1154"},{"ruleId":"1053","severity":1,"message":"1155","line":18,"column":6,"nodeType":"1055","endLine":18,"endColumn":24,"suggestions":"1156"},{"ruleId":"1053","severity":1,"message":"1155","line":15,"column":6,"nodeType":"1055","endLine":15,"endColumn":23,"suggestions":"1157"},{"ruleId":"1053","severity":1,"message":"1158","line":19,"column":6,"nodeType":"1055","endLine":19,"endColumn":20,"suggestions":"1159"},{"ruleId":"1053","severity":1,"message":"1153","line":12,"column":6,"nodeType":"1055","endLine":12,"endColumn":27,"suggestions":"1160"},{"ruleId":"1053","severity":1,"message":"1155","line":18,"column":6,"nodeType":"1055","endLine":18,"endColumn":24,"suggestions":"1161"},{"ruleId":"1028","severity":1,"message":"1149","line":1,"column":28,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":34},{"ruleId":"1028","severity":1,"message":"1032","line":4,"column":17,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1079","line":5,"column":8,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1150","line":13,"column":8,"nodeType":"1030","messageId":"1031","endLine":13,"endColumn":24},{"ruleId":"1028","severity":1,"message":"1081","line":14,"column":8,"nodeType":"1030","messageId":"1031","endLine":14,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1074","line":15,"column":8,"nodeType":"1030","messageId":"1031","endLine":15,"endColumn":26},{"ruleId":"1123","severity":1,"message":"1124","line":90,"column":15,"nodeType":"1125","messageId":"1126","endLine":120,"endColumn":16},{"ruleId":"1033","severity":1,"message":"1144","line":5,"column":1,"nodeType":"1035","endLine":14,"endColumn":2},{"ruleId":"1028","severity":1,"message":"1162","line":6,"column":3,"nodeType":"1030","messageId":"1031","endLine":6,"endColumn":25},{"ruleId":"1028","severity":1,"message":"1163","line":18,"column":3,"nodeType":"1030","messageId":"1031","endLine":18,"endColumn":14},{"ruleId":"1033","severity":1,"message":"1144","line":30,"column":1,"nodeType":"1035","endLine":196,"endColumn":2},{"ruleId":"1028","severity":1,"message":"1164","line":6,"column":3,"nodeType":"1030","messageId":"1031","endLine":6,"endColumn":7},{"ruleId":"1028","severity":1,"message":"1165","line":11,"column":3,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":9},{"ruleId":"1028","severity":1,"message":"1078","line":17,"column":8,"nodeType":"1030","messageId":"1031","endLine":17,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1166","line":19,"column":8,"nodeType":"1030","messageId":"1031","endLine":19,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1167","line":28,"column":10,"nodeType":"1030","messageId":"1031","endLine":28,"endColumn":14},{"ruleId":"1028","severity":1,"message":"1168","line":32,"column":8,"nodeType":"1030","messageId":"1031","endLine":32,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1133","line":42,"column":26,"nodeType":"1030","messageId":"1031","endLine":42,"endColumn":48},{"ruleId":"1053","severity":1,"message":"1169","line":120,"column":6,"nodeType":"1055","endLine":120,"endColumn":13,"suggestions":"1170"},{"ruleId":"1028","severity":1,"message":"1171","line":125,"column":15,"nodeType":"1030","messageId":"1031","endLine":125,"endColumn":30},{"ruleId":"1028","severity":1,"message":"1172","line":128,"column":15,"nodeType":"1030","messageId":"1031","endLine":128,"endColumn":27},{"ruleId":"1053","severity":1,"message":"1173","line":143,"column":6,"nodeType":"1055","endLine":143,"endColumn":13,"suggestions":"1174"},{"ruleId":"1053","severity":1,"message":"1175","line":150,"column":6,"nodeType":"1055","endLine":150,"endColumn":10,"suggestions":"1176"},{"ruleId":"1053","severity":1,"message":"1177","line":201,"column":6,"nodeType":"1055","endLine":201,"endColumn":23,"suggestions":"1178"},{"ruleId":"1053","severity":1,"message":"1179","line":211,"column":6,"nodeType":"1055","endLine":211,"endColumn":21,"suggestions":"1180"},{"ruleId":"1028","severity":1,"message":"1181","line":233,"column":13,"nodeType":"1030","messageId":"1031","endLine":233,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1182","line":724,"column":7,"nodeType":"1030","messageId":"1031","endLine":724,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1183","line":753,"column":7,"nodeType":"1030","messageId":"1031","endLine":753,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1184","line":757,"column":7,"nodeType":"1030","messageId":"1031","endLine":757,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1185","line":761,"column":7,"nodeType":"1030","messageId":"1031","endLine":761,"endColumn":17},{"ruleId":"1028","severity":1,"message":"1186","line":767,"column":7,"nodeType":"1030","messageId":"1031","endLine":767,"endColumn":28},{"ruleId":"1028","severity":1,"message":"1187","line":1,"column":8,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":13},{"ruleId":"1028","severity":1,"message":"1188","line":9,"column":11,"nodeType":"1030","messageId":"1031","endLine":9,"endColumn":19},{"ruleId":"1053","severity":1,"message":"1121","line":18,"column":6,"nodeType":"1055","endLine":18,"endColumn":25,"suggestions":"1189"},{"ruleId":"1028","severity":1,"message":"1190","line":11,"column":3,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":14},{"ruleId":"1028","severity":1,"message":"1191","line":12,"column":3,"nodeType":"1030","messageId":"1031","endLine":12,"endColumn":9},{"ruleId":"1028","severity":1,"message":"1192","line":17,"column":10,"nodeType":"1030","messageId":"1031","endLine":17,"endColumn":21},{"ruleId":"1028","severity":1,"message":"1193","line":17,"column":23,"nodeType":"1030","messageId":"1031","endLine":17,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1117","line":31,"column":17,"nodeType":"1030","messageId":"1031","endLine":31,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1076","line":40,"column":8,"nodeType":"1030","messageId":"1031","endLine":40,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1166","line":42,"column":8,"nodeType":"1030","messageId":"1031","endLine":42,"endColumn":19},{"ruleId":"1053","severity":1,"message":"1194","line":80,"column":6,"nodeType":"1055","endLine":80,"endColumn":8,"suggestions":"1195"},{"ruleId":"1053","severity":1,"message":"1196","line":143,"column":6,"nodeType":"1055","endLine":143,"endColumn":46,"suggestions":"1197"},{"ruleId":"1028","severity":1,"message":"1078","line":2,"column":8,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1079","line":3,"column":8,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1136","line":5,"column":10,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":22},{"ruleId":"1053","severity":1,"message":"1153","line":21,"column":6,"nodeType":"1055","endLine":21,"endColumn":28,"suggestions":"1198"},{"ruleId":"1053","severity":1,"message":"1155","line":27,"column":6,"nodeType":"1055","endLine":27,"endColumn":24,"suggestions":"1199"},{"ruleId":"1028","severity":1,"message":"1127","line":1,"column":10,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":30},{"ruleId":"1028","severity":1,"message":"1093","line":1,"column":43,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":54},{"ruleId":"1028","severity":1,"message":"1078","line":5,"column":8,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1093","line":6,"column":21,"nodeType":"1030","messageId":"1031","endLine":6,"endColumn":32},{"ruleId":"1053","severity":1,"message":"1200","line":43,"column":6,"nodeType":"1055","endLine":43,"endColumn":13,"suggestions":"1201"},{"ruleId":"1028","severity":1,"message":"1077","line":2,"column":22,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":27},{"ruleId":"1028","severity":1,"message":"1202","line":21,"column":3,"nodeType":"1030","messageId":"1031","endLine":21,"endColumn":9},{"ruleId":"1028","severity":1,"message":"1203","line":23,"column":3,"nodeType":"1030","messageId":"1031","endLine":23,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1204","line":24,"column":3,"nodeType":"1030","messageId":"1031","endLine":24,"endColumn":9},{"ruleId":"1028","severity":1,"message":"1077","line":1,"column":15,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":20},{"ruleId":"1205","severity":1,"message":"1206","line":38,"column":23,"nodeType":"1067","endLine":38,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1207","line":3,"column":10,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":17},{"ruleId":"1028","severity":1,"message":"1133","line":5,"column":10,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1208","line":5,"column":34,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":49},{"ruleId":"1028","severity":1,"message":"1077","line":1,"column":15,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":20},{"ruleId":"1205","severity":1,"message":"1206","line":44,"column":23,"nodeType":"1067","endLine":44,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1029","line":2,"column":10,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1209","line":11,"column":10,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1210","line":11,"column":21,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":33},{"ruleId":"1028","severity":1,"message":"1211","line":81,"column":11,"nodeType":"1030","messageId":"1031","endLine":81,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1029","line":1,"column":17,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1212","line":14,"column":7,"nodeType":"1030","messageId":"1031","endLine":14,"endColumn":24},{"ruleId":"1213","severity":1,"message":"1214","line":30,"column":26,"nodeType":"1067","endLine":30,"endColumn":68},{"ruleId":"1213","severity":1,"message":"1214","line":43,"column":21,"nodeType":"1067","endLine":49,"endColumn":23},{"ruleId":"1213","severity":1,"message":"1214","line":59,"column":26,"nodeType":"1067","endLine":59,"endColumn":68},{"ruleId":"1028","severity":1,"message":"1215","line":1,"column":30,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":35},{"ruleId":"1028","severity":1,"message":"1032","line":1,"column":37,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":43},{"ruleId":"1028","severity":1,"message":"1117","line":1,"column":52,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":55},{"ruleId":"1028","severity":1,"message":"1216","line":18,"column":8,"nodeType":"1030","messageId":"1031","endLine":18,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1119","line":20,"column":3,"nodeType":"1030","messageId":"1031","endLine":20,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1217","line":23,"column":8,"nodeType":"1030","messageId":"1031","endLine":23,"endColumn":17},{"ruleId":"1053","severity":1,"message":"1121","line":57,"column":6,"nodeType":"1055","endLine":57,"endColumn":30,"suggestions":"1218"},{"ruleId":"1053","severity":1,"message":"1158","line":61,"column":6,"nodeType":"1055","endLine":61,"endColumn":16,"suggestions":"1219"},{"ruleId":"1220","severity":2,"message":"1221","line":78,"column":73,"nodeType":"1030","messageId":"1222","endLine":78,"endColumn":78},{"ruleId":"1028","severity":1,"message":"1223","line":160,"column":9,"nodeType":"1030","messageId":"1031","endLine":160,"endColumn":25},{"ruleId":"1205","severity":1,"message":"1206","line":199,"column":16,"nodeType":"1067","endLine":199,"endColumn":19},{"ruleId":"1205","severity":1,"message":"1206","line":208,"column":16,"nodeType":"1067","endLine":208,"endColumn":19},{"ruleId":"1205","severity":1,"message":"1206","line":308,"column":30,"nodeType":"1067","endLine":308,"endColumn":33},{"ruleId":"1205","severity":1,"message":"1206","line":338,"column":30,"nodeType":"1067","endLine":338,"endColumn":33},{"ruleId":"1224","severity":1,"message":"1225","line":590,"column":1,"nodeType":"1226","messageId":"1227","endLine":607,"endColumn":2},{"ruleId":"1224","severity":1,"message":"1225","line":608,"column":1,"nodeType":"1226","messageId":"1227","endLine":642,"endColumn":2},{"ruleId":"1028","severity":1,"message":"1215","line":1,"column":30,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":35},{"ruleId":"1028","severity":1,"message":"1032","line":1,"column":37,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":43},{"ruleId":"1028","severity":1,"message":"1119","line":20,"column":3,"nodeType":"1030","messageId":"1031","endLine":20,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1217","line":23,"column":8,"nodeType":"1030","messageId":"1031","endLine":23,"endColumn":17},{"ruleId":"1028","severity":1,"message":"1228","line":57,"column":10,"nodeType":"1030","messageId":"1031","endLine":57,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1229","line":58,"column":10,"nodeType":"1030","messageId":"1031","endLine":58,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1230","line":59,"column":19,"nodeType":"1030","messageId":"1031","endLine":59,"endColumn":29},{"ruleId":"1053","severity":1,"message":"1121","line":62,"column":6,"nodeType":"1055","endLine":62,"endColumn":30,"suggestions":"1231"},{"ruleId":"1053","severity":1,"message":"1158","line":66,"column":6,"nodeType":"1055","endLine":66,"endColumn":16,"suggestions":"1232"},{"ruleId":"1205","severity":1,"message":"1206","line":234,"column":16,"nodeType":"1067","endLine":234,"endColumn":19},{"ruleId":"1205","severity":1,"message":"1206","line":243,"column":16,"nodeType":"1067","endLine":243,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1233","line":248,"column":9,"nodeType":"1030","messageId":"1031","endLine":248,"endColumn":23},{"ruleId":"1205","severity":1,"message":"1206","line":349,"column":30,"nodeType":"1067","endLine":349,"endColumn":33},{"ruleId":"1145","severity":1,"message":"1234","line":364,"column":34,"nodeType":"1147","messageId":"1148","endLine":364,"endColumn":36},{"ruleId":"1205","severity":1,"message":"1206","line":383,"column":30,"nodeType":"1067","endLine":383,"endColumn":33},{"ruleId":"1145","severity":1,"message":"1234","line":595,"column":37,"nodeType":"1147","messageId":"1148","endLine":595,"endColumn":39},{"ruleId":"1224","severity":1,"message":"1225","line":628,"column":1,"nodeType":"1226","messageId":"1227","endLine":729,"endColumn":2},{"ruleId":"1224","severity":1,"message":"1225","line":731,"column":1,"nodeType":"1226","messageId":"1227","endLine":748,"endColumn":2},{"ruleId":"1224","severity":1,"message":"1225","line":749,"column":1,"nodeType":"1226","messageId":"1227","endLine":783,"endColumn":2},{"ruleId":"1028","severity":1,"message":"1029","line":3,"column":22,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":31},{"ruleId":"1028","severity":1,"message":"1029","line":2,"column":22,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":31},{"ruleId":"1028","severity":1,"message":"1029","line":3,"column":22,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":31},{"ruleId":"1235","severity":1,"message":"1236","line":21,"column":9,"nodeType":"1237","messageId":"1238","endLine":26,"endColumn":12},{"ruleId":"1235","severity":1,"message":"1236","line":27,"column":9,"nodeType":"1237","messageId":"1238","endLine":58,"endColumn":12},{"ruleId":"1028","severity":1,"message":"1239","line":10,"column":3,"nodeType":"1030","messageId":"1031","endLine":10,"endColumn":12},{"ruleId":"1028","severity":1,"message":"1093","line":12,"column":3,"nodeType":"1030","messageId":"1031","endLine":12,"endColumn":14},{"ruleId":"1028","severity":1,"message":"1240","line":15,"column":8,"nodeType":"1030","messageId":"1031","endLine":15,"endColumn":27},{"ruleId":"1028","severity":1,"message":"1241","line":20,"column":3,"nodeType":"1030","messageId":"1031","endLine":20,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1242","line":23,"column":8,"nodeType":"1030","messageId":"1031","endLine":23,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1243","line":27,"column":3,"nodeType":"1030","messageId":"1031","endLine":27,"endColumn":13},{"ruleId":"1028","severity":1,"message":"1244","line":49,"column":9,"nodeType":"1030","messageId":"1031","endLine":49,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1245","line":62,"column":24,"nodeType":"1030","messageId":"1031","endLine":62,"endColumn":39},{"ruleId":"1028","severity":1,"message":"1246","line":69,"column":25,"nodeType":"1030","messageId":"1031","endLine":69,"endColumn":41},{"ruleId":"1053","severity":1,"message":"1247","line":78,"column":6,"nodeType":"1055","endLine":78,"endColumn":11,"suggestions":"1248"},{"ruleId":"1053","severity":1,"message":"1249","line":84,"column":6,"nodeType":"1055","endLine":84,"endColumn":24,"suggestions":"1250"},{"ruleId":"1053","severity":1,"message":"1251","line":160,"column":6,"nodeType":"1055","endLine":160,"endColumn":21,"suggestions":"1252"},{"ruleId":"1028","severity":1,"message":"1029","line":2,"column":17,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1064","line":2,"column":28,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":36},{"ruleId":"1028","severity":1,"message":"1253","line":3,"column":3,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":41},{"ruleId":"1028","severity":1,"message":"1254","line":5,"column":8,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1187","line":7,"column":8,"nodeType":"1030","messageId":"1031","endLine":7,"endColumn":13},{"ruleId":"1053","severity":1,"message":"1255","line":34,"column":6,"nodeType":"1055","endLine":34,"endColumn":30,"suggestions":"1256"},{"ruleId":"1053","severity":1,"message":"1257","line":95,"column":6,"nodeType":"1055","endLine":95,"endColumn":16,"suggestions":"1258"},{"ruleId":"1028","severity":1,"message":"1117","line":1,"column":30,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":33},{"ruleId":"1028","severity":1,"message":"1076","line":2,"column":8,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1064","line":3,"column":28,"nodeType":"1030","messageId":"1031","endLine":3,"endColumn":36},{"ruleId":"1053","severity":1,"message":"1259","line":57,"column":6,"nodeType":"1055","endLine":57,"endColumn":49,"suggestions":"1260"},{"ruleId":"1028","severity":1,"message":"1029","line":2,"column":17,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1165","line":2,"column":17,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1261","line":2,"column":8,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":21},{"ruleId":"1028","severity":1,"message":"1262","line":5,"column":8,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1080","line":12,"column":8,"nodeType":"1030","messageId":"1031","endLine":12,"endColumn":23},{"ruleId":"1053","severity":1,"message":"1057","line":59,"column":6,"nodeType":"1055","endLine":59,"endColumn":26,"suggestions":"1263"},{"ruleId":"1053","severity":1,"message":"1057","line":65,"column":6,"nodeType":"1055","endLine":65,"endColumn":25,"suggestions":"1264"},{"ruleId":"1053","severity":1,"message":"1265","line":41,"column":6,"nodeType":"1055","endLine":41,"endColumn":16,"suggestions":"1266"},{"ruleId":"1053","severity":1,"message":"1267","line":45,"column":6,"nodeType":"1055","endLine":45,"endColumn":27,"suggestions":"1268"},{"ruleId":"1053","severity":1,"message":"1269","line":86,"column":6,"nodeType":"1055","endLine":86,"endColumn":10,"suggestions":"1270"},{"ruleId":"1028","severity":1,"message":"1271","line":19,"column":9,"nodeType":"1030","messageId":"1031","endLine":19,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1272","line":2,"column":10,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1076","line":4,"column":8,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1273","line":7,"column":9,"nodeType":"1030","messageId":"1031","endLine":7,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1029","line":4,"column":29,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":38},{"ruleId":"1028","severity":1,"message":"1078","line":11,"column":8,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1274","line":25,"column":8,"nodeType":"1030","messageId":"1031","endLine":25,"endColumn":21},{"ruleId":"1028","severity":1,"message":"1079","line":26,"column":8,"nodeType":"1030","messageId":"1031","endLine":26,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1239","line":27,"column":10,"nodeType":"1030","messageId":"1031","endLine":27,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1093","line":27,"column":21,"nodeType":"1030","messageId":"1031","endLine":27,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1275","line":28,"column":8,"nodeType":"1030","messageId":"1031","endLine":28,"endColumn":25},{"ruleId":"1028","severity":1,"message":"1276","line":29,"column":8,"nodeType":"1030","messageId":"1031","endLine":29,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1277","line":30,"column":8,"nodeType":"1030","messageId":"1031","endLine":30,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1278","line":31,"column":8,"nodeType":"1030","messageId":"1031","endLine":31,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1279","line":32,"column":8,"nodeType":"1030","messageId":"1031","endLine":32,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1280","line":151,"column":5,"nodeType":"1030","messageId":"1031","endLine":151,"endColumn":17},{"ruleId":"1028","severity":1,"message":"1281","line":154,"column":5,"nodeType":"1030","messageId":"1031","endLine":154,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1282","line":155,"column":5,"nodeType":"1030","messageId":"1031","endLine":155,"endColumn":15},{"ruleId":"1028","severity":1,"message":"1283","line":156,"column":5,"nodeType":"1030","messageId":"1031","endLine":156,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1284","line":157,"column":5,"nodeType":"1030","messageId":"1031","endLine":157,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1114","line":199,"column":7,"nodeType":"1030","messageId":"1031","endLine":199,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1272","line":2,"column":10,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1076","line":4,"column":8,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1273","line":7,"column":9,"nodeType":"1030","messageId":"1031","endLine":7,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1136","line":16,"column":10,"nodeType":"1030","messageId":"1031","endLine":16,"endColumn":22},{"ruleId":"1028","severity":1,"message":"1137","line":16,"column":24,"nodeType":"1030","messageId":"1031","endLine":16,"endColumn":40},{"ruleId":"1053","severity":1,"message":"1138","line":59,"column":6,"nodeType":"1055","endLine":59,"endColumn":22,"suggestions":"1285"},{"ruleId":"1053","severity":1,"message":"1140","line":63,"column":6,"nodeType":"1055","endLine":63,"endColumn":12,"suggestions":"1286"},{"ruleId":"1053","severity":1,"message":"1121","line":78,"column":6,"nodeType":"1055","endLine":78,"endColumn":20,"suggestions":"1287"},{"ruleId":"1123","severity":1,"message":"1124","line":192,"column":5,"nodeType":"1125","messageId":"1126","endLine":240,"endColumn":6},{"ruleId":"1123","severity":1,"message":"1124","line":18,"column":3,"nodeType":"1125","messageId":"1126","endLine":21,"endColumn":4},{"ruleId":"1028","severity":1,"message":"1288","line":17,"column":12,"nodeType":"1030","messageId":"1031","endLine":17,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1289","line":18,"column":8,"nodeType":"1030","messageId":"1031","endLine":18,"endColumn":15},{"ruleId":"1028","severity":1,"message":"1119","line":19,"column":20,"nodeType":"1030","messageId":"1031","endLine":19,"endColumn":33},{"ruleId":"1028","severity":1,"message":"1290","line":19,"column":35,"nodeType":"1030","messageId":"1031","endLine":19,"endColumn":60},{"ruleId":"1028","severity":1,"message":"1291","line":114,"column":7,"nodeType":"1030","messageId":"1031","endLine":114,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1288","line":156,"column":9,"nodeType":"1030","messageId":"1031","endLine":156,"endColumn":13},{"ruleId":"1033","severity":1,"message":"1144","line":381,"column":1,"nodeType":"1035","endLine":708,"endColumn":2},{"ruleId":"1028","severity":1,"message":"1292","line":421,"column":11,"nodeType":"1030","messageId":"1031","endLine":421,"endColumn":28},{"ruleId":"1028","severity":1,"message":"1293","line":575,"column":15,"nodeType":"1030","messageId":"1031","endLine":575,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1294","line":626,"column":11,"nodeType":"1030","messageId":"1031","endLine":626,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1029","line":1,"column":17,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":26},{"ruleId":"1053","severity":1,"message":"1295","line":60,"column":6,"nodeType":"1055","endLine":60,"endColumn":54,"suggestions":"1296"},{"ruleId":"1028","severity":1,"message":"1165","line":1,"column":10,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1297","line":1,"column":18,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":28},{"ruleId":"1028","severity":1,"message":"1215","line":1,"column":30,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":35},{"ruleId":"1028","severity":1,"message":"1298","line":10,"column":3,"nodeType":"1030","messageId":"1031","endLine":10,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1299","line":11,"column":3,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":15},{"ruleId":"1028","severity":1,"message":"1300","line":13,"column":3,"nodeType":"1030","messageId":"1031","endLine":13,"endColumn":17},{"ruleId":"1028","severity":1,"message":"1134","line":23,"column":3,"nodeType":"1030","messageId":"1031","endLine":23,"endColumn":17},{"ruleId":"1028","severity":1,"message":"1301","line":30,"column":7,"nodeType":"1030","messageId":"1031","endLine":30,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1134","line":1,"column":10,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":24},{"ruleId":"1053","severity":1,"message":"1121","line":8,"column":6,"nodeType":"1055","endLine":8,"endColumn":8,"suggestions":"1302"},{"ruleId":"1028","severity":1,"message":"1029","line":2,"column":10,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1209","line":11,"column":10,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1210","line":11,"column":21,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":33},{"ruleId":"1028","severity":1,"message":"1127","line":1,"column":10,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":30},{"ruleId":"1028","severity":1,"message":"1303","line":2,"column":10,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":26},{"ruleId":"1028","severity":1,"message":"1304","line":2,"column":28,"nodeType":"1030","messageId":"1031","endLine":2,"endColumn":41},{"ruleId":"1028","severity":1,"message":"1305","line":4,"column":8,"nodeType":"1030","messageId":"1031","endLine":4,"endColumn":19},{"ruleId":"1028","severity":1,"message":"1306","line":5,"column":8,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":18},{"ruleId":"1028","severity":1,"message":"1064","line":1,"column":17,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":25},{"ruleId":"1028","severity":1,"message":"1307","line":10,"column":10,"nodeType":"1030","messageId":"1031","endLine":10,"endColumn":23},{"ruleId":"1028","severity":1,"message":"1308","line":13,"column":8,"nodeType":"1030","messageId":"1031","endLine":13,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1309","line":23,"column":5,"nodeType":"1030","messageId":"1031","endLine":23,"endColumn":11},{"ruleId":"1028","severity":1,"message":"1310","line":24,"column":5,"nodeType":"1030","messageId":"1031","endLine":24,"endColumn":21},{"ruleId":"1028","severity":1,"message":"1311","line":27,"column":5,"nodeType":"1030","messageId":"1031","endLine":27,"endColumn":20},{"ruleId":"1028","severity":1,"message":"1312","line":5,"column":10,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":21},{"ruleId":"1028","severity":1,"message":"1313","line":14,"column":28,"nodeType":"1030","messageId":"1031","endLine":14,"endColumn":47},{"ruleId":"1028","severity":1,"message":"1314","line":5,"column":10,"nodeType":"1030","messageId":"1031","endLine":5,"endColumn":14},{"ruleId":"1028","severity":1,"message":"1315","line":11,"column":10,"nodeType":"1030","messageId":"1031","endLine":11,"endColumn":27},{"ruleId":"1053","severity":1,"message":"1316","line":21,"column":6,"nodeType":"1055","endLine":21,"endColumn":45,"suggestions":"1317"},{"ruleId":"1024","replacedBy":"1318"},{"ruleId":"1026","replacedBy":"1319"},{"ruleId":"1028","severity":1,"message":"1320","line":1,"column":8,"nodeType":"1030","messageId":"1031","endLine":1,"endColumn":12},{"ruleId":"1024","replacedBy":"1321"},{"ruleId":"1026","replacedBy":"1322"},{"ruleId":"1028","severity":1,"message":"1323","line":8,"column":22,"nodeType":"1030","messageId":"1031","endLine":8,"endColumn":32},{"ruleId":"1028","severity":1,"message":"1254","line":10,"column":8,"nodeType":"1030","messageId":"1031","endLine":10,"endColumn":16},{"ruleId":"1028","severity":1,"message":"1324","line":104,"column":28,"nodeType":"1030","messageId":"1031","endLine":104,"endColumn":42},{"ruleId":"1028","severity":1,"message":"1325","line":115,"column":19,"nodeType":"1030","messageId":"1031","endLine":115,"endColumn":26},{"ruleId":"1145","severity":1,"message":"1326","line":160,"column":54,"nodeType":"1147","messageId":"1148","endLine":160,"endColumn":56},{"ruleId":"1033","severity":1,"message":"1144","line":15,"column":1,"nodeType":"1035","endLine":25,"endColumn":2},{"ruleId":"1033","severity":1,"message":"1144","line":1,"column":1,"nodeType":"1035","endLine":108,"endColumn":2},"no-native-reassign",["1327"],"no-negated-in-lhs",["1328"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'firestore' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'useAuthentication' is defined but never used.","no-dupe-keys","Duplicate key 'setIsLoading'.","ObjectExpression","unexpected","'DashboardTransactionPage' is defined but never used.","'useContext' is defined but never used.","'RouteWithSubRoutes' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'loaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.","ArrayExpression",["1329"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["1330"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","Assign object to a variable before exporting as module default","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'sm' is assigned a value but never used.","'limit' is defined but never used.","'useHistory' is defined but never used.","'UnavailableContext' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'useGetDocumentById' is defined but never used.","'SchedulersClass' is defined but never used.","'MainButton' is defined but never used.","'Space' is defined but never used.","'CustomInput' is defined but never used.","'CustomTitle' is defined but never used.","'useGetDocuments' is defined but never used.","'useQuery' is defined but never used.","'TabPane' is assigned a value but never used.","'user' is assigned a value but never used.","'dataLoaded' is assigned a value but never used.","'setDataLoaded' is assigned a value but never used.","'Typography' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["1331","1332"],["1333","1334"],"'STRING_TYPE' is defined but never used.","React Hook useEffect has a missing dependency: 'setFilteredData'. Either include it or remove the dependency array.",["1335"],["1336"],"React Hook useEffect has missing dependencies: 'clearDocumentData' and 'clearRangeData'. Either include them or remove the dependency array.",["1337"],"React Hook useEffect has a missing dependency: 'loadDocumentData'. Either include it or remove the dependency array.",["1338"],"'cashTotal' is assigned a value but never used.","'rTotal' is assigned a value but never used.","'spwdTotal' is assigned a value but never used.","'ddTotal' is assigned a value but never used.","'wbTotal' is assigned a value but never used.","'ppTotal' is assigned a value but never used.","'orderVia' is assigned a value but never used.","'ppZAP' is assigned a value but never used.","'orderViaWB' is assigned a value but never used.","'ppZAPSummary' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'MobileTableView' is assigned a value but never used.","'Popover' is defined but never used.","'Table' is defined but never used.","'Tag' is defined but never used.","'formatDateDashWithTime' is defined but never used.","'sumArrayDatas' is defined but never used.","'sumNumbers' is defined but never used.","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["1339"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'ARRAY_OF_STRING_TYPE' is defined but never used.","'addDoc' is defined but never used.","'getDoc' is defined but never used.","'doc' is defined but never used.","'updateDoc' is defined but never used.","'setDoc' is defined but never used.","'formatDateFromDatabase' is defined but never used.","'formatDateDash' is defined but never used.",["1340"],"'arrayReplace' is defined but never used.","'replaceArrayData' is defined but never used.","React Hook useEffect has missing dependencies: 'exposeData' and 'handleColumns'. Either include them or remove the dependency array. If 'exposeData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1341"],"React Hook useEffect has a missing dependency: 'handleColumns'. Either include it or remove the dependency array.",["1342"],["1343"],"'thousandsSeparators' is defined but never used.","Unexpected default export of anonymous function","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useRef' is defined but never used.","'EditableTagGroup' is defined but never used.","React Hook useEffect has a missing dependency: 'exposeData'. Either include it or remove the dependency array. If 'exposeData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1344"],"React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'name', you can also switch to useReducer instead of useState and read 'name' in the reducer.",["1345"],"React Hook useEffect has missing dependencies: 'name' and 'rest'. Either include them or remove the dependency array.",["1346"],["1347"],"React Hook useEffect has a missing dependency: 'loadDropdowns'. Either include it or remove the dependency array.",["1348"],["1349"],["1350"],"'DIRECT_AND_THIRD_PARTY' is defined but never used.","'TRANSACTION' is defined but never used.","'Tabs' is defined but never used.","'Button' is defined but never used.","'CustomTable' is defined but never used.","'Flex' is defined but never used.","'URLNotFound' is defined but never used.","React Hook useEffect has missing dependencies: 'isDiscountReset' and 'orderData'. Either include them or remove the dependency array.",["1351"],"'_fixedDeduction' is assigned a value but never used.","'_totalAmount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'orderData'. Either include it or remove the dependency array.",["1352"],"React Hook useEffect has a missing dependency: 'loadOrderData'. Either include it or remove the dependency array.",["1353"],"React Hook useEffect has missing dependencies: 'formType', 'id', 'sched', and 'tabs'. Either include them or remove the dependency array.",["1354"],"React Hook useEffect has a missing dependency: 'sched'. Either include it or remove the dependency array. You can also do a functional update 'setSched(s => ...)' if you only need 'sched' in the 'setSched' call.",["1355"],"'result' is assigned a value but never used.","'ActionButton' is assigned a value but never used.","'StyledHeader' is assigned a value but never used.","'StyledFormContainer' is assigned a value but never used.","'StyledForm' is assigned a value but never used.","'StyledActionContainer' is assigned a value but never used.","'React' is defined but never used.","'setError' is assigned a value but never used.",["1356"],"'DragAndDrop' is defined but never used.","'Resize' is defined but never used.","'DataManager' is defined but never used.","'Predicate' is defined but never used.","React Hook useEffect has a missing dependency: 'loadProductData'. Either include it or remove the dependency array.",["1357"],"React Hook useEffect has missing dependencies: 'eventSettings', 'navigate.currentView', and 'setIsLoading'. Either include them or remove the dependency array. You can also do a functional update 'setEventSettings(e => ...)' if you only need 'eventSettings' in the 'setEventSettings' call.",["1358"],["1359"],["1360"],"React Hook useEffect has a missing dependency: 'valueSelected'. Either include it or remove the dependency array. If 'valueSelected' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1361"],"'FadeIn' is defined but never used.","'SlideOutRight' is defined but never used.","'Wobble' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Divider' is defined but never used.","'formatDateSlash' is defined but never used.","'rangeData' is assigned a value but never used.","'setRangeData' is assigned a value but never used.","'setWithMerge' is assigned a value but never used.","'ORDER_VIA_WEBSITE' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Input' is defined but never used.","'LiquidChart' is defined but never used.","'checkDate' is defined but never used.",["1362"],["1363"],"no-undef","'value' is not defined.","undef","'calculatePercent' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'targetAmount' is assigned a value but never used.","'isSwitch' is assigned a value but never used.","'setTargets' is assigned a value but never used.",["1364"],["1365"],"'getPageMargins' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'DATE_TYPE' is defined but never used.","'useGetDocumentsByFn' is defined but never used.","'producedDropdowns' is defined but never used.","'addMinusDay' is defined but never used.","'formatTime' is defined but never used.","'rowColumns' is assigned a value but never used.","'setFirstColumns' is assigned a value but never used.","'setEnableTimeGap' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'enableVIP' and 'handleChanges'. Either include them or remove the dependency array.",["1366"],"React Hook useEffect has missing dependencies: 'isTouched' and 'modifiedData'. Either include them or remove the dependency array. If 'modifiedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1367"],"React Hook useEffect has missing dependencies: 'orderData' and 'tabs'. Either include them or remove the dependency array. If 'setEnableVIP' needs the current value of 'orderData', you can also switch to useReducer instead of useState and read 'orderData' in the reducer.",["1368"],"'producedProductListWithGroupAndAmounts' is defined but never used.","'sumArray' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["1369"],"React Hook useEffect has missing dependencies: 'codeObjList', 'dataSource', and 'orderData'. Either include them or remove the dependency array.",["1370"],"React Hook useEffect has missing dependencies: 'modifiedData' and 'products'. Either include them or remove the dependency array. If 'modifiedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1371"],"'useBreakpoint' is defined but never used.","'CustomDrawer' is defined but never used.",["1372"],["1373"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["1374"],"React Hook useEffect has a missing dependency: 'modifiedData'. Either include it or remove the dependency array. If 'modifiedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1375"],"React Hook useEffect has a missing dependency: 'loadUploads'. Either include it or remove the dependency array.",["1376"],"'addUpload' is assigned a value but never used.","'UserOutlined' is defined but never used.","'handleButtonClick' is assigned a value but never used.","'FilterOptions' is defined but never used.","'CustomRangePicker' is defined but never used.","'useRangeHandler' is defined but never used.","'useGetDocumentsByKeyword' is defined but never used.","'DropdownChannel' is defined but never used.","'AutoSelect' is defined but never used.","'ServiceClass' is assigned a value but never used.","'setIsFiltered' is assigned a value but never used.","'isFiltered' is assigned a value but never used.","'hideColumns' is assigned a value but never used.","'setFilteredData' is assigned a value but never used.",["1377"],["1378"],["1379"],"'date' is assigned a value but never used.","'sorting' is defined but never used.","'sumArrayOfObjectsGrouping' is defined but never used.","'salesType' is assigned a value but never used.","'totalProductPrice' is assigned a value but never used.","'price' is assigned a value but never used.","'totalQty' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'switchHandler'. Either include it or remove the dependency array.",["1380"],"'DatePicker' is defined but never used.","'AiFillCloseCircle' is defined but never used.","'AiFillFilter' is defined but never used.","'AiOutlineClose' is defined but never used.","'defaultDate' is assigned a value but never used.",["1381"],"'producedBranches' is defined but never used.","'producedRoles' is defined but never used.","'BranchClass' is defined but never used.","'RolesClass' is defined but never used.","'AiFillPrinter' is defined but never used.","'ProductClass' is defined but never used.","'branch' is assigned a value but never used.","'branchDatasource' is assigned a value but never used.","'getDataByBranch' is assigned a value but never used.","'useSelector' is defined but never used.","'setBranchDatasource' is assigned a value but never used.","'Grid' is defined but never used.","'documentPrintInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'productLabels' and 'products'. Either include them or remove the dependency array. You can also do a functional update 'setProducts(p => ...)' if you only need 'products' in the 'setProducts' call.",["1382"],["1327"],["1328"],"'sort' is defined but never used.",["1327"],["1328"],"'balanceDue' is defined but never used.","'D_COLLECTIBLES' is assigned a value but never used.","'E_TOTAL' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","no-global-assign","no-unsafe-negation",{"desc":"1383","fix":"1384"},{"desc":"1385","fix":"1386"},{"messageId":"1387","fix":"1388","desc":"1389"},{"messageId":"1390","fix":"1391","desc":"1392"},{"messageId":"1387","fix":"1393","desc":"1389"},{"messageId":"1390","fix":"1394","desc":"1392"},{"desc":"1395","fix":"1396"},{"desc":"1397","fix":"1398"},{"desc":"1399","fix":"1400"},{"desc":"1401","fix":"1402"},{"desc":"1403","fix":"1404"},{"desc":"1405","fix":"1406"},{"desc":"1407","fix":"1408"},{"desc":"1409","fix":"1410"},{"desc":"1411","fix":"1412"},{"desc":"1413","fix":"1414"},{"desc":"1415","fix":"1416"},{"desc":"1417","fix":"1418"},{"desc":"1419","fix":"1420"},{"desc":"1421","fix":"1422"},{"desc":"1415","fix":"1423"},{"desc":"1417","fix":"1424"},{"desc":"1425","fix":"1426"},{"desc":"1427","fix":"1428"},{"desc":"1429","fix":"1430"},{"desc":"1431","fix":"1432"},{"desc":"1433","fix":"1434"},{"desc":"1435","fix":"1436"},{"desc":"1437","fix":"1438"},{"desc":"1439","fix":"1440"},{"desc":"1415","fix":"1441"},{"desc":"1417","fix":"1442"},{"desc":"1443","fix":"1444"},{"desc":"1445","fix":"1446"},{"desc":"1447","fix":"1448"},{"desc":"1445","fix":"1449"},{"desc":"1447","fix":"1450"},{"desc":"1451","fix":"1452"},{"desc":"1453","fix":"1454"},{"desc":"1455","fix":"1456"},{"desc":"1457","fix":"1458"},{"desc":"1459","fix":"1460"},{"desc":"1461","fix":"1462"},{"desc":"1463","fix":"1464"},{"desc":"1465","fix":"1466"},{"desc":"1467","fix":"1468"},{"desc":"1469","fix":"1470"},{"desc":"1471","fix":"1472"},{"desc":"1407","fix":"1473"},{"desc":"1409","fix":"1474"},{"desc":"1411","fix":"1475"},{"desc":"1476","fix":"1477"},{"desc":"1478","fix":"1479"},{"desc":"1480","fix":"1481"},"Update the dependencies array to be: [error, location.pathname]",{"range":"1482","text":"1483"},"Update the dependencies array to be: [data]",{"range":"1484","text":"1485"},"removeEscape",{"range":"1486","text":"1487"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1488","text":"1489"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1490","text":"1487"},{"range":"1491","text":"1489"},"Update the dependencies array to be: [rangeData, setFilteredData]",{"range":"1492","text":"1493"},"Update the dependencies array to be: [documentData, setFilteredData]",{"range":"1494","text":"1495"},"Update the dependencies array to be: [clearDocumentData, clearRangeData, selectedFilter]",{"range":"1496","text":"1497"},"Update the dependencies array to be: [filterValue, loadDocumentData, selectedFilter]",{"range":"1498","text":"1499"},"Update the dependencies array to be: [ServiceClass, loadData]",{"range":"1500","text":"1501"},"Update the dependencies array to be: [id, loadData]",{"range":"1502","text":"1503"},"Update the dependencies array to be: [collectionData, exposeData, handleColumns]",{"range":"1504","text":"1505"},"Update the dependencies array to be: [data, handleColumns]",{"range":"1506","text":"1507"},"Update the dependencies array to be: [loadData, modifiedData]",{"range":"1508","text":"1509"},"Update the dependencies array to be: [exposeData, newTags]",{"range":"1510","text":"1511"},"Update the dependencies array to be: [name, rest.collectionData]",{"range":"1512","text":"1513"},"Update the dependencies array to be: [value, isTouched, rest, name]",{"range":"1514","text":"1515"},"Update the dependencies array to be: [isTouched, name, rest, tags]",{"range":"1516","text":"1517"},"Update the dependencies array to be: [ServiceClass, loadDropdowns]",{"range":"1518","text":"1519"},{"range":"1520","text":"1513"},{"range":"1521","text":"1515"},"Update the dependencies array to be: [isDiscountReset, orderData, sched]",{"range":"1522","text":"1523"},"Update the dependencies array to be: [orderData, sched]",{"range":"1524","text":"1525"},"Update the dependencies array to be: [id, loadOrderData]",{"range":"1526","text":"1527"},"Update the dependencies array to be: [formType, id, orderData, sched, tabs, user]",{"range":"1528","text":"1529"},"Update the dependencies array to be: [channelOption, sched]",{"range":"1530","text":"1531"},"Update the dependencies array to be: [lastVisible, loadData, user]",{"range":"1532","text":"1533"},"Update the dependencies array to be: [loadProductData]",{"range":"1534","text":"1535"},"Update the dependencies array to be: [navigate?.dateRange, user, productData, navigate.currentView, setIsLoading, eventSettings]",{"range":"1536","text":"1537"},{"range":"1538","text":"1513"},{"range":"1539","text":"1515"},"Update the dependencies array to be: [value, valueSelected]",{"range":"1540","text":"1541"},"Update the dependencies array to be: [Services, date, dateTo, loadData]",{"range":"1542","text":"1543"},"Update the dependencies array to be: [Services, loadDropdowns]",{"range":"1544","text":"1545"},{"range":"1546","text":"1543"},{"range":"1547","text":"1545"},"Update the dependencies array to be: [enableVIP, handleChanges, vip]",{"range":"1548","text":"1549"},"Update the dependencies array to be: [dates, dataValue, isTouched, modifiedData]",{"range":"1550","text":"1551"},"Update the dependencies array to be: [channel, data, orderData, tabs]",{"range":"1552","text":"1553"},"Update the dependencies array to be: [orderData, codeObjList, data]",{"range":"1554","text":"1555"},"Update the dependencies array to be: [codeObjList, dataSource, orderData, products]",{"range":"1556","text":"1557"},"Update the dependencies array to be: [dataSource, isTouched, totalDue, orderVia, products, modifiedData]",{"range":"1558","text":"1559"},"Update the dependencies array to be: [data, index, paymentList]",{"range":"1560","text":"1561"},"Update the dependencies array to be: [balanceDue, data, index]",{"range":"1562","text":"1563"},"Update the dependencies array to be: [fileURLs, state]",{"range":"1564","text":"1565"},"Update the dependencies array to be: [modifiedData, removedPaths, state]",{"range":"1566","text":"1567"},"Update the dependencies array to be: [id, loadUploads]",{"range":"1568","text":"1569"},{"range":"1570","text":"1505"},{"range":"1571","text":"1507"},{"range":"1572","text":"1509"},"Update the dependencies array to be: [rangeHandlerFilteredData.searchData, isChecked, switchHandler]",{"range":"1573","text":"1574"},"Update the dependencies array to be: [loadData]",{"range":"1575","text":"1576"},"Update the dependencies array to be: [props.documentPrintInfo, props.branch, products, productLabels]",{"range":"1577","text":"1578"},[692,711],"[error, location.pathname]",[1021,1047],"[data]",[1777,1778],"",[1777,1777],"\\",[1802,1803],[1802,1802],[6218,6229],"[rangeData, setFilteredData]",[6295,6309],"[documentData, setFilteredData]",[6385,6401],"[clearDocumentData, clearRangeData, selectedFilter]",[6552,6581],"[filterValue, loadDocumentData, selectedFilter]",[495,509],"[ServiceClass, loadData]",[367,371],"[id, loadData]",[1772,1788],"[collectionData, exposeData, handleColumns]",[1844,1850],"[data, handleColumns]",[2399,2413],"[loadData, modifiedData]",[1007,1016],"[exposeData, newTags]",[431,453],"[name, rest.collectionData]",[557,575],"[value, isTouched, rest, name]",[503,520],"[isTouched, name, rest, tags]",[572,586],"[ServiceClass, loadDropdowns]",[411,432],[536,554],[4348,4355],"[isDiscountReset, orderData, sched]",[5162,5169],"[orderData, sched]",[5294,5298],"[id, loadOrderData]",[7397,7414],"[formType, id, orderData, sched, tabs, user]",[7801,7816],"[channelOption, sched]",[806,825],"[lastVisible, loadData, user]",[2731,2733],"[loadProductData]",[4950,4990],"[navigate?.dateRange, user, productData, navigate.currentView, setIsLoading, eventSettings]",[969,991],[1095,1113],[1552,1559],"[value, valueSelected]",[2158,2182],"[Services, date, dateTo, loadData]",[2234,2244],"[Services, loadDropdowns]",[2492,2516],[2568,2578],[2781,2786],"[enableVIP, handleChanges, vip]",[2894,2912],"[dates, dataValue, isTouched, modifiedData]",[5424,5439],"[channel, data, orderData, tabs]",[1360,1384],"[orderData, codeObjList, data]",[3093,3103],"[codeObjList, dataSource, orderData, products]",[1851,1894],"[dataSource, isTouched, totalDue, orderVia, products, modifiedData]",[2017,2037],"[data, index, paymentList]",[2150,2169],"[balanceDue, data, index]",[1241,1251],"[fileURLs, state]",[1331,1352],"[modifiedData, removedPaths, state]",[2277,2281],"[id, loadUploads]",[1780,1796],[1852,1858],[2407,2421],[2339,2387],"[rangeHandlerFilteredData.searchData, isChecked, switchHandler]",[240,242],"[loadData]",[992,1031],"[props.documentPrintInfo, props.branch, products, productLabels]"]