[{"D:\\Projects\\Scheduler App\\scheduler\\src\\index.js":"1","D:\\Projects\\Scheduler App\\scheduler\\src\\App.js":"2","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase.js":"3","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase.js":"4","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\LoginPage.js":"5","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unauthorized.js":"6","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\index.js":"7","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Predefined.js":"8","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\URLNotFound.js":"9","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unavailable.js":"10","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\UsersClass.js":"11","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\hook.js":"12","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Pages.js":"13","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\index.js":"14","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\index.js":"15","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\index.js":"16","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\MainPage.js":"17","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\hook.js":"18","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Base.js":"19","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\hook.js":"20","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\MainButton.js":"21","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\SidenavMobile.js":"22","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\AuthClass.js":"23","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardGrillingPage.js":"24","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardTransactionPage.js":"25","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardStoreInventory.js":"26","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\pathNames.js":"27","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\AutoSelect.js":"28","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomInput.js":"29","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTitle.js":"30","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\index.js":"31","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\RolesClass.js":"32","D:\\Projects\\Scheduler App\\scheduler\\src\\Validations\\validateAuth\\index.js":"33","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\errorCodes.js":"34","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\hook.js":"35","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDrawer.js":"36","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\validations\\index.js":"37","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\index.js":"38","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTable.js":"39","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\index.js":"40","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\ProductsClass.js":"41","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\types.js":"42","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocuments.js":"43","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\helpers.js":"44","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\SchedulesClass.js":"45","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\PaginateCommands.js":"46","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\dateFormat.js":"47","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\SettingsUserMasterfilePage.js":"48","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsUserMasterfile\\index.js":"49","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\index.js":"50","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\RouteWithSubRoutes.js":"51","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentById.js":"52","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsRoleMasterfile\\index.js":"53","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsDropdownMasterfile\\index.js":"54","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\DropdownsClass.js":"55","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsBranchMasterfile\\index.js":"56","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\BranchClass.js":"57","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\hook.js":"58","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\collectionData.js":"59","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sumArray.js":"60","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\formatNumber.js":"61","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\arrayFuntions.js":"62","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\index.js":"63","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\EditableTagGroup\\index.js":"64","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useQuery.js":"65","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\useModifiedCount.js":"66","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomPopConfirm.js":"67","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringField.js":"68","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringFieldArray.js":"69","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\BooleanField.js":"70","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\FormHandlerAdd.js":"71","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\moduleList.js":"72","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\menuData.js":"73","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderForm.js":"74","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\usePaginate.js":"75","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\index.js":"76","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\hooks.js":"77","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\Scheduler.js":"78","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\ObjectFieldArray.js":"79","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsIncidents\\index.js":"80","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\IncidentReportClass.js":"81","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilterOptions\\index.js":"82","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\RangePicker.js":"83","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\index.js":"84","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\hook.js":"85","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\othersTableColumns.js":"86","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\PrintComponent.js":"87","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\tableColumns.js":"88","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\styles.js":"89","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\rangeHandler.js":"90","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\index.js":"91","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\ComponentToPrint.js":"92","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\SchedulesServicess.js":"93","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\base\\index.js":"94","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\index.js":"95","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\dailyReportType.js":"96","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\servedReportType.js":"97","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\LiquidChart\\index.js":"98","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\addMinusDay.js":"99","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Styles\\index.js":"100","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\checkDate.js":"101","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useRangeHandler.js":"102","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByFn.js":"103","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByKeyword.js":"104","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderDetails.js":"105","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDate.js":"106","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTextArea.js":"107","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\useProductPurchased.js":"108","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\ProductPurchased.js":"109","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomModal.js":"110"},{"size":442,"mtime":1636433527604,"results":"111","hashOfConfig":"112"},{"size":556,"mtime":1636433525136,"results":"113","hashOfConfig":"112"},{"size":1571,"mtime":1637272739318,"results":"114","hashOfConfig":"112"},{"size":1425,"mtime":1636433527495,"results":"115","hashOfConfig":"116"},{"size":1014,"mtime":1636433527254,"results":"117","hashOfConfig":"112"},{"size":1996,"mtime":1637539023876,"results":"118","hashOfConfig":"112"},{"size":1583,"mtime":1637323376567,"results":"119","hashOfConfig":"112"},{"size":1240,"mtime":1637539747719,"results":"120","hashOfConfig":"112"},{"size":830,"mtime":1636433526322,"results":"121","hashOfConfig":"112"},{"size":1898,"mtime":1636953403942,"results":"122","hashOfConfig":"112"},{"size":1758,"mtime":1637076477897,"results":"123","hashOfConfig":"112"},{"size":4126,"mtime":1636433525311,"results":"124","hashOfConfig":"112"},{"size":2791,"mtime":1637263412345,"results":"125","hashOfConfig":"112"},{"size":5367,"mtime":1636433525423,"results":"126","hashOfConfig":"112"},{"size":1296,"mtime":1637539986708,"results":"127","hashOfConfig":"112"},{"size":2069,"mtime":1637323559584,"results":"128","hashOfConfig":"112"},{"size":846,"mtime":1636488739713,"results":"129","hashOfConfig":"112"},{"size":1487,"mtime":1637708910072,"results":"130","hashOfConfig":"112"},{"size":5170,"mtime":1637272887211,"results":"131","hashOfConfig":"112"},{"size":1800,"mtime":1637083316256,"results":"132","hashOfConfig":"112"},{"size":478,"mtime":1636914119507,"results":"133","hashOfConfig":"112"},{"size":1852,"mtime":1636433525499,"results":"134","hashOfConfig":"112"},{"size":2958,"mtime":1636433527336,"results":"135","hashOfConfig":"112"},{"size":214,"mtime":1637149701483,"results":"136","hashOfConfig":"112"},{"size":1902,"mtime":1637740184321,"results":"137","hashOfConfig":"112"},{"size":226,"mtime":1636433527237,"results":"138","hashOfConfig":"112"},{"size":1784,"mtime":1636824064009,"results":"139","hashOfConfig":"112"},{"size":966,"mtime":1637074290298,"results":"140","hashOfConfig":"112"},{"size":1738,"mtime":1637705971390,"results":"141","hashOfConfig":"112"},{"size":479,"mtime":1637587869099,"results":"142","hashOfConfig":"112"},{"size":3532,"mtime":1636433526149,"results":"143","hashOfConfig":"112"},{"size":1398,"mtime":1637079339862,"results":"144","hashOfConfig":"112"},{"size":841,"mtime":1636433527559,"results":"145","hashOfConfig":"112"},{"size":42,"mtime":1636433526275,"results":"146","hashOfConfig":"112"},{"size":231,"mtime":1636433526135,"results":"147","hashOfConfig":"112"},{"size":1034,"mtime":1636433525143,"results":"148","hashOfConfig":"112"},{"size":2953,"mtime":1636958215786,"results":"149","hashOfConfig":"112"},{"size":8498,"mtime":1637764484909,"results":"150","hashOfConfig":"112"},{"size":584,"mtime":1637764573803,"results":"151","hashOfConfig":"112"},{"size":6300,"mtime":1637740310575,"results":"152","hashOfConfig":"112"},{"size":1914,"mtime":1637185767548,"results":"153","hashOfConfig":"112"},{"size":486,"mtime":1637591096637,"results":"154","hashOfConfig":"112"},{"size":1594,"mtime":1637741523383,"results":"155","hashOfConfig":"112"},{"size":592,"mtime":1636561352817,"results":"156","hashOfConfig":"112"},{"size":7871,"mtime":1637737858883,"results":"157","hashOfConfig":"112"},{"size":3383,"mtime":1637092592867,"results":"158","hashOfConfig":"112"},{"size":1139,"mtime":1637605921215,"results":"159","hashOfConfig":"112"},{"size":236,"mtime":1636459596931,"results":"160","hashOfConfig":"112"},{"size":438,"mtime":1636826182004,"results":"161","hashOfConfig":"112"},{"size":625,"mtime":1637248494278,"results":"162","hashOfConfig":"112"},{"size":446,"mtime":1637176771671,"results":"163","hashOfConfig":"112"},{"size":741,"mtime":1636917537757,"results":"164","hashOfConfig":"112"},{"size":478,"mtime":1636825909921,"results":"165","hashOfConfig":"112"},{"size":502,"mtime":1636826200078,"results":"166","hashOfConfig":"112"},{"size":1082,"mtime":1637592205095,"results":"167","hashOfConfig":"112"},{"size":395,"mtime":1636826247419,"results":"168","hashOfConfig":"112"},{"size":1332,"mtime":1637071153955,"results":"169","hashOfConfig":"112"},{"size":7477,"mtime":1637740931001,"results":"170","hashOfConfig":"112"},{"size":2017,"mtime":1637625166900,"results":"171","hashOfConfig":"112"},{"size":2303,"mtime":1632986576169,"results":"172","hashOfConfig":"112"},{"size":251,"mtime":1631116851030,"results":"173","hashOfConfig":"112"},{"size":621,"mtime":1636578226951,"results":"174","hashOfConfig":"112"},{"size":6132,"mtime":1637739925019,"results":"175","hashOfConfig":"112"},{"size":5326,"mtime":1637077991023,"results":"176","hashOfConfig":"112"},{"size":219,"mtime":1636910743021,"results":"177","hashOfConfig":"112"},{"size":449,"mtime":1636915470563,"results":"178","hashOfConfig":"112"},{"size":549,"mtime":1636916754551,"results":"179","hashOfConfig":"112"},{"size":978,"mtime":1637071446314,"results":"180","hashOfConfig":"112"},{"size":1379,"mtime":1637077235797,"results":"181","hashOfConfig":"112"},{"size":981,"mtime":1636921971437,"results":"182","hashOfConfig":"112"},{"size":6442,"mtime":1637073361995,"results":"183","hashOfConfig":"112"},{"size":359,"mtime":1637080250131,"results":"184","hashOfConfig":"112"},{"size":5862,"mtime":1637176705349,"results":"185","hashOfConfig":"112"},{"size":7927,"mtime":1637789847529,"results":"186","hashOfConfig":"112"},{"size":2442,"mtime":1637742213349,"results":"187","hashOfConfig":"112"},{"size":372,"mtime":1637150386129,"results":"188","hashOfConfig":"112"},{"size":1766,"mtime":1637145322570,"results":"189","hashOfConfig":"112"},{"size":8012,"mtime":1637747865173,"results":"190","hashOfConfig":"112"},{"size":4250,"mtime":1637191238785,"results":"191","hashOfConfig":"112"},{"size":287,"mtime":1637249845896,"results":"192","hashOfConfig":"112"},{"size":1456,"mtime":1637251615610,"results":"193","hashOfConfig":"112"},{"size":1885,"mtime":1637273173773,"results":"194","hashOfConfig":"112"},{"size":482,"mtime":1637259201650,"results":"195","hashOfConfig":"112"},{"size":12020,"mtime":1637263024251,"results":"196","hashOfConfig":"112"},{"size":3965,"mtime":1637262893111,"results":"197","hashOfConfig":"112"},{"size":3924,"mtime":1637261970910,"results":"198","hashOfConfig":"112"},{"size":4295,"mtime":1637260954961,"results":"199","hashOfConfig":"112"},{"size":5489,"mtime":1637262025010,"results":"200","hashOfConfig":"112"},{"size":992,"mtime":1637261387153,"results":"201","hashOfConfig":"112"},{"size":2634,"mtime":1637262842012,"results":"202","hashOfConfig":"112"},{"size":850,"mtime":1631116850867,"results":"203","hashOfConfig":"112"},{"size":145,"mtime":1631116850820,"results":"204","hashOfConfig":"112"},{"size":3297,"mtime":1637262812152,"results":"205","hashOfConfig":"112"},{"size":2316,"mtime":1637261900702,"results":"206","hashOfConfig":"112"},{"size":3545,"mtime":1637266649086,"results":"207","hashOfConfig":"112"},{"size":21062,"mtime":1637266643726,"results":"208","hashOfConfig":"112"},{"size":27126,"mtime":1637269649565,"results":"209","hashOfConfig":"112"},{"size":622,"mtime":1631116850789,"results":"210","hashOfConfig":"112"},{"size":705,"mtime":1637612550294,"results":"211","hashOfConfig":"112"},{"size":1576,"mtime":1631116850966,"results":"212","hashOfConfig":"112"},{"size":125,"mtime":1631116851029,"results":"213","hashOfConfig":"112"},{"size":944,"mtime":1637271604230,"results":"214","hashOfConfig":"112"},{"size":760,"mtime":1637592210416,"results":"215","hashOfConfig":"112"},{"size":765,"mtime":1637272999079,"results":"216","hashOfConfig":"112"},{"size":11035,"mtime":1637790032086,"results":"217","hashOfConfig":"112"},{"size":829,"mtime":1637607782508,"results":"218","hashOfConfig":"112"},{"size":189,"mtime":1637594728611,"results":"219","hashOfConfig":"112"},{"size":4913,"mtime":1637718596805,"results":"220","hashOfConfig":"112"},{"size":6104,"mtime":1637788975477,"results":"221","hashOfConfig":"112"},{"size":745,"mtime":1637725844087,"results":"222","hashOfConfig":"112"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},"g7rryo",{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"225"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"225"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"166rgf3",{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"225"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"225"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"225"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"225"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"225"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"225"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"225"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"225"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"225"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"225"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"225"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"225"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"225"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"225"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"225"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"225"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"225"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"225"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"225"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"225"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"225"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"225"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"225"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"225"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"225"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"225"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"225"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"225"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"225"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"225"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"225"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"225"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"225"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"225"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"225"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"225"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"225"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"225"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"225"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"225"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"225"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"225"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"225"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"225"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"225"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"225"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"225"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"225"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"225"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"225"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"225"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"225"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"225"},{"filePath":"469","messages":"470","errorCount":1,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"471","messages":"472","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"225"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"225"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"225"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"225"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"225"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"225"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"225"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},"D:\\Projects\\Scheduler App\\scheduler\\src\\index.js",[],["506","507"],"D:\\Projects\\Scheduler App\\scheduler\\src\\App.js",["508","509","510"],"import React, { useContext, useEffect } from \"react\"\r\nimport SecuredRoutes from \"Secure\"\r\nimport LoginPage from \"Pages/LoginPage\"\r\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\"\r\nimport Unauthorized, { UnauthorizedContext } from \"Error/Unauthorized\"\r\n\r\nfunction App() {\r\n  const { isAuthenticated } = useContext(UnauthorizedContext)\r\n  return isAuthenticated ? <SecuredRoutes /> : <LoginPage />\r\n}\r\n\r\nexport default () => {\r\n  return (\r\n    <Unauthorized>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Unauthorized>\r\n  )\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase.js",["511"],"// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\"\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  collection,\r\n  getDocs,\r\n  getDoc,\r\n  orderBy,\r\n  query,\r\n  addDoc,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAfter,\r\n  onSnapshot,\r\n  startAt,\r\n  endAt,\r\n} from \"firebase/firestore\"\r\nimport {\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\"\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\nconst {\r\n  REACT_APP_API_KEY,\r\n  REACT_APP_AUTH_DOMAIN,\r\n  REACT_APP_PROJECT_ID,\r\n  REACT_APP_STORAGE_BUCKET,\r\n  REACT_APP_MESSAGING_SENDER_ID,\r\n  REACT_APP_APP_ID,\r\n  REACT_APP_MEASUREMENT_ID,\r\n} = process.env\r\n\r\nconst firebaseConfig = {\r\n  apiKey: REACT_APP_API_KEY,\r\n  authDomain: REACT_APP_AUTH_DOMAIN,\r\n  projectId: REACT_APP_PROJECT_ID,\r\n  storageBucket: REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: REACT_APP_APP_ID,\r\n  measurementId: REACT_APP_MEASUREMENT_ID,\r\n}\r\n\r\n// Initialize Firebase\r\nconst firestore = initializeApp(firebaseConfig)\r\nconst db = getFirestore()\r\nexport {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAfter,\r\n  onSnapshot,\r\n  startAt,\r\n  endAt,\r\n}\r\nexport default db\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\LoginPage.js",["512"],"import Authentication from \"Components/Features/Authentication\"\r\nimport styled from \"styled-components\"\r\nimport React, { useContext } from \"react\"\r\nimport { Route, Switch } from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { Spin } from \"antd\"\r\n\r\nfunction LoginPage() {\r\n  const { isAuthenticated, isLoading, loaded } = useContext(UnauthorizedContext)\r\n  return (\r\n    <LoginContainer>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Authentication />\r\n        </Route>\r\n        <Route exact path=\"/login\">\r\n          <Authentication />\r\n        </Route>\r\n        <Route exact path=\"*\">\r\n          {!isAuthenticated && loaded ? <URLNotFound /> : <Spin size=\"large\" />}\r\n        </Route>\r\n      </Switch>\r\n    </LoginContainer>\r\n  )\r\n}\r\n\r\nconst LoginContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  background-color: #d6e4ff;\r\n`\r\nexport default LoginPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unauthorized.js",["513","514"],"import useAuthentication from \"Components/Features/Authentication/hook\"\r\nimport React, { createContext, useState, useEffect } from \"react\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nimport { getAuth, onAuthStateChanged } from \"Services/firebase\"\r\n\r\nexport const UnauthorizedContext = createContext({})\r\nfunction Unauthorized({ children }) {\r\n  const [user, setUser] = useState({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [loaded, setLoaded] = useState(false)\r\n  const [isAuthenticated, setIsAuthenticated] = useState(true)\r\n  const [error, setError] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    const auth = getAuth()\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        // User is signed in, see docs for a list of available properties\r\n        // https://firebase.google.com/docs/reference/js/firebase.User\r\n        const uid = user.uid\r\n        if (uid) {\r\n          loadUser(user?.email)\r\n        }\r\n        // ...\r\n      } else {\r\n        // User is signed out\r\n        // ...\r\n        setIsAuthenticated(false)\r\n        setIsLoading(false)\r\n        setLoaded(true)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const loadUser = async (email) => {\r\n    try {\r\n      const user = await UsersClass.getDataById(email)\r\n      if (user) {\r\n        setUser(user)\r\n      }\r\n    } catch (e) {\r\n      setError(\"Oops something went wrong. Please try again\")\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (user?._id) {\r\n      setIsAuthenticated(true)\r\n      setLoaded(true)\r\n      setIsLoading(false)\r\n    }\r\n  }, [user])\r\n\r\n  return (\r\n    <UnauthorizedContext.Provider\r\n      value={{\r\n        setError,\r\n        setIsLoading,\r\n        isAuthenticated,\r\n        user,\r\n        setUser,\r\n        isLoading,\r\n        setIsLoading,\r\n        error,\r\n        setLoaded,\r\n        loaded,\r\n      }}\r\n    >\r\n      {children}\r\n    </UnauthorizedContext.Provider>\r\n  )\r\n}\r\n\r\nexport default Unauthorized\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Predefined.js",["515","516","517","518","519"],"import { useSelectMenus } from \"Components/Features/Sidenav/hook\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport React, { useContext, useEffect } from \"react\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport Pages from \"./Pages\"\r\nimport RouteWithSubRoutes from \"./RouteWithSubRoutes\"\r\n\r\nfunction Predefined({}) {\r\n  const { menus } = useSelectMenus()\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <MainPage />\r\n      </Route>\r\n      {menus.map((menu) => {\r\n        return (\r\n          // <RouteWithSubRoutes key={menu.dataKey} {...menu} />\r\n          <Route key={menu.key} exact path={`${menu.path}`}>\r\n            {Pages[menu.dataKey]}\r\n          </Route>\r\n        )\r\n      })}\r\n\r\n      {menus.map(({ subMenu = [] }) => {\r\n        return subMenu.map((sub) => {\r\n          return (\r\n            <Route key={sub.key} path={`${sub.path}`}>\r\n              {Pages[sub.dataKey]}\r\n            </Route>\r\n          )\r\n        })\r\n      })}\r\n      {menus.length > 0 && (\r\n        <Route path=\"*\">\r\n          <URLNotFound />\r\n        </Route>\r\n      )}\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Predefined\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\URLNotFound.js",["520"],"import { Result } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nfunction URLNotFound() {\r\n  const history = useHistory()\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        width: \"100%\",\r\n        height: \"80vh\",\r\n        backgroundColor: \"transparent\",\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      <Result\r\n        status=\"404\"\r\n        title=\"404\"\r\n        subTitle=\"Sorry, the page you visited does not exist.\"\r\n        subTitle=\"Sorry, the page you visited does not exist.\"\r\n        extra={\r\n          <MainButton label=\"Back Home\" onClick={() => history.push(\"/\")} />\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default URLNotFound\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unavailable.js",["521","522"],"import React, { createContext, useEffect, useState } from \"react\"\r\nimport { Spin, Result } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { useLocation, useHistory } from \"react-router\"\r\n\r\nexport const UnavailableContext = createContext({})\r\nfunction Unavailable({ children }) {\r\n  const location = useLocation()\r\n  const history = useHistory()\r\n  const [error, setError] = useState(\"\")\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [loaded, setLoaded] = useState(true)\r\n\r\n  // cleared the error if the routes changes to render the component requested\r\n  useEffect(() => {\r\n    if (error) {\r\n      setError(\"\")\r\n      setLoaded(true)\r\n    }\r\n  }, [location.pathname])\r\n\r\n  const reloadPage = () => {\r\n    history.push(\"/\")\r\n  }\r\n  return (\r\n    <UnavailableContext.Provider value={{ setError, setIsLoading, setLoaded }}>\r\n      <div\r\n        style={\r\n          isLoading || error\r\n            ? {\r\n                height: \"85vh\",\r\n                overflow: \"hidden\",\r\n              }\r\n            : {}\r\n        }\r\n      >\r\n        {isLoading && (\r\n          <Container>\r\n            <Spin size=\"large\" />\r\n          </Container>\r\n        )}\r\n\r\n        {error && isLoading === false && (\r\n          <Container>\r\n            <Result\r\n              status=\"500\"\r\n              title=\"500\"\r\n              subTitle={error}\r\n              extra={<MainButton label=\"Back Home\" onClick={reloadPage} />}\r\n            />\r\n          </Container>\r\n        )}\r\n\r\n        {children}\r\n      </div>\r\n    </UnavailableContext.Provider>\r\n  )\r\n}\r\n\r\nconst Container = ({ children }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Unavailable\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\UsersClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\hook.js",["523","524"],"import { useContext, useEffect, useState } from \"react\"\r\nimport validateAuth from \"Validations/validateAuth\"\r\nimport { message } from \"antd\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nexport default function useAuthentication() {\r\n  const { user, setUser } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const [data, setData] = useState({})\r\n  const [response, setResponse] = useState({})\r\n  const [branches, setBranches] = useState([])\r\n  const [enableChangePass, setEnabledChangePass] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!response?.valid) {\r\n      for (const key in response.errors) {\r\n        message.error(`${AuthClass.LABELS[key]}: ${response.errors[key]}`)\r\n      }\r\n    }\r\n  }, [response])\r\n\r\n  useEffect(() => {\r\n    loadUser(data[AuthClass.USERNAME])\r\n    setData({ ...data, [AuthClass.BRANCH]: \"\" })\r\n  }, [data[AuthClass.USERNAME]])\r\n\r\n  const loadUser = async (email) => {\r\n    try {\r\n      const user = await UsersClass.getDataById(email)\r\n      if (user) {\r\n        setBranches(user.branches)\r\n      }\r\n    } catch (e) {\r\n      message.error(\"Connection not available\")\r\n      console.log(\"Authentication hook\", e?.message)\r\n    }\r\n  }\r\n\r\n  const handleChange = (value, fieldName) => {\r\n    setData({ ...data, [fieldName]: value })\r\n  }\r\n  const handleCancel = () => {\r\n    const _data = { ...data }\r\n    delete _data[AuthClass.RETYPE_PASSWORD]\r\n    setData({ ..._data, [AuthClass.PASSWORD]: \"\" })\r\n\r\n    setEnabledChangePass(false)\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    const validatedData = validateAuth(data)\r\n    setResponse(validatedData)\r\n    if (validatedData.valid) {\r\n      message.loading({ content: \"Loading...\", key: \"updatable\", duration: 10 })\r\n      try {\r\n        const result = await AuthClass.login(\r\n          data[AuthClass.USERNAME],\r\n          data[AuthClass.PASSWORD],\r\n          data[AuthClass.BRANCH],\r\n          history\r\n        )\r\n        if (result) {\r\n          setUser({ ...user, [AuthClass.BRANCH]: data[AuthClass.BRANCH] })\r\n          message.success({\r\n            content: \"Logged In\",\r\n            key: \"updatable\",\r\n            duration: 2,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        if (error === \"auth/user-not-found\") {\r\n          const result = await AuthClass.checkEmailIfExist(\r\n            data[AuthClass.USERNAME],\r\n            data[AuthClass.PASSWORD]\r\n          )\r\n          if (result === \"Email Exist\") {\r\n            setEnabledChangePass(true)\r\n            setData({ ...data, [AuthClass.PASSWORD]: \"\" })\r\n            message.destroy(\"updatable\")\r\n            message.info(\"Please change your password to proceed\")\r\n          } else {\r\n            message.destroy(\"updatable\")\r\n            message.error(result)\r\n          }\r\n        } else {\r\n          message.destroy(\"updatable\")\r\n          message.error(error)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const onSignup = async () => {\r\n    const _newData = { ...data }\r\n    if (data[AuthClass.PASSWORD] !== data[AuthClass.RETYPE_PASSWORD]) {\r\n      message.error(\"Password mismatch\")\r\n      return\r\n    }\r\n    delete _newData[AuthClass.RETYPE_PASSWORD]\r\n    const validatedData = validateAuth(_newData)\r\n    setResponse(validatedData)\r\n    if (validatedData.valid) {\r\n      message.loading({ content: \"Loading...\", key: \"updatable\", duration: 10 })\r\n      try {\r\n        const result = await AuthClass.createLogin(\r\n          _newData[AuthClass.USERNAME],\r\n          _newData[AuthClass.PASSWORD],\r\n          _newData[AuthClass.BRANCH],\r\n          history\r\n        )\r\n        if (result) {\r\n          message.success({\r\n            content: \"Logged In\",\r\n            key: \"updatable\",\r\n            duration: 2,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        message.destroy(\"updatable\")\r\n        message.error(error)\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    data,\r\n    branches,\r\n    handleChange,\r\n    onSubmit,\r\n    onSignup,\r\n    enableChangePass,\r\n    handleCancel,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Pages.js",["525","526","527","528"],"import {\r\n  BRANCH_MASTERFILE,\r\n  CUSTOMER_REPORTS,\r\n  DAILY_REPORTS,\r\n  DASHBOARD,\r\n  DROPDOWN_MASTERFILE,\r\n  GRILL_RESERVATION,\r\n  INCIDENT_REPORTS,\r\n  INVENTORY,\r\n  MASTER_DATA,\r\n  PAYMENT_TRANSACTION,\r\n  PRODUCTS_MASTERFILE,\r\n  REPORTS,\r\n  ROLES_MASTERFILE,\r\n  USER_MASTERFILE,\r\n} from \"Constants/pathNames\"\r\nimport {\r\n  DashboardOutlined,\r\n  SettingOutlined,\r\n  FolderOutlined,\r\n} from \"@ant-design/icons\"\r\nimport React from \"react\"\r\nimport DashboardGrillingPage from \"Pages/DashboardGrillingPage\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport DashboardStoreInventory from \"Pages/DashboardStoreInventory\"\r\nimport SettingsUserMasterfilePage from \"Pages/SettingsUserMasterfilePage\"\r\nimport SettingsProductMasterfile from \"Components/Features/SettingsProductMasterfile\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport { useRouteMatch } from \"react-router\"\r\nimport SettingsRoleMasterfile from \"Components/Features/SettingsRoleMasterfile\"\r\nimport SettingsDropdownMasterfile from \"Components/Features/SettingsDropdownMasterfile\"\r\nimport SettingsBranchMasterfile from \"Components/Features/SettingsBranchMasterfile\"\r\nimport AnalyticsIncidents from \"Components/Features/AnalyticsIncidents\"\r\nimport AnalyticsCustomer from \"Components/Features/AnalyticsCustomer\"\r\nimport AnalyticsDailyReport from \"Components/Features/AnalyticsDailyReport\"\r\n\r\nconst iconSize = {\r\n  fontSize: \"15rem\",\r\n  color: \"#888\",\r\n}\r\nexport default {\r\n  [DASHBOARD]: (\r\n    <MainPage>\r\n      <DashboardOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [REPORTS]: (\r\n    <MainPage>\r\n      <FolderOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [MASTER_DATA]: (\r\n    <MainPage>\r\n      <SettingOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [GRILL_RESERVATION]: <DashboardGrillingPage />,\r\n  [PAYMENT_TRANSACTION]: <DashboardTransactionPage />,\r\n  [INVENTORY]: <DashboardStoreInventory />,\r\n  [USER_MASTERFILE]: <SettingsUserMasterfilePage />,\r\n  [PRODUCTS_MASTERFILE]: <SettingsProductMasterfile />,\r\n  [ROLES_MASTERFILE]: <SettingsRoleMasterfile />,\r\n  [DROPDOWN_MASTERFILE]: <SettingsDropdownMasterfile />,\r\n  [BRANCH_MASTERFILE]: <SettingsBranchMasterfile />,\r\n  [INCIDENT_REPORTS]: <AnalyticsIncidents />,\r\n  [CUSTOMER_REPORTS]: <AnalyticsCustomer />,\r\n  [DAILY_REPORTS]: <AnalyticsDailyReport />,\r\n}\r\n\r\n// const Pages = (props) => {\r\n//   const { path, url } = useRouteMatch()\r\n//   return (\r\n//     <div>\r\n//       <Switch>\r\n//         <Route path={path}>\r\n//           <DashboardTransactionPage {...props} />\r\n//         </Route>\r\n//         <Route exact path={`${path}/tobehonest`}>\r\n//           <div>Hello world</div>\r\n//         </Route>\r\n//       </Switch>\r\n//     </div>\r\n//   )\r\n// }\r\n// export default Pagess\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\index.js",["529","530","531","532","533"],"import { UserOutlined, LockOutlined } from \"@ant-design/icons\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport styled from \"styled-components\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport useAuthentication from \"./hook\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport VitosLogo from \"Images/vitosLogo.png\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { Result, Space, Spin } from \"antd\"\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\n\r\nfunction Authentication() {\r\n  const {\r\n    data,\r\n    branches = [],\r\n    handleChange,\r\n    onSubmit,\r\n    onSignup,\r\n    enableChangePass,\r\n    handleCancel,\r\n  } = useAuthentication()\r\n  return enableChangePass ? (\r\n    <ConfigSpace>\r\n      <Logo>\r\n        <img src={VitosLogo} style={{ width: \"100%\" }} />\r\n      </Logo>\r\n      <br />\r\n      <CustomTitle typographyType=\"text\" label=\"Setup New Password\" level={5} />\r\n      <br />\r\n      <Password\r\n        onChange={handleChange}\r\n        value={data[AuthClass.PASSWORD]}\r\n        placeholder=\"New Password\"\r\n      />\r\n      <br />\r\n      <RetypePassword\r\n        onChange={handleChange}\r\n        value={data[AuthClass.RETYPE_PASSWORD]}\r\n      />\r\n      <br />\r\n      <br />\r\n      <Space>\r\n        <Cancel onClick={handleCancel} />\r\n        <LoginButton onClick={onSignup} />\r\n      </Space>\r\n    </ConfigSpace>\r\n  ) : (\r\n    <ConfigSpace>\r\n      <Logo>\r\n        <img src={VitosLogo} style={{ width: \"100%\" }} />\r\n      </Logo>\r\n      <br />\r\n      <Username onChange={handleChange} value={data[AuthClass.USERNAME]} />\r\n      <br />\r\n      <Password onChange={handleChange} value={data[AuthClass.PASSWORD]} />\r\n      <br />\r\n      <SelectBranch onChange={handleChange} options={branches} data={data} />\r\n      <br />\r\n      <LoginButton onClick={onSubmit} />\r\n    </ConfigSpace>\r\n  )\r\n}\r\n\r\n// Custom Components\r\nconst ConfigSpace = ({ children }) => {\r\n  const { sm, xs } = useBreakpoint()\r\n  const { isLoading, error } = useContext(UnauthorizedContext)\r\n\r\n  const reloadPage = () => {\r\n    window.location.reload(false)\r\n  }\r\n  if (xs) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          width: \"23rem\",\r\n          padding: \"2rem 2rem 2rem 2rem\",\r\n        }}\r\n      >\r\n        {isLoading && <Spin size=\"large\" />}\r\n        {error && (\r\n          <Result\r\n            status=\"500\"\r\n            title=\"500\"\r\n            subTitle={error}\r\n            extra={<MainButton label=\"Reload page\" onClick={reloadPage} />}\r\n          />\r\n        )}\r\n        {!isLoading && !error && children}\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"23rem\",\r\n        padding: \"2rem 2rem 2rem 2rem\",\r\n        boxShadow: isLoading || error ? \"none\" : \"0px 1px 1rem #999\",\r\n        backgroundColor: isLoading || error ? \"transparent\" : \"white\",\r\n      }}\r\n    >\r\n      {isLoading && <Spin size=\"large\" />}\r\n      {error && (\r\n        <Result\r\n          status=\"500\"\r\n          title=\"500\"\r\n          subTitle={error}\r\n          extra={<MainButton label=\"Reload page\" onClick={reloadPage} />}\r\n        />\r\n      )}\r\n      {!isLoading && !error && children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Username = (props) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<UserOutlined />}\r\n      size=\"large\"\r\n      placeholder={AuthClass.LABELS[AuthClass.USERNAME]}\r\n      value={props.value}\r\n      onChange={(e) => props.onChange(e.target.value, AuthClass.USERNAME)}\r\n    />\r\n  )\r\n}\r\n\r\nconst Password = ({\r\n  placeholder = AuthClass.LABELS[AuthClass.PASSWORD],\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<LockOutlined />}\r\n      size=\"large\"\r\n      placeholder={placeholder}\r\n      type=\"password\"\r\n      value={rest.value}\r\n      onChange={(e) => rest.onChange(e.target.value, AuthClass.PASSWORD)}\r\n    />\r\n  )\r\n}\r\n\r\nconst RetypePassword = (props) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<LockOutlined />}\r\n      size=\"large\"\r\n      placeholder={AuthClass.LABELS[AuthClass.RETYPE_PASSWORD]}\r\n      type=\"password\"\r\n      value={props.value}\r\n      onChange={(e) =>\r\n        props.onChange(e.target.value, AuthClass.RETYPE_PASSWORD)\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nconst SelectBranch = (props) => {\r\n  return (\r\n    <AutoSelect\r\n      placeholder=\"Select branch\"\r\n      options={[...props.options]}\r\n      value={props.data[AuthClass.BRANCH]}\r\n      onChange={(value) => props.onChange(value, AuthClass.BRANCH)}\r\n      size=\"large\"\r\n      width={\"100%\"}\r\n    />\r\n  )\r\n}\r\n\r\nconst Cancel = (props) => {\r\n  return <MainButton label=\"Cancel\" size=\"large\" danger {...props} />\r\n}\r\n\r\nconst LoginButton = (props) => {\r\n  return <MainButton label=\"Login\" size=\"large\" {...props} />\r\n}\r\n\r\n// additional styles\r\n\r\nconst Logo = styled.div`\r\n  background-color: #333;\r\n  border-radius: 50%;\r\n  height: 10rem;\r\n  width: 10rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\nexport default Authentication\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\index.js",["534"],"import React, { useEffect } from \"react\"\r\nimport { Menu } from \"antd\"\r\nimport { useSelectMenus } from \"./hook\"\r\nimport { useHistory } from \"react-router\"\r\nconst { SubMenu } = Menu\r\n\r\nfunction Sidenav() {\r\n  const history = useHistory()\r\n  const { menus, selectedKeys } = useSelectMenus()\r\n\r\n  return (\r\n    <Menu\r\n      mode=\"inline\"\r\n      theme=\"dark\"\r\n      style={{ display: \"flex\", flexDirection: \"column\" }}\r\n      selectedKeys={selectedKeys}\r\n    >\r\n      {menus.map((menu) => {\r\n        const subMenu = [...menu.subMenu]\r\n        return (\r\n          <SubMenu\r\n            key={menu.key}\r\n            icon={menu.Icon}\r\n            title={menu.title}\r\n            style={{ display: menu.display ? \"block\" : \"none\" }}\r\n            onTitleClick={() => history.push(menu.path)}\r\n          >\r\n            {subMenu.map((sub) => {\r\n              return (\r\n                <Menu.Item\r\n                  key={sub.key}\r\n                  onClick={() => {\r\n                    history.push(sub.path)\r\n                  }}\r\n                  style={{ display: menu.display ? \"block\" : \"none\" }}\r\n                >\r\n                  {sub.title}\r\n                </Menu.Item>\r\n              )\r\n            })}\r\n          </SubMenu>\r\n        )\r\n      })}\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default Sidenav\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\MainPage.js",["535"],"import React, { useEffect } from \"react\"\r\nimport CookedChef from \"Images/cookedChef.jpg\"\r\nimport { Avatar, Space, Typography } from \"antd\"\r\nconst { Title } = Typography\r\n\r\nfunction MainPage({ children = <Welcome /> }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        position: \"relative\",\r\n        height: \"80vh\",\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"transparent\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Welcome = () => {\r\n  return (\r\n    <Space direction=\"vertical\" align=\"center\">\r\n      <Avatar\r\n        src={CookedChef}\r\n        shape=\"circle\"\r\n        style={{ width: \"15rem\", height: \"15rem\" }}\r\n      />\r\n      <Title level={3}>Welcome to Vito's BBQ</Title>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default MainPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\hook.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Base.js",["536"],"import { UNAVAILABLE } from \"Constants/errorCodes\"\r\nimport db, {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAt,\r\n  endAt,\r\n} from \"./firebase\"\r\nexport default class Base {\r\n  static async getData(collectionName) {\r\n    const q = query(collection(db, collectionName))\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataBySort(collectionName, orderedBy) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    console.log(\"responsedata\", data)\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    console.log(\"responsedata\", data)\r\n    return data\r\n  }\r\n\r\n  static async getDataById(collectionName, id) {\r\n    if (!id) {\r\n      return []\r\n    }\r\n    try {\r\n      const docRef = doc(db, collectionName, id)\r\n      const docSnap = await getDoc(docRef)\r\n      if (docSnap.exists()) {\r\n        return docSnap.data()\r\n      } else {\r\n        return {}\r\n      }\r\n    } catch (error) {\r\n      throw new Error(error.code)\r\n    }\r\n  }\r\n\r\n  static async getDataByDate(collectionName, dates, fieldname, branch) {\r\n    const startTime = new Date(dates[0].setHours(0, 0, 0, 0))\r\n    const endTime = new Date(dates[1].setHours(23, 59, 59, 59))\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \">=\", startTime),\r\n      where(fieldname, \"<=\", endTime),\r\n      where(\"branch\", \"==\", branch),\r\n      orderBy(fieldname, \"asc\")\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataByFieldname(collectionName, fieldname, value) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \"==\", value)\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataByKeyword(collectionName, fieldname, value) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      orderBy(fieldname),\r\n      startAt(value),\r\n      endAt(fieldname + \"\\uf8ff\")\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataNotEqualToFieldname(\r\n    collectionName,\r\n    orderedBy,\r\n    fieldname,\r\n    value\r\n  ) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \"!=\", value),\r\n      orderBy(fieldname),\r\n      orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async addData(collectionName, data) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, collectionName), { ...data })\r\n      if (docRef?.id) {\r\n        return { ...data, _id: docRef.id }\r\n      }\r\n      return {}\r\n    } catch (error) {\r\n      throw new Error(error.code)\r\n    }\r\n  }\r\n\r\n  static async setData(collectionName, id, data) {\r\n    try {\r\n      return await setDoc(\r\n        doc(db, collectionName, id),\r\n        {\r\n          ...data,\r\n        },\r\n        { merge: true }\r\n      )\r\n    } catch (error) {\r\n      throw new Error(error.code)\r\n    }\r\n  }\r\n\r\n  static async updateDataById(collectionName, id, data) {\r\n    try {\r\n      const docRef = doc(db, collectionName, id)\r\n      updateDoc(docRef, {\r\n        ...data,\r\n      })\r\n    } catch (err) {\r\n      throw new Error(err.code)\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\hook.js",["537","538","539"],"import { useHistory, useLocation } from \"react-router\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { LABEL } from \"Constants/pathNames\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\n\r\n// Notes: The header label of this page is dependent in the constants/pathNames file (if it doesnt exist you must create a variable first)\r\n\r\nexport default function useContentNavigator() {\r\n  const location = useLocation()\r\n  const [breadcrumb, setBreadcrumb] = useState([])\r\n  const [header, setHeader] = useState(\"\")\r\n  const [breadcrumbCount, setBreadcrumbCount] = useState(0)\r\n  useEffect(() => {\r\n    const pathNames = handlePathNames(location.pathname)\r\n    setBreadcrumbCount(pathNames.length)\r\n    const _breadcrumb = []\r\n    if (pathNames.length === 0) {\r\n      setHeader(\"Home\")\r\n    }\r\n    for (const routeName of pathNames) {\r\n      let url = producedURL(routeName, pathNames)\r\n      const title = LABEL[routeName] ? LABEL[routeName] : routeName\r\n      _breadcrumb.push({\r\n        title,\r\n        url: url,\r\n      })\r\n      setHeader(title)\r\n    }\r\n    setBreadcrumb(_breadcrumb)\r\n  }, [location.pathname])\r\n\r\n  // this function will split tha location pathName url and produced an array of strings\r\n  const handlePathNames = (pathUrl) => {\r\n    const pathNameSplit = pathUrl.split(\"/\")\r\n    // to clear empty strings inside array\r\n    const pathNames = pathNameSplit.filter((e) => e)\r\n    return pathNames\r\n  }\r\n  return { header, breadcrumb, breadcrumbCount }\r\n}\r\n\r\n// this function will produced a path url for each breadcrumb click\r\nconst producedURL = (routeName, pathNames) => {\r\n  let url = \"\"\r\n  const pathNameIndex = pathNames.indexOf(routeName)\r\n  for (let index = 0; index <= pathNameIndex; index++) {\r\n    url += `/${pathNames[index]}`\r\n  }\r\n  return url\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\MainButton.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\SidenavMobile.js",["540","541"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport { Menu } from \"antd\"\r\nimport { useSelectMenus } from \"./hook\"\r\nimport { useHistory } from \"react-router\"\r\nimport CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport { MenuOutlined } from \"@ant-design/icons\"\r\nconst { SubMenu } = Menu\r\n\r\nfunction SidenavMobile() {\r\n  const history = useHistory()\r\n  const { menus, selectedKeys } = useSelectMenus()\r\n  const clickedRef = useRef()\r\n  return (\r\n    <CustomDrawer\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      title=\"VITO'S BBQ\"\r\n      Icon={<MenuOutlined />}\r\n      placement=\"left\"\r\n      bodyStyle={{ padding: 0 }}\r\n      clickedRef={clickedRef}\r\n    >\r\n      <Menu\r\n        mode=\"inline\"\r\n        theme=\"light\"\r\n        style={{ display: \"flex\", flexDirection: \"column\" }}\r\n        selectedKeys={selectedKeys}\r\n      >\r\n        {menus.map((menu) => {\r\n          const subMenu = [...menu.subMenu]\r\n          return (\r\n            <SubMenu\r\n              key={menu.key}\r\n              icon={menu.Icon}\r\n              title={menu.title}\r\n              style={{ display: menu.display ? \"block\" : \"none\" }}\r\n              onTitleClick={() => {\r\n                history.push(menu.path)\r\n              }}\r\n            >\r\n              {subMenu.map((sub) => {\r\n                return (\r\n                  <Menu.Item\r\n                    key={sub.key}\r\n                    onClick={() => {\r\n                      history.push(sub.path)\r\n                      clickedRef.current.click()\r\n                    }}\r\n                    style={{ display: menu.display ? \"block\" : \"none\" }}\r\n                  >\r\n                    {sub.title}\r\n                  </Menu.Item>\r\n                )\r\n              })}\r\n            </SubMenu>\r\n          )\r\n        })}\r\n      </Menu>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nexport default SidenavMobile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\AuthClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardGrillingPage.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardTransactionPage.js",["542","543","544","545","546","547","548","549","550","551","552","553","554"],"import DashboardTransaction from \"Components/Features/DashboardTransaction\"\r\nimport { Link, Route, Switch } from \"react-router-dom\"\r\nimport { useHistory, useRouteMatch, useParams } from \"react-router\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { Space, Tabs } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport OrderForm, {\r\n  StyledContainer,\r\n} from \"Components/Features/DashboardTransaction/OrderForm\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nconst { TabPane } = Tabs\r\n\r\nfunction DashboardTransactionPage() {\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const [dataSelected, setDataSelected] = useState()\r\n  const [modifiedData, setModifiedData] = useState({})\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <DashboardTransaction\r\n        exposeData={(data) => setDataSelected(data)}\r\n        modifiedData={modifiedData}\r\n      />\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        <Route exact path={`${path}/add`}>\r\n          <OrderForm back={() => history.push(path)} formType=\"add\" />\r\n        </Route>\r\n        <Route exact path={`${path}/modified`}>\r\n          <OrderForm\r\n            back={() => history.push(path)}\r\n            formType=\"modified\"\r\n            modifiedData={(data) => setModifiedData(data)}\r\n          />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <StyledContainer>\r\n            <URLNotFound />\r\n          </StyledContainer>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DashboardTransactionPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardStoreInventory.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\pathNames.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\AutoSelect.js",["555"],"import { Select } from \"antd\"\r\nimport React, { useEffect } from \"react\"\r\nconst { Option } = Select\r\n\r\nconst AutoSelect = React.forwardRef((props, ref) => {\r\n  const {\r\n    placeholder = \"\",\r\n    onChange = () => {},\r\n    options = [],\r\n    size = \"default\",\r\n    width = 120,\r\n    value = \"\",\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <Select\r\n      ref={ref}\r\n      style={{ width: width }}\r\n      size={size}\r\n      showSearch\r\n      placeholder={placeholder}\r\n      optionFilterProp=\"children\"\r\n      onChange={onChange}\r\n      value={value}\r\n      {...rest}\r\n      // onFocus={onFocus}\r\n      // onBlur={onBlur}\r\n      // onSearch={onSearch}\r\n      filterOption={(input, option) =>\r\n        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      }\r\n    >\r\n      {options.map((option, index) => (\r\n        <Option value={option} key={index}>\r\n          {option}\r\n        </Option>\r\n      ))}\r\n    </Select>\r\n  )\r\n})\r\n\r\nexport default AutoSelect\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomInput.js",["556","557","558","559"],"import { Input } from \"antd\"\r\nimport React from \"react\"\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\"\r\n\r\nfunction CustomInput({\r\n  prefix = null,\r\n  placeholder = \"\",\r\n  size = \"default\",\r\n  type = \"text\",\r\n  onChange = () => {},\r\n  ...rest\r\n}) {\r\n  if (type !== \"password\") {\r\n    if (!prefix) {\r\n      return (\r\n        <Input\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          {...rest}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <Input\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          prefix={prefix}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          {...rest}\r\n        />\r\n      )\r\n    }\r\n  } else {\r\n    if (!prefix) {\r\n      return (\r\n        <Input.Password\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          iconRender={(visible) =>\r\n            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\r\n          }\r\n          {...rest}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <Input.Password\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          prefix={prefix}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          iconRender={(visible) =>\r\n            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\r\n          }\r\n          {...rest}\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default CustomInput\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTitle.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\index.js",["560"],"import CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport React, { useContext } from \"react\"\r\nimport { UserOutlined, LogoutOutlined } from \"@ant-design/icons\"\r\nimport { Input, message, Space, Tag, Typography } from \"antd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport { useHistory } from \"react-router\"\r\nimport useUserProfile from \"./hook\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\n\r\nfunction UserProfile() {\r\n  const history = useHistory()\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { enablePasswordChange, setEnablePasswordChange } = useUserProfile()\r\n  return (\r\n    <CustomDrawer\r\n      type=\"primary\"\r\n      shape=\"circle\"\r\n      Icon={<UserOutlined />}\r\n      Footer={\r\n        <Space style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n          <MainButton\r\n            label=\"Logout\"\r\n            Icon={<LogoutOutlined />}\r\n            danger={true}\r\n            onClick={async () => {\r\n              const result = await AuthClass.logout()\r\n              console.log(\"re\", result)\r\n              if (result) {\r\n                message.info(result)\r\n                history.push(\"/\")\r\n              }\r\n            }}\r\n          />\r\n        </Space>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\" size=\"middle\" style={{ width: \"100%\" }}>\r\n        <Tag color=\"processing\">My Info</Tag>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Name\r\n          </CustomTitle>\r\n          <span>{user.name}</span>\r\n        </Space>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Email\r\n          </CustomTitle>\r\n          <span>{user._id}</span>\r\n        </Space>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Branch\r\n          </CustomTitle>\r\n          <span style={{ color: \"red\", fontWeight: \"bold\" }}>\r\n            {user.branchSelected}\r\n          </span>\r\n        </Space>\r\n        <br />\r\n        <Tag color=\"processing\">Password Settings</Tag>\r\n        {!enablePasswordChange ? (\r\n          <MainButton\r\n            label=\"Change Password\"\r\n            type=\"default\"\r\n            onClick={() => setEnablePasswordChange(true)}\r\n          />\r\n        ) : (\r\n          <ChangePasswordForm\r\n            setEnablePasswordChange={setEnablePasswordChange}\r\n          />\r\n        )}\r\n      </Space>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nconst ChangePasswordForm = (props) => {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n        Current Password\r\n      </CustomTitle>\r\n      <CustomInput placeholder=\"Current Password\" type=\"password\" />\r\n      <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n        New Password\r\n      </CustomTitle>\r\n      <CustomInput placeholder=\"New Password\" type=\"password\" />\r\n      <Input placeholder=\"Re-type Password\" type=\"password\" />\r\n      <Space style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n        <MainButton\r\n          label=\"Cancel\"\r\n          danger\r\n          onClick={() => props.setEnablePasswordChange(false)}\r\n        />\r\n        <MainButton label=\"Save\" />\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default UserProfile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\RolesClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Validations\\validateAuth\\index.js",["561"],"import {\r\n  basicValidation,\r\n  validateEmail,\r\n  validateMaxChar,\r\n} from \"Helpers/validations\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\n\r\nexport default (data) => {\r\n  let validationResponse = { valid: true, errors: {} }\r\n  const optionals = [] // list of optional properties\r\n  const basicData = basicValidation(AuthClass, data, optionals)\r\n  const validateUsername = validateEmail(AuthClass.USERNAME, data)\r\n  const validatePassword = validateMaxChar(AuthClass.PASSWORD, data, 6)\r\n  if (!basicData.valid) {\r\n    return { ...validationResponse, ...basicData }\r\n  }\r\n\r\n  if (!validateUsername.valid) {\r\n    validationResponse = { ...validationResponse, ...validateUsername }\r\n  }\r\n\r\n  if (!validatePassword.valid) {\r\n    validationResponse = { ...validationResponse, ...validatePassword }\r\n  }\r\n  return validationResponse\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\errorCodes.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\hook.js",["562"],"import { useEffect, useState } from \"react\"\r\n\r\nexport default function useUserProfile() {\r\n  const [enablePasswordChange, setEnablePasswordChange] = useState(false)\r\n\r\n  return { enablePasswordChange, setEnablePasswordChange }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDrawer.js",["563","564"],"import { Button, Drawer, Space } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\nfunction CustomDrawer({\r\n  title = \"User Profile\",\r\n  children,\r\n  shape = \"round\",\r\n  type = \"default\",\r\n  Icon = <></>,\r\n  buttonLabel = \"\",\r\n  size = \"large\",\r\n  width = \"375px\",\r\n  Footer = <></>,\r\n  placement = \"right\",\r\n  bodyStyle = {},\r\n  clickedRef,\r\n}) {\r\n  const [visible, setVisible] = useState(false)\r\n  const onClose = () => {\r\n    setVisible(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={clickedRef}\r\n        type={type}\r\n        shape={shape}\r\n        icon={Icon}\r\n        size={size}\r\n        onClick={() => {\r\n          setVisible(!visible)\r\n        }}\r\n      >\r\n        {buttonLabel}\r\n      </Button>\r\n      <Drawer\r\n        title={title}\r\n        placement={placement}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={width}\r\n        footer={Footer}\r\n        bodyStyle={bodyStyle}\r\n      >\r\n        {children}\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomDrawer\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\validations\\index.js",["565","566"],"// check if the properties of the data object is in the array of strings otherwise false if not\r\nexport const arrayContainsKey = (\r\n  array = [], //array of strings\r\n  data = {}\r\n) => {\r\n  const errors = {}\r\n  for (const key in data) {\r\n    if (!array.includes(key)) {\r\n      errors[key] = \"Invalid key\"\r\n    }\r\n  }\r\n  return errors\r\n}\r\n\r\n// check if the object properties contains a value otherwise false if null\r\nexport const objectContainsNull = (data = {}) => {\r\n  const errors = {}\r\n  for (const key in data) {\r\n    if (data[key].trim() === \"\") {\r\n      errors[key] = \"This is required\"\r\n    }\r\n  }\r\n  return errors\r\n}\r\n\r\n// remove key from the data object. If it is optional key and contains null it will be included\r\nexport const validateOptionals = (\r\n  optionalKeys = [], //array of strings\r\n  data = {}\r\n) => {\r\n  const newData = { ...data }\r\n  for (const key in data) {\r\n    if (optionalKeys.includes(key)) {\r\n      if (data[key].trim() === \"\") {\r\n        delete newData[key]\r\n      }\r\n    }\r\n  }\r\n  return newData\r\n}\r\n\r\n// add key if it is not stated in an object and is required\r\nexport const validateRequired = (\r\n  array = [], //array of strings (required keys)\r\n  data = {}\r\n) => {\r\n  const newData = { ...data }\r\n  for (const key of array) {\r\n    if (typeof newData[key] === \"undefined\") {\r\n      newData[key] = \"\"\r\n    }\r\n  }\r\n  return newData\r\n}\r\n\r\nexport const validateMaxChar = (fieldName, data, max = 10) => {\r\n  if (typeof data[fieldName] !== \"undefined\") {\r\n    if (data[fieldName].length < max) {\r\n      return {\r\n        valid: false,\r\n        errors: { [fieldName]: `Must be at least ${max} characters required` },\r\n      }\r\n    }\r\n  }\r\n  return { valid: true }\r\n}\r\n\r\nexport const validateEmail = (fieldName, data) => {\r\n  const res =\r\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n  if (typeof data[fieldName] !== \"undefined\") {\r\n    const validate = res.test(String(data[fieldName]).toLowerCase())\r\n    if (!validate) {\r\n      return {\r\n        valid: false,\r\n        errors: { [fieldName]: `Invalid Email` },\r\n      }\r\n    }\r\n  }\r\n  return { valid: true }\r\n}\r\n\r\n// check if properties are valid, remove optional fields with null values and check if data contains null\r\nexport const basicValidation = (ServiceClass, data, optionals = []) => {\r\n  const ifArrayContainsKey = arrayContainsKey(ServiceClass.PROPERTIES, data)\r\n  const validatedRequired = validateRequired(ServiceClass.PROPERTIES, data)\r\n  const validatedOptionals = validateOptionals(optionals, validatedRequired)\r\n  const isNull = objectContainsNull(validatedOptionals)\r\n\r\n  if (Object.keys(ifArrayContainsKey).length > 0) {\r\n    return { valid: false, errors: ifArrayContainsKey }\r\n  }\r\n\r\n  if (Object.keys(isNull).length > 0) {\r\n    return { valid: false, errors: isNull }\r\n  }\r\n\r\n  return { valid: true }\r\n}\r\n\r\nexport default validateOptionals\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\index.js",["567","568","569","570"],"import { Space } from \"antd\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport {\r\n  ReloadOutlined,\r\n  FileExcelOutlined,\r\n  PrinterOutlined,\r\n} from \"@ant-design/icons\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport styled from \"styled-components\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport useTableHandler from \"./hook\"\r\nimport classes from \"./table.module.css\"\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useLocation,\r\n  useRouteMatch,\r\n} from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport FormHandler from \"../FormHandler\"\r\nimport FormHandlerAdd from \"../FormHandler/FormHandlerAdd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport FilterOptions from \"../FilterOptions\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport CustomRangePicker from \"Components/Commons/RangePicker\"\r\nimport useRangeHandler from \"Hooks/useRangeHandler\"\r\nimport useGetDocumentsByKeyword from \"Hooks/useGetDocumentsByKeyword\"\r\nfunction TableHandler(props) {\r\n  const {\r\n    ServiceClass,\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableAdd,\r\n    defaultAddForm, // this is true or false\r\n    enableFilter,\r\n    enableRowSelect,\r\n    isLoading,\r\n    setIsLoading,\r\n    rowSelection,\r\n    enableEdit,\r\n    handleModified,\r\n    paginateRequest,\r\n  } = useTableHandler(props)\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const [isFiltered, setIsFiltered] = useState(false)\r\n  const [filteredData, setFilteredData] = useState([])\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      {data.length > 0 && isLoading === false && (\r\n        <div\r\n          style={\r\n            location.pathname === path\r\n              ? { visibility: \"visible\" }\r\n              : { visibility: \"hidden\" }\r\n          }\r\n        >\r\n          <ActionButtons\r\n            enableFilter={enableFilter}\r\n            enableAdd={enableAdd}\r\n            ServiceClass={ServiceClass}\r\n            setIsLoading={setIsLoading}\r\n            isFiltered={isFiltered}\r\n            setIsFiltered={setIsFiltered}\r\n            loadData={loadData}\r\n            hideColumns={hideColumns}\r\n            setFilteredData={setFilteredData}\r\n          />\r\n          <CustomTable\r\n            isFiltered={isFiltered}\r\n            columns={[...columns]}\r\n            dataSource={isFiltered ? [...filteredData] : [...data]}\r\n            size=\"small\"\r\n            scroll={{ x: \"calc(375px + 50%)\", y: \"90vh\" }}\r\n            rowClassName={() => {\r\n              return classes[\"DEFAULT\"]\r\n            }}\r\n            onRow={(record) => {\r\n              return enableRowSelect\r\n                ? {\r\n                    onClick: () => {\r\n                      rowSelection(record) // this is for row clicked used by Dashboard Transactions\r\n                    },\r\n                  }\r\n                : {}\r\n            }}\r\n            pagination={{ pageSize: 15, showSizeChanger: false }}\r\n            loadData={paginateRequest ? loadData : () => {}}\r\n            paginateRequest={paginateRequest}\r\n          />\r\n        </div>\r\n      )}\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        {enableAdd && defaultAddForm && (\r\n          <Route exact path={`${path}/add`}>\r\n            <FormHandlerAdd\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {enableEdit && defaultAddForm && (\r\n          <Route exact path={`${path}/modified`}>\r\n            <FormHandler\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              formSave={(data) => {\r\n                handleModified(data)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {defaultAddForm && (\r\n          <Route path=\"*\">\r\n            <StyledURLNotFound>\r\n              <URLNotFound />\r\n            </StyledURLNotFound>\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableHandler\r\n\r\nconst ActionButtons = (props) => {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const {\r\n    enableFilter,\r\n    enableAdd,\r\n    ServiceClass,\r\n    loadData,\r\n    setIsLoading,\r\n    setIsFiltered,\r\n    isFiltered,\r\n    hideColumns,\r\n    setFilteredData,\r\n  } = props\r\n  const types = ServiceClass.TYPES\r\n  const [rangeData = [], loadRangeData, clearRangeData] =\r\n    useRangeHandler(ServiceClass)\r\n  const [documentData, loadDocumentData, clearDocumentData] =\r\n    useGetDocumentsByKeyword(ServiceClass)\r\n  const [selectedFilter, setSelectedFilter] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    setFilteredData(rangeData)\r\n  }, [rangeData])\r\n\r\n  useEffect(() => {\r\n    setFilteredData(rangeData)\r\n  }, [documentData])\r\n  useEffect(() => {\r\n    clearRangeData()\r\n    clearDocumentData()\r\n  }, [selectedFilter])\r\n  return (\r\n    <StyledContainer enableFilter={enableFilter} wrap>\r\n      <StyledLeftContent enableFilter={enableFilter}>\r\n        <FilterOptions\r\n          ServiceClass={ServiceClass}\r\n          isFiltered={isFiltered}\r\n          setIsFiltered={setIsFiltered}\r\n          hideColumns={hideColumns}\r\n          valueSelected={(data) => setSelectedFilter(data)}\r\n        />\r\n        {selectedFilter !== \"NONE\" && (\r\n          <Space>\r\n            <CustomTitle\r\n              typographyType=\"text\"\r\n              type=\"secondary\"\r\n              label={`${ServiceClass.LABELS[selectedFilter]} :`}\r\n            />\r\n            {types[selectedFilter] === DATE_TYPE && (\r\n              <CustomRangePicker\r\n                format=\"MM/DD/YYYY\"\r\n                onChange={(dates) => {\r\n                  loadRangeData(dates, selectedFilter)\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {types[selectedFilter] === STRING_TYPE ||\r\n              (typeof types[selectedFilter] === \"undefined\" && (\r\n                <CustomInput\r\n                  placeholder=\"Search here...\"\r\n                  onChange={(e) =>\r\n                    loadDocumentData(selectedFilter, e.target.value)\r\n                  }\r\n                />\r\n              ))}\r\n          </Space>\r\n        )}\r\n        <Space>\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<PrinterOutlined />}\r\n          />\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<FileExcelOutlined />}\r\n          />\r\n        </Space>\r\n      </StyledLeftContent>\r\n      <StyledRightContent enableAdd={enableAdd}>\r\n        <MainButton\r\n          Icon={<ReloadOutlined />}\r\n          label=\"\"\r\n          type=\"default\"\r\n          shape=\"circle\"\r\n          onClick={() => {\r\n            loadData({}, user?.branchSelected, true) // refresh data if true\r\n            setIsLoading(true)\r\n          }}\r\n        />\r\n        {ServiceClass.COLLECTION_NAME === SchedulersClass.COLLECTION_NAME && (\r\n          <MainButton label=\"Add Group Payment\" type=\"default\" />\r\n        )}\r\n        <MainButton\r\n          label=\"Add\"\r\n          onClick={() => {\r\n            history.push(`${path}/add`)\r\n          }}\r\n        />\r\n      </StyledRightContent>\r\n    </StyledContainer>\r\n  )\r\n}\r\n\r\nconst MobileTableView = (props) => {\r\n  return <div>Mobile view</div>\r\n}\r\n\r\nconst StyledURLNotFound = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledContainer = styled(Space)`\r\n  display: flex;\r\n  width: 100%;\r\n  padding-bottom: 1rem;\r\n  justify-content: ${(props) =>\r\n    props?.enableFilter ? \"space-between\" : \"flex-end\"};\r\n`\r\nconst StyledLeftContent = styled(Space)`\r\n  display: ${(props) => (props.enableFilter ? \"flex\" : \"none\")};\r\n  justify-content: flex-start;\r\n`\r\nconst StyledRightContent = styled(Space)`\r\n  display: ${(props) => (props.enableAdd ? \"flex\" : \"none\")};\r\n  justify-content: flex-end;\r\n`\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTable.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\index.js",["571","572","573","574","575","576"],"import { Popover, Space, Table, Tag } from \"antd\"\r\nimport {\r\n  producedProductListOfAllCodes,\r\n  producedTotalQtyOfProduct,\r\n} from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n  formatTime,\r\n} from \"Helpers/dateFormat\"\r\nimport { sumNumbers } from \"Helpers/sumArray\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport usePaginate from \"Hooks/usePaginate\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { useHistory, useRouteMatch } from \"react-router\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport TableHandler from \"../TableHandler\"\r\n\r\nfunction DashboardTransaction({ exposeData = () => {}, modifiedData = {} }) {\r\n  const history = useHistory()\r\n  const { url } = useRouteMatch()\r\n  const [productData] = useGetDocuments(ProductsClass) // this is to determine the product list\r\n\r\n  useEffect(() => {}, [modifiedData])\r\n  return (\r\n    <>\r\n      {productData.length > 0 && (\r\n        <TableHandler\r\n          modifiedData={modifiedData}\r\n          hideColumns={[\r\n            SchedulersClass._ID,\r\n            SchedulersClass.REF_NO,\r\n            SchedulersClass.BRANCH,\r\n            SchedulersClass.DATE_PAYMENT,\r\n            SchedulersClass.MODE_PAYMENT,\r\n            SchedulersClass.ACCOUNT_NUMBER,\r\n            SchedulersClass.SOURCE,\r\n            SchedulersClass.AMOUNT_PAID,\r\n            SchedulersClass.OTHERS,\r\n            SchedulersClass.SUBJECT,\r\n            SchedulersClass.ACCOUNT_NAME,\r\n            SchedulersClass.ORDER_VIA_WEBSITE,\r\n            SchedulersClass.ORDER_VIA_PARTNER,\r\n            SchedulersClass.ORDER_VIA,\r\n            SchedulersClass.END_TIME_ZONE,\r\n            SchedulersClass.START_TIME_ZONE,\r\n            SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS,\r\n            SchedulersClass.PARTNER_MERCHANT_ORDER_NO,\r\n            SchedulersClass.PAYMENT_NOTES,\r\n            SchedulersClass.DATE_END,\r\n          ]}\r\n          ServiceClass={SchedulersClass}\r\n          defaultColumnAlign=\"left\"\r\n          defaultFontSize=\"12px\"\r\n          bySort\r\n          enableAdd\r\n          defaultAddForm={false}\r\n          enableFilter\r\n          enableRowSelect\r\n          rowSelection={(record) => {\r\n            exposeData(record)\r\n            history.push(`${url}/modified?id=${record[SchedulersClass._ID]}`)\r\n          }}\r\n          useHook={usePaginate} // if hook is usePaginate\r\n          paginateRequest={true} // paginateRequest must be true\r\n          customSort={[SchedulersClass.DATE_START, \"desc\"]}\r\n          widths={{\r\n            [SchedulersClass.DATE_START]: 150,\r\n            [SchedulersClass.DATE_ORDER_PLACED]: 150,\r\n            [SchedulersClass.BRANCH]: 150,\r\n            [SchedulersClass.DATE_PAYMENT]: 100,\r\n            [SchedulersClass.ORDER_NO]: 150,\r\n            [SchedulersClass.UTAK_NO]: 150,\r\n            [SchedulersClass.CUSTOMER]: 200,\r\n            [SchedulersClass.CONTACT_NUMBER]: 100,\r\n            [SchedulersClass.QTY]: 50,\r\n            [SchedulersClass.OTHERS]: 130,\r\n            [SchedulersClass.TOTAL_DUE]: 100,\r\n            [SchedulersClass.SOURCE]: 100,\r\n            [SchedulersClass.MODE_PAYMENT]: 100,\r\n            [SchedulersClass.ACCOUNT_NUMBER]: 100,\r\n            [SchedulersClass.AMOUNT_PAID]: 100,\r\n            action: 12,\r\n          }}\r\n          onCell={(data) => {\r\n            switch (data[SchedulersClass.STATUS]) {\r\n              case \"CANCELLED\":\r\n                return {\r\n                  style: { backgroundColor: \"orange\", cursor: \"pointer\" },\r\n                }\r\n              case \"CONFIRMED\":\r\n                return {\r\n                  style: { backgroundColor: \"lightblue\", cursor: \"pointer\" },\r\n                }\r\n              case \"FULFILLED\":\r\n                return {\r\n                  style: { backgroundColor: \"transparent\", cursor: \"pointer\" },\r\n                }\r\n              default:\r\n                if (data[SchedulersClass.ORDER_VIA]) {\r\n                  return {\r\n                    style: {\r\n                      cursor: \"pointer\",\r\n                      backgroundColor: \"yellow\",\r\n                    },\r\n                  }\r\n                }\r\n                if (data[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n                  return {\r\n                    style: {\r\n                      cursor: \"pointer\",\r\n                      backgroundColor: \"pink\",\r\n                    },\r\n                  }\r\n                }\r\n            }\r\n          }}\r\n          overideRender={{\r\n            [SchedulersClass.OTHERS]: (data, record) => {\r\n              for (const key in data) {\r\n                return (\r\n                  <span style={{ fontSize: \"12px\" }}>\r\n                    {Number(data[key]).toFixed(2)}\r\n                  </span>\r\n                )\r\n              }\r\n            },\r\n            [SchedulersClass.DATE_START]: (data, record) => {\r\n              const formattedData = formatDateFromDatabase(data)\r\n              const date = formatDateDash(formattedData)\r\n              const time = formatTime(formattedData)\r\n              return (\r\n                <Space\r\n                  direction=\"vertical\"\r\n                  style={{ position: \"relative\", padding: \".2rem\" }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"12px\",\r\n                      position: \"absolute\",\r\n                      top: \"-1rem\",\r\n                    }}\r\n                  >\r\n                    {date}\r\n                  </span>\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      marginTop: \"-.5rem\",\r\n                      position: \"absolute\",\r\n                      color: \"red\",\r\n                    }}\r\n                  >\r\n                    {time}\r\n                  </span>\r\n                </Space>\r\n              )\r\n            },\r\n            [SchedulersClass.QTY]: (data, record) => {\r\n              const products = producedProductListOfAllCodes(productData)\r\n              const totalQty = producedTotalQtyOfProduct(products, record)\r\n              return <span>{totalQty}</span>\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DashboardTransaction\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\ProductsClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\types.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocuments.js",["577"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\n\r\nexport default function useGetDocuments(ServiceClass, config) {\r\n  const { setError, setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [data, setData] = useState([])\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [ServiceClass])\r\n  const loadData = async (_data = {}) => {\r\n    // this is for static data changes triggered from formHandler\r\n    if (Object.keys(_data).length > 0) {\r\n      const _dataIndex = data.findIndex(\r\n        (d) => d[ServiceClass._ID] === _data[ServiceClass._ID]\r\n      )\r\n      const newData = arrayReplace(data, _dataIndex, _data)\r\n      setData(newData)\r\n      return\r\n    }\r\n\r\n    // this is for requesting of data from database\r\n    const customSort = config?.customSort ? config.customSort : []\r\n    const bySort = typeof config?.bySort === \"undefined\" ? false : config.bySort\r\n    setIsLoading(true)\r\n    try {\r\n      if (bySort) {\r\n        const _data = await ServiceClass.getDataBySort(\r\n          customSort,\r\n          user.branchSelected\r\n        )\r\n        setData(_data)\r\n        setIsLoading(false)\r\n      } else {\r\n        const _data = await ServiceClass.getData(user.branchSelected)\r\n        setData(_data)\r\n        setIsLoading(false)\r\n      }\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n  return [data, loadData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\helpers.js",["578"],"import { AMOUNT_TYPE } from \"Constants/types\"\r\n\r\nexport const handleTitle = (ServiceClass, key) => {\r\n  if (typeof ServiceClass?.LABELS === \"undefined\") {\r\n    return key\r\n  } else {\r\n    const title = ServiceClass?.LABELS[key] ? ServiceClass?.LABELS[key] : key\r\n    return title\r\n  }\r\n}\r\n\r\nexport const handleAlignment = (ServiceClass, key, defaultColumnAlign) => {\r\n  let result = defaultColumnAlign\r\n  if (typeof ServiceClass?.TYPES === \"undefined\") {\r\n    return \"left\"\r\n  }\r\n\r\n  switch (ServiceClass.TYPES[key]) {\r\n    case AMOUNT_TYPE:\r\n      result = \"right\"\r\n  }\r\n  return result\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\SchedulesClass.js",["579"],"import {\r\n  AMOUNT_TYPE,\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  DATE_TYPE,\r\n  DROPDOWN_TYPE,\r\n  NUMBER_TYPE,\r\n  TEXT_AREA_TYPE,\r\n} from \"Constants/types\"\r\nimport Base from \"Services/Base\"\r\nimport PaginateCommands from \"Services/PaginateCommands\"\r\n\r\nexport default class SchedulersClass {\r\n  static COLLECTION_NAME = \"schedules\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.DATE_START, \"asc\"]\r\n    )\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n  static getDataByDate(dates, fieldname, branch) {\r\n    return Base.getDataByDate(this.COLLECTION_NAME, dates, fieldname, branch)\r\n  }\r\n\r\n  static getDataByFieldname(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static getDataByKeyword(fieldname, value) {\r\n    return Base.getDataByKeyword(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getPaginatedData(branch = \"\", customSort = [\"StartTime\", \"desc\"]) {\r\n    return PaginateCommands.getData(\r\n      this.COLLECTION_NAME,\r\n      150,\r\n      branch,\r\n      customSort\r\n    )\r\n  }\r\n\r\n  static getNextPaginatedData(\r\n    lastVisible,\r\n    branch = \"\",\r\n    customSort = [\"StartTime\", \"desc\"]\r\n  ) {\r\n    return PaginateCommands.getMoreData(\r\n      this.COLLECTION_NAME,\r\n      150,\r\n      lastVisible,\r\n      branch,\r\n      customSort\r\n    )\r\n  }\r\n\r\n  static QTY = \"qty\" // this is not a firebase field\r\n  static OTHERS = \"others\"\r\n  static MODE_PAYMENT = \"modePayment\"\r\n  static SOURCE = \"source\"\r\n  static AMOUNT_PAID = \"amountPaid\"\r\n  static BRANCH = \"branch\"\r\n  static CUSTOMER = \"customer\"\r\n  static CONTACT_NUMBER = \"contactNumber\"\r\n  static DATE_START = \"StartTime\" // this is default of syncfusion\r\n  static DATE_END = \"EndTime\" // this is default of syncfusion\r\n  static EIGHT = \"gcEight\"\r\n  static TWELVE = \"gcTwelve\"\r\n  static BC = \"gBc\"\r\n  static BC_HALF = \"gBcHalf\"\r\n  static DATE_ORDER_PLACED = \"dateOrderPlaced\"\r\n  static UTAK_NO = \"utakNo\"\r\n  static ACCOUNT_NAME = \"accountName\"\r\n  static ACCOUNT_NUMBER = \"accountNumber\"\r\n  static REF_NO = \"refNo\"\r\n  static PAYMENT_MODE = \"paymentMode\"\r\n  static MERCHANT_ORDER = \"merchantOrder\"\r\n  static STATUS = \"status\"\r\n  static ID = \"Id\" // this is default of syncfusion\r\n  static GUID = \"Guid\" // this is default of syncfusion\r\n  static START_TIME_ZONE = \"StartTimezone\" // this is default of syncfusion\r\n  static END_TIME_ZONE = \"EndTimezone\" // this is default of syncfusion\r\n  static SUBJECT = \"Subject\"\r\n  static _ID = \"_id\"\r\n  static ORDER_NO = \"orderNo\"\r\n  static INDICATE_REASON = \"indicateReason\"\r\n  static DATE_PAYMENT = \"datePayment\"\r\n  static CH_8 = \"ch8\"\r\n  static CH_12 = \"ch12\"\r\n  static CL_8 = \"cl8\"\r\n  static CL_12 = \"cl12\"\r\n  static BC_2 = \"bc2\"\r\n  static BC_4 = \"bc4\"\r\n  static JV_4 = \"jc4\"\r\n  static JV_2 = \"jv2\"\r\n  static BCJ_4 = \"bcj4\"\r\n  static BCJ_2 = \"bcj2\"\r\n  static BCJ_1 = \"bcj1\"\r\n  static FCH_8 = \"fch8\"\r\n  static FCH_12 = \"fch12\"\r\n  static FBC_4 = \"fbc4\"\r\n  static ATCHARA = \"atchara\"\r\n  static BC_SAUCE = \"bcSauce\"\r\n  static SPICED_VINEGAR = \"spiceVinegar\"\r\n  static BASTING_SAUCE = \"bastingSauce\"\r\n  static CHILI_OIL = \"chiliOil\"\r\n  static REPAER = \"reaper\"\r\n  static BAO = \"bao\"\r\n  static TOTAL = \"total\"\r\n  static TOTAL_DUE = \"totalDue\"\r\n  static DELIVERY_DATE = \"deliveryDate\"\r\n  static MENU_GROUP_HEADERS = \"menu_group_headers\"\r\n  static REMARKS = \"remarks\"\r\n  static M_A = \"M-A\"\r\n  static CH_8_PS = \"CH8-PS\"\r\n  static M_B = \"M-B\"\r\n  static PRT = \"PRT\"\r\n  static JV_1 = \"JV_1\"\r\n  static ORDER_VIA = \"orderVia\"\r\n  static ORDER_VIA_PARTNER = \"orderViaPartner\"\r\n  static ORDER_VIA_WEBSITE = \"orderViaWebsite\"\r\n  static PARTNER_MERCHANT_ORDER_NO = \"partnerMerchantOrderNo\"\r\n  static DISCOUNT_ADDITIONAL_DETAILS = \"discountAdditionalDetails\"\r\n  static PAYMENT_NOTES = \"paymentNotes\"\r\n\r\n  // this is not included in the database post of data, this is only for viewing in print document particular field\r\n  static TIME_SLOT = \"timeSlot\"\r\n  static PROPERTIES = [\r\n    this._ID,\r\n    this.BRANCH,\r\n    this.DATE_ORDER_PLACED,\r\n    this.DATE_START,\r\n    this.DATE_END,\r\n    this.UTAK_NO,\r\n    this.ORDER_NO,\r\n    this.CUSTOMER,\r\n    this.CONTACT_NUMBER,\r\n    this.QTY,\r\n    this.DATE_PAYMENT,\r\n    this.MODE_PAYMENT,\r\n    this.SOURCE,\r\n    this.SUBJECT,\r\n    this.ACCOUNT_NAME,\r\n    this.ACCOUNT_NUMBER,\r\n    this.AMOUNT_PAID,\r\n    this.TOTAL_DUE,\r\n    this.DISCOUNT_ADDITIONAL_DETAILS,\r\n    this.ORDER_VIA_WEBSITE,\r\n    this.ORDER_VIA,\r\n    this.ORDER_VIA_PARTNER,\r\n    this.END_TIME_ZONE, // should be null value\r\n    this.START_TIME_ZONE, // should be null value\r\n    this.PARTNER_MERCHANT_ORDER_NO,\r\n    this.PAYMENT_NOTES,\r\n    this.OTHERS,\r\n    this.REF_NO,\r\n  ]\r\n\r\n  static TYPES = {\r\n    [this.TOTAL_DUE]: AMOUNT_TYPE,\r\n    [this.DATE_PAYMENT]: DATE_TYPE,\r\n    [this.DATE_START]: DATE_TYPE,\r\n    [this.DATE_END]: DATE_TYPE,\r\n    [this.DATE_ORDER_PLACED]: DATE_TYPE,\r\n    [this.OTHERS]: AMOUNT_TYPE,\r\n    [this.AMOUNT_PAID]: AMOUNT_TYPE,\r\n    [this.QTY]: NUMBER_TYPE,\r\n    [this.REMARKS]: TEXT_AREA_TYPE,\r\n    [this.ORDER_VIA]: DROPDOWN_TYPE,\r\n    [this.ORDER_VIA_PARTNER]: DROPDOWN_TYPE,\r\n    [this.ORDER_VIA_WEBSITE]: DROPDOWN_TYPE,\r\n    [this.STATUS]: DROPDOWN_TYPE,\r\n    [this.INDICATE_REASON]: TEXT_AREA_TYPE,\r\n  }\r\n\r\n  static LABELS = {\r\n    [this.DATE_ORDER_PLACED]: \"DATE/TIME PLACED\",\r\n    [this.STATUS]: \"STATUS\",\r\n    [this.REF_NO]: \"Ref No\",\r\n    [this.UTAK_NO]: \"UTAK #\",\r\n    [this.INDICATE_REASON]: \"REASON\",\r\n    [this.BRANCH]: \"BRANCH\",\r\n    [this.CUSTOMER]: \"CUSTOMER\",\r\n    [this.CONTACT_NUMBER]: \"CONTACT #\",\r\n    [this.DELIVERY_DATE]: \"DELIVERY DATE/TIME\",\r\n    [this.DATE_ORDER_PLACED]: \"DATE/TIME PLACED\",\r\n    [this.DATE_START]: \"DATE/TIME START\", // cannot be change\r\n    [this.DATE_END]: \"DATE/TIME END\", // cannot be change\r\n    [this.ORDER_VIA]: \"DIRECT\",\r\n    [this.PAYMENT_MODE]: \"PAYMENT CODE\",\r\n    [this.MERCHANT_ORDER]: \"MERCHANT ORDER #\",\r\n    [this.ACCOUNT_NAME]: \"ACCOUNT NAME\",\r\n    [this.ORDER_NO]: \"ORDER #\",\r\n    [this.CH_8]: '8\"',\r\n    [this.CH_12]: '12\"',\r\n    [this.CL_8]: \"CALI 8\",\r\n    [this.CL_12]: \"CALI 12\",\r\n    [this.BC_4]: \"BC FULL [4]\",\r\n    [this.BC_2]: \"BC HALF [2]\",\r\n    [this.BCJ_4]: \"BCJ [4]\",\r\n    [this.BCJ_2]: \"BCJ HALF [2]\",\r\n    [this.BCJ_1]: \"BCJ1\",\r\n    [this.M_A]: 'A - 2pc 8\" w/ JV',\r\n    [this.CH_8_PS]: '*add 8\" STICK',\r\n    [this.M_B]: \"B - 1pc BC w/ JV\",\r\n    [this.JV_4]: \"JAVA FULL [4]\",\r\n    [this.JV_2]: \"JAVA HALF [2]\",\r\n    [this.JV_1]: \"JAVA SOLO [1]\",\r\n    [this.FCH_8]: \"FCH8\",\r\n    [this.FCH_12]: \"FCH12\",\r\n    [this.FBC_4]: \"FBC4\",\r\n    [this.ATCHARA]: \"X-ATC\",\r\n    [this.BC_SAUCE]: \"X-BCS\",\r\n    [this.SPICED_VINEGAR]: \"X-SVN\",\r\n    [this.BASTING_SAUCE]: \"X-BTS\",\r\n    [this.CHILI_OIL]: \"X-DCO\",\r\n    [this.REPAER]: \"RP\",\r\n    [this.BAO]: \"BAO-B-Q\",\r\n    [this.PRT]: \"PARTY TRAY\",\r\n    [this.TOTAL]: \"TOTAL\",\r\n    [this.REMARKS]: \"NOTES\",\r\n    [this.TIME_SLOT]: \"TIME SLOT\",\r\n    [this.PARTNER_MERCHANT_ORDER_NO]: \"PARTNER MERCHANT ORDER #\",\r\n    [this.ORDER_VIA_PARTNER]: \"PARTNER MERCHANT\",\r\n    [this.ORDER_VIA_WEBSITE]: \"WEBSITE\",\r\n    [this.ACCOUNT_NUMBER]: \"RECEIVING ACCT\",\r\n    [this.QTY]: \"QTY\",\r\n    [this.DATE_PAYMENT]: \"DATE PAID\",\r\n    [this.MODE_PAYMENT]: \"MOP\",\r\n    [this.SOURCE]: \"SOURCE\",\r\n    [this.TOTAL_DUE]: \"AMOUNT DUE\",\r\n    [this.AMOUNT_PAID]: \"PAID AMT\",\r\n    [this.OTHERS]: \"OTHERS / DEDUCTION\",\r\n  }\r\n}\r\n/* (\r\n  <center>\r\n  <span>\r\n    OTHERS / <br />\r\n    DEDUCTIONS\r\n  </span>\r\n</center>\r\n),*/\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\PaginateCommands.js",["580","581","582","583","584","585","586"],"import db, {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  startAfter,\r\n  setDoc,\r\n} from \"./firebase\"\r\nimport { formatDateFromDatabase, formatDateDash } from \"Helpers/dateFormat\"\r\nimport { UNAVAILABLE } from \"Constants/errorCodes\"\r\nexport default class PaginateCommands {\r\n  static async getData(\r\n    collectionName,\r\n    customLimit = 150,\r\n    branch,\r\n    customSort = []\r\n  ) {\r\n    const ref = collection(db, collectionName)\r\n    if (branch) {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    } else {\r\n      const request = query(\r\n        ref,\r\n        orderBy(customSort[0], customSort[1]),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    }\r\n  }\r\n\r\n  static async getMoreData(\r\n    collectionName,\r\n    customLimit = 150,\r\n    lastVisible,\r\n    branch,\r\n    customSort = []\r\n  ) {\r\n    const ref = collection(db, collectionName)\r\n    if (branch) {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        startAfter(lastVisible),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    } else {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        startAfter(lastVisible),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\dateFormat.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\SettingsUserMasterfilePage.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsUserMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\RouteWithSubRoutes.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentById.js",["587"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentById(ServiceClass, id) {\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState({})\r\n  useEffect(() => {\r\n    if (id) {\r\n      loadData(id)\r\n    }\r\n  }, [id])\r\n  const loadData = async (id) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataById(id)\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  return [data, loadData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsRoleMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsDropdownMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\DropdownsClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsBranchMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\BranchClass.js",["588"],"import { ARRAY_OF_STRING_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport Base from \"Services/Base\"\r\n\r\nexport default class BranchClass {\r\n  static COLLECTION_NAME = \"branches\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.NO, \"asc\"]\r\n    )\r\n  }\r\n\r\n  static getDataByFieldName(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n  static _ID = \"_id\"\r\n  static BRANCH_ADDRESS = \"branchAddress\"\r\n  static BRANCH_NAME = \"branchName\"\r\n\r\n  static PROPERTIES = [this._ID, this.BRANCH_NAME, this.BRANCH_ADDRESS]\r\n\r\n  static LABELS = {\r\n    [this.BRANCH_ADDRESS]: \"Address\",\r\n    [this.BRANCH_NAME]: \"Branch\",\r\n  }\r\n  static TYPES = {\r\n    [this.BRANCH_ADDRESS]: STRING_TYPE,\r\n    [this.BRANCH_NAME]: STRING_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\hook.js",["589","590","591","592","593","594"],"import React, { useState, useEffect } from \"react\"\r\nimport { Space, Tag } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport { handleTitle, handleAlignment } from \"./helpers\"\r\nimport {\r\n  AMOUNT_TYPE,\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  DATE_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport { EditOutlined } from \"@ant-design/icons\"\r\nimport { arrayReplace, replaceArrayData } from \"Helpers/arrayFuntions\"\r\nimport { useHistory, useRouteMatch } from \"react-router\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nexport default function useTableHandler({\r\n  ServiceClass, // Class\r\n  hideColumns = [],\r\n  overideRender = {},\r\n  bySort, // boolean\r\n  customSort = [],\r\n  defaultColumnAlign = \"left\",\r\n  widths = {},\r\n  hasWidths = true,\r\n  defaultFontSize = \"12px\",\r\n  enableEdit = false,\r\n  enableFilter = false,\r\n  enableAdd = false,\r\n  defaultAddForm = true,\r\n  enableRowSelect = false,\r\n  rowSelection = () => {},\r\n  onCell = () => {},\r\n  useHook = useGetDocuments,\r\n  paginateRequest = false,\r\n  exposeData = () => {},\r\n  modifiedData,\r\n}) {\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const [collectionData, loadData] = useHook(ServiceClass, {\r\n    bySort,\r\n    customSort,\r\n  })\r\n\r\n  const [data, setData] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    handleColumns(collectionData)\r\n    setIsLoading(false)\r\n    setData(collectionData)\r\n  }, [collectionData])\r\n\r\n  useEffect(() => {\r\n    handleColumns(data)\r\n  }, [data])\r\n\r\n  // if modifiedData is trigger it will automatically update the state base on the new data save\r\n  useEffect(() => {\r\n    // const collectionIndex = data.findIndex(\r\n    //   (obj) => obj[ServiceClass._ID] === modifiedData[ServiceClass._ID]\r\n    // )\r\n    // if (collectionIndex >= 0) {\r\n    //   const updatedData = arrayReplace(data, collectionIndex, modifiedData)\r\n    //   setData(updatedData)\r\n    // }\r\n    // handleModified(modifiedData)\r\n    if (Object.keys(modifiedData).length > 0) {\r\n      loadData(modifiedData)\r\n    }\r\n  }, [modifiedData])\r\n\r\n  const handleColumns = (data) => {\r\n    const _columns = []\r\n    if (typeof ServiceClass?.PROPERTIES === \"undefined\") {\r\n      const properties = data.length > 0 ? Object.keys(data[0]) : []\r\n      for (const key of properties) {\r\n        if (!hideColumns.includes(key)) {\r\n          const columnObj = {\r\n            title: handleTitle(ServiceClass, key),\r\n            key,\r\n            dataIndex: key,\r\n            align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n            ellipsis: {\r\n              showTitle: false,\r\n            },\r\n            onCell,\r\n            render: (value, record) => {\r\n              return handleTypeRender({ value, record }, key)\r\n            },\r\n          }\r\n          if (hasWidths) {\r\n            columnObj.width =\r\n              typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n          }\r\n          _columns.push({ ...columnObj })\r\n        }\r\n      }\r\n      if (enableEdit) {\r\n        _columns.push({\r\n          title: \"\",\r\n          key: \"action\",\r\n          dataIndex: \"action\",\r\n          align: \"right\",\r\n          onCell,\r\n          render: (data, record) => {\r\n            return (\r\n              <MainButton\r\n                type=\"default\"\r\n                shape=\"circle\"\r\n                Icon={<EditOutlined />}\r\n                onClick={() =>\r\n                  history.push(\r\n                    `${path}/modified?id=${record[ServiceClass._ID]}`\r\n                  )\r\n                }\r\n                s\r\n              />\r\n            )\r\n          },\r\n        })\r\n      }\r\n      setColumns(_columns)\r\n      return\r\n    }\r\n\r\n    for (const key of ServiceClass.PROPERTIES) {\r\n      if (!hideColumns.includes(key)) {\r\n        const columnObj = {\r\n          title: handleTitle(ServiceClass, key),\r\n          key,\r\n          dataIndex: key,\r\n          align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n          ellipsis: {\r\n            showTitle: false,\r\n          },\r\n          onCell,\r\n          render: (value, record) => {\r\n            return handleTypeRender({ value, record }, key)\r\n          },\r\n        }\r\n        if (hasWidths) {\r\n          columnObj.width =\r\n            typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n        }\r\n        _columns.push({ ...columnObj })\r\n      }\r\n    }\r\n    if (enableEdit) {\r\n      _columns.push({\r\n        title: \"\",\r\n        key: \"action\",\r\n        dataIndex: \"action\",\r\n        align: \"right\",\r\n        onCell,\r\n        render: (data, record) => {\r\n          return (\r\n            <MainButton\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              Icon={<EditOutlined />}\r\n              onClick={() =>\r\n                history.push(`${path}/modified?id=${record[ServiceClass._ID]}`)\r\n              }\r\n            />\r\n          )\r\n        },\r\n      })\r\n    }\r\n    setColumns(_columns)\r\n  }\r\n\r\n  const handleTypeRender = ({ value, record }, key) => {\r\n    if (typeof overideRender[key] !== \"undefined\") {\r\n      return overideRender[key](value, record)\r\n    }\r\n\r\n    if (typeof ServiceClass.TYPES === \"undefined\") {\r\n      if (typeof value === \"object\") {\r\n        return \"Object without types\"\r\n      }\r\n      return value\r\n    }\r\n\r\n    let result = value\r\n    switch (ServiceClass.TYPES[key]) {\r\n      case STRING_TYPE:\r\n        result = value\r\n        break\r\n      case ARRAY_OF_OBJECT_TYPE:\r\n        const renderObj =\r\n          typeof ServiceClass.OBJECTS === \"undefined\" ? (\r\n            \"Object Undefined\"\r\n          ) : (\r\n            <Space>\r\n              {value.map((valueObj) => {\r\n                const dataObj =\r\n                  typeof ServiceClass.OBJECTS[key] === \"undefined\"\r\n                    ? \"undefined title\"\r\n                    : valueObj[ServiceClass.OBJECTS[key].title]\r\n                return (\r\n                  <Tag style={{ cursor: \"pointer\" }} color=\"cyan\" wrap>\r\n                    {dataObj}\r\n                  </Tag>\r\n                )\r\n              })}\r\n            </Space>\r\n          )\r\n        result = renderObj\r\n        break\r\n      case ARRAY_OF_STRING_TYPE:\r\n        result = (\r\n          <Space wrap>\r\n            {value.map((valueKey) => {\r\n              return <Tag color=\"cyan\">{valueKey}</Tag>\r\n            })}\r\n          </Space>\r\n        )\r\n        break\r\n      case AMOUNT_TYPE:\r\n        result = thousandsSeparators(Number(value).toFixed(2))\r\n        break\r\n      case DATE_TYPE:\r\n        const formattedDate = formatDateFromDatabase(value)\r\n        result = formatDateDash(formattedDate)\r\n        break\r\n      case BOOLEAN_TYPE:\r\n        result = value ? (\r\n          <span style={{ color: \"green\" }}>Active</span>\r\n        ) : (\r\n          <span style={{ color: \"red\" }}>Inactive</span>\r\n        )\r\n        break\r\n    }\r\n    return <div style={{ fontSize: defaultFontSize }}>{result}</div>\r\n  }\r\n\r\n  const handleModified = (data) => {\r\n    loadData(data)\r\n  }\r\n  return {\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableFilter,\r\n    enableEdit,\r\n    enableRowSelect,\r\n    rowSelection,\r\n    enableAdd,\r\n    defaultAddForm,\r\n    setIsLoading,\r\n    isLoading,\r\n    ServiceClass,\r\n    handleModified,\r\n    paginateRequest,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\collectionData.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sumArray.js",["595","596","597"],"import thousandsSeparators from \"./formatNumber\"\r\n\r\nexport default function (array, field) {\r\n  // Getting sum of numbers\r\n  if (array.length > 0) {\r\n    if (field) {\r\n      const sum = array.reduce(function (a = 0, b) {\r\n        let fieldNumber = typeof b[field] !== \"undefined\" ? b[field] : 0\r\n        return Number(a) + Number(fieldNumber)\r\n      }, 0)\r\n      return sum\r\n    }\r\n    const sum = array.reduce(function (a, b) {\r\n      return Number(a) + Number(b)\r\n    }, 0)\r\n    return sum\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const sumArrayDatas = (array, index) => {\r\n  if (array.length > 0) {\r\n    const sum = array.reduce(function (a = 0, b) {\r\n      if (typeof b[index] === \"number\") {\r\n        return parseInt(a) + parseInt(b[index])\r\n      }\r\n      if (b[index]) {\r\n        if (!isNaN(b[index])) {\r\n          return parseInt(a) + parseInt(b[index])\r\n        } else {\r\n          return parseInt(a) + 0\r\n        }\r\n      } else {\r\n        return parseInt(a) + 0\r\n      }\r\n    }, 0)\r\n    return sum\r\n  }\r\n  return 0\r\n}\r\n\r\n// to group the same name of value in an object\r\nexport const sumArrayOfObjectsGrouping = (data, field1, field2) => {\r\n  const newDataByGroup = []\r\n  data.forEach((obj) => {\r\n    let newDataByGroupIndex = 0\r\n\r\n    // check first if data already exist\r\n    const dataExist = newDataByGroup.find((d, index2) => {\r\n      if (typeof d[field1] !== \"undefined\") {\r\n        if (d[field1] === obj[field1]) {\r\n          newDataByGroupIndex = index2\r\n        }\r\n        return d[field1] === obj[field1]\r\n      }\r\n    })\r\n\r\n    if (dataExist) {\r\n      const number1 = Number(dataExist[field2])\r\n      const number2 = Number(obj[field2])\r\n      const sumNumber = number1 + number2\r\n      const renewedData = {\r\n        // ...obj,\r\n        // [field2]: sumNumber.toFixed(2),\r\n        [field1]: obj[field1],\r\n        [field2]: sumNumber.toFixed(2),\r\n      }\r\n      newDataByGroup.splice(newDataByGroupIndex, 1, renewedData)\r\n    } else {\r\n      const number = Number(obj[field2])\r\n      newDataByGroup.push({\r\n        // ...obj,\r\n        // [field2]: number.toFixed(2),\r\n        [field1]: obj[field1],\r\n        [field2]: number.toFixed(2),\r\n      })\r\n    }\r\n  })\r\n  return newDataByGroup\r\n}\r\n\r\nexport const sumNumbers = (array) => {\r\n  return array.reduce((a, b) => Number(a) + Number(b), 0)\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\formatNumber.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\arrayFuntions.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\index.js",["598","599","600","601","602"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport {\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport EditableTagGroup from \"../EditableTagGroup\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport useModifiedCount from \"./useModifiedCount\"\r\nimport CustomPopConfirm from \"Components/Commons/CustomPopConfirm\"\r\nimport StringField from \"./StringField\"\r\nimport StringFieldArray from \"./StringFieldArray\"\r\nimport BooleanField from \"./BooleanField\"\r\nimport ObjectFieldArray from \"./ObjectFieldArray\"\r\nfunction FormHandler({ ServiceClass, back, formSave = () => {} }) {\r\n  const query = useQuery()\r\n  const id = query.get(\"id\")\r\n  const [collectionData] = useGetDocumentById(ServiceClass, id)\r\n  const [properties, setProperties] = useState([])\r\n  const [modifiedData, setModifiedData] = useState({})\r\n  useEffect(() => {\r\n    if (ServiceClass.PROPERTIES.length > 0) {\r\n      const newProperties = ServiceClass.PROPERTIES.filter(\r\n        (field) => field !== \"_id\"\r\n      )\r\n      setProperties(newProperties)\r\n    }\r\n  }, [ServiceClass])\r\n\r\n  const handleModification = (value, name) => {\r\n    const _modifiedData = { ...modifiedData }\r\n    _modifiedData[name] = value\r\n    setModifiedData({ ..._modifiedData })\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    const dataToBeSaved = { ...modifiedData }\r\n    // remove if field is not included in the properties of a class\r\n    for (const key in dataToBeSaved) {\r\n      if (!properties.includes(key)) {\r\n        delete dataToBeSaved[key]\r\n      }\r\n    }\r\n\r\n    await ServiceClass.updateDataById(id, dataToBeSaved)\r\n    formSave({ ...collectionData, ...dataToBeSaved, [ServiceClass._ID]: id })\r\n    back()\r\n  }\r\n  return (\r\n    <>\r\n      {Object.keys(collectionData).length > 0 && (\r\n        <StyledContainer>\r\n          <Header back={back} modifiedData={modifiedData} />\r\n          <StyledFormContainer>\r\n            <StyledForm direction=\"vertical\">\r\n              {properties.map((name) => {\r\n                switch (ServiceClass.TYPES[name]) {\r\n                  case STRING_TYPE:\r\n                    return (\r\n                      <StringField\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case ARRAY_OF_STRING_TYPE:\r\n                    return (\r\n                      <StringFieldArray\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case ARRAY_OF_OBJECT_TYPE:\r\n                    return (\r\n                      <ObjectFieldArray\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case BOOLEAN_TYPE:\r\n                    return (\r\n                      <BooleanField\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                }\r\n                return (\r\n                  <StringField\r\n                    ServiceClass={ServiceClass}\r\n                    collectionData={collectionData}\r\n                    name={name}\r\n                    handleModification={handleModification}\r\n                  />\r\n                )\r\n              })}\r\n              <ActionButtons\r\n                modifiedData={modifiedData}\r\n                back={back}\r\n                handleSave={handleSave}\r\n              />\r\n            </StyledForm>\r\n          </StyledFormContainer>\r\n        </StyledContainer>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst Header = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledHeader>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{ Icon: <ArrowLeftOutlined />, shape: \"circle\" }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      Form Data\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nconst ActionButtons = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledActionContainer>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{\r\n          label: \"Cancel\",\r\n          danger: true,\r\n          disabled: modifiedCount > 0 ? false : true,\r\n        }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount} // count is used for notification discard Changes\r\n      />\r\n      <MainButton\r\n        label=\"Save\"\r\n        disabled={modifiedCount > 0 ? false : true}\r\n        onClick={props.handleSave}\r\n      />\r\n    </StyledActionContainer>\r\n  )\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default FormHandler\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\EditableTagGroup\\index.js",["603","604","605"],"import { Input, message, Space, Tag } from \"antd\"\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport styled from \"styled-components\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\n\r\nfunction EditableTag({\r\n  tags = [],\r\n  exposeData = () => {},\r\n  setIsTouched = () => {},\r\n  dropdowns = [],\r\n}) {\r\n  const inputRef = useRef()\r\n  const editInputRef = useRef()\r\n  const [newTags, setNewTags] = useState([])\r\n  const [editableIndex, setEditableIndex] = useState(null)\r\n  const [visibleInput, setVisibleInput] = useState(false)\r\n  useEffect(() => {\r\n    if (tags.length > 0) {\r\n      mergeDuplicates(tags)\r\n    }\r\n  }, [tags])\r\n\r\n  useEffect(() => {\r\n    inputRef?.current?.focus()\r\n  }, [visibleInput])\r\n\r\n  useEffect(() => {\r\n    if (editableIndex) {\r\n      editInputRef?.current?.focus()\r\n    }\r\n  }, [editableIndex])\r\n\r\n  useEffect(() => {\r\n    exposeData(newTags)\r\n  }, [newTags])\r\n\r\n  const mergeDuplicates = (arrayOfStrings) => {\r\n    const newArrayOfStrings = []\r\n    for (const value of arrayOfStrings) {\r\n      if (!newArrayOfStrings.includes(value)) {\r\n        newArrayOfStrings.push(value)\r\n      }\r\n    }\r\n    setNewTags(newArrayOfStrings)\r\n  }\r\n\r\n  const addTag = (value) => {\r\n    if (typeof value === \"object\") {\r\n      setVisibleInput(false)\r\n      setIsTouched(true)\r\n      return\r\n    }\r\n    if (value.trim() !== \"\") {\r\n      const _tags = [...newTags]\r\n      _tags.push(value)\r\n      mergeDuplicates(_tags)\r\n      setIsTouched(true)\r\n    }\r\n    setVisibleInput(false)\r\n  }\r\n\r\n  const removeTag = (e, value) => {\r\n    e.preventDefault()\r\n    let _tags = [...newTags.filter((tag) => tag !== value)]\r\n    setNewTags(_tags)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const editTag = (value, index) => {\r\n    if (newTags.includes(value)) {\r\n      message.warning(`${value} already exist`)\r\n      return\r\n    }\r\n    let _tags = [...newTags]\r\n    _tags[index] = value\r\n    setNewTags(_tags)\r\n    setIsTouched(true)\r\n  }\r\n  return (\r\n    <Space wrap>\r\n      {newTags.map((tag, index) => {\r\n        return index === editableIndex ? (\r\n          <RenderEditField\r\n            dropdowns={dropdowns}\r\n            tag={tag}\r\n            index={index}\r\n            editTag={editTag}\r\n            setEditableIndex={setEditableIndex}\r\n            editInputRef={editInputRef}\r\n          />\r\n        ) : (\r\n          <Tag closable onClose={(e) => removeTag(e, tag)}>\r\n            <span onDoubleClick={() => setEditableIndex(index)}>{tag}</span>\r\n          </Tag>\r\n        )\r\n      })}\r\n      {visibleInput ? (\r\n        <RenderAddField\r\n          dropdowns={dropdowns}\r\n          addTag={addTag}\r\n          inputRef={inputRef}\r\n        />\r\n      ) : (\r\n        <StyledAddButton onClick={() => setVisibleInput(true)} color=\"cyan\">\r\n          <PlusOutlined /> New\r\n        </StyledAddButton>\r\n      )}\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst RenderEditField = (props) => {\r\n  if (props.dropdowns.length > 0) {\r\n    return (\r\n      <AutoSelect\r\n        value={props.tag}\r\n        options={[...props.dropdowns]}\r\n        onChange={(value) => {\r\n          props.editTag(value, props.index)\r\n          props.setEditableIndex(null)\r\n        }}\r\n        onBlur={() => props.setEditableIndex(null)}\r\n        onPressEnter={() => props.setEditableIndex(null)}\r\n        ref={props.editInputRef}\r\n      />\r\n    )\r\n  } else {\r\n    return (\r\n      <Input\r\n        value={props.tag}\r\n        ref={props.editInputRef}\r\n        onChange={(e) => {\r\n          props.editTag(e.target.value, props.index)\r\n        }}\r\n        onBlur={() => props.setEditableIndex(null)}\r\n        onPressEnter={() => props.setEditableIndex(null)}\r\n        ref={props.editInputRef}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst RenderAddField = (props) => {\r\n  if (props.dropdowns.length > 0) {\r\n    return (\r\n      <AutoSelect\r\n        options={[...props.dropdowns]}\r\n        onChange={(value) => {\r\n          props.addTag(value)\r\n        }}\r\n        onBlur={(value) => props.addTag(value)}\r\n        onPressEnter={(value) => props.addTag(value)}\r\n        ref={props.inputRef}\r\n      />\r\n    )\r\n  } else {\r\n    return (\r\n      <Input\r\n        onPressEnter={(e) => props.addTag(e.target.value)}\r\n        onBlur={(e) => props.addTag(e.target.value)}\r\n        size=\"small\"\r\n        ref={props.inputRef}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst StyledAddButton = styled(Tag)`\r\n  cursor: pointer;\r\n`\r\n\r\nexport default EditableTag\r\n\r\n// <AutoSelect\r\n//   value={tag}\r\n//   options={[\"Dashboard\", \"Ronac\"]}\r\n//   onChange={(value) => {\r\n//     editTag(value, index)\r\n//     setEditableIndex(null)\r\n//   }}\r\n//   onBlur={() => setEditableIndex(null)}\r\n//   onPressEnter={() => setEditableIndex(null)}\r\n// />\r\n// <Input\r\n//   value={tag}\r\n//   ref={editInputRef}\r\n//   onChange={(e) => {\r\n//     editTag(e.target.value, index)\r\n//   }}\r\n//   onBlur={() => setEditableIndex(null)}\r\n//   onPressEnter={() => setEditableIndex(null)}\r\n// />\r\n\r\n// <AutoSelect\r\n//   options={[\"Libis\", \"Ronac\"]}\r\n//   onChange={(value) => addTag(value)}\r\n//   onPressEnter={(value) => addTag(value)}\r\n//   onBlur={(value) => addTag(value)}\r\n// />\r\n// <Input\r\n//   onPressEnter={(e) => addTag(e.target.value)}\r\n//   onBlur={(e) => addTag(e.target.value)}\r\n//   size=\"small\"\r\n//   ref={inputRef}\r\n// />\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useQuery.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\useModifiedCount.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomPopConfirm.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringField.js",["606","607"],"import CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\nfunction StringField({ ServiceClass, name, ...rest }) {\r\n  const [value, setValue] = useState(\"\")\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  useEffect(() => {\r\n    if (rest?.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest?.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <CustomInput\r\n        placeholder={ServiceClass.LABELS[name]}\r\n        value={value}\r\n        onChange={handleChange}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StringField\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringFieldArray.js",["608","609"],"import { Space } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport EditableTag from \"../EditableTagGroup\"\r\n\r\nfunction StringFieldArray({ ServiceClass, name, ...rest }) {\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [tags, setTags] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (isTouched === true) {\r\n      rest.handleModification(tags, name)\r\n    }\r\n  }, [isTouched, tags])\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [ServiceClass])\r\n\r\n  const loadDropdowns = async () => {\r\n    if (typeof ServiceClass.getDropdowns === \"undefined\") return\r\n    const _dropdowns = await ServiceClass.getDropdowns()\r\n    if (typeof _dropdowns[name] !== \"undefined\") {\r\n      setDropdowns(_dropdowns[name])\r\n    }\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\">\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <EditableTag\r\n        setIsTouched={setIsTouched}\r\n        tags={rest.collectionData[name]}\r\n        exposeData={(data) => setTags(data)}\r\n        dropdowns={dropdowns} //if field contains data dropdowns when modifying tags, The element should be select if contains a dropdown otherwise input if not.\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default StringFieldArray\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\BooleanField.js",["610","611"],"import { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\nfunction BooleanField({ ServiceClass, name, ...rest }) {\r\n  const [value, setValue] = useState(\"\")\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  useEffect(() => {\r\n    if (rest.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  const handleChange = (value) => {\r\n    setValue(value)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  return (\r\n    <Space direction=\"vertical\">\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <Space>\r\n        <Switch checked={value} onChange={handleChange} />\r\n        {value ? \"Active\" : \"Inactive\"}\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default BooleanField\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\FormHandlerAdd.js",["612","613","614","615","616","617","618"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport {\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport EditableTagGroup from \"../EditableTagGroup\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport useModifiedCount from \"./useModifiedCount\"\r\nimport CustomPopConfirm from \"Components/Commons/CustomPopConfirm\"\r\nimport StringField from \"./StringField\"\r\nimport StringFieldArray from \"./StringFieldArray\"\r\nimport BooleanField from \"./BooleanField\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nfunction FormHandlerAdd({ ServiceClass, back, formSave = () => {} }) {\r\n  const [defaultData, setDefaultData] = useState()\r\n  const [properties, setProperties] = useState([])\r\n  const [modifiedData, setModifiedData] = useState({})\r\n  useEffect(() => {\r\n    if (ServiceClass.PROPERTIES.length > 0) {\r\n      const newProperties = ServiceClass.PROPERTIES.filter(\r\n        (field) => field !== \"_id\"\r\n      )\r\n\r\n      if (ServiceClass.COLLECTION_NAME === UsersClass.COLLECTION_NAME) {\r\n        // includes the _id property if it is user class\r\n        newProperties.splice(0, 0, ServiceClass._ID)\r\n      }\r\n      setProperties(newProperties)\r\n\r\n      const _defaultData = {} // set some default value to prevent error when the fields do not have an input\r\n      for (const key of newProperties) {\r\n        switch (ServiceClass.TYPES[key]) {\r\n          case STRING_TYPE:\r\n            _defaultData[key] = \"\"\r\n            break\r\n          case ARRAY_OF_STRING_TYPE:\r\n            _defaultData[key] = []\r\n            break\r\n          case ARRAY_OF_OBJECT_TYPE:\r\n            _defaultData[key] = []\r\n            break\r\n          case BOOLEAN_TYPE:\r\n            _defaultData[key] = true\r\n            break\r\n          default:\r\n            _defaultData[key] = \"\"\r\n        }\r\n      }\r\n      setDefaultData(_defaultData)\r\n    }\r\n  }, [ServiceClass])\r\n\r\n  const handleModification = (value, name) => {\r\n    const _modifiedData = { ...modifiedData }\r\n    _modifiedData[name] = value\r\n    setModifiedData(_modifiedData)\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    if (ServiceClass.COLLECTION_NAME === UsersClass.COLLECTION_NAME) {\r\n      await ServiceClass.setData(modifiedData[ServiceClass._ID], {\r\n        ...defaultData,\r\n        ...modifiedData,\r\n      })\r\n      back()\r\n      return\r\n    }\r\n    // if the collection is not equal to user this function will be trigger\r\n    await ServiceClass.addData({\r\n      ...defaultData,\r\n      ...modifiedData,\r\n    })\r\n    back()\r\n  }\r\n  return (\r\n    <>\r\n      <StyledContainer>\r\n        <Header back={back} modifiedData={modifiedData} />\r\n        <StyledFormContainer>\r\n          <StyledForm direction=\"vertical\">\r\n            {properties.map((name) => {\r\n              switch (ServiceClass.TYPES[name]) {\r\n                case STRING_TYPE:\r\n                  return (\r\n                    <StringField\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n                case ARRAY_OF_STRING_TYPE:\r\n                  return (\r\n                    <StringFieldArray\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n                case ARRAY_OF_OBJECT_TYPE:\r\n                  return <div>I am array of object</div>\r\n                case BOOLEAN_TYPE:\r\n                  return (\r\n                    <BooleanField\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n              }\r\n              return (\r\n                <StringField\r\n                  ServiceClass={ServiceClass}\r\n                  collectionData={defaultData}\r\n                  name={name}\r\n                  handleModification={handleModification}\r\n                />\r\n              )\r\n            })}\r\n            <ActionButtons\r\n              modifiedData={modifiedData}\r\n              back={back}\r\n              handleSave={handleSave}\r\n            />\r\n          </StyledForm>\r\n        </StyledFormContainer>\r\n      </StyledContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Header = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledHeader>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{ Icon: <ArrowLeftOutlined />, shape: \"circle\" }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      Form Data\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nconst ActionButtons = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledActionContainer>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{\r\n          label: \"Cancel\",\r\n          danger: true,\r\n          disabled: modifiedCount > 0 ? false : true,\r\n        }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      <MainButton\r\n        label=\"Save\"\r\n        disabled={modifiedCount > 0 ? false : true}\r\n        onClick={props.handleSave}\r\n      />\r\n    </StyledActionContainer>\r\n  )\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default FormHandlerAdd\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\moduleList.js",["619"],"// import { menuData } from \"Components/Features/Sidenav/hook\"\r\n\r\nimport menuData from \"Components/Features/Sidenav/menuData\"\r\n\r\nexport default function () {\r\n  const menuList = []\r\n  for (const obj of menuData([])) {\r\n    menuList.push(obj.title)\r\n    for (const subObj of obj.subMenu) {\r\n      menuList.push(subObj.title)\r\n    }\r\n  }\r\n  return menuList\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\menuData.js",["620"],"import {\r\n  BRANCH_MASTERFILE,\r\n  CUSTOMER_REPORTS,\r\n  DAILY_REPORTS,\r\n  DASHBOARD,\r\n  DIRECT_AND_THIRD_PARTY,\r\n  DISCOUNT_OTHERS,\r\n  DROPDOWN_MASTERFILE,\r\n  GRILL_RESERVATION,\r\n  INCIDENT_REPORTS,\r\n  INVENTORY,\r\n  LABEL,\r\n  MASTER_DATA,\r\n  PAYMENT_TRANSACTION,\r\n  PRODUCTS_MASTERFILE,\r\n  REPORTS,\r\n  ROLES_MASTERFILE,\r\n  TRANSACTION,\r\n  USER_MASTERFILE,\r\n} from \"Constants/pathNames\"\r\nimport React from \"react\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport {\r\n  DashboardOutlined,\r\n  SettingOutlined,\r\n  FolderOutlined,\r\n} from \"@ant-design/icons\"\r\n\r\nexport default function (modules) {\r\n  return [\r\n    {\r\n      title: LABEL[DASHBOARD],\r\n      key: DASHBOARD,\r\n      dataKey: DASHBOARD,\r\n      Icon: <DashboardOutlined />,\r\n      active: true,\r\n      display: modules.includes(LABEL[DASHBOARD]),\r\n      component: MainPage,\r\n      path: \"/dashboard\",\r\n      subMenu: [\r\n        {\r\n          title: LABEL[GRILL_RESERVATION],\r\n          key: GRILL_RESERVATION,\r\n          dataKey: GRILL_RESERVATION,\r\n          active: true,\r\n          path: \"/dashboard/grillReservation\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[GRILL_RESERVATION]),\r\n        },\r\n        {\r\n          title: LABEL[PAYMENT_TRANSACTION],\r\n          key: PAYMENT_TRANSACTION,\r\n          dataKey: PAYMENT_TRANSACTION,\r\n          active: false,\r\n          path: \"/dashboard/paymentTransaction\",\r\n          component: DashboardTransactionPage,\r\n          display: modules.includes(LABEL[PAYMENT_TRANSACTION]),\r\n        },\r\n        {\r\n          title: LABEL[INVENTORY],\r\n          key: INVENTORY,\r\n          dataKey: INVENTORY,\r\n          active: false,\r\n          path: \"/dashboard/inventory\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[INVENTORY]),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: LABEL[REPORTS],\r\n      key: REPORTS,\r\n      dataKey: REPORTS,\r\n      Icon: <FolderOutlined />,\r\n      active: false,\r\n      flex: 1,\r\n      display: modules.includes(LABEL[REPORTS]),\r\n      path: `/${REPORTS}`,\r\n      component: MainPage,\r\n      subMenu: [\r\n        {\r\n          title: LABEL[TRANSACTION],\r\n          key: TRANSACTION,\r\n          dataKey: TRANSACTION,\r\n          active: false,\r\n          path: \"/reports/transaction\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[TRANSACTION]),\r\n        },\r\n        {\r\n          title: LABEL[DIRECT_AND_THIRD_PARTY],\r\n          key: DIRECT_AND_THIRD_PARTY,\r\n          dataKey: DIRECT_AND_THIRD_PARTY,\r\n          active: false,\r\n          path: \"/reports/directAndThirdParty\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DIRECT_AND_THIRD_PARTY]),\r\n        },\r\n        {\r\n          title: LABEL[INCIDENT_REPORTS],\r\n          key: INCIDENT_REPORTS,\r\n          dataKey: INCIDENT_REPORTS,\r\n          active: false,\r\n          path: \"/reports/incidentReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[INCIDENT_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[DAILY_REPORTS],\r\n          key: DAILY_REPORTS,\r\n          dataKey: DAILY_REPORTS,\r\n          active: false,\r\n          path: \"/reports/dailyReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DAILY_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[CUSTOMER_REPORTS],\r\n          key: CUSTOMER_REPORTS,\r\n          dataKey: CUSTOMER_REPORTS,\r\n          active: false,\r\n          path: \"/reports/customerReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[CUSTOMER_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[DISCOUNT_OTHERS],\r\n          key: DISCOUNT_OTHERS,\r\n          dataKey: DISCOUNT_OTHERS,\r\n          active: false,\r\n          path: \"/reports/analyticsDiscounts\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DISCOUNT_OTHERS]),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: LABEL[MASTER_DATA],\r\n      key: MASTER_DATA,\r\n      dataKey: MASTER_DATA,\r\n      Icon: <SettingOutlined />,\r\n      active: false,\r\n      display: modules.includes(LABEL[MASTER_DATA]),\r\n      path: `/${MASTER_DATA}`,\r\n      component: MainPage,\r\n      subMenu: [\r\n        {\r\n          title: LABEL[USER_MASTERFILE],\r\n          key: USER_MASTERFILE,\r\n          dataKey: USER_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/userMasterFile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[USER_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[BRANCH_MASTERFILE],\r\n          key: BRANCH_MASTERFILE,\r\n          dataKey: BRANCH_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/branchMasterFile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[BRANCH_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[DROPDOWN_MASTERFILE],\r\n          key: DROPDOWN_MASTERFILE,\r\n          dataKey: DROPDOWN_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/dropdownMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DROPDOWN_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[ROLES_MASTERFILE],\r\n          key: ROLES_MASTERFILE,\r\n          dataKey: ROLES_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/rolesMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[ROLES_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[PRODUCTS_MASTERFILE],\r\n          key: PRODUCTS_MASTERFILE,\r\n          dataKey: PRODUCTS_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/productMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[PRODUCTS_MASTERFILE]),\r\n        },\r\n      ],\r\n    },\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderForm.js",["621","622","623","624","625","626","627","628","629","630","631","632"],"import { Card, Col, Row, Space, Tabs, Table } from \"antd\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport React, { useEffect, useState, useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport { ArrowLeftOutlined, SaveOutlined } from \"@ant-design/icons\"\r\nimport { Flex } from \"../Styles\"\r\nimport OrderDetails from \"./OrderDetails\"\r\nimport ProductPurchased from \"./ProductPurchased\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nfunction OrderForm({ back, formType, modifiedData = () => {} }) {\r\n  const [orderData, loadOrderData] = useGetDocumentById(SchedulersClass)\r\n  const query = useQuery()\r\n  const id = query.get(\"id\")\r\n  const orderNoHeader = orderData?.orderNo ? `(${orderData?.orderNo})` : \"\"\r\n  const tabs = [\r\n    SchedulersClass.ORDER_VIA,\r\n    SchedulersClass.ORDER_VIA_PARTNER,\r\n    SchedulersClass.ORDER_VIA_WEBSITE,\r\n  ]\r\n  const [channel, setChannel] = useState(tabs[0])\r\n  const [sched, setSched] = useState({})\r\n\r\n  const handleTab = (value) => {\r\n    setChannel(value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      loadOrderData(id)\r\n      setSched({ [SchedulersClass._ID]: id })\r\n    }\r\n  }, [id])\r\n\r\n  useEffect(() => {\r\n    if (orderData) {\r\n      if (orderData[tabs[0]]) {\r\n        setChannel(tabs[0])\r\n      }\r\n      if (orderData[tabs[1]]) {\r\n        setChannel(tabs[1])\r\n      }\r\n      if (orderData[tabs[2]]) {\r\n        setChannel(tabs[2])\r\n      }\r\n    }\r\n  }, [orderData])\r\n\r\n  const handleSave = async () => {\r\n    if (formType === \"modified\") {\r\n      const data = { ...sched }\r\n      sched[SchedulersClass.SUBJECT] = data[SchedulersClass.CUSTOMER]\r\n      const result = await SchedulersClass.updateDataById(id, data)\r\n      modifiedData(data)\r\n      back()\r\n    }\r\n  }\r\n  if (formType === \"modified\" && Object.keys(orderData).length === 0) {\r\n    return (\r\n      <StyledContainer>\r\n        <URLNotFound />\r\n      </StyledContainer>\r\n    )\r\n  } else {\r\n    return (\r\n      <StyledContainer>\r\n        <Space\r\n          style={{\r\n            width: \"100%\",\r\n            justifyContent: \"space-between\",\r\n            padding: \".5rem\",\r\n          }}\r\n          wrap\r\n        >\r\n          <Space>\r\n            <MainButton\r\n              shape=\"circle\"\r\n              Icon={<ArrowLeftOutlined />}\r\n              onClick={back}\r\n            />\r\n            {`Order Form ${orderNoHeader}`}\r\n          </Space>\r\n\r\n          <Space wrap>\r\n            {tabs.map((key) => {\r\n              return (\r\n                <MainButton\r\n                  label={SchedulersClass.LABELS[key]}\r\n                  type={channel === key ? \"primary\" : \"default\"}\r\n                  shape=\"square\"\r\n                  onClick={() => handleTab(key)}\r\n                />\r\n              )\r\n            })}\r\n          </Space>\r\n        </Space>\r\n\r\n        <Row gutter={[16, 16]}>\r\n          <Col xs={24} sm={24} md={24} xl={6} lg={12}>\r\n            <OrderDetails\r\n              channel={channel}\r\n              modifiedData={(orderDetailsData) => {\r\n                setSched({ ...sched, ...orderDetailsData, _id: id })\r\n              }}\r\n              orderData={orderData}\r\n              tabs={tabs}\r\n            />\r\n          </Col>\r\n\r\n          <Col xs={24} sm={24} md={24} lg={12} xl={6}>\r\n            <ProductPurchased\r\n              modifiedData={(products) => {\r\n                setSched({ ...sched, ...products, _id: id })\r\n              }}\r\n              orderData={orderData}\r\n            />\r\n            <br />\r\n            <Card title=\"Discounts and Others\">\r\n              <Space\r\n                style={{\r\n                  justifyContent: \"space-between\",\r\n                  width: \"100%\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <Space direction=\"vertical\">\r\n                  <CustomTitle\r\n                    typographyType=\"text\"\r\n                    label={Object.keys(orderData?.others || {}).map(\r\n                      (key) => key\r\n                    )}\r\n                    type=\"secondary\"\r\n                  />\r\n                  <CustomTitle\r\n                    typographyType=\"text\"\r\n                    label={Object.keys(orderData?.others || {}).map((key) =>\r\n                      thousandsSeparators(\r\n                        Number(orderData?.others[key]).toFixed(2)\r\n                      )\r\n                    )}\r\n                  />\r\n                </Space>\r\n                <ActionButton label=\"Less\" danger />\r\n              </Space>\r\n            </Card>\r\n            <br />\r\n            <Card title=\"Attachments\">\r\n              <ActionButton label=\"Upload\" danger />\r\n            </Card>\r\n          </Col>\r\n          <Col xs={24} sm={24} md={24} lg={24} xl={12}>\r\n            <Card\r\n              title=\"Payment Details\"\r\n              actions={[\r\n                <Due label=\"Balance Due\" value=\"0.00\" />,\r\n                <ActionButton label=\"Add Payment\" />,\r\n              ]}\r\n            >\r\n              <Table\r\n                size=\"small\"\r\n                scroll={{ x: \"calc(320px + 50%)\", y: \"50vh\" }}\r\n                pagination={false}\r\n                columns={[\r\n                  { title: \"MOP\", dataIndex: \"mop\" },\r\n                  { title: \"Source\", dataIndex: \"source\" },\r\n                  { title: \"Receiving Acct\", dataIndex: \"receivingAccount\" },\r\n                  { title: \"Amount Paid\", dataIndex: \"amountPaid\" },\r\n                  { title: \"Notes\", dataIndex: \"notes\" },\r\n                  { title: \"Date\", dataIndex: \"date\" },\r\n                ]}\r\n                dataSource={[]}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        {Object.keys(sched).length > 0 && (\r\n          <Space style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\r\n            <MainButton\r\n              label=\"Save\"\r\n              Icon={<SaveOutlined />}\r\n              size=\"large\"\r\n              onClick={handleSave}\r\n            />\r\n          </Space>\r\n        )}\r\n      </StyledContainer>\r\n    )\r\n  }\r\n}\r\n\r\nconst Due = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <span style={{ position: \"absolute\", fontSize: \"10px\" }}>\r\n        {props.label}\r\n      </span>\r\n      <span style={{ position: \"absolute\", top: \"1rem\", color: \"red\" }}>\r\n        {props.value}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ActionButton = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <MainButton label={props.label} type=\"default\" danger={props.danger} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StyledContainer = styled.div`\r\n  display: flex;\r\n  /* grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr; */\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default OrderForm\r\n// backgroundColor: \"#1890ff\"\r\n// backgroundColor: \"#1890ff\"\r\n// backgroundColor: \"#1890ff\"\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\usePaginate.js",["633","634","635"],"import React, { useState, useEffect, useContext } from \"react\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\n\r\n// this is default config = { bySort: true, customSort: [\"StartTime\": \"asc\" or \"desc\"]}\r\nfunction usePaginate(ServiceClass, config) {\r\n  const { setError, setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [lastVisible, setLastVisible] = useState(null)\r\n  const [dataSource, setDataSource] = useState([])\r\n  useEffect(() => {\r\n    if (lastVisible === null && user?.branchSelected) {\r\n      const branch = user?.branchSelected\r\n      loadData({}, branch)\r\n    }\r\n  }, [lastVisible, user])\r\n  const loadData = async (data = {}, branch, refresh = false) => {\r\n    if (Object.keys(data).length > 0) {\r\n      // this is for static data changes triggered from formHandler\r\n      const _dataIndex = dataSource.findIndex(\r\n        (d) => d[ServiceClass._ID] === data[ServiceClass._ID]\r\n      )\r\n      const newData = arrayReplace(dataSource, _dataIndex, {\r\n        ...dataSource[_dataIndex],\r\n        ...data,\r\n      })\r\n      setDataSource(newData)\r\n      return\r\n    }\r\n\r\n    setIsLoading(true)\r\n    if (lastVisible && refresh === false) {\r\n      const [_lastVisible, colData = []] =\r\n        await ServiceClass.getNextPaginatedData(\r\n          lastVisible,\r\n          user?.branchSelected\r\n        )\r\n      if (colData.length > 0) {\r\n        const newData = [...dataSource, ...colData]\r\n        setDataSource(newData)\r\n        setLastVisible(_lastVisible)\r\n      }\r\n      setIsLoading(false)\r\n    } else {\r\n      // this will be the first load of data\r\n      const [_lastVisible, colData] = await ServiceClass.getPaginatedData(\r\n        branch\r\n      )\r\n      setDataSource(colData)\r\n      setLastVisible(_lastVisible)\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // const modifiedData = async (id) => {\r\n  //   const dataSourceCopy = [...dataSource]\r\n  //   const dataIndex = dataSourceCopy.findIndex((row) => row._id === id)\r\n  //   const dataObj = await FirestoreCommands.getDataById(\"schedules\", id)\r\n  //   if (dataObj) {\r\n  //     dataSourceCopy[dataIndex] = { ...dataObj }\r\n  //   }\r\n  //   setDataSource(dataSourceCopy)\r\n  // }\r\n\r\n  // return { dataSource, loadData }\r\n  return [dataSource, loadData, lastVisible]\r\n}\r\n\r\nexport default usePaginate\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\hooks.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\Scheduler.js",["636","637","638","639","640"],"import React, { useState, useEffect, useContext } from \"react\"\r\nimport {\r\n  ScheduleComponent,\r\n  ViewDirective,\r\n  ViewsDirective,\r\n  Inject,\r\n  Week,\r\n  Month,\r\n  Agenda,\r\n  DragAndDrop,\r\n  Resize,\r\n  Day,\r\n  ResourcesDirective,\r\n  ResourceDirective,\r\n} from \"@syncfusion/ej2-react-schedule\"\r\nimport { DataManager, Predicate, Query } from \"@syncfusion/ej2-data\"\r\n// import db, { collection, onSnapshot, where, query } from \"Services/firebase\"\r\nimport {\r\n  collection,\r\n  getFirestore,\r\n  where,\r\n  query,\r\n  onSnapshot,\r\n} from \"firebase/firestore\"\r\nimport SchedulesClass from \"Services/Classes/SchedulesClass\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { Space, Tag } from \"antd\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport { producedProductListOfAllCodes } from \"Helpers/collectionData\"\r\n\r\nconst db = getFirestore()\r\nconst CellTemplate = (props) => {\r\n  return <span>{props?.status === \"CANCELLED\" ? \"VOID\" : props.Subject}</span>\r\n}\r\nfunction Scheduler({ handleNavigate, navigate }) {\r\n  const [productData, loadProductData] = useGetDocuments(ProductsClass)\r\n  const { setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [eventSettings, setEventSettings] = useState({\r\n    dataSource: [],\r\n    template: CellTemplate,\r\n    allowDeleting: false,\r\n    allowEditing: false,\r\n    allowAdding: false,\r\n  })\r\n\r\n  useEffect(() => {\r\n    loadProductData()\r\n    const productList = producedProductListOfAllCodes(productData)\r\n    if (navigate.currentView === \"Day\") return\r\n    if (!user.branchSelected) return\r\n    const _startTime = new Date(navigate?.dateRange[0].setHours(0, 0, 0, 0))\r\n    const _endTime = new Date(navigate?.dateRange[1].setHours(23, 59, 59, 59))\r\n    const req = query(\r\n      collection(db, SchedulesClass.COLLECTION_NAME),\r\n      where(SchedulesClass.BRANCH, \"==\", user?.branchSelected),\r\n      where(SchedulesClass.DATE_START, \">=\", _startTime),\r\n      where(SchedulesClass.DATE_START, \"<=\", _endTime)\r\n    )\r\n    setIsLoading(true)\r\n    const unsubscribe = onSnapshot(req, (snapshot) => {\r\n      const dataSource = [...eventSettings.dataSource]\r\n      snapshot.docChanges().forEach((change) => {\r\n        if (change.type === \"added\") {\r\n          const data = change.doc.data()\r\n          const productOrders = []\r\n          for (const value of productList) {\r\n            if (typeof data[value] !== \"undefined\") {\r\n              if (Number(data[value]) > 0) {\r\n                productOrders.push(`${value}: ${data[value]}`)\r\n              }\r\n            }\r\n          }\r\n          const dateStart = formatDateFromDatabase(\r\n            data[SchedulesClass.DATE_START]\r\n          )\r\n          const dateEnd = formatDateFromDatabase(data[SchedulesClass.DATE_END])\r\n          dataSource.push({\r\n            ...data,\r\n            [SchedulesClass.DATE_START]: dateStart,\r\n            [SchedulesClass.DATE_END]: dateEnd,\r\n            [SchedulesClass.SUBJECT]: productOrders.join(\", \"),\r\n          })\r\n        }\r\n        if (change.type === \"modified\") {\r\n          console.log(\"Modified city: \", change.doc.data())\r\n        }\r\n        if (change.type === \"removed\") {\r\n          console.log(\"Removed city: \", change.doc.data())\r\n        }\r\n      })\r\n\r\n      setIsLoading(false)\r\n      setEventSettings({\r\n        ...eventSettings,\r\n        dataSource,\r\n      })\r\n    })\r\n    return () => {\r\n      setEventSettings({\r\n        ...eventSettings,\r\n        dataSource: [],\r\n      })\r\n      unsubscribe()\r\n    }\r\n  }, [navigate?.dateRange, user])\r\n\r\n  const onEventRendered = (args) => {\r\n    const { element, data } = args\r\n    if (data[SchedulesClass.STATUS] === \"CANCELLED\") {\r\n      element.style.background = \"orange\"\r\n    } else {\r\n      element.style.background = \"transparent\"\r\n    }\r\n    element.style.color = \"#333\"\r\n  }\r\n  const HeaderTemplate = (props) => {\r\n    return (\r\n      <div\r\n        style={\r\n          props?.status === \"CANCELLED\"\r\n            ? { padding: \"1rem\" }\r\n            : { padding: \"1rem\", backgroundColor: \"#1890ff\" }\r\n        }\r\n      >\r\n        {props.status === \"CANCELLED\" ? (\r\n          <CustomTitle\r\n            label=\"VOID\"\r\n            typographyType=\"text\"\r\n            style={{ color: \"white\" }}\r\n          />\r\n        ) : (\r\n          <CustomTitle\r\n            label={props?.Subject}\r\n            typographyType=\"text\"\r\n            style={{\r\n              color: \"white\",\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const ContentTemplate = (props) => {\r\n    const productOrders = {}\r\n    const productList = producedProductListOfAllCodes(productData)\r\n    for (const value of productList) {\r\n      if (typeof props[value] !== \"undefined\") {\r\n        if (Number(props[value]) > 0) {\r\n          productOrders[value] = props[value]\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <>\r\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n          <Space style={{ justifyContent: \"space-between\", width: \"100%\" }}>\r\n            <Tag color=\"cyan\">\r\n              <CustomTitle\r\n                label=\"PRODUCT CODE\"\r\n                typographyType=\"text\"\r\n                styles={{ fontWeight: \"bold\", color: \"white\" }}\r\n              />\r\n            </Tag>\r\n            <Tag color=\"cyan\">\r\n              <CustomTitle\r\n                label=\"QTY\"\r\n                typographyType=\"text\"\r\n                styles={{ fontWeight: \"bold\", color: \"white\" }}\r\n              />\r\n            </Tag>\r\n          </Space>\r\n\r\n          {Object.keys(productOrders).map((key) => {\r\n            return (\r\n              <Space\r\n                style={{\r\n                  justifyContent: \"space-between\",\r\n                  width: \"100%\",\r\n                  padding: \".1rem 1rem\",\r\n                }}\r\n              >\r\n                <CustomTitle\r\n                  typographyType=\"text\"\r\n                  type=\"secondary\"\r\n                  label={key}\r\n                />\r\n                <CustomTitle typographyType=\"text\" label={productOrders[key]} />\r\n              </Space>\r\n            )\r\n          })}\r\n        </Space>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const FooterTemplate = (props) => {\r\n    return <div>Footer</div>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <CustomSchedule testing=\"nevermind\" /> */}\r\n      <ScheduleComponent\r\n        startHour=\"08:00\"\r\n        endHour=\"19:00\"\r\n        eventSettings={eventSettings}\r\n        views={[\r\n          {\r\n            option: \"Day\",\r\n            startHour: \"09:00\",\r\n            endHour: \"19:00\",\r\n            timeScale: { enable: true, slotCount: 3 },\r\n          },\r\n        ]}\r\n        navigating={handleNavigate}\r\n        height=\"100vh\"\r\n        width=\"100%\"\r\n        currentView={navigate?.currentView}\r\n        selectedDate={navigate?.selectedDate}\r\n        eventRendered={onEventRendered}\r\n        quickInfoTemplates={{\r\n          header: HeaderTemplate,\r\n          content: ContentTemplate,\r\n          footer: FooterTemplate,\r\n        }}\r\n      >\r\n        <ResourcesDirective>\r\n          <ResourceDirective\r\n            field=\"CalendarId\"\r\n            title=\"Calendars\"\r\n            name=\"Calendars\"\r\n            // dataSource={this.calendarCollections}\r\n            query={new Query().where(\"CalendarId\", \"equal\", 1)}\r\n            textField=\"CalendarText\"\r\n            idField=\"CalendarId\"\r\n            colorField=\"CalendarColor\"\r\n          ></ResourceDirective>\r\n        </ResourcesDirective>\r\n        <ViewsDirective>\r\n          <ViewDirective option=\"Day\" />\r\n          <ViewDirective option=\"Week\" />\r\n          <ViewDirective option=\"Month\" />\r\n          <ViewDirective option=\"Agenda\" />\r\n        </ViewsDirective>\r\n        <Inject services={[Day, Week, Month, Agenda]} />\r\n      </ScheduleComponent>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Scheduler\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\ObjectFieldArray.js",["641","642","643","644","645"],"import { Input, message, Space, Tag } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { AMOUNT_TYPE } from \"Constants/types\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\n\r\nfunction ObjectFieldArray({ ServiceClass, name, ...rest }) {\r\n  const inputRef = useRef(null)\r\n  const [value, setValue] = useState([])\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [editable, setEditable] = useState(null)\r\n  const properties = ServiceClass.OBJECTS[name][\"properties\"] || []\r\n  const types = ServiceClass.OBJECTS[name][\"types\"] || {}\r\n  const title = ServiceClass.OBJECTS[name][\"title\"] // this title will serve as an id field of each sub object\r\n  useEffect(() => {\r\n    if (rest?.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest?.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  useEffect(() => {\r\n    inputRef?.current?.focus()\r\n  }, [editable])\r\n\r\n  const handleChange = (fieldValue, key, title, data) => {\r\n    if (key === title) {\r\n      const idExist = value.find((obj) => obj[key] === fieldValue)\r\n      if (idExist) {\r\n        message.warning(`${key} already exist`)\r\n        return\r\n      }\r\n    }\r\n    const valueIndex = value.findIndex((obj) => obj[title] === data[title])\r\n    const valueCopy = [...value]\r\n    const formatValue =\r\n      types[key] === AMOUNT_TYPE ? Number(fieldValue) : fieldValue\r\n    valueCopy[valueIndex] = { ...value[valueIndex], [key]: formatValue }\r\n    setValue(valueCopy)\r\n    setIsTouched(true)\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <table style={{ width: \"100%\" }}>\r\n        <tr>\r\n          {properties.map((key) => {\r\n            return (\r\n              <th>\r\n                {\r\n                  <Tag color=\"cyan\" style={{ display: \"block\" }}>\r\n                    {ServiceClass.LABELS[key] || key}\r\n                  </Tag>\r\n                }\r\n              </th>\r\n            )\r\n          })}\r\n        </tr>\r\n        {value.map((obj) => {\r\n          return (\r\n            <tr style={{ justifyContent: \"flex-start\" }}>\r\n              {properties.map((key, index) => {\r\n                return (\r\n                  <td align={types[key] === AMOUNT_TYPE ? \"right\" : \"center\"}>\r\n                    {editable === index ? (\r\n                      <Input\r\n                        ref={inputRef}\r\n                        value={obj[key]}\r\n                        onChange={(e) => {\r\n                          handleChange(e.target.value, key, title, obj)\r\n                        }}\r\n                        onPressEnter={(e) => {\r\n                          // handleChange(e.target.value, key, title, obj[title])\r\n                          setEditable(null)\r\n                        }}\r\n                      />\r\n                    ) : (\r\n                      <Tag\r\n                        onDoubleClick={() => {\r\n                          setEditable(index)\r\n                        }}\r\n                      >\r\n                        {types[key] === AMOUNT_TYPE\r\n                          ? Number(obj[key]).toFixed(2)\r\n                          : obj[key]}\r\n                      </Tag>\r\n                    )}\r\n                  </td>\r\n                )\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n      <Space style={{ justifyContent: \"flex-end\", width: \"100%\" }}>\r\n        <Tag\r\n          color=\"cyan\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            const valueCopy = [...value]\r\n            const obj = {}\r\n            for (const key of properties) {\r\n              if (types[key] === AMOUNT_TYPE) {\r\n                obj[key] = 0\r\n              } else {\r\n                obj[key] = key\r\n              }\r\n            }\r\n            valueCopy.push(obj)\r\n            setValue(valueCopy)\r\n          }}\r\n        >\r\n          <PlusOutlined />\r\n          Add new\r\n        </Tag>\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default ObjectFieldArray\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsIncidents\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\IncidentReportClass.js",["646","647"],"import { ARRAY_OF_STRING_TYPE, DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport { producedIncidents } from \"Helpers/collectionData\"\r\nimport Base from \"Services/Base\"\r\n\r\nexport default class IncidentReportClass {\r\n  static COLLECTION_NAME = \"schedules\"\r\n\r\n  static async getDataBySort(customSort = [], branch) {\r\n    const data = await Base.getDataNotEqualToFieldname(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.DATE, \"desc\"],\r\n      \"others.Incidents\",\r\n      \"\"\r\n    )\r\n    return producedIncidents(data, branch)\r\n  }\r\n\r\n  static _ID = \"_id\"\r\n  static DATE_AND_TIME = \"dateAndTime\"\r\n  static DATE = \"dateOrderPlaced\"\r\n  static ACTION_TAKEN = \"actionTaken\"\r\n  static AMOUNT = \"amount\"\r\n  static CLIENT_NAME = \"clientName\"\r\n  static CONTACT_NO = \"contactNo\"\r\n  static ON_DUTY = \"onDuty\"\r\n  static ORDER_NO = \"orderNo\"\r\n  static BRIEF_DESCRIPTION = \"briefDescription\"\r\n\r\n  static PROPERTIES = [\r\n    this.DATE,\r\n    this.ORDER_NO,\r\n    this.CLIENT_NAME,\r\n    this.CONTACT_NO,\r\n    this.BRIEF_DESCRIPTION,\r\n    this.ON_DUTY,\r\n  ]\r\n\r\n  static LABELS = {\r\n    [this.BRANCH_ADDRESS]: \"Address\",\r\n    [this.BRANCH_NAME]: \"Branch\",\r\n    [this.DATE]: \"Date\",\r\n    [this.ORDER_NO]: \"Order #\",\r\n    [this.CLIENT_NAME]: \"Client Name\",\r\n    [this.CONTACT_NO]: \"Contact No\",\r\n    [this.BRIEF_DESCRIPTION]: \"Brief Description\",\r\n    [this.ON_DUTY]: \"On Duty\",\r\n  }\r\n  static TYPES = {\r\n    [this.DATE]: DATE_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilterOptions\\index.js",["648","649","650","651"],"import CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport { FilterOutlined } from \"@ant-design/icons\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { Radio, Space } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction FilterOptions({\r\n  ServiceClass,\r\n  hideColumns,\r\n  setIsFiltered,\r\n  valueSelected = () => {},\r\n}) {\r\n  const ref = useRef(null)\r\n  const [value, setValue] = useState(\"NONE\")\r\n  const [properties, setProperties] = useState([])\r\n\r\n  useEffect(() => {\r\n    const properties = ServiceClass.PROPERTIES.filter(\r\n      (key) => !hideColumns.includes(key)\r\n    )\r\n    const selectedProperties = properties.filter(\r\n      (key) => ServiceClass.TYPES[key] === DATE_TYPE\r\n    )\r\n\r\n    setProperties(selectedProperties)\r\n  }, [ServiceClass, hideColumns])\r\n\r\n  useEffect(() => {\r\n    valueSelected(value)\r\n  }, [value])\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value)\r\n    ref?.current?.click()\r\n    if (e.target.value !== \"NONE\") {\r\n      setIsFiltered(true)\r\n    } else {\r\n      setIsFiltered(false)\r\n    }\r\n  }\r\n  return (\r\n    <CustomDrawer\r\n      type={value !== \"NONE\" ? \"primary\" : \"default\"}\r\n      shape=\"circle\"\r\n      title=\"Filter Options\"\r\n      size=\"medium\"\r\n      placement=\"left\"\r\n      Icon={<FilterOutlined />}\r\n      clickedRef={ref}\r\n    >\r\n      <Radio.Group value={value} onChange={handleChange}>\r\n        <Space direction=\"vertical\">\r\n          {[\"NONE\", ...properties].map((data) => {\r\n            return (\r\n              <>\r\n                <Radio value={data}>{ServiceClass.LABELS[data] || data}</Radio>\r\n              </>\r\n            )\r\n          })}\r\n        </Space>\r\n      </Radio.Group>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nexport default FilterOptions\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\RangePicker.js",["652"],"import React from \"react\"\r\nimport { DatePicker, Space } from \"antd\"\r\nconst { RangePicker } = DatePicker\r\n\r\nfunction CustomRangePicker({\r\n  onChange,\r\n  value,\r\n  disabled,\r\n  showTime = false,\r\n  format = \"MM/DD/YYYY hh:mm A\",\r\n}) {\r\n  return (\r\n    <RangePicker\r\n      showTime={showTime}\r\n      use12Hours\r\n      format={format}\r\n      minuteStep={30}\r\n      onChange={onChange}\r\n      disabled={disabled}\r\n      value={value}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CustomRangePicker\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\index.js",["653","654","655"],"import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Button,\r\n  DatePicker,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Tabs,\r\n  Input,\r\n  Tooltip,\r\n  Card,\r\n} from \"antd\"\r\nimport { SearchOutlined, FilterOutlined } from \"@ant-design/icons\"\r\nimport useAnalyticsCustomer from \"./hook\"\r\nimport { VerticalAutoScroll, Grid } from \"./styles\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport PrintComponent from \"./PrintComponent\"\r\nimport othersTableColumns from \"./othersTableColumns\"\r\nimport Animate, {\r\n  FadeIn,\r\n  SlideInRight,\r\n  SlideOutRight,\r\n  Wobble,\r\n} from \"animate-css-styled-components\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nconst { RangePicker } = DatePicker\r\nconst { TabPane } = Tabs\r\n\r\nconst numbeStyle = {\r\n  style: {\r\n    fontSize: \"1.5rem\",\r\n  },\r\n}\r\n\r\nconst AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\nconst TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\nfunction AnalyticsCustomer() {\r\n  const [scrollPosition, setScrollPosition] = useState(0)\r\n  const [tabValue, setTabValue] = useState(\"\")\r\n  const [filteredCustomer, setFilteredCustomer] = useState([])\r\n  const [grandTotals, setGrandTotals] = useState({\r\n    totalDue: 0,\r\n    discount: 0,\r\n    amountPaid: 0,\r\n    balanceDue: 0,\r\n  })\r\n\r\n  useEffect(() => {\r\n    window.onscroll = (e) => {\r\n      setScrollPosition(document.documentElement.scrollTop)\r\n    }\r\n  }, [])\r\n  /// main hook\r\n  const [\r\n    { rangeProps, searchButtonProps, tableProps },\r\n    customerList,\r\n    dataByCustomer,\r\n    filteredData,\r\n  ] = useAnalyticsCustomer()\r\n\r\n  const style = {\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    padding: \"1rem\",\r\n  }\r\n\r\n  const othersTableProps = {\r\n    ...tableProps,\r\n    columns: [...othersTableColumns],\r\n    pagination: true,\r\n  }\r\n  const handleFilter = (e) => {\r\n    const _filteredCustomer = customerList.filter(\r\n      (key) =>\r\n        key.includes(e.target.value) ||\r\n        key.includes(e.target.value.toUpperCase())\r\n    )\r\n    setFilteredCustomer(_filteredCustomer)\r\n    if (tabValue.includes(e.target.value)) {\r\n    } else {\r\n      setTabValue(\"\")\r\n      setGrandTotals({\r\n        totalDue: 0,\r\n        discount: 0,\r\n        amountPaid: 0,\r\n        balanceDue: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleClickCustomer = (customer) => {\r\n    setTabValue(customer)\r\n    const customerData =\r\n      typeof dataByCustomer[customer] !== \"undefined\"\r\n        ? dataByCustomer[customer]\r\n        : []\r\n\r\n    const dataWithDiscount = []\r\n    for (const obj of customerData) {\r\n      let disc = 0\r\n      if (typeof obj.others !== \"undefined\") {\r\n        for (const key of Object.keys(obj.others)) {\r\n          disc = obj.others[key]\r\n          break\r\n        }\r\n      }\r\n      dataWithDiscount.push({ ...obj, others: Number(disc) })\r\n    }\r\n\r\n    const totalDue = sumArray(customerData, TOTAL_DUE)\r\n    const amountPaid = sumArray(customerData, AMOUNT_PAID)\r\n    const discount = sumArray(dataWithDiscount, \"others\")\r\n    const balanceDue = totalDue - amountPaid - Number(discount)\r\n    setGrandTotals({\r\n      totalDue,\r\n      discount: Number(discount),\r\n      amountPaid,\r\n      balanceDue,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Space direction=\"horizontal\" style={style}>\r\n          <span>\r\n            {customerList.length > 0 && (\r\n              <Space>\r\n                <label>Name </label>\r\n                <Input\r\n                  placeholder=\"Filter\"\r\n                  onChange={handleFilter}\r\n                  suffix={\r\n                    <Tooltip title=\"Filter by name\">\r\n                      <FilterOutlined style={{ color: \"rgba(0,0,0,.45)\" }} />\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              </Space>\r\n            )}\r\n          </span>\r\n          <Space wrap>\r\n            Date Order:\r\n            <RangePicker {...rangeProps} />\r\n            <Button\r\n              {...searchButtonProps}\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </Space>\r\n\r\n        <VerticalAutoScroll>\r\n          <Row style={{ padding: \"1rem\" }}>\r\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\r\n              <Tabs\r\n                activeKey={tabValue}\r\n                tabPosition=\"top\"\r\n                style={{ height: \"77vh\", position: \"relative\" }}\r\n                size=\"small\"\r\n                onChange={handleClickCustomer}\r\n              >\r\n                {filteredCustomer.length > 0\r\n                  ? filteredCustomer.map((customer) => {\r\n                      if (!customer) {\r\n                        return <></>\r\n                      }\r\n                      const recordFound =\r\n                        typeof dataByCustomer[customer] !== \"undefined\"\r\n                          ? dataByCustomer[customer].length\r\n                          : 0\r\n                      return (\r\n                        <TabPane\r\n                          tab={customer}\r\n                          key={customer}\r\n                          style={{\r\n                            backgroundColor: \"#eee\",\r\n                            padding: \"1rem\",\r\n                            height: \"80vh\",\r\n                          }}\r\n                        >\r\n                          <Card\r\n                            title={customer}\r\n                            extra={\r\n                              <PrintComponent\r\n                                dataByCustomer={[...dataByCustomer[customer]]}\r\n                                customer={customer}\r\n                                grandTotals={grandTotals}\r\n                              />\r\n                            }\r\n                            actions={[\r\n                              <div>{`Records Found: ${recordFound}`}</div>,\r\n                            ]}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <Table\r\n                                {...tableProps}\r\n                                dataSource={[...dataByCustomer[customer]]}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                        </TabPane>\r\n                      )\r\n                    })\r\n                  : customerList.map((customer) => {\r\n                      if (!customer) {\r\n                        return <></>\r\n                      }\r\n                      const recordFound =\r\n                        typeof dataByCustomer[customer] !== \"undefined\"\r\n                          ? dataByCustomer[customer].length\r\n                          : 0\r\n                      return (\r\n                        <TabPane\r\n                          tab={customer}\r\n                          key={customer}\r\n                          style={{\r\n                            backgroundColor: \"#eee\",\r\n                            padding: \"1rem\",\r\n                            height: \"80vh\",\r\n                            position: \"relative\",\r\n                          }}\r\n                        >\r\n                          <Card\r\n                            title={customer}\r\n                            extra={\r\n                              <PrintComponent\r\n                                dataByCustomer={[...dataByCustomer[customer]]}\r\n                                customer={customer}\r\n                                grandTotals={grandTotals}\r\n                              />\r\n                            }\r\n                            actions={[\r\n                              <div>{`Records Found: ${recordFound}`}</div>,\r\n                            ]}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <Table\r\n                                {...tableProps}\r\n                                dataSource={[...dataByCustomer[customer]]}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                        </TabPane>\r\n                      )\r\n                    })}\r\n              </Tabs>\r\n            </Col>\r\n            <Col\r\n              xs={24}\r\n              sm={24}\r\n              md={24}\r\n              lg={24}\r\n              xl={24}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Space wrap size={[16, 5]}>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Total Due\r\n                  </span>\r\n                  <span {...numbeStyle}>\r\n                    <b>{grandTotals.totalDue.toFixed(2)}</b>\r\n                  </span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Discount\r\n                  </span>\r\n                  <span {...numbeStyle}>{grandTotals.discount.toFixed(2)}</span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Amount Paid\r\n                  </span>\r\n                  <span {...numbeStyle}>\r\n                    {grandTotals.amountPaid.toFixed(2)}\r\n                  </span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Balance Due\r\n                  </span>\r\n                  <span\r\n                    style={\r\n                      grandTotals.balanceDue > 0\r\n                        ? { color: \"red\", ...numbeStyle.style }\r\n                        : { ...numbeStyle.style }\r\n                    }\r\n                  >\r\n                    {grandTotals.balanceDue.toFixed(2)}\r\n                  </span>\r\n                </Space>\r\n              </Space>\r\n            </Col>\r\n          </Row>\r\n        </VerticalAutoScroll>\r\n\r\n        <VerticalAutoScroll>\r\n          <Space\r\n            direction=\"vertical\"\r\n            style={{ padding: \"1rem\", height: \"100vh\", width: \"100%\" }}\r\n          >\r\n            <Card\r\n              title=\"OTHER ORDERS\"\r\n              extra={\r\n                scrollPosition > 800 && (\r\n                  <Animate\r\n                    Animation={[SlideInRight]}\r\n                    duration={[\"1s\"]}\r\n                    delay={[\"0.2s\"]}\r\n                  >\r\n                    <Space wrap>\r\n                      Date Order:\r\n                      <RangePicker {...rangeProps} />\r\n                      <Button\r\n                        {...searchButtonProps}\r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        icon={<SearchOutlined />}\r\n                      />\r\n                    </Space>\r\n                  </Animate>\r\n                )\r\n              }\r\n            >\r\n              <VerticalAutoScroll>\r\n                <Table\r\n                  {...othersTableProps}\r\n                  dataSource={[\r\n                    ...filteredData.filter(\r\n                      (data) => data.orderVia === \"[ OTH ] OTHER\"\r\n                    ),\r\n                  ]}\r\n                />\r\n              </VerticalAutoScroll>\r\n            </Card>\r\n          </Space>\r\n        </VerticalAutoScroll>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnalyticsCustomer\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\hook.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\othersTableColumns.js",["656","657"],"import { Tag, Space } from \"antd\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport React from \"react\"\r\n\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst CUSTOMER = SchedulersClass.CUSTOMER\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\nconst REF_NO = SchedulersClass.REF_NO\r\n\r\nconst othersTableColumns = [\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"13%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"UTAK #\",\r\n    dataIndex: UTAK_NO,\r\n    key: UTAK_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"CUSTOMER\",\r\n    dataIndex: CUSTOMER,\r\n    key: CUSTOMER,\r\n  },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      let disc = 0\r\n      if (typeof data !== \"undefined\") {\r\n        for (const key of Object.keys(data)) {\r\n          disc = data[key]\r\n          break\r\n        }\r\n      }\r\n      if (disc > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(disc).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (typeof data !== \"undefined\") {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(\"0\").toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      let amountPaid =\r\n        typeof record?.amountPaid !== \"undefined\" ? record?.amountPaid : 0\r\n      let totalDue =\r\n        typeof record?.totalDue !== \"undefined\" ? record?.totalDue : 0\r\n      let disc = 0\r\n      if (typeof record?.others !== \"undefined\") {\r\n        for (const key of Object.keys(record?.others)) {\r\n          disc = record?.others[key]\r\n          break\r\n        }\r\n      }\r\n      const balanceDue = Number(totalDue) - Number(amountPaid) - Number(disc)\r\n      return <span>{Number(balanceDue).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default othersTableColumns\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\PrintComponent.js",["658","659","660"],"import React from \"react\"\r\nimport Print from \"../Print\"\r\nimport { Divider, Space } from \"antd\"\r\nimport { PrinterFilled } from \"@ant-design/icons\"\r\nimport { formatDateFromDatabase, formatDateSlash } from \"Helpers/dateFormat\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction PrintComponent(props) {\r\n  const DATE_START = SchedulersClass.DATE_START\r\n  const ORDER_NO = SchedulersClass.ORDER_NO\r\n  const SOURCE = SchedulersClass.SOURCE\r\n  const STATUS = SchedulersClass.STATUS\r\n  const ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\n  const AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\n  const MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\n  const REF_NO = SchedulersClass.REF_NO\r\n  const TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\n  const handleDiscount = (data) => {\r\n    let disc = 0\r\n    if (typeof data !== \"undefined\") {\r\n      for (const key of Object.keys(data)) {\r\n        disc = data[key]\r\n        break\r\n      }\r\n    }\r\n    if (disc > 0) {\r\n      return Number(disc).toFixed(2)\r\n    }\r\n    return Number(disc).toFixed(2)\r\n  }\r\n\r\n  const handleBalance = (totalDue = 0, amountPaid = 0, others = {}) => {\r\n    const _discount = Number(handleDiscount(others))\r\n    const _amountPaid = Number(amountPaid)\r\n    const _totalDue = Number(totalDue)\r\n    const balanceDue = _totalDue - _amountPaid - _discount\r\n    return balanceDue.toFixed(2)\r\n  }\r\n  return (\r\n    <Print\r\n      component={\r\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n          <span>{props.customer}</span>\r\n          <table style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n            <tr\r\n              style={{\r\n                fontWeight: 700,\r\n                backgroundColor: \"#999\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <td>ORDER #</td>\r\n              <td>DATE ORDER</td>\r\n              <td>MODE</td>\r\n              <td>SOURCE</td>\r\n              <td>REF #</td>\r\n              <td>ACCT #</td>\r\n              <td align=\"right\">TOTAL DUE</td>\r\n              <td align=\"right\">DISCOUNT</td>\r\n              <td align=\"right\">AMOUNT PAID</td>\r\n              <td align=\"right\">BALANCE DUE</td>\r\n              <td align=\"right\">STATUS</td>\r\n            </tr>\r\n            {props.dataByCustomer.map((data, index) => {\r\n              return (\r\n                <tr\r\n                  style={\r\n                    index % 2 === 0\r\n                      ? { backgroundColor: \"white\" }\r\n                      : { backgroundColor: \"#999\" }\r\n                  }\r\n                >\r\n                  <td>{data[ORDER_NO]}</td>\r\n                  <td>{data[DATE_START]}</td>\r\n                  <td>{data[MODE_PAYMENT]}</td>\r\n                  <td>{data[SOURCE]}</td>\r\n                  <td>{data[REF_NO]}</td>\r\n                  <td>{data[ACCOUNT_NUMBER]}</td>\r\n                  <td align=\"right\">{data[TOTAL_DUE]}</td>\r\n                  <td align=\"right\">{handleDiscount(data?.others)}</td>\r\n                  <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                  <td align=\"right\">\r\n                    {handleBalance(\r\n                      data[TOTAL_DUE],\r\n                      data[AMOUNT_PAID],\r\n                      data?.others\r\n                    )}\r\n                  </td>\r\n                  <td align=\"right\">{data[STATUS]}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n          </table>\r\n          <span>Grand Totals</span>\r\n          <table style={{ fontSize: \"8px\", width: \"20%\" }}>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Total Due:</td>\r\n              <td align=\"right\">{props?.grandTotals.totalDue}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Discount:</td>\r\n              <td align=\"right\">{props?.grandTotals.discount}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Amount Paid:</td>\r\n              <td align=\"right\">{props?.grandTotals.amountPaid}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Balance Due:</td>\r\n              <td align=\"right\">{props?.grandTotals.balanceDue}</td>\r\n            </tr>\r\n          </table>\r\n        </Space>\r\n      }\r\n      button={<PrinterFilled fontSize=\"2.5rem\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrintComponent\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\tableColumns.js",["661","662"],"import { Tag, Space } from \"antd\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport React from \"react\"\r\n\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\nconst REF_NO = SchedulersClass.REF_NO\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\n\r\nconst tableColumns = [\r\n  // {\r\n  //   title: \"DATE PLACED\",\r\n  //   dataIndex: DATE_ORDER_PLACED,\r\n  //   key: DATE_ORDER_PLACED,\r\n  //   render: (text) => <a>{text}</a>,\r\n  //   width: \"8%\",\r\n  // },\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"13%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"UTAK #\",\r\n    dataIndex: UTAK_NO,\r\n    key: UTAK_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n    render: (text) => <a>{text}</a>,\r\n    width: \"8%\",\r\n  },\r\n  // {\r\n  //   title: \"NAME\",\r\n  //   dataIndex: CUSTOMER,\r\n  //   key: CUSTOMER,\r\n  // },\r\n  // {\r\n  //   title: \"CONTACT #\",\r\n  //   dataIndex: CONTACT_NUMBER,\r\n  //   key: CONTACT_NUMBER,\r\n  // },\r\n  // {\r\n  //   title: \"VIA\",\r\n  //   dataIndex: ORDER_VIA,\r\n  //   key: ORDER_VIA,\r\n  // },\r\n  // {\r\n  //   title: \"DATE ORDER\",\r\n  //   dataIndex: DATE_START,\r\n  //   key: DATE_START,\r\n  // },\r\n  // {\r\n  //   title: \"TIME\",\r\n  //   dataIndex: \"time\",\r\n  //   key: \"time\",\r\n  // },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  // },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      let disc = 0\r\n      if (typeof data !== \"undefined\") {\r\n        for (const key of Object.keys(data)) {\r\n          disc = data[key]\r\n          break\r\n        }\r\n      }\r\n      if (disc > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(disc).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (typeof data !== \"undefined\") {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(\"0\").toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      let amountPaid =\r\n        typeof record?.amountPaid !== \"undefined\" ? record?.amountPaid : 0\r\n      let totalDue =\r\n        typeof record?.totalDue !== \"undefined\" ? record?.totalDue : 0\r\n      let disc = 0\r\n      if (typeof record?.others !== \"undefined\") {\r\n        for (const key of Object.keys(record?.others)) {\r\n          disc = record?.others[key]\r\n          break\r\n        }\r\n      }\r\n      const balanceDue = Number(totalDue) - Number(amountPaid) - Number(disc)\r\n      return <span>{Number(balanceDue).toFixed(2)}</span>\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"TOTAL AMOUNT\",\r\n  //   dataIndex: \"totalDue\",\r\n  //   key: \"totalDue\",\r\n  //   align: \"right\",\r\n  // },\r\n  // {\r\n  //   title: \"OTHERS/DEDUCTION\",\r\n  //   dataIndex: \"others\",\r\n  //   key: \"others\",\r\n  //   align: \"right\",\r\n  //   render: (tags) => {\r\n  //     return (\r\n  //       <>\r\n  //         {typeof tags !== \"undefined\" ? (\r\n  //           Object.keys(tags).map((tag) => {\r\n  //             return <Tag key={tag}>{`${tags[tag]}`}</Tag>\r\n  //           })\r\n  //         ) : (\r\n  //           <Tag></Tag>\r\n  //         )}\r\n  //       </>\r\n  //     )\r\n  //   },\r\n  // },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  //   render: (data) => {\r\n  //     if (data === \"Discounted\") {\r\n  //       return <span style={{ color: \"red\" }}>{data}</span>\r\n  //     } else {\r\n  //       return <span>{data}</span>\r\n  //     }\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default tableColumns\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\styles.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\rangeHandler.js",["663","664","665"],"import moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(Service) {\r\n  // example instance class: SchedulerServicess\r\n  // how to call hook example: const [rangeHandler, loadData] = useRangeHandler(ScheduleServicess)\r\n  const format = \"MM/DD/YYYY\"\r\n  const defaultDate = moment(new Date(), format)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState([defaultDate, defaultDate])\r\n  const [rangeData, setRangeData] = useState([])\r\n  const [searchData, setSearchData] = useState([])\r\n\r\n  const loadData = async (args) => {\r\n    const { search = null, dateField, orderBy } = args\r\n    setIsLoading(true)\r\n    let dateRange = []\r\n    if (value.length > 0) {\r\n      dateRange = [value[0]._d, value[1]._d]\r\n      let _data = []\r\n      _data = await new Service({\r\n        _dateField: dateField,\r\n        _orderBy: orderBy,\r\n        _dateRange: dateRange,\r\n      }).getRange()\r\n      if (_data.length > 0 && search) {\r\n        const _searchData = _data.filter((data) => {\r\n          let filterResult = true\r\n          for (const key in search) {\r\n            if (search[key] && data[key]) {\r\n              if (data[key].includes(search[key])) {\r\n                // console.log(\"result\", true)\r\n                filterResult = filterResult && true\r\n              } else {\r\n                // console.log(\"result\", false)\r\n                filterResult = filterResult && false\r\n              }\r\n            } else {\r\n              if (search[key]) {\r\n                filterResult = filterResult && false\r\n              } else {\r\n                filterResult = filterResult && true\r\n              }\r\n            }\r\n          }\r\n          return filterResult\r\n        })\r\n        console.log(\"_searchData\", _searchData)\r\n        setSearchData(_searchData)\r\n      } else {\r\n        setSearchData([])\r\n      }\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const onChange = (value) => {\r\n    if (value) {\r\n      setValue(value)\r\n    }\r\n  }\r\n\r\n  return [\r\n    { showTime: false, format, value, onChange }, // rangeComponentHandler\r\n    { value /*rangeData*/, searchData }, // filtered data result\r\n    loadData,\r\n    isLoading,\r\n    // load data example : loadRangeHandlerData({\r\n    //   dateField: \"StartTime\", // required\r\n    //   orderBy: \"StartTime\", // required\r\n    //   search: { //optional\r\n    //     partnerMerchantOrderNo: searchValue,\r\n    //     orderViaPartner: selectHandler.value,\r\n    //   },\r\n    //   specialSearch: \"datePayment\", // use in filter together with search check if value already has a payment //optional\r\n    // })\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\ComponentToPrint.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\SchedulesServicess.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\base\\index.js",["666"],"import db from \"Services/firebase\"\r\n\r\nexport default class Commands {\r\n  #collectionName\r\n  #id\r\n  #data\r\n  #fieldName\r\n  #fieldValue\r\n  #orderBy\r\n  constructor(args) {\r\n    const {\r\n      _collectionName,\r\n      _id,\r\n      _data = {},\r\n      _fieldName = \"\",\r\n      _fieldValue = \"\",\r\n      _orderBy = \"\",\r\n    } = args\r\n    this.#collectionName = _collectionName\r\n    this.#id = _id\r\n    this.#data = _data\r\n    this.#fieldName = _fieldName\r\n    this.#fieldValue = _fieldValue\r\n    this.#orderBy = _orderBy\r\n  }\r\n\r\n  async getData() {\r\n    const ref = db.collection(this.#collectionName)\r\n    const snapshot = await ref.get()\r\n    if (snapshot.empty) {\r\n      console.log(\"No matching documents.\")\r\n      return []\r\n    }\r\n\r\n    const data = []\r\n    snapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  async getDataWithId() {\r\n    if (this.#id) {\r\n      const ref = db.collection(this.#collectionName).doc(this.#id)\r\n      const doc = await ref.get()\r\n      if (!doc.exists) {\r\n        return {}\r\n      } else {\r\n        const data = { ...doc.data() }\r\n        return data\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n\r\n  getDataWithFieldName() {\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(this.#collectionName)\r\n        .where(this.#fieldName, \"==\", this.#fieldValue)\r\n        .orderBy(this.#orderBy, \"desc\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            _dataFetched.push({ ..._data, _id: doc.id })\r\n          })\r\n          resolve(_dataFetched)\r\n        })\r\n        .catch((error) => {\r\n          reject(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    }).catch((error) => {\r\n      console.log(\"code error\", error)\r\n    })\r\n  }\r\n\r\n  async mergeData() {\r\n    const ref = db.collection(this.#collectionName).doc(this.#id)\r\n    const setWithMerge = ref.set(\r\n      {\r\n        ...this.#data,\r\n      },\r\n      { merge: true }\r\n    )\r\n  }\r\n\r\n  async updateData() {\r\n    if (this.#id) {\r\n      console.log(`Updated ${this.#id}`, this.#data)\r\n    }\r\n  }\r\n\r\n  async deleteData() {\r\n    if (this.#id) {\r\n      console.log(`Deleted ${this.#id}`, this.#data)\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\index.js",["667","668","669","670","671"],"import React, { useEffect, useState } from \"react\"\r\n// import DailyReportType from \"./dailyReportType\"\r\nimport { Flex, Grid, Item } from \"../Styles\"\r\nimport { Card } from \"antd\"\r\nimport SalesImage from \"Images/sales.jpg\"\r\nimport ServedReportType from \"./servedReportType\"\r\n// import ReportDirectSales from \"components/features/AnalyticsReportDirectSales\"\r\n// import ReportThirdPartySales from \"components/features/AnalyticsReportThirdPartySales\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nconst { Meta } = Card\r\n\r\nconst ORDER_VIA = SchedulersClass.ORDER_VIA\r\nconst ORDER_VIA_PARTNER = SchedulersClass.ORDER_VIA_PARTNER\r\nconst ORDER_VIA_WEBSITE = SchedulersClass.ORDER_VIA_WEBSITE\r\nfunction AnalyticsDailyReport() {\r\n  const [clickedReport, setClickedReport] = useState(null)\r\n  return (\r\n    <div>\r\n      {clickedReport === null && (\r\n        <>\r\n          <Grid padding=\"1rem\">\r\n            <h1>DAILY SALES REPORT</h1>\r\n          </Grid>\r\n          <Grid padding=\"1rem\" height=\"70vh\" alignItems=\"center\">\r\n            <Flex justifyContent=\"center\">\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={<img alt=\"sales-image\" src={SalesImage} />}\r\n                  onClick={() => {\r\n                    setClickedReport(\"DIRECT\")\r\n                  }}\r\n                >\r\n                  <Meta title=\"DIRECT ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={\r\n                    <img\r\n                      alt=\"sales-image\"\r\n                      src={SalesImage}\r\n                      onClick={() => {\r\n                        setClickedReport(\"THIRD PARTY\")\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Meta title=\"THIRD PARTY ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={<img alt=\"sales-image\" src={SalesImage} />}\r\n                  onClick={() => {\r\n                    setClickedReport(\"SERVED\")\r\n                  }}\r\n                >\r\n                  <Meta title=\"SERVED ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n            </Flex>\r\n          </Grid>\r\n        </>\r\n      )}\r\n\r\n      {/* {clickedReport === \"DIRECT\" && (\r\n        <ReportDirectSales back={() => setClickedReport(null)} />\r\n        <DailyReportType\r\n          Services={ScheduleServices}\r\n          filterBasis={ORDER_VIA}\r\n          title=\"DAILY SALES DIRECT ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )} */}\r\n      {/*\r\n      {clickedReport === \"THIRD PARTY\" && (\r\n        <ReportThirdPartySales back={() => setClickedReport(null)} />\r\n        <DailyReportType\r\n          Services={ScheduleServices}\r\n          filterBasis={ORDER_VIA}\r\n          title=\"DAILY SALES DIRECT ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )} */}\r\n\r\n      {clickedReport === \"SERVED\" && (\r\n        <ServedReportType\r\n          filterBasis={[ORDER_VIA, ORDER_VIA_PARTNER]}\r\n          title=\"DAILY SALES SERVED ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDailyReport\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\dailyReportType.js",["672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\servedReportType.js",["688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706"],"import { Button, DatePicker, Input, Switch, Table, Tag } from \"antd\"\r\nimport moment from \"moment\"\r\nimport React, { useState, useEffect, useContext } from \"react\"\r\nimport { Flex, Grid, Item } from \"../Styles\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n  formatDateSlash,\r\n} from \"Helpers/dateFormat\"\r\nimport {\r\n  AiFillCaretLeft,\r\n  AiFillCaretRight,\r\n  AiFillPrinter,\r\n  AiOutlineArrowLeft,\r\n} from \"react-icons/ai\"\r\nimport addMinusDay from \"Helpers/addMinusDay\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport LiquidChart from \"./LiquidChart\"\r\nimport sumArray, {\r\n  sumArrayDatas,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Helpers/sumArray\"\r\nimport checkDate from \"Helpers/checkDate\"\r\nimport Print from \"../Print\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nconst { RangePicker } = DatePicker\r\nconst dateFormat = (date) => {\r\n  return moment(date, \"MM/DD/YYYY\")\r\n}\r\n\r\nconst CUSTOMER = SchedulersClass.CUSTOMER\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst DATE_ORDER_PLACED = SchedulersClass.DATE_ORDER_PLACED\r\nconst ORDER_VIA_PARTNER = SchedulersClass.ORDER_VIA_PARTNER\r\nconst AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\nconst TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\nconst ORDER_VIA = SchedulersClass.ORDER_VIA\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\n\r\nfunction ServedReportType({ Services, filterBasis, title, back }) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [date, setDate] = useState(dateFormat(new Date()))\r\n  const [dateTo, setDateTo] = useState(dateFormat(new Date()))\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [dataList, setDataList] = useState([])\r\n  const [subTotalOfDataList, setSubTotalOfDataList] = useState([])\r\n  const [subTotalOfOrderVia, setSubTotalOfOrderVia] = useState([])\r\n  const [subTotalOfSources, setSubTotalOfSources] = useState([])\r\n  const [grandTotalDue, setGrandTotalDue] = useState(0)\r\n  const [grandAmountPaid, setGrandAmountPaid] = useState(0)\r\n  const [targetAmount, setTargetAmount] = useState(0)\r\n  const [isSwitch, setIsSwitch] = useState(true)\r\n  const [targets, setTargets] = useState([35000, 5000, 15000])\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [Services, date, dateTo])\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [Services])\r\n\r\n  const loadDropdowns = async () => {\r\n    if (typeof filterBasis === \"object\") {\r\n      setIsSwitch(false)\r\n      let dropdowns = []\r\n      for (const value of filterBasis) {\r\n        const _dropdowns = await DropdownsClass.getDataByFieldName(\r\n          \"name\",\r\n          value\r\n        )\r\n        if (_dropdowns?.list) {\r\n          dropdowns = [...dropdowns, ..._dropdowns?.list]\r\n        }\r\n      }\r\n      setDropdowns(dropdowns)\r\n    } else {\r\n      const dropdowns = await DropdownsClass.getDataByFieldName(\r\n        \"name\",\r\n        filterBasis\r\n      )\r\n      if (dropdowns?.list) {\r\n        setDropdowns(dropdowns?.list)\r\n      }\r\n    }\r\n  }\r\n\r\n  const loadData = async () => {\r\n    if (dropdowns.length > 0) {\r\n      const data = await SchedulersClass.getDataByDate(\r\n        [date._d, dateTo._d],\r\n        SchedulersClass.DATE_START,\r\n        user?.branchSelected\r\n      )\r\n      let newData = []\r\n      if (typeof filterBasis === \"object\") {\r\n        for (const value of filterBasis) {\r\n          const _data = data.filter((row) => dropdowns.includes(row[value]))\r\n          for (const obj of _data) {\r\n            if (typeof obj?.partials === \"object\") delete obj.partials\r\n            newData.push({\r\n              ...obj,\r\n              [ORDER_VIA]: obj[ORDER_VIA_PARTNER]\r\n                ? obj[ORDER_VIA_PARTNER]\r\n                : obj[ORDER_VIA],\r\n            })\r\n          }\r\n        }\r\n        console.log(\"newDDD\", newData)\r\n      } else {\r\n        newData = data.filter((row) => dropdowns.includes(row[filterBasis]))\r\n      }\r\n\r\n      /// set the dataSources of SALES DIRECT ORDERS TABLE\r\n      const formattedDataList = []\r\n      for (const obj of newData) {\r\n        const datePaid =\r\n          typeof obj[DATE_PAYMENT] === \"undefined\"\r\n            ? null\r\n            : formatDateFromDatabase(obj[DATE_PAYMENT])\r\n        const dateOrderPlaced = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n        const dateStart = formatDateFromDatabase(obj[DATE_START])\r\n        formattedDataList.push({\r\n          [ORDER_VIA]: obj[ORDER_VIA],\r\n          [SOURCE]: obj[SOURCE],\r\n          [TOTAL_DUE]: obj[TOTAL_DUE],\r\n          [ACCOUNT_NUMBER]: obj[ACCOUNT_NUMBER],\r\n          [CUSTOMER]: obj[CUSTOMER],\r\n          [ORDER_NO]: obj[ORDER_NO],\r\n          [UTAK_NO]: obj[UTAK_NO],\r\n          [DATE_PAYMENT]: datePaid ? formatDateSlash(datePaid) : 0,\r\n          [DATE_START]: formatDateSlash(dateStart),\r\n          [DATE_ORDER_PLACED]: formatDateSlash(dateOrderPlaced),\r\n          [AMOUNT_PAID]: datePaid ? obj[AMOUNT_PAID] : 0,\r\n        })\r\n      }\r\n      setDataList(formattedDataList)\r\n\r\n      // dataList sub total\r\n      const subtotalDue = sumArray(formattedDataList, TOTAL_DUE)\r\n      const subAmountPaid = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfDataList([\r\n        {\r\n          [DATE_PAYMENT]: \"\",\r\n          [DATE_ORDER_PLACED]: \"\",\r\n          [ORDER_NO]: \"\",\r\n          [CUSTOMER]: \"Sub Total\",\r\n          [TOTAL_DUE]: subtotalDue.toFixed(2),\r\n          [AMOUNT_PAID]: subAmountPaid.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // orderVia sub total\r\n      const subAmountPaidOrderVia = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfOrderVia([\r\n        {\r\n          [ORDER_VIA]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidOrderVia.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // sources sub total\r\n      const subAmountPaidSources = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfSources([\r\n        {\r\n          [ACCOUNT_NUMBER]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidSources,\r\n        },\r\n      ])\r\n\r\n      /// set the dataSources of SUMMARY OF SALES\r\n      const totalDue = sumArray([...newData], TOTAL_DUE)\r\n      const totalAmountPaid = sumArray([...newData], AMOUNT_PAID)\r\n      setGrandTotalDue(totalDue.toFixed(2))\r\n      setGrandAmountPaid(totalAmountPaid.toFixed(2))\r\n      setTargetAmount(totalDue.toFixed(2))\r\n    }\r\n  }\r\n\r\n  const calculatePercent = (paidValue, totalValue) => {\r\n    // if (isSwitch) {\r\n    return paidValue / totalValue\r\n    // } else {\r\n    //   if (targetAmount) {\r\n    //     return grandAmountPaid / targetAmount\r\n    //   } else {\r\n    //     return grandAmountPaid / 0\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  const columnsOfOrders = [\r\n    {\r\n      title: \"DATE SERVED\",\r\n      key: DATE_START,\r\n      dataIndex: DATE_START,\r\n    },\r\n    {\r\n      title: \"ORDER DATE\",\r\n      key: DATE_ORDER_PLACED,\r\n      dataIndex: DATE_ORDER_PLACED,\r\n    },\r\n    {\r\n      title: \"UTAK #\",\r\n      key: UTAK_NO,\r\n      dataIndex: UTAK_NO,\r\n    },\r\n    {\r\n      title: \"VBS #\",\r\n      key: ORDER_NO,\r\n      dataIndex: ORDER_NO,\r\n    },\r\n    {\r\n      title: \"CUSTOMER\",\r\n      key: CUSTOMER,\r\n      dataIndex: CUSTOMER,\r\n    },\r\n    {\r\n      title: \"VIA\",\r\n      key: ORDER_VIA,\r\n      dataIndex: ORDER_VIA,\r\n    },\r\n    {\r\n      title: \"TOTAL\",\r\n      key: TOTAL_DUE,\r\n      dataIndex: TOTAL_DUE,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n    {\r\n      title: \"AMT PAID\",\r\n      key: AMOUNT_PAID,\r\n      dataIndex: AMOUNT_PAID,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n  ]\r\n\r\n  const getPageMargins = () => {\r\n    return `@page { margin: 1rem 1rem 1rem 1rem !important; }`\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <Grid padding=\"1rem\">\r\n          <Flex justifyContent=\"center\">\r\n            <div style={{ padding: \"1rem\", flex: 1 }}>\r\n              <Button\r\n                icon={<AiOutlineArrowLeft />}\r\n                size=\"large\"\r\n                shape=\"circle\"\r\n                type=\"primary\"\r\n                danger\r\n                onClick={back}\r\n              />\r\n            </div>\r\n            <RangePicker\r\n              showTime={false}\r\n              value={[date, dateTo]}\r\n              format=\"MM/DD/YYYY\"\r\n              onChange={(date) => {\r\n                if (date) {\r\n                  setDate(date[0])\r\n                  setDateTo(date[1])\r\n                }\r\n              }}\r\n            />\r\n            <div style={{ padding: \"1rem\" }}>{formatDateLong(date._d)}</div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretLeft />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"minus\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretRight />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"add\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n        <Grid padding=\" 1rem 4rem\">\r\n          <h1>{title}</h1>\r\n          <Table\r\n            dataSource={[...dataList, ...subTotalOfDataList]}\r\n            columns={columnsOfOrders}\r\n            pagination={false}\r\n          />\r\n        </Grid>\r\n        <Grid padding=\"1rem 4rem\">\r\n          <h1>SUMMARY OF SALES</h1>\r\n          <Flex\r\n            alignItems=\"flex-start\"\r\n            justifyContent=\"flex-end\"\r\n            flexFlow=\"row\"\r\n          >\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ORDER_VIA,\r\n                    AMOUNT_PAID\r\n                  ),\r\n                  ...subTotalOfOrderVia,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"ORDER VIA\",\r\n                    key: \"orderVia\",\r\n                    dataIndex: \"orderVia\",\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ACCOUNT_NUMBER,\r\n                    AMOUNT_PAID\r\n                  ).filter((obj) => {\r\n                    if (parseInt(obj[AMOUNT_PAID]) > 0) {\r\n                      return obj\r\n                    }\r\n                  }),\r\n                  ...subTotalOfSources,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"SOURCES\",\r\n                    key: ACCOUNT_NUMBER,\r\n                    dataIndex: ACCOUNT_NUMBER,\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n\r\n            {/* this is the percentage portion */}\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n                marginTop: \"-5rem\",\r\n              }}\r\n            >\r\n              <Flex justifyContent=\"flex-end\">\r\n                <div style={{ width: \"15rem\" }}>\r\n                  <LiquidChart\r\n                    percent={() =>\r\n                      calculatePercent(grandAmountPaid, grandTotalDue)\r\n                    }\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"green\">Target</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[0])}\r\n                      </span>\r\n                      <span style={{ marginLeft: \"6rem\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[0]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"red\">Below</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[1])}\r\n                      </span>\r\n                      <span style={{ marginLeft: \"6rem\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[1]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"orange\">Above</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[2])}\r\n                      </span>\r\n                      <span style={{ float: \"left\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[2]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                </div>\r\n              </Flex>\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n      </div>\r\n      {/* this is print */}\r\n      <div style={{ position: \"fixed\", right: 0, bottom: 0, padding: \"1rem\" }}>\r\n        <Print\r\n          component={\r\n            <div>\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SERVED ORDERS\r\n                </thead>\r\n                <tbody style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      {columnsOfOrders.map((field) => {\r\n                        return <th>{field?.title}</th>\r\n                      })}\r\n                    </tr>\r\n                    {[...dataList].reverse().map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    {subTotalOfDataList.map((data) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (dataList.length + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n              <br />\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SUMMARY OF SALES\r\n                </thead>\r\n                <tbody\r\n                  style={{ fontSize: \"8px\", display: \"flex\", width: \"100%\" }}\r\n                >\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                      marginRight: \"1rem\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>ORDER VIA</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ].map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          <td>{data[ORDER_VIA]}</td>\r\n                          <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                  <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>RECEIVING ACCT</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ACCOUNT_NUMBER,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ]\r\n                      .filter((obj) => {\r\n                        if (parseInt(obj[AMOUNT_PAID]) > 0) {\r\n                          return obj\r\n                        }\r\n                      })\r\n                      .map((data, index) => {\r\n                        return (\r\n                          <tr\r\n                            style={\r\n                              (index + 1) % 2 === 0\r\n                                ? { backgroundColor: \"white\" }\r\n                                : { backgroundColor: \"#999\" }\r\n                            }\r\n                          >\r\n                            <td>{data[ACCOUNT_NUMBER]}</td>\r\n                            <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                          </tr>\r\n                        )\r\n                      })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          }\r\n          button={<AiFillPrinter fontSize=\"2.5rem\" />}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ServedReportType\r\n\r\n{\r\n  /* <Grid>\r\n              <div>\r\n                <h4>VITOS BBQ DAILY REPORT</h4>\r\n              </div>\r\n              <Grid>\r\n                <h5>SERVED ORDER</h5>\r\n                <table>\r\n                  <thead>\r\n                    {columnsOfOrders.map((data) => (\r\n                      <th>{data.title}</th>\r\n                    ))}\r\n                  </thead>\r\n                  <tbody>\r\n                    {[...dataList, ...subTotalOfDataList].map((data) => {\r\n                      return (\r\n                        <tr>\r\n                          {Object.keys(data).map((field) => (\r\n                            <td>{data[field]}</td>\r\n                          ))}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    <tr>\r\n                      <td>data 1</td>\r\n                      <td>data 2</td>\r\n                      <td>data 3</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <Table\r\n                  size=\"small\"\r\n                  dataSource={[...dataList, ...subTotalOfDataList]}\r\n                  columns={columnsOfOrders}\r\n                  pagination={false}\r\n                />\r\n              </Grid>\r\n              <Grid>\r\n                <h5>SUMMARY OF SALES</h5>\r\n                <Flex alignItems=\"flex-start\">\r\n                  <Table\r\n                    size=\"small\"\r\n                    showHeader={false}\r\n                    pagination={false}\r\n                    dataSource={[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ]}\r\n                    columns={[\r\n                      {\r\n                        title: \"ORDER VIA\",\r\n                        key: \"orderVia\",\r\n                        dataIndex: \"orderVia\",\r\n                      },\r\n                      {\r\n                        title: \"AMOUNT PAID\",\r\n                        key: \"amountPaid\",\r\n                        dataIndex: \"amountPaid\",\r\n                        align: \"right\",\r\n                        render: (value) => {\r\n                          return <a>{thousandsSeparators(value)}</a>\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                  <Table\r\n                    showHeader={false}\r\n                    pagination={false}\r\n                    size=\"small\"\r\n                    dataSource={[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ]}\r\n                    columns={[\r\n                      {\r\n                        title: \"SOURCES\",\r\n                        key: \"source\",\r\n                        dataIndex: \"source\",\r\n                      },\r\n                      {\r\n                        title: \"AMOUNT PAID\",\r\n                        key: \"amountPaid\",\r\n                        dataIndex: \"amountPaid\",\r\n                        align: \"right\",\r\n                        render: (value) => {\r\n                          return <a>{thousandsSeparators(value)}</a>\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                </Flex>\r\n              </Grid>\r\n            </Grid> */\r\n}\r\n\r\n{\r\n  /* <Flex>\r\n                  <div style={{ flex: 1 }}>\r\n                    <h1>TOTAL AMOUNT PAID</h1>\r\n                  </div>\r\n                  {isSwitch ? (\r\n                    <span style={{ marginRight: \".5rem\" }}>Total Due</span>\r\n                  ) : (\r\n                    <span style={{ marginRight: \".5rem\" }}>Target Amount</span>\r\n                  )}\r\n                  <Switch\r\n                    checked={isSwitch}\r\n                    onChange={() => {\r\n                      setIsSwitch(!isSwitch)\r\n                    }}\r\n                  />\r\n                </Flex> */\r\n}\r\n{\r\n  /* <Flex>\r\n                  <LiquidChart percent={calculatePercent} />\r\n                  <div>\r\n                    <Tag color={isSwitch ? \"#2db7f5\" : \"\"}>\r\n                      {isSwitch ? \"Total Due\" : \"Target Amount\"}\r\n                    </Tag>\r\n                    {isSwitch ? (\r\n                      <div style={{ marginLeft: \".7rem\" }}>\r\n                        {thousandsSeparators(grandTotalDue)}\r\n                      </div>\r\n                    ) : (\r\n                      <div style={{ width: \"10rem\" }}>\r\n                        <Input\r\n                          value={targetAmount}\r\n                          bordered={false}\r\n                          onChange={(e) => setTargetAmount(e.target.value)}\r\n                          onBlur={(e) => {\r\n                            if (\r\n                              Number(e.target.value) < Number(grandAmountPaid)\r\n                            ) {\r\n                              setTargetAmount(grandAmountPaid)\r\n                            }\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    <br />\r\n                    <Tag color=\"#ff4d4f\">Amount Paid</Tag>\r\n                    <div style={{ marginLeft: \".7rem\" }}>\r\n                      {thousandsSeparators(grandAmountPaid)}\r\n                    </div>\r\n                  </div>\r\n                </Flex> */\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\LiquidChart\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\addMinusDay.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Styles\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\checkDate.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useRangeHandler.js",["707"],"import { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(ServiceClass) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n\r\n  const loadData = async (dates, fieldname) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataByDate(\r\n        [dates[0]._d, dates[1]._d],\r\n        fieldname,\r\n        user?.branchSelected\r\n      )\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByFn.js",["708"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentsByFn(ServiceClass) {\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n  const loadData = async (fieldname, value) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataByFieldname(fieldname, value)\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByKeyword.js",["709"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentsByKeyword(ServiceClass) {\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n  const loadData = async (fieldname, value) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataByFieldname(fieldname, value)\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderDetails.js",["710","711","712","713","714","715","716","717"],"import { Card, Col, Row, Space, Switch } from \"antd\"\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\"\r\nimport CustomDate from \"Components/Commons/CustomDate\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport {\r\n  DATE_TYPE,\r\n  DROPDOWN_TYPE,\r\n  STRING_TYPE,\r\n  TEXT_AREA_TYPE,\r\n} from \"Constants/types\"\r\nimport useGetDocumentsByFn from \"Hooks/useGetDocumentsByFn\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport CustomTextArea from \"Components/Commons/CustomTextArea\"\r\nimport {\r\n  producedDropdowns,\r\n  producedProductListOfAllCodes,\r\n} from \"Helpers/collectionData\"\r\nimport addMinusDay, { addMinutes, minusMinutes } from \"Helpers/addMinusDay\"\r\nimport { formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\n\r\nfunction OrderDetails({\r\n  channel,\r\n  modifiedData = () => {},\r\n  orderData,\r\n  tabs,\r\n  ...rest\r\n}) {\r\n  const [data] = useGetDocuments(ProductsClass)\r\n  const [dropdownCollections] = useGetDocuments(DropdownsClass)\r\n  const types = SchedulersClass.TYPES\r\n  const rowColumns = [SchedulersClass.DATE_START, SchedulersClass.DATE_END]\r\n\r\n  // this is for the value data States\r\n  const [dates, setDates] = useState({\r\n    [SchedulersClass.DATE_ORDER_PLACED]: new Date(),\r\n    [SchedulersClass.DATE_START]: new Date(),\r\n    [SchedulersClass.DATE_END]: addMinutes(new Date()),\r\n  })\r\n  const [dataValue, setDataValue] = useState({\r\n    [SchedulersClass.REMARKS]: \"RIDER DETAILS:\\nNAME:\\nCONTACT NUMBER:\",\r\n  })\r\n  //------------------//\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [firstColumns, setFirstColumns] = useState([\r\n    SchedulersClass.CUSTOMER,\r\n    SchedulersClass.CONTACT_NUMBER,\r\n  ])\r\n  const [rowColumnsBottom, setRowColumnsBottom] = useState([])\r\n  const [enableTimeGap, setEnableTimeGap] = useState(true)\r\n  const [secondColumns, setSecondColumns] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      modifiedData({ ...dates, ...dataValue })\r\n    }\r\n  }, [dates, dataValue])\r\n\r\n  useEffect(() => {\r\n    const _secondColumns = [SchedulersClass.UTAK_NO]\r\n    const _rowColumnsBot = [\r\n      SchedulersClass.STATUS,\r\n      SchedulersClass.INDICATE_REASON,\r\n      SchedulersClass.REMARKS,\r\n    ]\r\n    _secondColumns.push(channel)\r\n    if (channel === SchedulersClass.ORDER_VIA_PARTNER) {\r\n      _rowColumnsBot.splice(0, 0, SchedulersClass.PARTNER_MERCHANT_ORDER_NO)\r\n    }\r\n\r\n    setSecondColumns(_secondColumns)\r\n    setRowColumnsBottom(_rowColumnsBot)\r\n\r\n    // dataValue reset\r\n    const productCodes = producedProductListOfAllCodes(data)\r\n    const _orderData = { ...orderData }\r\n    for (const key of productCodes) {\r\n      delete _orderData[key]\r\n      delete _orderData[`customPrice${key}`]\r\n    }\r\n    delete _orderData[SchedulersClass.TOTAL_DUE]\r\n    let _dataValue = {\r\n      ..._orderData,\r\n    }\r\n\r\n    // order via renewed\r\n    for (const key of tabs) {\r\n      if (channel !== key) {\r\n        _dataValue[key] = null\r\n      }\r\n    }\r\n\r\n    if (Object.keys(_orderData).length > 0) {\r\n      // _dataValue = { ..._dataValue, ...orderData }\r\n\r\n      // this is for the date fields from database\r\n      const dateStart = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_START]\r\n      )\r\n      const dateEnd = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_END]\r\n      )\r\n      const dateTimePlaced = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_ORDER_PLACED]\r\n      )\r\n      setDates({\r\n        [SchedulersClass.DATE_START]: dateStart,\r\n        [SchedulersClass.DATE_END]: dateEnd,\r\n        [SchedulersClass.DATE_ORDER_PLACED]: dateTimePlaced,\r\n      })\r\n\r\n      //ramove date properties\r\n      delete _dataValue[SchedulersClass.DATE_START]\r\n      delete _dataValue[SchedulersClass.DATE_END]\r\n      delete _dataValue[SchedulersClass.DATE_ORDER_PLACED]\r\n      delete _dataValue[SchedulersClass.DATE_PAYMENT]\r\n    }\r\n    setDataValue(_dataValue)\r\n  }, [channel, data])\r\n\r\n  const handleChanges = (fieldName, value) => {\r\n    setIsTouched(true)\r\n    const _dataValue = { ...dataValue }\r\n    _dataValue[fieldName] = value\r\n    setDataValue(_dataValue)\r\n  }\r\n\r\n  const handleDateChanges = (fieldName, value) => {\r\n    setIsTouched(true)\r\n    const _dates = { ...dates }\r\n    _dates[fieldName] = value\r\n    if (enableTimeGap) {\r\n      if (fieldName === SchedulersClass.DATE_START) {\r\n        const datetime = addMinutes(value)\r\n        _dates[SchedulersClass.DATE_END] = datetime\r\n      }\r\n      if (fieldName === SchedulersClass.DATE_END) {\r\n        const datetime = minusMinutes(value)\r\n        _dates[SchedulersClass.DATE_START] = datetime\r\n      }\r\n    }\r\n    setDates(_dates)\r\n  }\r\n  console.log(\"value\", dataValue)\r\n  return (\r\n    <Card title=\"Order Details\">\r\n      <DateField\r\n        fieldName={SchedulersClass.DATE_ORDER_PLACED}\r\n        onChange={handleDateChanges}\r\n        value={dates[SchedulersClass.DATE_ORDER_PLACED]}\r\n      />\r\n      <Space style={{ marginTop: \"1rem\" }}>\r\n        <Switch\r\n          checked={enableTimeGap}\r\n          onChange={() => setEnableTimeGap(!enableTimeGap)}\r\n        />\r\n        <CustomTitle\r\n          typographyType=\"text\"\r\n          type=\"secondary\"\r\n          label={`${enableTimeGap ? \"Disable\" : \"Enable\"} Fixed Range`}\r\n        />\r\n      </Space>\r\n      <Space style={{ width: \"100%\", marginTop: \"1rem\" }}>\r\n        {rowColumns.map((key) => {\r\n          return (\r\n            <DateField\r\n              key={key}\r\n              fieldName={key}\r\n              onChange={handleDateChanges}\r\n              value={dates[key]}\r\n            />\r\n          )\r\n        })}\r\n      </Space>\r\n      <Row gutter={[8, 0]} style={{ width: \"100%\" }}>\r\n        <Col sm={12} style={{ width: \"100%\" }}>\r\n          <Space\r\n            direction=\"vertical\"\r\n            style={{ width: \"100%\", marginTop: \"1rem\" }}\r\n          >\r\n            {firstColumns.map((key) => {\r\n              switch (types[key]) {\r\n                case DROPDOWN_TYPE:\r\n                  return (\r\n                    <SelectField\r\n                      key={key}\r\n                      fieldName={key}\r\n                      onChange={handleChanges}\r\n                      value={dataValue[key]}\r\n                      dropdowns={dropdownCollections}\r\n                    />\r\n                  )\r\n                default:\r\n                  return (\r\n                    <StringField\r\n                      key={key}\r\n                      fieldName={key}\r\n                      value={dataValue[key]}\r\n                      onChange={handleChanges}\r\n                    />\r\n                  )\r\n              }\r\n            })}\r\n          </Space>\r\n        </Col>\r\n        <Col sm={12} style={{ width: \"100%\" }}>\r\n          <Space\r\n            direction=\"vertical\"\r\n            style={{ width: \"100%\", marginTop: \"1rem\" }}\r\n          >\r\n            {secondColumns.map((key) => {\r\n              switch (types[key]) {\r\n                case DROPDOWN_TYPE:\r\n                  return (\r\n                    <SelectField\r\n                      key={key}\r\n                      fieldName={key}\r\n                      onChange={handleChanges}\r\n                      dropdowns={dropdownCollections}\r\n                      value={dataValue[key]}\r\n                    />\r\n                  )\r\n                default:\r\n                  return (\r\n                    <StringField\r\n                      key={key}\r\n                      fieldName={key}\r\n                      onChange={handleChanges}\r\n                      value={dataValue[key]}\r\n                    />\r\n                  )\r\n              }\r\n            })}\r\n          </Space>\r\n        </Col>\r\n      </Row>\r\n      <Space direction=\"vertical\" style={{ width: \"100%\", marginTop: \"1rem\" }}>\r\n        {rowColumnsBottom.map((key) => {\r\n          switch (types[key]) {\r\n            case TEXT_AREA_TYPE:\r\n              return (\r\n                <TextAreaField\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n\r\n            case DROPDOWN_TYPE:\r\n              return (\r\n                <SelectField\r\n                  key={key}\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  dropdowns={dropdownCollections}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n            default:\r\n              return (\r\n                <StringField\r\n                  key={key}\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n          }\r\n        })}\r\n      </Space>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst StringField = (props) => {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <CustomInput\r\n        placeholder=\"Enter here\"\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(props.fieldName, e.target.value)}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst DateField = (props) => {\r\n  const { sm } = useBreakpoint()\r\n  const format = sm\r\n    ? {}\r\n    : {\r\n        format: \"MM/DD/YY hh:mm\",\r\n      }\r\n\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <CustomDate\r\n        value={props.value}\r\n        onChange={(obj) => {\r\n          if (obj) {\r\n            props.onChange(props.fieldName, obj?._d)\r\n          }\r\n        }}\r\n        {...format}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst SelectField = (props) => {\r\n  const dropdowns = props?.dropdowns || []\r\n  const findDropdownWithKey = dropdowns.find(\r\n    (data) => data[DropdownsClass.NAME] === props.fieldName\r\n  )\r\n  const list = findDropdownWithKey?.list || []\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <AutoSelect\r\n        options={[...list]}\r\n        width=\"100%\"\r\n        value={props.value}\r\n        onChange={(value) => props.onChange(props.fieldName, value)}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst TextAreaField = (props) => {\r\n  return (\r\n    <>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <CustomTextArea\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(props.fieldName, e.target.value)}\r\n      />\r\n    </>\r\n  )\r\n}\r\nexport default OrderDetails\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDate.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTextArea.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\useProductPurchased.js",["718","719","720","721","722"],"import {\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n} from \"Helpers/collectionData\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nexport default function useProductPurchased(orderData) {\r\n  const [data] = useGetDocuments(ProductsClass)\r\n  const [editableId, setEditableId] = useState(null)\r\n  const [codeObjList, setCodeObjList] = useState([])\r\n  const [productList, setProductList] = useState([])\r\n  const [products, setProducts] = useState([])\r\n  const [dataSource, setDataSource] = useState([])\r\n  const [totalDue, setTotalDue] = useState(0)\r\n  const [isTouched, setIsTouched] = useState(false)\r\n\r\n  // this is for active product button selected load when modified\r\n  useEffect(() => {\r\n    if (orderData) {\r\n      const productList = producedProductListOfAllCodes(data)\r\n      const checkedProductCodes = []\r\n      for (const key of productList) {\r\n        if (typeof orderData[key] !== \"undefined\") {\r\n          if (Number(orderData[key]) > 0) {\r\n            checkedProductCodes.push(key)\r\n          }\r\n        }\r\n      }\r\n      loadProductStates(data, checkedProductCodes)\r\n    }\r\n  }, [orderData, codeObjList])\r\n\r\n  // this is for product class loading\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      setProductList(data)\r\n      loadProductStates(data)\r\n\r\n      const _codeObjList = []\r\n      for (const { productList = [] } of data) {\r\n        for (const obj of productList) {\r\n          _codeObjList.push({ ...obj })\r\n        }\r\n      }\r\n      setCodeObjList(_codeObjList)\r\n    }\r\n  }, [data])\r\n\r\n  useEffect(() => {\r\n    if (codeObjList) {\r\n      const _dataSource = []\r\n      for (const code in products) {\r\n        if (products[code]) {\r\n          const _data = codeObjList.find(\r\n            (obj) => obj[ProductsClass.CODE] === code\r\n          )\r\n\r\n          const isDataExist = dataSource.find(\r\n            (obj) => obj[ProductsClass.CODE] === code\r\n          )\r\n          if (!isDataExist) {\r\n            const ifPriceEditable =\r\n              _data[ProductsClass.PRICE] === 0\r\n                ? {\r\n                    editable: true,\r\n                    [`customPrice${code}`]:\r\n                      orderData[[`customPrice${code}`]] || 0,\r\n                    price: orderData[[`customPrice${code}`]] || 0,\r\n                  }\r\n                : {}\r\n\r\n            _dataSource.push({\r\n              ..._data,\r\n              qty: orderData[code] > 0 ? orderData[code] : 1,\r\n              ...ifPriceEditable,\r\n            })\r\n          } else {\r\n            _dataSource.push({ ...isDataExist })\r\n          }\r\n        }\r\n      }\r\n\r\n      setDataSource(_dataSource)\r\n      handleTotalDue(_dataSource)\r\n    }\r\n  }, [products])\r\n\r\n  const handleTotalDue = (_dataSource) => {\r\n    //this is for total due\r\n    let _totalDue = 0\r\n    for (const obj of _dataSource) {\r\n      _totalDue = _totalDue + Number(obj?.price) * Number(obj?.qty)\r\n    }\r\n    setTotalDue(_totalDue)\r\n  }\r\n\r\n  const addProduct = (code, checked) => {\r\n    const _products = { ...products }\r\n    _products[code] = checked\r\n    setProducts(_products)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const loadProductStates = (_data, checkedProducts = []) => {\r\n    const list = producedProductListOfAllCodes(_data)\r\n    const _products = {}\r\n    for (const code of list) {\r\n      if (checkedProducts.includes(code)) {\r\n        _products[code] = true\r\n      } else {\r\n        _products[code] = false\r\n      }\r\n    }\r\n\r\n    setProducts(_products)\r\n  }\r\n\r\n  const handleEditing = (value, fieldName) => {\r\n    if (fieldName === \"qty\") {\r\n      if (isNaN(value)) return\r\n      if (Number(value) < 0) return\r\n    }\r\n    const _dataSource = [...dataSource]\r\n    const dataIndex = dataSource.findIndex((obj) => obj?.code === editableId)\r\n    const dataSourceObj = { ..._dataSource[dataIndex] }\r\n    dataSourceObj[fieldName] = Number(value)\r\n    _dataSource[dataIndex] = dataSourceObj\r\n    setDataSource(_dataSource)\r\n    handleTotalDue(_dataSource)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const handleEditPrice = (e) => {\r\n    const value = e.target.value\r\n    if (isNaN(value)) return\r\n    if (Number(value) < 0) return\r\n    const _dataSource = [...dataSource]\r\n    const dataIndex = dataSource.findIndex((obj) => obj?.code === editableId)\r\n    const dataSourceObj = { ..._dataSource[dataIndex] }\r\n    dataSourceObj[`customPrice${editableId}`] = Number(value)\r\n    dataSourceObj.price = Number(value)\r\n    _dataSource[dataIndex] = dataSourceObj\r\n    setDataSource(_dataSource)\r\n    handleTotalDue(_dataSource)\r\n    setIsTouched(true)\r\n  }\r\n  return {\r\n    products,\r\n    addProduct,\r\n    productList,\r\n    codeObjList,\r\n    dataSource,\r\n    handleEditing,\r\n    handleEditPrice,\r\n    editableId,\r\n    setEditableId,\r\n    totalDue,\r\n    isTouched,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\ProductPurchased.js",["723","724","725","726"],"import { Card, Space, Table, Tag } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport CustomModal from \"Components/Commons/CustomModal\"\r\nimport useProductPurchased from \"./useProductPurchased\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction ProductPurchased({ modifiedData = () => {}, orderData }) {\r\n  const {\r\n    products,\r\n    addProduct,\r\n    productList,\r\n    dataSource,\r\n    handleEditing,\r\n    editableId,\r\n    setEditableId,\r\n    handleEditPrice,\r\n    totalDue,\r\n    isTouched,\r\n  } = useProductPurchased(orderData)\r\n  useEffect(() => {\r\n    if (dataSource.length > 0 && isTouched) {\r\n      const modifiedObj = {}\r\n      // set default list of products\r\n      for (const key in products) {\r\n        modifiedObj[key] = 0\r\n      }\r\n      for (const obj of dataSource) {\r\n        modifiedObj[obj?.code] = obj?.qty\r\n        const customPrice = `customPrice${obj?.code}`\r\n        if (typeof obj[customPrice] !== \"undefined\") {\r\n          modifiedObj[customPrice] = obj[customPrice]\r\n        }\r\n        modifiedObj[SchedulersClass.TOTAL_DUE] = Number(totalDue)\r\n      }\r\n      modifiedData(modifiedObj)\r\n    }\r\n  }, [dataSource, isTouched])\r\n\r\n  return (\r\n    <Card\r\n      title=\"Product Purchased\"\r\n      actions={[\r\n        <Due label=\"Total Due\" value={totalDue} />,\r\n        <ActionButton\r\n          productList={productList}\r\n          addProduct={addProduct}\r\n          products={products}\r\n        />,\r\n      ]}\r\n    >\r\n      <Table\r\n        pagination={{ pageSize: 4 }}\r\n        dataSource={[...dataSource]}\r\n        columns={[\r\n          { title: \"Code\", dataIndex: \"code\", key: \"code\" },\r\n          {\r\n            title: \"Price\",\r\n            dataIndex: \"price\",\r\n            key: \"price\",\r\n            align: \"right\",\r\n            render: (value, record) => {\r\n              const isCustomPrice =\r\n                typeof record[`customPrice${record?.code}`] !== \"undefined\"\r\n              const customPrice = record[`customPrice${record?.code}`] || value\r\n              return editableId === record?.code && isCustomPrice ? (\r\n                <CustomInput\r\n                  value={customPrice}\r\n                  onChange={handleEditPrice}\r\n                  onPressEnter={() => setEditableId(null)}\r\n                />\r\n              ) : (\r\n                <span\r\n                  onClick={() => {\r\n                    setEditableId(record?.code)\r\n                  }}\r\n                >\r\n                  {thousandsSeparators(Number(customPrice).toFixed(2))}\r\n                </span>\r\n              )\r\n            },\r\n          },\r\n          {\r\n            title: \"Qty\",\r\n            dataIndex: \"qty\",\r\n            key: \"qty\",\r\n            render: (value, record) => {\r\n              return editableId === record?.code ? (\r\n                <CustomInput\r\n                  value={value}\r\n                  onChange={(e) => handleEditing(e.target.value, \"qty\")}\r\n                  onPressEnter={() => setEditableId(null)}\r\n                />\r\n              ) : (\r\n                <span\r\n                  onClick={() => {\r\n                    setEditableId(record?.code)\r\n                  }}\r\n                >\r\n                  {value}\r\n                </span>\r\n              )\r\n            },\r\n          },\r\n          {\r\n            title: \"Total\",\r\n            dataIndex: \"total\",\r\n            key: \"total\",\r\n            align: \"right\",\r\n            render: (value, record) => {\r\n              return (\r\n                <span>\r\n                  {thousandsSeparators(\r\n                    (Number(record?.price) * Number(record?.qty)).toFixed(2)\r\n                  )}\r\n                </span>\r\n              )\r\n            },\r\n          },\r\n        ]}\r\n        size=\"small\"\r\n      />\r\n    </Card>\r\n  )\r\n}\r\nconst Due = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <span style={{ position: \"absolute\", fontSize: \"10px\" }}>\r\n        {props.label}\r\n      </span>\r\n      <span style={{ position: \"absolute\", top: \"1rem\", color: \"red\" }}>\r\n        {thousandsSeparators(Number(props.value).toFixed(2))}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ActionButton = ({\r\n  productList = [],\r\n  addProduct = () => {},\r\n  products,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <CustomModal\r\n        title=\"Product list\"\r\n        buttonLabel=\"Add Product\"\r\n        footer={false}\r\n      >\r\n        <Space\r\n          direction=\"vertical\"\r\n          wrap\r\n          style={{ width: \"100%\", justifyContent: \"center\" }}\r\n        >\r\n          {productList.map((obj) => {\r\n            return (\r\n              <Space direction=\"vertical\">\r\n                <CustomTitle\r\n                  typographyType=\"text\"\r\n                  type=\"secondary\"\r\n                  label={obj[ProductsClass.GROUP_HEADER]}\r\n                />\r\n                <Space wrap>\r\n                  {obj[ProductsClass.PRODUCT_LIST].map(\r\n                    ({ code, description }) => {\r\n                      return (\r\n                        <MainButton\r\n                          label={`${code} : ${description}`}\r\n                          type=\"default\"\r\n                          onClick={() => addProduct(code, !products[code])}\r\n                          type={products[code] ? \"primary\" : \"default\"}\r\n                        />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Space>\r\n              </Space>\r\n            )\r\n          })}\r\n        </Space>\r\n      </CustomModal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductPurchased\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomModal.js",[],{"ruleId":"727","replacedBy":"728"},{"ruleId":"729","replacedBy":"730"},{"ruleId":"731","severity":1,"message":"732","line":1,"column":29,"nodeType":"733","messageId":"734","endLine":1,"endColumn":38},{"ruleId":"731","severity":1,"message":"735","line":4,"column":35,"nodeType":"733","messageId":"734","endLine":4,"endColumn":41},{"ruleId":"736","severity":1,"message":"737","line":12,"column":1,"nodeType":"738","endLine":20,"endColumn":2},{"ruleId":"731","severity":1,"message":"739","line":53,"column":7,"nodeType":"733","messageId":"734","endLine":53,"endColumn":16},{"ruleId":"731","severity":1,"message":"740","line":10,"column":28,"nodeType":"733","messageId":"734","endLine":10,"endColumn":37},{"ruleId":"731","severity":1,"message":"741","line":1,"column":8,"nodeType":"733","messageId":"734","endLine":1,"endColumn":25},{"ruleId":"742","severity":1,"message":"743","line":66,"column":9,"nodeType":"744","messageId":"745","endLine":66,"endColumn":21},{"ruleId":"731","severity":1,"message":"746","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":32},{"ruleId":"731","severity":1,"message":"747","line":5,"column":17,"nodeType":"733","messageId":"734","endLine":5,"endColumn":27},{"ruleId":"731","severity":1,"message":"732","line":5,"column":29,"nodeType":"733","messageId":"734","endLine":5,"endColumn":38},{"ruleId":"731","severity":1,"message":"748","line":8,"column":8,"nodeType":"733","messageId":"734","endLine":8,"endColumn":26},{"ruleId":"749","severity":1,"message":"750","line":10,"column":21,"nodeType":"751","messageId":"745","endLine":10,"endColumn":23},{"ruleId":"752","severity":1,"message":"753","line":24,"column":9,"nodeType":"754","endLine":24,"endColumn":63},{"ruleId":"731","severity":1,"message":"755","line":12,"column":10,"nodeType":"733","messageId":"734","endLine":12,"endColumn":16},{"ruleId":"756","severity":1,"message":"757","line":20,"column":6,"nodeType":"758","endLine":20,"endColumn":25,"suggestions":"759"},{"ruleId":"756","severity":1,"message":"760","line":27,"column":6,"nodeType":"758","endLine":27,"endColumn":32,"suggestions":"761"},{"ruleId":"756","severity":1,"message":"762","line":27,"column":7,"nodeType":"763","endLine":27,"endColumn":31},{"ruleId":"731","severity":1,"message":"735","line":29,"column":10,"nodeType":"733","messageId":"734","endLine":29,"endColumn":16},{"ruleId":"731","severity":1,"message":"764","line":29,"column":18,"nodeType":"733","messageId":"734","endLine":29,"endColumn":23},{"ruleId":"731","severity":1,"message":"765","line":30,"column":10,"nodeType":"733","messageId":"734","endLine":30,"endColumn":23},{"ruleId":"736","severity":1,"message":"766","line":42,"column":1,"nodeType":"738","endLine":69,"endColumn":2},{"ruleId":"731","severity":1,"message":"732","line":4,"column":29,"nodeType":"733","messageId":"734","endLine":4,"endColumn":38},{"ruleId":"731","severity":1,"message":"767","line":4,"column":40,"nodeType":"733","messageId":"734","endLine":4,"endColumn":48},{"ruleId":"768","severity":1,"message":"769","line":28,"column":9,"nodeType":"770","endLine":28,"endColumn":58},{"ruleId":"768","severity":1,"message":"769","line":53,"column":9,"nodeType":"770","endLine":53,"endColumn":58},{"ruleId":"731","severity":1,"message":"771","line":69,"column":11,"nodeType":"733","messageId":"734","endLine":69,"endColumn":13},{"ruleId":"731","severity":1,"message":"732","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"732","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"772","line":12,"column":3,"nodeType":"733","messageId":"734","endLine":12,"endColumn":8},{"ruleId":"731","severity":1,"message":"773","line":1,"column":10,"nodeType":"733","messageId":"734","endLine":1,"endColumn":20},{"ruleId":"731","severity":1,"message":"747","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":20},{"ruleId":"731","severity":1,"message":"774","line":4,"column":10,"nodeType":"733","messageId":"734","endLine":4,"endColumn":28},{"ruleId":"731","severity":1,"message":"732","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"767","line":1,"column":36,"nodeType":"733","messageId":"734","endLine":1,"endColumn":44},{"ruleId":"731","severity":1,"message":"775","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":14},{"ruleId":"731","severity":1,"message":"776","line":3,"column":37,"nodeType":"733","messageId":"734","endLine":3,"endColumn":46},{"ruleId":"731","severity":1,"message":"732","line":4,"column":17,"nodeType":"733","messageId":"734","endLine":4,"endColumn":26},{"ruleId":"731","severity":1,"message":"777","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":26},{"ruleId":"731","severity":1,"message":"778","line":6,"column":8,"nodeType":"733","messageId":"734","endLine":6,"endColumn":23},{"ruleId":"731","severity":1,"message":"779","line":8,"column":8,"nodeType":"733","messageId":"734","endLine":8,"endColumn":18},{"ruleId":"731","severity":1,"message":"780","line":9,"column":10,"nodeType":"733","messageId":"734","endLine":9,"endColumn":15},{"ruleId":"731","severity":1,"message":"781","line":10,"column":8,"nodeType":"733","messageId":"734","endLine":10,"endColumn":19},{"ruleId":"731","severity":1,"message":"782","line":11,"column":8,"nodeType":"733","messageId":"734","endLine":11,"endColumn":19},{"ruleId":"731","severity":1,"message":"783","line":12,"column":8,"nodeType":"733","messageId":"734","endLine":12,"endColumn":23},{"ruleId":"731","severity":1,"message":"784","line":16,"column":8,"nodeType":"733","messageId":"734","endLine":16,"endColumn":16},{"ruleId":"731","severity":1,"message":"785","line":17,"column":9,"nodeType":"733","messageId":"734","endLine":17,"endColumn":16},{"ruleId":"731","severity":1,"message":"786","line":22,"column":10,"nodeType":"733","messageId":"734","endLine":22,"endColumn":22},{"ruleId":"731","severity":1,"message":"732","line":2,"column":17,"nodeType":"733","messageId":"734","endLine":2,"endColumn":26},{"ruleId":"752","severity":1,"message":"753","line":19,"column":11,"nodeType":"754","endLine":19,"endColumn":22},{"ruleId":"752","severity":1,"message":"753","line":31,"column":11,"nodeType":"754","endLine":31,"endColumn":22},{"ruleId":"752","severity":1,"message":"753","line":46,"column":11,"nodeType":"754","endLine":46,"endColumn":22},{"ruleId":"752","severity":1,"message":"753","line":61,"column":11,"nodeType":"754","endLine":61,"endColumn":22},{"ruleId":"731","severity":1,"message":"787","line":4,"column":38,"nodeType":"733","messageId":"734","endLine":4,"endColumn":48},{"ruleId":"736","severity":1,"message":"737","line":8,"column":1,"nodeType":"738","endLine":26,"endColumn":2},{"ruleId":"731","severity":1,"message":"732","line":1,"column":10,"nodeType":"733","messageId":"734","endLine":1,"endColumn":19},{"ruleId":"731","severity":1,"message":"780","line":1,"column":26,"nodeType":"733","messageId":"734","endLine":1,"endColumn":31},{"ruleId":"731","severity":1,"message":"732","line":2,"column":17,"nodeType":"733","messageId":"734","endLine":2,"endColumn":26},{"ruleId":"788","severity":1,"message":"789","line":70,"column":15,"nodeType":"790","messageId":"791","endLine":70,"endColumn":16,"suggestions":"792"},{"ruleId":"788","severity":1,"message":"789","line":70,"column":40,"nodeType":"790","messageId":"791","endLine":70,"endColumn":41,"suggestions":"793"},{"ruleId":"756","severity":1,"message":"794","line":165,"column":6,"nodeType":"758","endLine":165,"endColumn":17,"suggestions":"795"},{"ruleId":"756","severity":1,"message":"796","line":169,"column":6,"nodeType":"758","endLine":169,"endColumn":20,"suggestions":"797"},{"ruleId":"756","severity":1,"message":"798","line":173,"column":6,"nodeType":"758","endLine":173,"endColumn":22,"suggestions":"799"},{"ruleId":"731","severity":1,"message":"800","line":251,"column":7,"nodeType":"733","messageId":"734","endLine":251,"endColumn":22},{"ruleId":"731","severity":1,"message":"801","line":1,"column":10,"nodeType":"733","messageId":"734","endLine":1,"endColumn":17},{"ruleId":"731","severity":1,"message":"802","line":1,"column":26,"nodeType":"733","messageId":"734","endLine":1,"endColumn":31},{"ruleId":"731","severity":1,"message":"803","line":1,"column":33,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"804","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":25},{"ruleId":"731","severity":1,"message":"805","line":12,"column":10,"nodeType":"733","messageId":"734","endLine":12,"endColumn":20},{"ruleId":"731","severity":1,"message":"767","line":15,"column":28,"nodeType":"733","messageId":"734","endLine":15,"endColumn":36},{"ruleId":"756","severity":1,"message":"806","line":12,"column":6,"nodeType":"758","endLine":12,"endColumn":20,"suggestions":"807"},{"ruleId":"808","severity":1,"message":"809","line":18,"column":3,"nodeType":"810","messageId":"811","endLine":21,"endColumn":4},{"ruleId":"731","severity":1,"message":"812","line":3,"column":3,"nodeType":"733","messageId":"734","endLine":3,"endColumn":23},{"ruleId":"731","severity":1,"message":"813","line":3,"column":3,"nodeType":"733","messageId":"734","endLine":3,"endColumn":9},{"ruleId":"731","severity":1,"message":"814","line":5,"column":3,"nodeType":"733","messageId":"734","endLine":5,"endColumn":9},{"ruleId":"731","severity":1,"message":"815","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":6},{"ruleId":"731","severity":1,"message":"816","line":10,"column":3,"nodeType":"733","messageId":"734","endLine":10,"endColumn":12},{"ruleId":"731","severity":1,"message":"817","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":9},{"ruleId":"731","severity":1,"message":"818","line":15,"column":10,"nodeType":"733","messageId":"734","endLine":15,"endColumn":32},{"ruleId":"731","severity":1,"message":"819","line":15,"column":34,"nodeType":"733","messageId":"734","endLine":15,"endColumn":48},{"ruleId":"756","severity":1,"message":"806","line":11,"column":6,"nodeType":"758","endLine":11,"endColumn":10,"suggestions":"820"},{"ruleId":"731","severity":1,"message":"821","line":1,"column":10,"nodeType":"733","messageId":"734","endLine":1,"endColumn":30},{"ruleId":"731","severity":1,"message":"822","line":16,"column":10,"nodeType":"733","messageId":"734","endLine":16,"endColumn":22},{"ruleId":"731","severity":1,"message":"823","line":16,"column":24,"nodeType":"733","messageId":"734","endLine":16,"endColumn":40},{"ruleId":"756","severity":1,"message":"824","line":56,"column":6,"nodeType":"758","endLine":56,"endColumn":22,"suggestions":"825"},{"ruleId":"756","severity":1,"message":"824","line":60,"column":6,"nodeType":"758","endLine":60,"endColumn":12,"suggestions":"826"},{"ruleId":"756","severity":1,"message":"806","line":75,"column":6,"nodeType":"758","endLine":75,"endColumn":20,"suggestions":"827"},{"ruleId":"808","severity":1,"message":"809","line":190,"column":5,"nodeType":"810","messageId":"811","endLine":238,"endColumn":6},{"ruleId":"731","severity":1,"message":"828","line":1,"column":8,"nodeType":"733","messageId":"734","endLine":1,"endColumn":27},{"ruleId":"736","severity":1,"message":"829","line":3,"column":1,"nodeType":"738","endLine":19,"endColumn":2},{"ruleId":"830","severity":1,"message":"831","line":49,"column":55,"nodeType":"832","messageId":"833","endLine":49,"endColumn":57},{"ruleId":"731","severity":1,"message":"834","line":1,"column":28,"nodeType":"733","messageId":"734","endLine":1,"endColumn":34},{"ruleId":"731","severity":1,"message":"735","line":4,"column":17,"nodeType":"733","messageId":"734","endLine":4,"endColumn":23},{"ruleId":"731","severity":1,"message":"782","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":19},{"ruleId":"731","severity":1,"message":"835","line":13,"column":8,"nodeType":"733","messageId":"734","endLine":13,"endColumn":24},{"ruleId":"808","severity":1,"message":"809","line":64,"column":17,"nodeType":"810","messageId":"811","endLine":101,"endColumn":18},{"ruleId":"731","severity":1,"message":"781","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":19},{"ruleId":"756","severity":1,"message":"836","line":37,"column":6,"nodeType":"758","endLine":37,"endColumn":15,"suggestions":"837"},{"ruleId":"752","severity":1,"message":"753","line":139,"column":9,"nodeType":"754","endLine":139,"endColumn":33},{"ruleId":"756","severity":1,"message":"838","line":12,"column":6,"nodeType":"758","endLine":12,"endColumn":28,"suggestions":"839"},{"ruleId":"756","severity":1,"message":"840","line":18,"column":6,"nodeType":"758","endLine":18,"endColumn":24,"suggestions":"841"},{"ruleId":"756","severity":1,"message":"840","line":15,"column":6,"nodeType":"758","endLine":15,"endColumn":23,"suggestions":"842"},{"ruleId":"756","severity":1,"message":"843","line":19,"column":6,"nodeType":"758","endLine":19,"endColumn":20,"suggestions":"844"},{"ruleId":"756","severity":1,"message":"838","line":12,"column":6,"nodeType":"758","endLine":12,"endColumn":27,"suggestions":"845"},{"ruleId":"756","severity":1,"message":"840","line":18,"column":6,"nodeType":"758","endLine":18,"endColumn":24,"suggestions":"846"},{"ruleId":"731","severity":1,"message":"834","line":1,"column":28,"nodeType":"733","messageId":"734","endLine":1,"endColumn":34},{"ruleId":"731","severity":1,"message":"735","line":4,"column":17,"nodeType":"733","messageId":"734","endLine":4,"endColumn":23},{"ruleId":"731","severity":1,"message":"782","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":19},{"ruleId":"731","severity":1,"message":"835","line":13,"column":8,"nodeType":"733","messageId":"734","endLine":13,"endColumn":24},{"ruleId":"731","severity":1,"message":"784","line":14,"column":8,"nodeType":"733","messageId":"734","endLine":14,"endColumn":16},{"ruleId":"731","severity":1,"message":"777","line":15,"column":8,"nodeType":"733","messageId":"734","endLine":15,"endColumn":26},{"ruleId":"808","severity":1,"message":"809","line":90,"column":15,"nodeType":"810","messageId":"811","endLine":120,"endColumn":16},{"ruleId":"736","severity":1,"message":"829","line":5,"column":1,"nodeType":"738","endLine":14,"endColumn":2},{"ruleId":"736","severity":1,"message":"829","line":30,"column":1,"nodeType":"738","endLine":196,"endColumn":2},{"ruleId":"731","severity":1,"message":"847","line":1,"column":33,"nodeType":"733","messageId":"734","endLine":1,"endColumn":37},{"ruleId":"731","severity":1,"message":"747","line":3,"column":38,"nodeType":"733","messageId":"734","endLine":3,"endColumn":48},{"ruleId":"731","severity":1,"message":"781","line":6,"column":8,"nodeType":"733","messageId":"734","endLine":6,"endColumn":19},{"ruleId":"731","severity":1,"message":"848","line":8,"column":8,"nodeType":"733","messageId":"734","endLine":8,"endColumn":19},{"ruleId":"731","severity":1,"message":"849","line":11,"column":10,"nodeType":"733","messageId":"734","endLine":11,"endColumn":14},{"ruleId":"756","severity":1,"message":"850","line":39,"column":6,"nodeType":"758","endLine":39,"endColumn":10,"suggestions":"851"},{"ruleId":"756","severity":1,"message":"852","line":53,"column":6,"nodeType":"758","endLine":53,"endColumn":17,"suggestions":"853"},{"ruleId":"731","severity":1,"message":"854","line":59,"column":13,"nodeType":"733","messageId":"734","endLine":59,"endColumn":19},{"ruleId":"731","severity":1,"message":"855","line":246,"column":7,"nodeType":"733","messageId":"734","endLine":246,"endColumn":19},{"ruleId":"731","severity":1,"message":"856","line":250,"column":7,"nodeType":"733","messageId":"734","endLine":250,"endColumn":26},{"ruleId":"731","severity":1,"message":"857","line":254,"column":7,"nodeType":"733","messageId":"734","endLine":254,"endColumn":17},{"ruleId":"731","severity":1,"message":"858","line":260,"column":7,"nodeType":"733","messageId":"734","endLine":260,"endColumn":28},{"ruleId":"731","severity":1,"message":"859","line":1,"column":8,"nodeType":"733","messageId":"734","endLine":1,"endColumn":13},{"ruleId":"731","severity":1,"message":"860","line":8,"column":11,"nodeType":"733","messageId":"734","endLine":8,"endColumn":19},{"ruleId":"756","severity":1,"message":"806","line":17,"column":6,"nodeType":"758","endLine":17,"endColumn":25,"suggestions":"861"},{"ruleId":"731","severity":1,"message":"862","line":10,"column":3,"nodeType":"733","messageId":"734","endLine":10,"endColumn":14},{"ruleId":"731","severity":1,"message":"863","line":11,"column":3,"nodeType":"733","messageId":"734","endLine":11,"endColumn":9},{"ruleId":"731","severity":1,"message":"864","line":16,"column":10,"nodeType":"733","messageId":"734","endLine":16,"endColumn":21},{"ruleId":"731","severity":1,"message":"865","line":16,"column":23,"nodeType":"733","messageId":"734","endLine":16,"endColumn":32},{"ruleId":"756","severity":1,"message":"866","line":110,"column":6,"nodeType":"758","endLine":110,"endColumn":33,"suggestions":"867"},{"ruleId":"731","severity":1,"message":"781","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":19},{"ruleId":"731","severity":1,"message":"782","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":19},{"ruleId":"731","severity":1,"message":"822","line":5,"column":10,"nodeType":"733","messageId":"734","endLine":5,"endColumn":22},{"ruleId":"756","severity":1,"message":"838","line":21,"column":6,"nodeType":"758","endLine":21,"endColumn":28,"suggestions":"868"},{"ruleId":"756","severity":1,"message":"840","line":27,"column":6,"nodeType":"758","endLine":27,"endColumn":24,"suggestions":"869"},{"ruleId":"731","severity":1,"message":"821","line":1,"column":10,"nodeType":"733","messageId":"734","endLine":1,"endColumn":30},{"ruleId":"731","severity":1,"message":"870","line":1,"column":43,"nodeType":"733","messageId":"734","endLine":1,"endColumn":54},{"ruleId":"731","severity":1,"message":"781","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":19},{"ruleId":"731","severity":1,"message":"870","line":6,"column":21,"nodeType":"733","messageId":"734","endLine":6,"endColumn":32},{"ruleId":"731","severity":1,"message":"778","line":7,"column":8,"nodeType":"733","messageId":"734","endLine":7,"endColumn":23},{"ruleId":"756","severity":1,"message":"871","line":32,"column":6,"nodeType":"758","endLine":32,"endColumn":13,"suggestions":"872"},{"ruleId":"731","severity":1,"message":"780","line":2,"column":22,"nodeType":"733","messageId":"734","endLine":2,"endColumn":27},{"ruleId":"731","severity":1,"message":"873","line":21,"column":3,"nodeType":"733","messageId":"734","endLine":21,"endColumn":9},{"ruleId":"731","severity":1,"message":"874","line":23,"column":3,"nodeType":"733","messageId":"734","endLine":23,"endColumn":16},{"ruleId":"731","severity":1,"message":"875","line":24,"column":3,"nodeType":"733","messageId":"734","endLine":24,"endColumn":9},{"ruleId":"731","severity":1,"message":"780","line":1,"column":15,"nodeType":"733","messageId":"734","endLine":1,"endColumn":20},{"ruleId":"876","severity":1,"message":"877","line":38,"column":23,"nodeType":"770","endLine":38,"endColumn":26},{"ruleId":"731","severity":1,"message":"878","line":3,"column":10,"nodeType":"733","messageId":"734","endLine":3,"endColumn":17},{"ruleId":"731","severity":1,"message":"818","line":5,"column":10,"nodeType":"733","messageId":"734","endLine":5,"endColumn":32},{"ruleId":"731","severity":1,"message":"879","line":5,"column":34,"nodeType":"733","messageId":"734","endLine":5,"endColumn":49},{"ruleId":"731","severity":1,"message":"780","line":1,"column":15,"nodeType":"733","messageId":"734","endLine":1,"endColumn":20},{"ruleId":"876","severity":1,"message":"877","line":44,"column":23,"nodeType":"770","endLine":44,"endColumn":26},{"ruleId":"731","severity":1,"message":"732","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":19},{"ruleId":"731","severity":1,"message":"880","line":11,"column":10,"nodeType":"733","messageId":"734","endLine":11,"endColumn":19},{"ruleId":"731","severity":1,"message":"881","line":11,"column":21,"nodeType":"733","messageId":"734","endLine":11,"endColumn":33},{"ruleId":"731","severity":1,"message":"882","line":81,"column":11,"nodeType":"733","messageId":"734","endLine":81,"endColumn":23},{"ruleId":"731","severity":1,"message":"732","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"883","line":14,"column":7,"nodeType":"733","messageId":"734","endLine":14,"endColumn":24},{"ruleId":"884","severity":1,"message":"885","line":30,"column":26,"nodeType":"770","endLine":30,"endColumn":68},{"ruleId":"884","severity":1,"message":"885","line":43,"column":21,"nodeType":"770","endLine":49,"endColumn":23},{"ruleId":"884","severity":1,"message":"885","line":59,"column":26,"nodeType":"770","endLine":59,"endColumn":68},{"ruleId":"731","severity":1,"message":"886","line":1,"column":30,"nodeType":"733","messageId":"734","endLine":1,"endColumn":35},{"ruleId":"731","severity":1,"message":"735","line":1,"column":37,"nodeType":"733","messageId":"734","endLine":1,"endColumn":43},{"ruleId":"731","severity":1,"message":"803","line":1,"column":52,"nodeType":"733","messageId":"734","endLine":1,"endColumn":55},{"ruleId":"731","severity":1,"message":"887","line":18,"column":8,"nodeType":"733","messageId":"734","endLine":18,"endColumn":19},{"ruleId":"731","severity":1,"message":"888","line":20,"column":3,"nodeType":"733","messageId":"734","endLine":20,"endColumn":16},{"ruleId":"731","severity":1,"message":"889","line":23,"column":8,"nodeType":"733","messageId":"734","endLine":23,"endColumn":17},{"ruleId":"756","severity":1,"message":"806","line":57,"column":6,"nodeType":"758","endLine":57,"endColumn":30,"suggestions":"890"},{"ruleId":"756","severity":1,"message":"843","line":61,"column":6,"nodeType":"758","endLine":61,"endColumn":16,"suggestions":"891"},{"ruleId":"892","severity":2,"message":"893","line":78,"column":73,"nodeType":"733","messageId":"894","endLine":78,"endColumn":78},{"ruleId":"731","severity":1,"message":"895","line":160,"column":9,"nodeType":"733","messageId":"734","endLine":160,"endColumn":25},{"ruleId":"876","severity":1,"message":"877","line":199,"column":16,"nodeType":"770","endLine":199,"endColumn":19},{"ruleId":"876","severity":1,"message":"877","line":208,"column":16,"nodeType":"770","endLine":208,"endColumn":19},{"ruleId":"876","severity":1,"message":"877","line":308,"column":30,"nodeType":"770","endLine":308,"endColumn":33},{"ruleId":"876","severity":1,"message":"877","line":338,"column":30,"nodeType":"770","endLine":338,"endColumn":33},{"ruleId":"896","severity":1,"message":"897","line":590,"column":1,"nodeType":"898","messageId":"899","endLine":607,"endColumn":2},{"ruleId":"896","severity":1,"message":"897","line":608,"column":1,"nodeType":"898","messageId":"899","endLine":642,"endColumn":2},{"ruleId":"731","severity":1,"message":"886","line":1,"column":30,"nodeType":"733","messageId":"734","endLine":1,"endColumn":35},{"ruleId":"731","severity":1,"message":"735","line":1,"column":37,"nodeType":"733","messageId":"734","endLine":1,"endColumn":43},{"ruleId":"731","severity":1,"message":"888","line":20,"column":3,"nodeType":"733","messageId":"734","endLine":20,"endColumn":16},{"ruleId":"731","severity":1,"message":"889","line":23,"column":8,"nodeType":"733","messageId":"734","endLine":23,"endColumn":17},{"ruleId":"731","severity":1,"message":"900","line":57,"column":10,"nodeType":"733","messageId":"734","endLine":57,"endColumn":22},{"ruleId":"731","severity":1,"message":"901","line":58,"column":10,"nodeType":"733","messageId":"734","endLine":58,"endColumn":18},{"ruleId":"731","severity":1,"message":"902","line":59,"column":19,"nodeType":"733","messageId":"734","endLine":59,"endColumn":29},{"ruleId":"756","severity":1,"message":"806","line":62,"column":6,"nodeType":"758","endLine":62,"endColumn":30,"suggestions":"903"},{"ruleId":"756","severity":1,"message":"843","line":66,"column":6,"nodeType":"758","endLine":66,"endColumn":16,"suggestions":"904"},{"ruleId":"876","severity":1,"message":"877","line":234,"column":16,"nodeType":"770","endLine":234,"endColumn":19},{"ruleId":"876","severity":1,"message":"877","line":243,"column":16,"nodeType":"770","endLine":243,"endColumn":19},{"ruleId":"731","severity":1,"message":"905","line":248,"column":9,"nodeType":"733","messageId":"734","endLine":248,"endColumn":23},{"ruleId":"876","severity":1,"message":"877","line":349,"column":30,"nodeType":"770","endLine":349,"endColumn":33},{"ruleId":"830","severity":1,"message":"906","line":364,"column":34,"nodeType":"832","messageId":"833","endLine":364,"endColumn":36},{"ruleId":"876","severity":1,"message":"877","line":383,"column":30,"nodeType":"770","endLine":383,"endColumn":33},{"ruleId":"830","severity":1,"message":"906","line":595,"column":37,"nodeType":"832","messageId":"833","endLine":595,"endColumn":39},{"ruleId":"896","severity":1,"message":"897","line":628,"column":1,"nodeType":"898","messageId":"899","endLine":729,"endColumn":2},{"ruleId":"896","severity":1,"message":"897","line":731,"column":1,"nodeType":"898","messageId":"899","endLine":748,"endColumn":2},{"ruleId":"896","severity":1,"message":"897","line":749,"column":1,"nodeType":"898","messageId":"899","endLine":783,"endColumn":2},{"ruleId":"731","severity":1,"message":"732","line":3,"column":22,"nodeType":"733","messageId":"734","endLine":3,"endColumn":31},{"ruleId":"731","severity":1,"message":"732","line":2,"column":22,"nodeType":"733","messageId":"734","endLine":2,"endColumn":31},{"ruleId":"731","severity":1,"message":"732","line":2,"column":22,"nodeType":"733","messageId":"734","endLine":2,"endColumn":31},{"ruleId":"731","severity":1,"message":"907","line":10,"column":3,"nodeType":"733","messageId":"734","endLine":10,"endColumn":12},{"ruleId":"731","severity":1,"message":"870","line":12,"column":3,"nodeType":"733","messageId":"734","endLine":12,"endColumn":14},{"ruleId":"731","severity":1,"message":"908","line":15,"column":8,"nodeType":"733","messageId":"734","endLine":15,"endColumn":27},{"ruleId":"731","severity":1,"message":"909","line":20,"column":3,"nodeType":"733","messageId":"734","endLine":20,"endColumn":20},{"ruleId":"731","severity":1,"message":"910","line":23,"column":8,"nodeType":"733","messageId":"734","endLine":23,"endColumn":19},{"ruleId":"731","severity":1,"message":"911","line":50,"column":24,"nodeType":"733","messageId":"734","endLine":50,"endColumn":39},{"ruleId":"756","severity":1,"message":"912","line":62,"column":6,"nodeType":"758","endLine":62,"endColumn":24,"suggestions":"913"},{"ruleId":"756","severity":1,"message":"914","line":124,"column":6,"nodeType":"758","endLine":124,"endColumn":21,"suggestions":"915"},{"ruleId":"731","severity":1,"message":"916","line":3,"column":3,"nodeType":"733","messageId":"734","endLine":3,"endColumn":41},{"ruleId":"731","severity":1,"message":"917","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":16},{"ruleId":"731","severity":1,"message":"859","line":7,"column":8,"nodeType":"733","messageId":"734","endLine":7,"endColumn":13},{"ruleId":"756","severity":1,"message":"918","line":33,"column":6,"nodeType":"758","endLine":33,"endColumn":30,"suggestions":"919"},{"ruleId":"756","severity":1,"message":"920","line":88,"column":6,"nodeType":"758","endLine":88,"endColumn":16,"suggestions":"921"},{"ruleId":"731","severity":1,"message":"803","line":1,"column":30,"nodeType":"733","messageId":"734","endLine":1,"endColumn":33},{"ruleId":"731","severity":1,"message":"767","line":3,"column":28,"nodeType":"733","messageId":"734","endLine":3,"endColumn":36},{"ruleId":"756","severity":1,"message":"922","line":42,"column":6,"nodeType":"758","endLine":42,"endColumn":29,"suggestions":"923"},{"ruleId":"752","severity":1,"message":"753","line":190,"column":27,"nodeType":"754","endLine":190,"endColumn":72},"no-native-reassign",["924"],"no-negated-in-lhs",["925"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'firestore' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'useAuthentication' is defined but never used.","no-dupe-keys","Duplicate key 'setIsLoading'.","ObjectExpression","unexpected","'DashboardTransactionPage' is defined but never used.","'useContext' is defined but never used.","'RouteWithSubRoutes' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'loaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.","ArrayExpression",["926"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["927"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","Assign object to a variable before exporting as module default","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'sm' is assigned a value but never used.","'limit' is defined but never used.","'useHistory' is defined but never used.","'UnavailableContext' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'useGetDocumentById' is defined but never used.","'SchedulersClass' is defined but never used.","'MainButton' is defined but never used.","'Space' is defined but never used.","'CustomInput' is defined but never used.","'CustomTitle' is defined but never used.","'useGetDocuments' is defined but never used.","'useQuery' is defined but never used.","'TabPane' is assigned a value but never used.","'dataSelected' is assigned a value but never used.","'Typography' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["928","929"],["930","931"],"React Hook useEffect has a missing dependency: 'setFilteredData'. Either include it or remove the dependency array.",["932"],"React Hook useEffect has missing dependencies: 'rangeData' and 'setFilteredData'. Either include them or remove the dependency array.",["933"],"React Hook useEffect has missing dependencies: 'clearDocumentData' and 'clearRangeData'. Either include them or remove the dependency array.",["934"],"'MobileTableView' is assigned a value but never used.","'Popover' is defined but never used.","'Table' is defined but never used.","'Tag' is defined but never used.","'formatDateDashWithTime' is defined but never used.","'sumNumbers' is defined but never used.","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["935"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'ARRAY_OF_OBJECT_TYPE' is defined but never used.","'addDoc' is defined but never used.","'getDoc' is defined but never used.","'doc' is defined but never used.","'updateDoc' is defined but never used.","'setDoc' is defined but never used.","'formatDateFromDatabase' is defined but never used.","'formatDateDash' is defined but never used.",["936"],"'ARRAY_OF_STRING_TYPE' is defined but never used.","'arrayReplace' is defined but never used.","'replaceArrayData' is defined but never used.","React Hook useEffect has a missing dependency: 'handleColumns'. Either include it or remove the dependency array.",["937"],["938"],["939"],"'thousandsSeparators' is defined but never used.","Unexpected default export of anonymous function","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useRef' is defined but never used.","'EditableTagGroup' is defined but never used.","React Hook useEffect has a missing dependency: 'exposeData'. Either include it or remove the dependency array. If 'exposeData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["940"],"React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'name', you can also switch to useReducer instead of useState and read 'name' in the reducer.",["941"],"React Hook useEffect has missing dependencies: 'name' and 'rest'. Either include them or remove the dependency array.",["942"],["943"],"React Hook useEffect has a missing dependency: 'loadDropdowns'. Either include it or remove the dependency array.",["944"],["945"],["946"],"'Tabs' is defined but never used.","'CustomTable' is defined but never used.","'Flex' is defined but never used.","React Hook useEffect has a missing dependency: 'loadOrderData'. Either include it or remove the dependency array.",["947"],"React Hook useEffect has a missing dependency: 'tabs'. Either include it or remove the dependency array.",["948"],"'result' is assigned a value but never used.","'StyledHeader' is assigned a value but never used.","'StyledFormContainer' is assigned a value but never used.","'StyledForm' is assigned a value but never used.","'StyledActionContainer' is assigned a value but never used.","'React' is defined but never used.","'setError' is assigned a value but never used.",["949"],"'DragAndDrop' is defined but never used.","'Resize' is defined but never used.","'DataManager' is defined but never used.","'Predicate' is defined but never used.","React Hook useEffect has missing dependencies: 'eventSettings', 'loadProductData', 'navigate.currentView', 'productData', and 'setIsLoading'. Either include them or remove the dependency array. You can also do a functional update 'setEventSettings(e => ...)' if you only need 'eventSettings' in the 'setEventSettings' call.",["950"],["951"],["952"],"'STRING_TYPE' is defined but never used.","React Hook useEffect has a missing dependency: 'valueSelected'. Either include it or remove the dependency array. If 'valueSelected' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["953"],"'FadeIn' is defined but never used.","'SlideOutRight' is defined but never used.","'Wobble' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Divider' is defined but never used.","'formatDateSlash' is defined but never used.","'rangeData' is assigned a value but never used.","'setRangeData' is assigned a value but never used.","'setWithMerge' is assigned a value but never used.","'ORDER_VIA_WEBSITE' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Input' is defined but never used.","'LiquidChart' is defined but never used.","'sumArrayDatas' is defined but never used.","'checkDate' is defined but never used.",["954"],["955"],"no-undef","'value' is not defined.","undef","'calculatePercent' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'targetAmount' is assigned a value but never used.","'isSwitch' is assigned a value but never used.","'setTargets' is assigned a value but never used.",["956"],["957"],"'getPageMargins' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'DATE_TYPE' is defined but never used.","'useGetDocumentsByFn' is defined but never used.","'producedDropdowns' is defined but never used.","'addMinusDay' is defined but never used.","'setFirstColumns' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isTouched' and 'modifiedData'. Either include them or remove the dependency array. If 'modifiedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["958"],"React Hook useEffect has missing dependencies: 'orderData' and 'tabs'. Either include them or remove the dependency array.",["959"],"'producedProductListWithGroupAndAmounts' is defined but never used.","'sumArray' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["960"],"React Hook useEffect has missing dependencies: 'codeObjList', 'dataSource', and 'orderData'. Either include them or remove the dependency array.",["961"],"React Hook useEffect has missing dependencies: 'modifiedData', 'products', and 'totalDue'. Either include them or remove the dependency array. If 'modifiedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["962"],"no-global-assign","no-unsafe-negation",{"desc":"963","fix":"964"},{"desc":"965","fix":"966"},{"messageId":"967","fix":"968","desc":"969"},{"messageId":"970","fix":"971","desc":"972"},{"messageId":"967","fix":"973","desc":"969"},{"messageId":"970","fix":"974","desc":"972"},{"desc":"975","fix":"976"},{"desc":"977","fix":"978"},{"desc":"979","fix":"980"},{"desc":"981","fix":"982"},{"desc":"983","fix":"984"},{"desc":"985","fix":"986"},{"desc":"987","fix":"988"},{"desc":"989","fix":"990"},{"desc":"991","fix":"992"},{"desc":"993","fix":"994"},{"desc":"995","fix":"996"},{"desc":"997","fix":"998"},{"desc":"999","fix":"1000"},{"desc":"993","fix":"1001"},{"desc":"995","fix":"1002"},{"desc":"1003","fix":"1004"},{"desc":"1005","fix":"1006"},{"desc":"1007","fix":"1008"},{"desc":"1009","fix":"1010"},{"desc":"993","fix":"1011"},{"desc":"995","fix":"1012"},{"desc":"1013","fix":"1014"},{"desc":"1015","fix":"1016"},{"desc":"1017","fix":"1018"},{"desc":"1015","fix":"1019"},{"desc":"1017","fix":"1020"},{"desc":"1021","fix":"1022"},{"desc":"1023","fix":"1024"},{"desc":"1025","fix":"1026"},{"desc":"1027","fix":"1028"},{"desc":"1029","fix":"1030"},"Update the dependencies array to be: [error, location.pathname]",{"range":"1031","text":"1032"},"Update the dependencies array to be: [data]",{"range":"1033","text":"1034"},"removeEscape",{"range":"1035","text":"1036"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1037","text":"1038"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1039","text":"1036"},{"range":"1040","text":"1038"},"Update the dependencies array to be: [rangeData, setFilteredData]",{"range":"1041","text":"1042"},"Update the dependencies array to be: [documentData, rangeData, setFilteredData]",{"range":"1043","text":"1044"},"Update the dependencies array to be: [clearDocumentData, clearRangeData, selectedFilter]",{"range":"1045","text":"1046"},"Update the dependencies array to be: [ServiceClass, loadData]",{"range":"1047","text":"1048"},"Update the dependencies array to be: [id, loadData]",{"range":"1049","text":"1050"},"Update the dependencies array to be: [collectionData, handleColumns]",{"range":"1051","text":"1052"},"Update the dependencies array to be: [data, handleColumns]",{"range":"1053","text":"1054"},"Update the dependencies array to be: [loadData, modifiedData]",{"range":"1055","text":"1056"},"Update the dependencies array to be: [exposeData, newTags]",{"range":"1057","text":"1058"},"Update the dependencies array to be: [name, rest.collectionData]",{"range":"1059","text":"1060"},"Update the dependencies array to be: [value, isTouched, rest, name]",{"range":"1061","text":"1062"},"Update the dependencies array to be: [isTouched, name, rest, tags]",{"range":"1063","text":"1064"},"Update the dependencies array to be: [ServiceClass, loadDropdowns]",{"range":"1065","text":"1066"},{"range":"1067","text":"1060"},{"range":"1068","text":"1062"},"Update the dependencies array to be: [id, loadOrderData]",{"range":"1069","text":"1070"},"Update the dependencies array to be: [orderData, tabs]",{"range":"1071","text":"1072"},"Update the dependencies array to be: [lastVisible, loadData, user]",{"range":"1073","text":"1074"},"Update the dependencies array to be: [eventSettings, loadProductData, navigate.currentView, navigate?.dateRange, productData, setIsLoading, user]",{"range":"1075","text":"1076"},{"range":"1077","text":"1060"},{"range":"1078","text":"1062"},"Update the dependencies array to be: [value, valueSelected]",{"range":"1079","text":"1080"},"Update the dependencies array to be: [Services, date, dateTo, loadData]",{"range":"1081","text":"1082"},"Update the dependencies array to be: [Services, loadDropdowns]",{"range":"1083","text":"1084"},{"range":"1085","text":"1082"},{"range":"1086","text":"1084"},"Update the dependencies array to be: [dates, dataValue, isTouched, modifiedData]",{"range":"1087","text":"1088"},"Update the dependencies array to be: [channel, data, orderData, tabs]",{"range":"1089","text":"1090"},"Update the dependencies array to be: [orderData, codeObjList, data]",{"range":"1091","text":"1092"},"Update the dependencies array to be: [codeObjList, dataSource, orderData, products]",{"range":"1093","text":"1094"},"Update the dependencies array to be: [dataSource, isTouched, modifiedData, products, totalDue]",{"range":"1095","text":"1096"},[692,711],"[error, location.pathname]",[1021,1047],"[data]",[1777,1778],"",[1777,1777],"\\",[1802,1803],[1802,1802],[5130,5141],"[rangeData, setFilteredData]",[5204,5218],"[documentData, rangeData, setFilteredData]",[5294,5310],"[clearDocumentData, clearRangeData, selectedFilter]",[495,509],"[ServiceClass, loadData]",[367,371],"[id, loadData]",[1674,1690],"[collectionData, handleColumns]",[1746,1752],"[data, handleColumns]",[2295,2309],"[loadData, modifiedData]",[1007,1016],"[exposeData, newTags]",[431,453],"[name, rest.collectionData]",[557,575],"[value, isTouched, rest, name]",[503,520],"[isTouched, name, rest, tags]",[572,586],"[ServiceClass, loadDropdowns]",[411,432],[536,554],[1542,1546],"[id, loadOrderData]",[1819,1830],"[orderData, tabs]",[759,778],"[lastVisible, loadData, user]",[3761,3788],"[eventSettings, loadProductData, navigate.currentView, navigate?.dateRange, productData, setIsLoading, user]",[969,991],[1095,1113],[999,1006],"[value, valueSelected]",[2158,2182],"[Services, date, dateTo, loadData]",[2234,2244],"[Services, loadDropdowns]",[2492,2516],[2568,2578],[2305,2323],"[dates, dataValue, isTouched, modifiedData]",[4257,4272],"[channel, data, orderData, tabs]",[1288,1312],"[orderData, codeObjList, data]",[2835,2845],"[codeObjList, dataSource, orderData, products]",[1456,1479],"[dataSource, isTouched, modifiedData, products, totalDue]"]