[{"D:\\Projects\\Scheduler App\\scheduler\\src\\index.js":"1","D:\\Projects\\Scheduler App\\scheduler\\src\\App.js":"2","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase.js":"3","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase.js":"4","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\index.js":"5","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\index.js":"6","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\hooks.js":"7","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\index.js":"8","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\hook.js":"9","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\othersTableColumns.js":"10","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\PrintComponent.js":"11","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\tableColumns.js":"12","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\rangeHandler.js":"13","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\SchedulesServicess.js":"14","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\base\\index.js":"15","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\index.js":"16","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\hook.js":"17","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\groupPaymentPrint.js":"18","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\handleAutoFill.js":"19","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\findDataHandler.js":"20","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\DropdownServicess.js":"21","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\index.js":"22","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\index.js":"23","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\index.js":"24","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardScheduler\\index.js":"25","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\groupPaymentPrint.js":"26","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\hook.js":"27","D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\rangeHandler.js":"28","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\FirestoreCommands.js":"29","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\PaginateCommands.js":"30","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\SchedulesServicess.js":"31","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\PrintComponent.js":"32","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\othersTableColumns.js":"33","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\hook.js":"34","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardScheduler\\hooks.js":"35","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\findDataHandler.js":"36","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\handleAutoFill.js":"37","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\tableColumns.js":"38","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\DropdownServicess.js":"39","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\base\\index.js":"40","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\index.js":"41","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\index.js":"42","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\PrintComponent.js":"43","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\PrintComponent.js":"44","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\hook.js":"45","D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\hook.js":"46","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unauthorized.js":"47","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\LoginPage.js":"48","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\index.js":"49","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\URLNotFound.js":"50","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\UsersClass.js":"51","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Predefined.js":"52","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\hook.js":"53","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\index.js":"54","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unavailable.js":"55","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\RouteWithSubRoutes.js":"56","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\RolesClass.js":"57","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Pages.js":"58","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\index.js":"59","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\index.js":"60","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\MainPage.js":"61","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\MainButton.js":"62","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\AuthClass.js":"63","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\hook.js":"64","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardTransactionPage.js":"65","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTitle.js":"66","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\AutoSelect.js":"67","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\MonthlySalesPage.js":"68","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Base.js":"69","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\SettingsUserMasterfilePage.js":"70","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardStoreInventory.js":"71","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\menuData.js":"72","D:\\Projects\\Scheduler App\\scheduler\\src\\Validations\\validateAuth\\index.js":"73","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\index.js":"74","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardForDeposits\\index.js":"75","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsIncidents\\index.js":"76","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\index.js":"77","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsDropdownMasterfile\\index.js":"78","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsBranchMasterfile\\index.js":"79","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsRoleMasterfile\\index.js":"80","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\index.js":"81","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useQuery.js":"82","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generateReport.js":"83","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\errorCodes.js":"84","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\transformedSched.js":"85","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\servedReportType.js":"86","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\pathNames.js":"87","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\migrateProduct.js":"88","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\OrderViaPrices.jsx":"89","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\ExportService.js":"90","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\DepositsClass.js":"91","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\SchedulesClass.js":"92","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDate.js":"93","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sumArray.js":"94","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\formatNumber.js":"95","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\dateFormat.js":"96","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\BranchClass.js":"97","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\index.js":"98","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\DropdownsClass.js":"99","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsUserMasterfile\\index.js":"100","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Styles\\index.js":"101","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\NewProductsClass.js":"102","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\validations\\index.js":"103","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\collectionData.js":"104","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\checkDate.js":"105","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\DropdownChannel.js":"106","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\index.js":"107","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\ProductsClass.js":"108","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\addMinusDay.js":"109","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\hook.js":"110","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\LiquidChart\\index.js":"111","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\FormHandlerAdd.js":"112","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\styles.js":"113","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\SpecificPricesClass.js":"114","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomModal.js":"115","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\types.js":"116","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\PaginateCommands.js":"117","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByKeyword.js":"118","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useRangeHandler.js":"119","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\RangePicker.js":"120","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilterOptions\\index.js":"121","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\index.js":"122","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomInput.js":"123","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTable.js":"124","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\ComponentToPrint.js":"125","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\index.js":"126","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\helpers.js":"127","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringFieldArray.js":"128","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\BooleanField.js":"129","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringField.js":"130","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\useModifiedCount.js":"131","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\IncidentReportClass.js":"132","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\ObjectFieldArray.js":"133","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\arrayFuntions.js":"134","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\produceSalesSummary2.js":"135","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentById.js":"136","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomPopConfirm.js":"137","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\EditableTagGroup\\index.js":"138","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocuments.js":"139","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\segregateAdvanceOrders.js":"140","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\produceSalesSummary1.js":"141","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\produceSalesSummary.js":"142","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\DropdownChannel.js":"143","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\hook.js":"144","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\schedulerExcel.js":"145","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\helpers.js":"146","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sorting.js":"147","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\productStaticPrices.js":"148","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\rangeHandler.js":"149","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\selectComponentHandler.js":"150","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDrawer.js":"151","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderForm.js":"152","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\SidenavMobile.js":"153","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\hook.js":"154","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\PaymentForm.js":"155","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\DiscountAndOthersDialog.js":"156","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderDetails.js":"157","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\ProductPurchased.js":"158","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Upload\\useGetUploads.js":"159","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\index.js":"160","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Upload\\index.js":"161","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\hookOrderNoCounter.js":"162","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardGrillingPage.js":"163","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\moduleList.js":"164","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\useProductPurchased.js":"165","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\hook.js":"166","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTextArea.js":"167","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\usePaginate.js":"168","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\vipUsersClass.js":"169","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByFn.js":"170","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\index.js":"171","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\hook.js":"172","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\segregateAdvanceOrders.js":"173","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\DropdownChannel.js":"174","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\produceSalesSummary2.js":"175","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\produceSalesSummary.js":"176","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\produceSalesSummary1.js":"177","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\helpers.js":"178","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\transformedSched.js":"179","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\Scheduler.js":"180","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\index.js":"181","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\styles.js":"182","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Panel\\index.js":"183","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\Documents\\filteringPanelDocs.js":"184","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Controllers\\useSchedulerFilter.js":"185","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Styled\\index.js":"186","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\Controllers\\PrintMethods.js":"187","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Controllers\\FilteringPanelMethods.js":"188","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Panel\\styles.js":"189","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\LogServices.js":"190","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\LogsClass.js":"191","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\ExcessPaymentsClass.js":"192","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generateReportA.js":"193","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generateReportB.js":"194","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generatePercentage.js":"195","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\dateAging.js":"196","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generateReportCollectibles.js":"197"},{"size":442,"mtime":1649782049999,"results":"198","hashOfConfig":"199"},{"size":556,"mtime":1649782047157,"results":"200","hashOfConfig":"199"},{"size":1880,"mtime":1649929275127,"results":"201","hashOfConfig":"199"},{"size":1880,"mtime":1649782049887,"results":"202","hashOfConfig":"199"},{"size":26101,"mtime":1653524397449,"results":"203","hashOfConfig":"199"},{"size":372,"mtime":1652978436402,"results":"204","hashOfConfig":"199"},{"size":1766,"mtime":1649782048090,"results":"205","hashOfConfig":"199"},{"size":12020,"mtime":1649782047573,"results":"206","hashOfConfig":"199"},{"size":3965,"mtime":1649782047553,"results":"207","hashOfConfig":"199"},{"size":3924,"mtime":1649782047577,"results":"208","hashOfConfig":"199"},{"size":4295,"mtime":1649782047551,"results":"209","hashOfConfig":"199"},{"size":5489,"mtime":1649782047582,"results":"210","hashOfConfig":"199"},{"size":2634,"mtime":1649782049068,"results":"211","hashOfConfig":"199"},{"size":3297,"mtime":1649782049938,"results":"212","hashOfConfig":"199"},{"size":2316,"mtime":1649782049960,"results":"213","hashOfConfig":"199"},{"size":5172,"mtime":1649782048806,"results":"214","hashOfConfig":"199"},{"size":11777,"mtime":1649782048784,"results":"215","hashOfConfig":"199"},{"size":2800,"mtime":1649782048773,"results":"216","hashOfConfig":"199"},{"size":1821,"mtime":1649782048777,"results":"217","hashOfConfig":"199"},{"size":622,"mtime":1649782048755,"results":"218","hashOfConfig":"199"},{"size":1023,"mtime":1649782049892,"results":"219","hashOfConfig":"199"},{"size":25646,"mtime":1649782048254,"results":"220","hashOfConfig":"199"},{"size":12020,"mtime":1649782047573,"results":"221","hashOfConfig":"199"},{"size":5172,"mtime":1649782048806,"results":"222","hashOfConfig":"199"},{"size":409,"mtime":1649782048091,"results":"223","hashOfConfig":"199"},{"size":2800,"mtime":1649782048773,"results":"224","hashOfConfig":"199"},{"size":11777,"mtime":1649782048784,"results":"225","hashOfConfig":"199"},{"size":2634,"mtime":1649782049068,"results":"226","hashOfConfig":"199"},{"size":937,"mtime":1649782049893,"results":"227","hashOfConfig":"199"},{"size":2128,"mtime":1649782049927,"results":"228","hashOfConfig":"199"},{"size":3297,"mtime":1649782049938,"results":"229","hashOfConfig":"199"},{"size":4295,"mtime":1649782047551,"results":"230","hashOfConfig":"199"},{"size":3924,"mtime":1649782047577,"results":"231","hashOfConfig":"199"},{"size":3965,"mtime":1649782047553,"results":"232","hashOfConfig":"199"},{"size":1766,"mtime":1649782048090,"results":"233","hashOfConfig":"199"},{"size":622,"mtime":1649782048755,"results":"234","hashOfConfig":"199"},{"size":1821,"mtime":1649782048777,"results":"235","hashOfConfig":"199"},{"size":5489,"mtime":1649782047582,"results":"236","hashOfConfig":"199"},{"size":1023,"mtime":1649782049892,"results":"237","hashOfConfig":"199"},{"size":2316,"mtime":1649782049960,"results":"238","hashOfConfig":"199"},{"size":3406,"mtime":1649782047851,"results":"239","hashOfConfig":"199"},{"size":3526,"mtime":1649782047893,"results":"240","hashOfConfig":"199"},{"size":5381,"mtime":1649782047814,"results":"241","hashOfConfig":"199"},{"size":5386,"mtime":1649782047890,"results":"242","hashOfConfig":"199"},{"size":9913,"mtime":1649782047842,"results":"243","hashOfConfig":"199"},{"size":10169,"mtime":1649782047892,"results":"244","hashOfConfig":"199"},{"size":1996,"mtime":1649782048887,"results":"245","hashOfConfig":"199"},{"size":1014,"mtime":1649782049398,"results":"246","hashOfConfig":"199"},{"size":1583,"mtime":1649782049424,"results":"247","hashOfConfig":"199"},{"size":830,"mtime":1649782048885,"results":"248","hashOfConfig":"199"},{"size":1758,"mtime":1649782049814,"results":"249","hashOfConfig":"199"},{"size":1240,"mtime":1649782049422,"results":"250","hashOfConfig":"199"},{"size":4126,"mtime":1649782047989,"results":"251","hashOfConfig":"199"},{"size":5402,"mtime":1649782048005,"results":"252","hashOfConfig":"199"},{"size":1898,"mtime":1649782048910,"results":"253","hashOfConfig":"199"},{"size":446,"mtime":1649782049423,"results":"254","hashOfConfig":"199"},{"size":1398,"mtime":1649782049588,"results":"255","hashOfConfig":"199"},{"size":3095,"mtime":1649929275056,"results":"256","hashOfConfig":"199"},{"size":2069,"mtime":1649782048010,"results":"257","hashOfConfig":"199"},{"size":1294,"mtime":1649929274944,"results":"258","hashOfConfig":"199"},{"size":846,"mtime":1649782049399,"results":"259","hashOfConfig":"199"},{"size":478,"mtime":1649782047316,"results":"260","hashOfConfig":"199"},{"size":2958,"mtime":1649782049497,"results":"261","hashOfConfig":"199"},{"size":1452,"mtime":1649782048669,"results":"262","hashOfConfig":"199"},{"size":2524,"mtime":1651422176630,"results":"263","hashOfConfig":"199"},{"size":479,"mtime":1649782047315,"results":"264","hashOfConfig":"199"},{"size":966,"mtime":1649782047159,"results":"265","hashOfConfig":"199"},{"size":351,"mtime":1649929275037,"results":"266","hashOfConfig":"199"},{"size":7175,"mtime":1653329876470,"results":"267","hashOfConfig":"199"},{"size":236,"mtime":1649782049401,"results":"268","hashOfConfig":"199"},{"size":226,"mtime":1649782049353,"results":"269","hashOfConfig":"199"},{"size":6272,"mtime":1649929274955,"results":"270","hashOfConfig":"199"},{"size":841,"mtime":1649782049992,"results":"271","hashOfConfig":"199"},{"size":18904,"mtime":1656276449496,"results":"272","hashOfConfig":"199"},{"size":10280,"mtime":1654185421169,"results":"273","hashOfConfig":"199"},{"size":287,"mtime":1649782047701,"results":"274","hashOfConfig":"199"},{"size":3545,"mtime":1649782047697,"results":"275","hashOfConfig":"199"},{"size":525,"mtime":1649782048559,"results":"276","hashOfConfig":"199"},{"size":403,"mtime":1649782048558,"results":"277","hashOfConfig":"199"},{"size":486,"mtime":1649782048621,"results":"278","hashOfConfig":"199"},{"size":2269,"mtime":1649929274873,"results":"279","hashOfConfig":"199"},{"size":219,"mtime":1649782049137,"results":"280","hashOfConfig":"199"},{"size":4503,"mtime":1654002817384,"results":"281","hashOfConfig":"199"},{"size":42,"mtime":1649782048864,"results":"282","hashOfConfig":"199"},{"size":5001,"mtime":1649929274988,"results":"283","hashOfConfig":"199"},{"size":27126,"mtime":1649782047700,"results":"284","hashOfConfig":"199"},{"size":1969,"mtime":1649929274994,"results":"285","hashOfConfig":"199"},{"size":409,"mtime":1649929274875,"results":"286","hashOfConfig":"199"},{"size":4837,"mtime":1649929274852,"results":"287","hashOfConfig":"199"},{"size":2925,"mtime":1649782049862,"results":"288","hashOfConfig":"199"},{"size":5002,"mtime":1653754754661,"results":"289","hashOfConfig":"199"},{"size":12980,"mtime":1651154526568,"results":"290","hashOfConfig":"199"},{"size":1186,"mtime":1649782047214,"results":"291","hashOfConfig":"199"},{"size":2363,"mtime":1652978436413,"results":"292","hashOfConfig":"199"},{"size":340,"mtime":1649929275002,"results":"293","hashOfConfig":"199"},{"size":1139,"mtime":1649782048936,"results":"294","hashOfConfig":"199"},{"size":1330,"mtime":1652978436415,"results":"295","hashOfConfig":"199"},{"size":6684,"mtime":1649782048656,"results":"296","hashOfConfig":"199"},{"size":1082,"mtime":1649782049545,"results":"297","hashOfConfig":"199"},{"size":446,"mtime":1649782048658,"results":"298","hashOfConfig":"199"},{"size":1576,"mtime":1649782048685,"results":"299","hashOfConfig":"199"},{"size":1920,"mtime":1649929275090,"results":"300","hashOfConfig":"199"},{"size":2953,"mtime":1649782049050,"results":"301","hashOfConfig":"199"},{"size":9558,"mtime":1655072370195,"results":"302","hashOfConfig":"199"},{"size":125,"mtime":1649782048915,"results":"303","hashOfConfig":"199"},{"size":1181,"mtime":1649782048622,"results":"304","hashOfConfig":"199"},{"size":850,"mtime":1649782048555,"results":"305","hashOfConfig":"199"},{"size":1914,"mtime":1649782049585,"results":"306","hashOfConfig":"199"},{"size":705,"mtime":1649782048913,"results":"307","hashOfConfig":"199"},{"size":7578,"mtime":1649782048634,"results":"308","hashOfConfig":"199"},{"size":622,"mtime":1649782047584,"results":"309","hashOfConfig":"199"},{"size":6442,"mtime":1649782048391,"results":"310","hashOfConfig":"199"},{"size":992,"mtime":1649782047579,"results":"311","hashOfConfig":"199"},{"size":2030,"mtime":1649929275107,"results":"312","hashOfConfig":"199"},{"size":1096,"mtime":1649929274487,"results":"313","hashOfConfig":"199"},{"size":486,"mtime":1649782048883,"results":"314","hashOfConfig":"199"},{"size":3383,"mtime":1649782049863,"results":"315","hashOfConfig":"199"},{"size":5001,"mtime":1649782049114,"results":"316","hashOfConfig":"199"},{"size":944,"mtime":1649782049139,"results":"317","hashOfConfig":"199"},{"size":482,"mtime":1649782047316,"results":"318","hashOfConfig":"199"},{"size":2438,"mtime":1649782048300,"results":"319","hashOfConfig":"199"},{"size":6257,"mtime":1649929274827,"results":"320","hashOfConfig":"199"},{"size":1738,"mtime":1649782047216,"results":"321","hashOfConfig":"199"},{"size":584,"mtime":1649782047313,"results":"322","hashOfConfig":"199"},{"size":145,"mtime":1649782048433,"results":"323","hashOfConfig":"199"},{"size":22467,"mtime":1653460834860,"results":"324","hashOfConfig":"199"},{"size":592,"mtime":1649782048622,"results":"325","hashOfConfig":"199"},{"size":1379,"mtime":1649782048413,"results":"326","hashOfConfig":"199"},{"size":981,"mtime":1649782048390,"results":"327","hashOfConfig":"199"},{"size":978,"mtime":1649782048412,"results":"328","hashOfConfig":"199"},{"size":449,"mtime":1649782048432,"results":"329","hashOfConfig":"199"},{"size":1456,"mtime":1649782049547,"results":"330","hashOfConfig":"199"},{"size":4250,"mtime":1649782048410,"results":"331","hashOfConfig":"199"},{"size":621,"mtime":1649782048914,"results":"332","hashOfConfig":"199"},{"size":13831,"mtime":1652978436412,"results":"333","hashOfConfig":"199"},{"size":743,"mtime":1649782049075,"results":"334","hashOfConfig":"199"},{"size":549,"mtime":1649782047311,"results":"335","hashOfConfig":"199"},{"size":5326,"mtime":1649782048299,"results":"336","hashOfConfig":"199"},{"size":1817,"mtime":1649782049093,"results":"337","hashOfConfig":"199"},{"size":4276,"mtime":1653460886535,"results":"338","hashOfConfig":"199"},{"size":18941,"mtime":1649929274980,"results":"339","hashOfConfig":"199"},{"size":10373,"mtime":1649929274978,"results":"340","hashOfConfig":"199"},{"size":1181,"mtime":1649782048689,"results":"341","hashOfConfig":"199"},{"size":7570,"mtime":1649782048691,"results":"342","hashOfConfig":"199"},{"size":25986,"mtime":1653462737931,"results":"343","hashOfConfig":"199"},{"size":592,"mtime":1649782048690,"results":"344","hashOfConfig":"199"},{"size":481,"mtime":1649782049003,"results":"345","hashOfConfig":"199"},{"size":3460,"mtime":1649929274809,"results":"346","hashOfConfig":"199"},{"size":2618,"mtime":1649782048817,"results":"347","hashOfConfig":"199"},{"size":513,"mtime":1649782048819,"results":"348","hashOfConfig":"199"},{"size":1034,"mtime":1649782047215,"results":"349","hashOfConfig":"199"},{"size":36098,"mtime":1653330729855,"results":"350","hashOfConfig":"199"},{"size":1852,"mtime":1649782048668,"results":"351","hashOfConfig":"199"},{"size":1800,"mtime":1649782048008,"results":"352","hashOfConfig":"199"},{"size":8731,"mtime":1657958517443,"results":"353","hashOfConfig":"199"},{"size":10964,"mtime":1650812247038,"results":"354","hashOfConfig":"199"},{"size":16540,"mtime":1654021893096,"results":"355","hashOfConfig":"199"},{"size":15065,"mtime":1652978436406,"results":"356","hashOfConfig":"199"},{"size":3299,"mtime":1649782048839,"results":"357","hashOfConfig":"199"},{"size":3538,"mtime":1649782048862,"results":"358","hashOfConfig":"199"},{"size":2993,"mtime":1649782048828,"results":"359","hashOfConfig":"199"},{"size":1786,"mtime":1649782049058,"results":"360","hashOfConfig":"199"},{"size":214,"mtime":1649782049352,"results":"361","hashOfConfig":"199"},{"size":396,"mtime":1649929275017,"results":"362","hashOfConfig":"199"},{"size":10843,"mtime":1652978436409,"results":"363","hashOfConfig":"199"},{"size":231,"mtime":1649782048842,"results":"364","hashOfConfig":"199"},{"size":189,"mtime":1649782047314,"results":"365","hashOfConfig":"199"},{"size":3189,"mtime":1649782049135,"results":"366","hashOfConfig":"199"},{"size":689,"mtime":1649782049846,"results":"367","hashOfConfig":"199"},{"size":760,"mtime":1649782049097,"results":"368","hashOfConfig":"199"},{"size":20075,"mtime":1649929274516,"results":"369","hashOfConfig":"199"},{"size":7570,"mtime":1649929274492,"results":"370","hashOfConfig":"199"},{"size":4152,"mtime":1649929274622,"results":"371","hashOfConfig":"199"},{"size":1181,"mtime":1649929274489,"results":"372","hashOfConfig":"199"},{"size":11720,"mtime":1649929274615,"results":"373","hashOfConfig":"199"},{"size":10373,"mtime":1649929274532,"results":"374","hashOfConfig":"199"},{"size":18941,"mtime":1649929274581,"results":"375","hashOfConfig":"199"},{"size":592,"mtime":1649929274490,"results":"376","hashOfConfig":"199"},{"size":5001,"mtime":1649929274625,"results":"377","hashOfConfig":"199"},{"size":11410,"mtime":1652978436401,"results":"378","hashOfConfig":"199"},{"size":3411,"mtime":1649929274812,"results":"379","hashOfConfig":"199"},{"size":479,"mtime":1649929274814,"results":"380","hashOfConfig":"199"},{"size":1210,"mtime":1649782048363,"results":"381","hashOfConfig":"199"},{"size":5476,"mtime":1649929274838,"results":"382","hashOfConfig":"199"},{"size":5899,"mtime":1649782048344,"results":"383","hashOfConfig":"199"},{"size":1576,"mtime":1649782048365,"results":"384","hashOfConfig":"199"},{"size":1814,"mtime":1649929274833,"results":"385","hashOfConfig":"199"},{"size":3057,"mtime":1649782048321,"results":"386","hashOfConfig":"199"},{"size":646,"mtime":1649782048364,"results":"387","hashOfConfig":"199"},{"size":1047,"mtime":1650729115487,"results":"388","hashOfConfig":"199"},{"size":1477,"mtime":1650730661541,"results":"389","hashOfConfig":"199"},{"size":1366,"mtime":1650810704056,"results":"390","hashOfConfig":"199"},{"size":6796,"mtime":1655648802166,"results":"391","hashOfConfig":"199"},{"size":6720,"mtime":1654977719492,"results":"392","hashOfConfig":"199"},{"size":8023,"mtime":1655651159931,"results":"393","hashOfConfig":"199"},{"size":1119,"mtime":1656202465100,"results":"394","hashOfConfig":"199"},{"size":7604,"mtime":1656705962930,"results":"395","hashOfConfig":"199"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},"g7rryo",{"filePath":"399","messages":"400","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"398"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"398"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"407"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"398"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"398"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"398"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"398"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"398"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"398"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"398"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"398"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"398"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"398"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"398"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"398"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"456","messages":"457","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"458","messages":"459","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","errorCount":31,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"464","messages":"465","errorCount":5,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"466","messages":"467","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"476","messages":"477","errorCount":15,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"484","messages":"485","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"486","messages":"487","errorCount":15,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"500","messages":"501","errorCount":8,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"502","messages":"503","errorCount":8,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"504","messages":"505","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"398"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"398"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"398"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"398"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"398"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"398"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"398"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"398"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"398"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"398"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"398"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"398"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"398"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"398"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"398"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"398"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"398"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"398"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"398"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"398"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"398"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"398"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"398"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"398"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"398"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"398"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"398"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"398"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"398"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629","usedDeprecatedRules":"398"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"398"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"398"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"398"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"398"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"666","usedDeprecatedRules":"398"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"398"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"398"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"398"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"398"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"398"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"398"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"398"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698","usedDeprecatedRules":"398"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701","usedDeprecatedRules":"398"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"398"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"398"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"398"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"398"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"398"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725","usedDeprecatedRules":"398"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"398"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"398"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"398"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"398"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"398"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"747","usedDeprecatedRules":"398"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"398"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"398"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"398"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758","usedDeprecatedRules":"398"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"761","usedDeprecatedRules":"398"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"398"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"398"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"769","usedDeprecatedRules":"398"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"772","usedDeprecatedRules":"398"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"777","usedDeprecatedRules":"398"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"780","usedDeprecatedRules":"398"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"783","usedDeprecatedRules":"398"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786","usedDeprecatedRules":"398"},{"filePath":"787","messages":"788","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"789","messages":"790","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"791","usedDeprecatedRules":"398"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794","usedDeprecatedRules":"398"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"398"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"398"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"398"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"398"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"813","usedDeprecatedRules":"398"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816","usedDeprecatedRules":"398"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"819","usedDeprecatedRules":"398"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"824","usedDeprecatedRules":"398"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"827","usedDeprecatedRules":"398"},{"filePath":"828","messages":"829","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"830","usedDeprecatedRules":"398"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"833","usedDeprecatedRules":"398"},{"filePath":"834","messages":"835","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758","usedDeprecatedRules":"398"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"838","usedDeprecatedRules":"398"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"398"},{"filePath":"841","messages":"842","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"843","usedDeprecatedRules":"398"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"398"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"398"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"398"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"398"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"854","usedDeprecatedRules":"398"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"857","usedDeprecatedRules":"398"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"864","usedDeprecatedRules":"398"},{"filePath":"865","messages":"866","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"867","usedDeprecatedRules":"398"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"878","messages":"879","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880","usedDeprecatedRules":"398"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"883","usedDeprecatedRules":"398"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"886","usedDeprecatedRules":"398"},{"filePath":"887","messages":"888","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889","usedDeprecatedRules":"398"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"892","usedDeprecatedRules":"398"},{"filePath":"893","messages":"894","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"895","usedDeprecatedRules":"398"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"898","usedDeprecatedRules":"398"},"D:\\Projects\\Scheduler App\\scheduler\\src\\index.js",[],["899","900"],"D:\\Projects\\Scheduler App\\scheduler\\src\\App.js",["901","902","903"],"import React, { useContext, useEffect } from \"react\"\r\nimport SecuredRoutes from \"Secure\"\r\nimport LoginPage from \"Pages/LoginPage\"\r\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\"\r\nimport Unauthorized, { UnauthorizedContext } from \"Error/Unauthorized\"\r\n\r\nfunction App() {\r\n  const { isAuthenticated } = useContext(UnauthorizedContext)\r\n  return isAuthenticated ? <SecuredRoutes /> : <LoginPage />\r\n}\r\n\r\nexport default () => {\r\n  return (\r\n    <Unauthorized>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Unauthorized>\r\n  )\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase.js",["904"],"// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\"\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  collection,\r\n  getDocs,\r\n  getDoc,\r\n  orderBy,\r\n  query,\r\n  addDoc,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAfter,\r\n  onSnapshot,\r\n  startAt,\r\n  endAt,\r\n  Timestamp,\r\n  runTransaction,\r\n  writeBatch,\r\n} from \"firebase/firestore\"\r\nimport {\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\"\r\n\r\nimport {\r\n  getStorage,\r\n  ref,\r\n  deleteObject,\r\n  listAll,\r\n  getDownloadURL,\r\n  uploadBytes,\r\n} from \"firebase/storage\"\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\nconst {\r\n  REACT_APP_API_KEY,\r\n  REACT_APP_AUTH_DOMAIN,\r\n  REACT_APP_PROJECT_ID,\r\n  REACT_APP_STORAGE_BUCKET,\r\n  REACT_APP_MESSAGING_SENDER_ID,\r\n  REACT_APP_APP_ID,\r\n  REACT_APP_MEASUREMENT_ID,\r\n} = process.env\r\n\r\nconst firebaseConfig = {\r\n  apiKey: REACT_APP_API_KEY,\r\n  authDomain: REACT_APP_AUTH_DOMAIN,\r\n  projectId: REACT_APP_PROJECT_ID,\r\n  storageBucket: REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: REACT_APP_APP_ID,\r\n  measurementId: REACT_APP_MEASUREMENT_ID,\r\n}\r\n\r\n// Initialize Firebase\r\nconst firestore = initializeApp(firebaseConfig)\r\nconst db = getFirestore()\r\nexport {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAfter,\r\n  onSnapshot,\r\n  startAt,\r\n  endAt,\r\n  Timestamp,\r\n  getStorage,\r\n  ref,\r\n  listAll,\r\n  deleteObject,\r\n  getDownloadURL,\r\n  uploadBytes,\r\n  runTransaction,\r\n  writeBatch,\r\n}\r\nexport default db\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase.js",[],["905","906"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\index.js",["907","908","909","910","911","912","913"],"import { Popover, Space, Switch, Table, Tag } from \"antd\"\r\nimport {\r\n  calculateBalanceScheduler,\r\n  producedPaymentList,\r\n  producedProductListOfAllCodes,\r\n  producedTotalQtyOfProduct,\r\n  displayPaymentProp,\r\n  displaySalesType,\r\n  displayOrderVia,\r\n  calculateDiscountScheduler,\r\n} from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n  formatTime,\r\n} from \"Helpers/dateFormat\"\r\nimport sumArray, { sumArrayDatas, sumNumbers } from \"Helpers/sumArray\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport usePaginate from \"Hooks/usePaginate\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { useHistory, useRouteMatch } from \"react-router\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport NewProductClass from \"Services/Classes/NewProductsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport TableHandler from \"../TableHandler\"\r\nimport AdvanceTableHandler from \"../AdvanceTableHandler\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nfunction DashboardTransaction({\r\n  exposeData = () => {},\r\n  modifiedData = {},\r\n  advanceButtonDisplay = \"flex\",\r\n}) {\r\n  const history = useHistory()\r\n  const { url } = useRouteMatch()\r\n  const [productData] = useGetDocuments(ProductsClass) // this is to determine the product list\r\n  const [newProductData] = useGetDocuments(NewProductClass) // this is to determine the new product list\r\n  const [advanceFilter, setAdvanceFilter] = useState(false)\r\n  const [advanceButton, setAdvanceButton] = useState(\"flex\")\r\n\r\n  useEffect(() => {\r\n    setAdvanceButton(advanceButtonDisplay)\r\n  }, [advanceButtonDisplay])\r\n  useEffect(() => {}, [modifiedData])\r\n\r\n  return (\r\n    <>\r\n      <Space\r\n        style={{\r\n          position: \"fixed\",\r\n          bottom: 30,\r\n          zIndex: 1,\r\n          display: advanceButton,\r\n        }}\r\n      >\r\n        <Switch\r\n          checked={advanceFilter}\r\n          onChange={(checked) => setAdvanceFilter(checked)}\r\n        />\r\n        Advanced Filter\r\n      </Space>\r\n      {advanceFilter ? (\r\n        <div>\r\n          {productData.length > 0 && (\r\n            <AdvanceTableHandler\r\n              productData={productData}\r\n              exposeData={exposeData}\r\n              modifiedData={modifiedData}\r\n              hideColumns={[\r\n                SchedulersClass._ID,\r\n                SchedulersClass.BRANCH,\r\n                SchedulersClass.DATE_START,\r\n                SchedulersClass.ORDER_NO,\r\n                SchedulersClass.SUBJECT,\r\n                SchedulersClass.ACCOUNT_NAME,\r\n                SchedulersClass.ORDER_VIA,\r\n                SchedulersClass.ORDER_VIA_WEBSITE,\r\n                SchedulersClass.ORDER_VIA_PARTNER,\r\n                SchedulersClass.END_TIME_ZONE,\r\n                SchedulersClass.START_TIME_ZONE,\r\n                SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS,\r\n                SchedulersClass.PAYMENT_NOTES,\r\n                SchedulersClass.DATE_END,\r\n              ]}\r\n              ServiceClass={SchedulersClass}\r\n              defaultColumnAlign=\"left\"\r\n              defaultFontSize=\"12px\"\r\n              bySort\r\n              enableAdd\r\n              defaultAddForm={false}\r\n              enableFilter\r\n              enableRowSelect\r\n              rowSelection={(record) => {\r\n                // exposeData(record)\r\n                history.push(\r\n                  `${url}/modified?id=${record[SchedulersClass._ID]}`\r\n                )\r\n              }}\r\n              useHook={usePaginate} // if hook is usePaginate\r\n              paginateRequest={true} // paginateRequest must be true\r\n              customSort={[SchedulersClass.DATE_START, \"desc\"]}\r\n              widths={{\r\n                [SchedulersClass.DATE_START]: 90,\r\n                [SchedulersClass.DATE_ORDER_PLACED]: 90,\r\n                [SchedulersClass.BRANCH]: 150,\r\n                [SchedulersClass.DATE_PAYMENT]: 100,\r\n                [SchedulersClass.OR_NO]: 100,\r\n                [SchedulersClass.SOA_NUMBER]: 100,\r\n                [SchedulersClass.ORDER_NO]: 150,\r\n                [SchedulersClass.UTAK_NO]: 100,\r\n                [SchedulersClass.CUSTOMER]: 120,\r\n                [SchedulersClass.CONTACT_NUMBER]: 100,\r\n                [SchedulersClass.QTY]: 50,\r\n                [SchedulersClass.OTHERS]: 100,\r\n                [SchedulersClass.BALANCE_DUE]: 100,\r\n                [SchedulersClass.TOTAL_DUE]: 100,\r\n                [SchedulersClass.SOURCE]: 100,\r\n                [SchedulersClass.SALES_TYPE]: 60,\r\n                [SchedulersClass.REF_NO]: 100,\r\n                [SchedulersClass.MODE_PAYMENT]: 50,\r\n                [SchedulersClass.ACCOUNT_NUMBER]: 100,\r\n                [SchedulersClass.AMOUNT_PAID]: 100,\r\n                [SchedulersClass.REVENUE_CHANNEL]: 50,\r\n                [SchedulersClass.VIA]: 80,\r\n                [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: 80,\r\n                [SchedulersClass.TIME_SLOT]: 100,\r\n                [SchedulersClass.EXCESS_PAYMENT]: 100,\r\n                action: 12,\r\n              }}\r\n              // onCell={(data) => {\r\n              //   switch (data[SchedulersClass.STATUS]) {\r\n              //     case \"CANCELLED\":\r\n              //       return {\r\n              //         style: { backgroundColor: \"orange\", cursor: \"pointer\" },\r\n              //       }\r\n              //     case \"CONFIRMED\":\r\n              //       return {\r\n              //         style: { backgroundColor: \"lightblue\", cursor: \"pointer\" },\r\n              //       }\r\n              //     case \"FULFILLED\":\r\n              //       return {\r\n              //         style: { backgroundColor: \"transparent\", cursor: \"pointer\" },\r\n              //       }\r\n              //     default:\r\n              //       if (data[SchedulersClass.ORDER_VIA]) {\r\n              //         return {\r\n              //           style: {\r\n              //             cursor: \"pointer\",\r\n              //             backgroundColor: \"yellow\",\r\n              //           },\r\n              //         }\r\n              //       }\r\n              //       if (data[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n              //         return {\r\n              //           style: {\r\n              //             cursor: \"pointer\",\r\n              //             backgroundColor: \"pink\",\r\n              //           },\r\n              //         }\r\n              //       }\r\n              //   }\r\n              // }}\r\n              overideRender={{\r\n                [SchedulersClass.OTHERS]: (data, record) => {\r\n                  return (\r\n                    <span style={{ fontSize: \"12px\" }}>\r\n                      {calculateDiscountScheduler(record)}\r\n                    </span>\r\n                  )\r\n                },\r\n                [SchedulersClass.DATE_START]: (data, record) => {\r\n                  const formattedData = formatDateFromDatabase(data)\r\n                  const date = formatDateDash(formattedData)\r\n                  const time = formatTime(formattedData)\r\n                  return (\r\n                    <Space\r\n                      direction=\"vertical\"\r\n                      style={{ position: \"relative\", padding: \".2rem\" }}\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          position: \"absolute\",\r\n                          top: \"-1rem\",\r\n                        }}\r\n                      >\r\n                        {date}\r\n                      </span>\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"10px\",\r\n                          marginTop: \"-.5rem\",\r\n                          position: \"absolute\",\r\n                          color: \"red\",\r\n                        }}\r\n                      >\r\n                        {time}\r\n                      </span>\r\n                    </Space>\r\n                  )\r\n                },\r\n                [SchedulersClass.REVENUE_CHANNEL]: (data, record) => {\r\n                  if (record[SchedulersClass.ORDER_VIA]) return \"DR\"\r\n                  if (record[SchedulersClass.ORDER_VIA_PARTNER]) return \"PP\"\r\n                  if (record[SchedulersClass.ORDER_VIA_WEBSITE]) return \"WB\"\r\n                  return \"\"\r\n                },\r\n                [SchedulersClass.VIA]: (data, record) => {\r\n                  return displayOrderVia(record)\r\n                },\r\n                [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: (data, record) => {\r\n                  if (record[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n                    return record[SchedulersClass.ZAP_NUMBER]\r\n                  }\r\n                  return data\r\n                },\r\n                [SchedulersClass.QTY]: (data, record) => {\r\n                  const _productData = record?.withFlexiblePrices\r\n                    ? newProductData\r\n                    : productData\r\n                  const products = producedProductListOfAllCodes(_productData)\r\n                  const totalQty = producedTotalQtyOfProduct(products, record)\r\n                  return <span>{totalQty}</span>\r\n                },\r\n                [SchedulersClass.TOTAL_DUE]: (data, record) => {\r\n                  if (typeof data === \"undefined\") {\r\n                    return \"0.00\"\r\n                  } else {\r\n                    return thousandsSeparators(Number(data).toFixed(2))\r\n                  }\r\n                },\r\n                [SchedulersClass.AMOUNT_PAID]: (data, record) => {\r\n                  const paymentList = producedPaymentList(record)\r\n                  const amountPaid =\r\n                    paymentList.length > 0 ? sumArray(paymentList, \"amount\") : 0\r\n                  return thousandsSeparators(Number(amountPaid).toFixed(2))\r\n                },\r\n                [SchedulersClass.BALANCE_DUE]: (data, record) => {\r\n                  let balanceDue = calculateBalanceScheduler(record)\r\n                  if (balanceDue < 0) {\r\n                    return <span>0.00</span>\r\n                  }\r\n                  return (\r\n                    <span>{thousandsSeparators(balanceDue.toFixed(2))}</span>\r\n                  )\r\n                },\r\n                [SchedulersClass.TIME_SLOT]: (data, record) => {\r\n                  const dateStart = formatDateFromDatabase(\r\n                    record[SchedulersClass.DATE_START]\r\n                  )\r\n                  const dateEnd = formatDateFromDatabase(\r\n                    record[SchedulersClass.DATE_END]\r\n                  )\r\n\r\n                  let timeStart = formatTime(dateStart).split(\" \")\r\n                  const timeEnd = formatTime(dateEnd)\r\n                  const date = formatDateDash(dateStart)\r\n\r\n                  return (\r\n                    <Space\r\n                      direction=\"vertical\"\r\n                      style={{ position: \"relative\", padding: \".2rem\" }}\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          position: \"absolute\",\r\n                          top: \"-1rem\",\r\n                        }}\r\n                      >\r\n                        {date}\r\n                      </span>\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"10px\",\r\n                          marginTop: \"-.5rem\",\r\n                          position: \"absolute\",\r\n                          color: \"red\",\r\n                        }}\r\n                      >\r\n                        {`${timeStart[0]}-${timeEnd}`}\r\n                      </span>\r\n                    </Space>\r\n                  )\r\n                },\r\n                [SchedulersClass.OR_NO]: (data, record) => {\r\n                  return displayPaymentProp(data, record, SchedulersClass.OR_NO)\r\n                },\r\n                [SchedulersClass.SOA_NUMBER]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.SOA_NUMBER\r\n                  )\r\n                },\r\n                [SchedulersClass.DATE_PAYMENT]: (data, record) => {\r\n                  const date = displayPaymentProp(data, record, \"date\")\r\n                  if (date) {\r\n                    const dateFromD = formatDateFromDatabase(date)\r\n                    return formatDateDash(dateFromD)\r\n                  }\r\n                  return \"\"\r\n                },\r\n                [SchedulersClass.MODE_PAYMENT]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.MODE_PAYMENT\r\n                  )\r\n                },\r\n                [SchedulersClass.SOURCE]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.SOURCE\r\n                  )\r\n                },\r\n                [SchedulersClass.REF_NO]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.REF_NO\r\n                  )\r\n                },\r\n                [SchedulersClass.ACCOUNT_NUMBER]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.ACCOUNT_NUMBER\r\n                  )\r\n                },\r\n                [SchedulersClass.SALES_TYPE]: (data, record) => {\r\n                  return displaySalesType(record)\r\n                },\r\n                [SchedulersClass.EXCESS_PAYMENT]: (data, record) => {\r\n                  const balanceDue = calculateBalanceScheduler(record)\r\n                  if (balanceDue < 0) {\r\n                    return thousandsSeparators((balanceDue * -1).toFixed(2))\r\n                  }\r\n                  return \"0.00\"\r\n                },\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {productData.length > 0 && (\r\n            <TableHandler\r\n              productData={productData}\r\n              exposeData={exposeData}\r\n              modifiedData={modifiedData}\r\n              hideColumns={[\r\n                SchedulersClass._ID,\r\n                SchedulersClass.BRANCH,\r\n                SchedulersClass.DATE_START,\r\n                SchedulersClass.ORDER_NO,\r\n                SchedulersClass.SUBJECT,\r\n                SchedulersClass.ACCOUNT_NAME,\r\n                SchedulersClass.ORDER_VIA,\r\n                SchedulersClass.ORDER_VIA_WEBSITE,\r\n                SchedulersClass.ORDER_VIA_PARTNER,\r\n                SchedulersClass.END_TIME_ZONE,\r\n                SchedulersClass.START_TIME_ZONE,\r\n                SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS,\r\n                SchedulersClass.PAYMENT_NOTES,\r\n                SchedulersClass.DATE_END,\r\n              ]}\r\n              ServiceClass={SchedulersClass}\r\n              defaultColumnAlign=\"left\"\r\n              defaultFontSize=\"12px\"\r\n              bySort\r\n              enableAdd\r\n              defaultAddForm={false}\r\n              enableFilter\r\n              enableRowSelect\r\n              rowSelection={(record) => {\r\n                // exposeData(record)\r\n                history.push(\r\n                  `${url}/modified?id=${record[SchedulersClass._ID]}`\r\n                )\r\n              }}\r\n              useHook={usePaginate} // if hook is usePaginate\r\n              paginateRequest={true} // paginateRequest must be true\r\n              customSort={[SchedulersClass.DATE_START, \"desc\"]}\r\n              widths={{\r\n                [SchedulersClass.DATE_START]: 90,\r\n                [SchedulersClass.DATE_ORDER_PLACED]: 90,\r\n                [SchedulersClass.BRANCH]: 150,\r\n                [SchedulersClass.DATE_PAYMENT]: 100,\r\n                [SchedulersClass.OR_NO]: 100,\r\n                [SchedulersClass.SOA_NUMBER]: 100,\r\n                [SchedulersClass.ORDER_NO]: 150,\r\n                [SchedulersClass.UTAK_NO]: 100,\r\n                [SchedulersClass.CUSTOMER]: 120,\r\n                [SchedulersClass.CONTACT_NUMBER]: 100,\r\n                [SchedulersClass.QTY]: 50,\r\n                [SchedulersClass.OTHERS]: 100,\r\n                [SchedulersClass.BALANCE_DUE]: 100,\r\n                [SchedulersClass.TOTAL_DUE]: 100,\r\n                [SchedulersClass.SOURCE]: 100,\r\n                [SchedulersClass.SALES_TYPE]: 60,\r\n                [SchedulersClass.REF_NO]: 100,\r\n                [SchedulersClass.MODE_PAYMENT]: 50,\r\n                [SchedulersClass.ACCOUNT_NUMBER]: 100,\r\n                [SchedulersClass.AMOUNT_PAID]: 100,\r\n                [SchedulersClass.REVENUE_CHANNEL]: 50,\r\n                [SchedulersClass.VIA]: 80,\r\n                [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: 80,\r\n                [SchedulersClass.TIME_SLOT]: 100,\r\n                [SchedulersClass.EXCESS_PAYMENT]: 100,\r\n                action: 12,\r\n              }}\r\n              // onCell={(data) => {\r\n              //   switch (data[SchedulersClass.STATUS]) {\r\n              //     case \"CANCELLED\":\r\n              //       return {\r\n              //         style: { backgroundColor: \"orange\", cursor: \"pointer\" },\r\n              //       }\r\n              //     case \"CONFIRMED\":\r\n              //       return {\r\n              //         style: { backgroundColor: \"lightblue\", cursor: \"pointer\" },\r\n              //       }\r\n              //     case \"FULFILLED\":\r\n              //       return {\r\n              //         style: { backgroundColor: \"transparent\", cursor: \"pointer\" },\r\n              //       }\r\n              //     default:\r\n              //       if (data[SchedulersClass.ORDER_VIA]) {\r\n              //         return {\r\n              //           style: {\r\n              //             cursor: \"pointer\",\r\n              //             backgroundColor: \"yellow\",\r\n              //           },\r\n              //         }\r\n              //       }\r\n              //       if (data[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n              //         return {\r\n              //           style: {\r\n              //             cursor: \"pointer\",\r\n              //             backgroundColor: \"pink\",\r\n              //           },\r\n              //         }\r\n              //       }\r\n              //   }\r\n              // }}\r\n              overideRender={{\r\n                [SchedulersClass.OTHERS]: (data, record) => {\r\n                  return (\r\n                    <span style={{ fontSize: \"12px\" }}>\r\n                      {calculateDiscountScheduler(record)}\r\n                    </span>\r\n                  )\r\n                },\r\n                [SchedulersClass.DATE_START]: (data, record) => {\r\n                  const formattedData = formatDateFromDatabase(data)\r\n                  const date = formatDateDash(formattedData)\r\n                  const time = formatTime(formattedData)\r\n                  return (\r\n                    <Space\r\n                      direction=\"vertical\"\r\n                      style={{ position: \"relative\", padding: \".2rem\" }}\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          position: \"absolute\",\r\n                          top: \"-1rem\",\r\n                        }}\r\n                      >\r\n                        {date}\r\n                      </span>\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"10px\",\r\n                          marginTop: \"-.5rem\",\r\n                          position: \"absolute\",\r\n                          color: \"red\",\r\n                        }}\r\n                      >\r\n                        {time}\r\n                      </span>\r\n                    </Space>\r\n                  )\r\n                },\r\n                [SchedulersClass.REVENUE_CHANNEL]: (data, record) => {\r\n                  if (record[SchedulersClass.ORDER_VIA]) return \"DR\"\r\n                  if (record[SchedulersClass.ORDER_VIA_PARTNER]) return \"PP\"\r\n                  if (record[SchedulersClass.ORDER_VIA_WEBSITE]) return \"WB\"\r\n                  return \"\"\r\n                },\r\n                [SchedulersClass.VIA]: (data, record) => {\r\n                  return displayOrderVia(record)\r\n                },\r\n                [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: (data, record) => {\r\n                  if (record[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n                    return record[SchedulersClass.ZAP_NUMBER]\r\n                  }\r\n                  return data\r\n                },\r\n                [SchedulersClass.QTY]: (data, record) => {\r\n                  const _productData = record?.withFlexiblePrices\r\n                    ? newProductData\r\n                    : productData\r\n                  const products = producedProductListOfAllCodes(_productData)\r\n                  const totalQty = producedTotalQtyOfProduct(products, record)\r\n                  return <span>{totalQty}</span>\r\n                },\r\n                [SchedulersClass.TOTAL_DUE]: (data, record) => {\r\n                  if (typeof data === \"undefined\") {\r\n                    return \"0.00\"\r\n                  } else {\r\n                    return thousandsSeparators(Number(data).toFixed(2))\r\n                  }\r\n                },\r\n                [SchedulersClass.AMOUNT_PAID]: (data, record) => {\r\n                  const paymentList = producedPaymentList(record)\r\n                  const amountPaid =\r\n                    paymentList.length > 0 ? sumArray(paymentList, \"amount\") : 0\r\n                  return thousandsSeparators(Number(amountPaid).toFixed(2))\r\n                },\r\n                [SchedulersClass.BALANCE_DUE]: (data, record) => {\r\n                  let balanceDue = calculateBalanceScheduler(record)\r\n                  if (balanceDue < 0) {\r\n                    return <span>0.00</span>\r\n                  }\r\n                  return (\r\n                    <span>{thousandsSeparators(balanceDue.toFixed(2))}</span>\r\n                  )\r\n                },\r\n                [SchedulersClass.TIME_SLOT]: (data, record) => {\r\n                  const dateStart = formatDateFromDatabase(\r\n                    record[SchedulersClass.DATE_START]\r\n                  )\r\n                  const dateEnd = formatDateFromDatabase(\r\n                    record[SchedulersClass.DATE_END]\r\n                  )\r\n\r\n                  let timeStart = formatTime(dateStart).split(\" \")\r\n                  const timeEnd = formatTime(dateEnd)\r\n                  const date = formatDateDash(dateStart)\r\n\r\n                  return (\r\n                    <Space\r\n                      direction=\"vertical\"\r\n                      style={{ position: \"relative\", padding: \".2rem\" }}\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          position: \"absolute\",\r\n                          top: \"-1rem\",\r\n                        }}\r\n                      >\r\n                        {date}\r\n                      </span>\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"10px\",\r\n                          marginTop: \"-.5rem\",\r\n                          position: \"absolute\",\r\n                          color: \"red\",\r\n                        }}\r\n                      >\r\n                        {`${timeStart[0]}-${timeEnd}`}\r\n                      </span>\r\n                    </Space>\r\n                  )\r\n                },\r\n                [SchedulersClass.OR_NO]: (data, record) => {\r\n                  return displayPaymentProp(data, record, SchedulersClass.OR_NO)\r\n                },\r\n                [SchedulersClass.SOA_NUMBER]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.SOA_NUMBER\r\n                  )\r\n                },\r\n                [SchedulersClass.DATE_PAYMENT]: (data, record) => {\r\n                  const date = displayPaymentProp(data, record, \"date\")\r\n                  if (date) {\r\n                    const dateFromD = formatDateFromDatabase(date)\r\n                    return formatDateDash(dateFromD)\r\n                  }\r\n                  return \"\"\r\n                },\r\n                [SchedulersClass.MODE_PAYMENT]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.MODE_PAYMENT\r\n                  )\r\n                },\r\n                [SchedulersClass.SOURCE]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.SOURCE\r\n                  )\r\n                },\r\n                [SchedulersClass.REF_NO]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.REF_NO\r\n                  )\r\n                },\r\n                [SchedulersClass.ACCOUNT_NUMBER]: (data, record) => {\r\n                  return displayPaymentProp(\r\n                    data,\r\n                    record,\r\n                    SchedulersClass.ACCOUNT_NUMBER\r\n                  )\r\n                },\r\n                [SchedulersClass.SALES_TYPE]: (data, record) => {\r\n                  return displaySalesType(record)\r\n                },\r\n                [SchedulersClass.EXCESS_PAYMENT]: (data, record) => {\r\n                  const balanceDue = calculateBalanceScheduler(record)\r\n                  if (balanceDue < 0) {\r\n                    return thousandsSeparators((balanceDue * -1).toFixed(2))\r\n                  }\r\n                  return \"0.00\"\r\n                },\r\n              }}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DashboardTransaction\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\hooks.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\index.js",["914","915","916"],"import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Button,\r\n  DatePicker,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Tabs,\r\n  Input,\r\n  Tooltip,\r\n  Card,\r\n} from \"antd\"\r\nimport { SearchOutlined, FilterOutlined } from \"@ant-design/icons\"\r\nimport useAnalyticsCustomer from \"./hook\"\r\nimport { VerticalAutoScroll, Grid } from \"./styles\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport PrintComponent from \"./PrintComponent\"\r\nimport othersTableColumns from \"./othersTableColumns\"\r\nimport Animate, {\r\n  FadeIn,\r\n  SlideInRight,\r\n  SlideOutRight,\r\n  Wobble,\r\n} from \"animate-css-styled-components\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nconst { RangePicker } = DatePicker\r\nconst { TabPane } = Tabs\r\n\r\nconst numbeStyle = {\r\n  style: {\r\n    fontSize: \"1.5rem\",\r\n  },\r\n}\r\n\r\nconst AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\nconst TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\nfunction AnalyticsCustomer() {\r\n  const [scrollPosition, setScrollPosition] = useState(0)\r\n  const [tabValue, setTabValue] = useState(\"\")\r\n  const [filteredCustomer, setFilteredCustomer] = useState([])\r\n  const [grandTotals, setGrandTotals] = useState({\r\n    totalDue: 0,\r\n    discount: 0,\r\n    amountPaid: 0,\r\n    balanceDue: 0,\r\n  })\r\n\r\n  useEffect(() => {\r\n    window.onscroll = (e) => {\r\n      setScrollPosition(document.documentElement.scrollTop)\r\n    }\r\n  }, [])\r\n  /// main hook\r\n  const [\r\n    { rangeProps, searchButtonProps, tableProps },\r\n    customerList,\r\n    dataByCustomer,\r\n    filteredData,\r\n  ] = useAnalyticsCustomer()\r\n\r\n  const style = {\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    padding: \"1rem\",\r\n  }\r\n\r\n  const othersTableProps = {\r\n    ...tableProps,\r\n    columns: [...othersTableColumns],\r\n    pagination: true,\r\n  }\r\n  const handleFilter = (e) => {\r\n    const _filteredCustomer = customerList.filter(\r\n      (key) =>\r\n        key.includes(e.target.value) ||\r\n        key.includes(e.target.value.toUpperCase())\r\n    )\r\n    setFilteredCustomer(_filteredCustomer)\r\n    if (tabValue.includes(e.target.value)) {\r\n    } else {\r\n      setTabValue(\"\")\r\n      setGrandTotals({\r\n        totalDue: 0,\r\n        discount: 0,\r\n        amountPaid: 0,\r\n        balanceDue: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleClickCustomer = (customer) => {\r\n    setTabValue(customer)\r\n    const customerData =\r\n      typeof dataByCustomer[customer] !== \"undefined\"\r\n        ? dataByCustomer[customer]\r\n        : []\r\n\r\n    const dataWithDiscount = []\r\n    for (const obj of customerData) {\r\n      let disc = 0\r\n      if (typeof obj.others !== \"undefined\") {\r\n        for (const key of Object.keys(obj.others)) {\r\n          disc = obj.others[key]\r\n          break\r\n        }\r\n      }\r\n      dataWithDiscount.push({ ...obj, others: Number(disc) })\r\n    }\r\n\r\n    const totalDue = sumArray(customerData, TOTAL_DUE)\r\n    const amountPaid = sumArray(customerData, AMOUNT_PAID)\r\n    const discount = sumArray(dataWithDiscount, \"others\")\r\n    const balanceDue = totalDue - amountPaid - Number(discount)\r\n    setGrandTotals({\r\n      totalDue,\r\n      discount: Number(discount),\r\n      amountPaid,\r\n      balanceDue,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Space direction=\"horizontal\" style={style}>\r\n          <span>\r\n            {customerList.length > 0 && (\r\n              <Space>\r\n                <label>Name </label>\r\n                <Input\r\n                  placeholder=\"Filter\"\r\n                  onChange={handleFilter}\r\n                  suffix={\r\n                    <Tooltip title=\"Filter by name\">\r\n                      <FilterOutlined style={{ color: \"rgba(0,0,0,.45)\" }} />\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              </Space>\r\n            )}\r\n          </span>\r\n          <Space wrap>\r\n            Date Order:\r\n            <RangePicker {...rangeProps} />\r\n            <Button\r\n              {...searchButtonProps}\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </Space>\r\n\r\n        <VerticalAutoScroll>\r\n          <Row style={{ padding: \"1rem\" }}>\r\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\r\n              <Tabs\r\n                activeKey={tabValue}\r\n                tabPosition=\"top\"\r\n                style={{ height: \"77vh\", position: \"relative\" }}\r\n                size=\"small\"\r\n                onChange={handleClickCustomer}\r\n              >\r\n                {filteredCustomer.length > 0\r\n                  ? filteredCustomer.map((customer) => {\r\n                      if (!customer) {\r\n                        return <></>\r\n                      }\r\n                      const recordFound =\r\n                        typeof dataByCustomer[customer] !== \"undefined\"\r\n                          ? dataByCustomer[customer].length\r\n                          : 0\r\n                      return (\r\n                        <TabPane\r\n                          tab={customer}\r\n                          key={customer}\r\n                          style={{\r\n                            backgroundColor: \"#eee\",\r\n                            padding: \"1rem\",\r\n                            height: \"80vh\",\r\n                          }}\r\n                        >\r\n                          <Card\r\n                            title={customer}\r\n                            extra={\r\n                              <PrintComponent\r\n                                dataByCustomer={[...dataByCustomer[customer]]}\r\n                                customer={customer}\r\n                                grandTotals={grandTotals}\r\n                              />\r\n                            }\r\n                            actions={[\r\n                              <div>{`Records Found: ${recordFound}`}</div>,\r\n                            ]}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <Table\r\n                                {...tableProps}\r\n                                dataSource={[...dataByCustomer[customer]]}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                        </TabPane>\r\n                      )\r\n                    })\r\n                  : customerList.map((customer) => {\r\n                      if (!customer) {\r\n                        return <></>\r\n                      }\r\n                      const recordFound =\r\n                        typeof dataByCustomer[customer] !== \"undefined\"\r\n                          ? dataByCustomer[customer].length\r\n                          : 0\r\n                      return (\r\n                        <TabPane\r\n                          tab={customer}\r\n                          key={customer}\r\n                          style={{\r\n                            backgroundColor: \"#eee\",\r\n                            padding: \"1rem\",\r\n                            height: \"80vh\",\r\n                            position: \"relative\",\r\n                          }}\r\n                        >\r\n                          <Card\r\n                            title={customer}\r\n                            extra={\r\n                              <PrintComponent\r\n                                dataByCustomer={[...dataByCustomer[customer]]}\r\n                                customer={customer}\r\n                                grandTotals={grandTotals}\r\n                              />\r\n                            }\r\n                            actions={[\r\n                              <div>{`Records Found: ${recordFound}`}</div>,\r\n                            ]}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <Table\r\n                                {...tableProps}\r\n                                dataSource={[...dataByCustomer[customer]]}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                        </TabPane>\r\n                      )\r\n                    })}\r\n              </Tabs>\r\n            </Col>\r\n            <Col\r\n              xs={24}\r\n              sm={24}\r\n              md={24}\r\n              lg={24}\r\n              xl={24}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Space wrap size={[16, 5]}>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Total Due\r\n                  </span>\r\n                  <span {...numbeStyle}>\r\n                    <b>{grandTotals.totalDue.toFixed(2)}</b>\r\n                  </span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Discount\r\n                  </span>\r\n                  <span {...numbeStyle}>{grandTotals.discount.toFixed(2)}</span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Amount Paid\r\n                  </span>\r\n                  <span {...numbeStyle}>\r\n                    {grandTotals.amountPaid.toFixed(2)}\r\n                  </span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Balance Due\r\n                  </span>\r\n                  <span\r\n                    style={\r\n                      grandTotals.balanceDue > 0\r\n                        ? { color: \"red\", ...numbeStyle.style }\r\n                        : { ...numbeStyle.style }\r\n                    }\r\n                  >\r\n                    {grandTotals.balanceDue.toFixed(2)}\r\n                  </span>\r\n                </Space>\r\n              </Space>\r\n            </Col>\r\n          </Row>\r\n        </VerticalAutoScroll>\r\n\r\n        <VerticalAutoScroll>\r\n          <Space\r\n            direction=\"vertical\"\r\n            style={{ padding: \"1rem\", height: \"100vh\", width: \"100%\" }}\r\n          >\r\n            <Card\r\n              title=\"OTHER ORDERS\"\r\n              extra={\r\n                scrollPosition > 800 && (\r\n                  <Animate\r\n                    Animation={[SlideInRight]}\r\n                    duration={[\"1s\"]}\r\n                    delay={[\"0.2s\"]}\r\n                  >\r\n                    <Space wrap>\r\n                      Date Order:\r\n                      <RangePicker {...rangeProps} />\r\n                      <Button\r\n                        {...searchButtonProps}\r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        icon={<SearchOutlined />}\r\n                      />\r\n                    </Space>\r\n                  </Animate>\r\n                )\r\n              }\r\n            >\r\n              <VerticalAutoScroll>\r\n                <Table\r\n                  {...othersTableProps}\r\n                  dataSource={[\r\n                    ...filteredData.filter(\r\n                      (data) => data.orderVia === \"[ OTH ] OTHER\"\r\n                    ),\r\n                  ]}\r\n                />\r\n              </VerticalAutoScroll>\r\n            </Card>\r\n          </Space>\r\n        </VerticalAutoScroll>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnalyticsCustomer\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\hook.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\othersTableColumns.js",["917","918"],"import { Tag, Space } from \"antd\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport React from \"react\"\r\n\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst CUSTOMER = SchedulersClass.CUSTOMER\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\nconst REF_NO = SchedulersClass.REF_NO\r\n\r\nconst othersTableColumns = [\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"13%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"UTAK #\",\r\n    dataIndex: UTAK_NO,\r\n    key: UTAK_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"CUSTOMER\",\r\n    dataIndex: CUSTOMER,\r\n    key: CUSTOMER,\r\n  },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      let disc = 0\r\n      if (typeof data !== \"undefined\") {\r\n        for (const key of Object.keys(data)) {\r\n          disc = data[key]\r\n          break\r\n        }\r\n      }\r\n      if (disc > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(disc).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (typeof data !== \"undefined\") {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(\"0\").toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      let amountPaid =\r\n        typeof record?.amountPaid !== \"undefined\" ? record?.amountPaid : 0\r\n      let totalDue =\r\n        typeof record?.totalDue !== \"undefined\" ? record?.totalDue : 0\r\n      let disc = 0\r\n      if (typeof record?.others !== \"undefined\") {\r\n        for (const key of Object.keys(record?.others)) {\r\n          disc = record?.others[key]\r\n          break\r\n        }\r\n      }\r\n      const balanceDue = Number(totalDue) - Number(amountPaid) - Number(disc)\r\n      return <span>{Number(balanceDue).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default othersTableColumns\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\PrintComponent.js",["919","920","921"],"import React from \"react\"\r\nimport Print from \"../Print\"\r\nimport { Divider, Space } from \"antd\"\r\nimport { PrinterFilled } from \"@ant-design/icons\"\r\nimport { formatDateFromDatabase, formatDateSlash } from \"Helpers/dateFormat\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction PrintComponent(props) {\r\n  const DATE_START = SchedulersClass.DATE_START\r\n  const ORDER_NO = SchedulersClass.ORDER_NO\r\n  const SOURCE = SchedulersClass.SOURCE\r\n  const STATUS = SchedulersClass.STATUS\r\n  const ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\n  const AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\n  const MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\n  const REF_NO = SchedulersClass.REF_NO\r\n  const TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\n  const handleDiscount = (data) => {\r\n    let disc = 0\r\n    if (typeof data !== \"undefined\") {\r\n      for (const key of Object.keys(data)) {\r\n        disc = data[key]\r\n        break\r\n      }\r\n    }\r\n    if (disc > 0) {\r\n      return Number(disc).toFixed(2)\r\n    }\r\n    return Number(disc).toFixed(2)\r\n  }\r\n\r\n  const handleBalance = (totalDue = 0, amountPaid = 0, others = {}) => {\r\n    const _discount = Number(handleDiscount(others))\r\n    const _amountPaid = Number(amountPaid)\r\n    const _totalDue = Number(totalDue)\r\n    const balanceDue = _totalDue - _amountPaid - _discount\r\n    return balanceDue.toFixed(2)\r\n  }\r\n  return (\r\n    <Print\r\n      component={\r\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n          <span>{props.customer}</span>\r\n          <table style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n            <tr\r\n              style={{\r\n                fontWeight: 700,\r\n                backgroundColor: \"#999\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <td>ORDER #</td>\r\n              <td>DATE ORDER</td>\r\n              <td>MODE</td>\r\n              <td>SOURCE</td>\r\n              <td>REF #</td>\r\n              <td>ACCT #</td>\r\n              <td align=\"right\">TOTAL DUE</td>\r\n              <td align=\"right\">DISCOUNT</td>\r\n              <td align=\"right\">AMOUNT PAID</td>\r\n              <td align=\"right\">BALANCE DUE</td>\r\n              <td align=\"right\">STATUS</td>\r\n            </tr>\r\n            {props.dataByCustomer.map((data, index) => {\r\n              return (\r\n                <tr\r\n                  style={\r\n                    index % 2 === 0\r\n                      ? { backgroundColor: \"white\" }\r\n                      : { backgroundColor: \"#999\" }\r\n                  }\r\n                >\r\n                  <td>{data[ORDER_NO]}</td>\r\n                  <td>{data[DATE_START]}</td>\r\n                  <td>{data[MODE_PAYMENT]}</td>\r\n                  <td>{data[SOURCE]}</td>\r\n                  <td>{data[REF_NO]}</td>\r\n                  <td>{data[ACCOUNT_NUMBER]}</td>\r\n                  <td align=\"right\">{data[TOTAL_DUE]}</td>\r\n                  <td align=\"right\">{handleDiscount(data?.others)}</td>\r\n                  <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                  <td align=\"right\">\r\n                    {handleBalance(\r\n                      data[TOTAL_DUE],\r\n                      data[AMOUNT_PAID],\r\n                      data?.others\r\n                    )}\r\n                  </td>\r\n                  <td align=\"right\">{data[STATUS]}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n          </table>\r\n          <span>Grand Totals</span>\r\n          <table style={{ fontSize: \"8px\", width: \"20%\" }}>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Total Due:</td>\r\n              <td align=\"right\">{props?.grandTotals.totalDue}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Discount:</td>\r\n              <td align=\"right\">{props?.grandTotals.discount}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Amount Paid:</td>\r\n              <td align=\"right\">{props?.grandTotals.amountPaid}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Balance Due:</td>\r\n              <td align=\"right\">{props?.grandTotals.balanceDue}</td>\r\n            </tr>\r\n          </table>\r\n        </Space>\r\n      }\r\n      button={<PrinterFilled fontSize=\"2.5rem\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrintComponent\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\tableColumns.js",["922","923"],"import { Tag, Space } from \"antd\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport React from \"react\"\r\n\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst MODE_PAYMENT = SchedulersClass.MODE_PAYMENT\r\nconst REF_NO = SchedulersClass.REF_NO\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\n\r\nconst tableColumns = [\r\n  // {\r\n  //   title: \"DATE PLACED\",\r\n  //   dataIndex: DATE_ORDER_PLACED,\r\n  //   key: DATE_ORDER_PLACED,\r\n  //   render: (text) => <a>{text}</a>,\r\n  //   width: \"8%\",\r\n  // },\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"13%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"UTAK #\",\r\n    dataIndex: UTAK_NO,\r\n    key: UTAK_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n    render: (text) => <a>{text}</a>,\r\n    width: \"8%\",\r\n  },\r\n  // {\r\n  //   title: \"NAME\",\r\n  //   dataIndex: CUSTOMER,\r\n  //   key: CUSTOMER,\r\n  // },\r\n  // {\r\n  //   title: \"CONTACT #\",\r\n  //   dataIndex: CONTACT_NUMBER,\r\n  //   key: CONTACT_NUMBER,\r\n  // },\r\n  // {\r\n  //   title: \"VIA\",\r\n  //   dataIndex: ORDER_VIA,\r\n  //   key: ORDER_VIA,\r\n  // },\r\n  // {\r\n  //   title: \"DATE ORDER\",\r\n  //   dataIndex: DATE_START,\r\n  //   key: DATE_START,\r\n  // },\r\n  // {\r\n  //   title: \"TIME\",\r\n  //   dataIndex: \"time\",\r\n  //   key: \"time\",\r\n  // },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  // },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      let disc = 0\r\n      if (typeof data !== \"undefined\") {\r\n        for (const key of Object.keys(data)) {\r\n          disc = data[key]\r\n          break\r\n        }\r\n      }\r\n      if (disc > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(disc).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (typeof data !== \"undefined\") {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(\"0\").toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      let amountPaid =\r\n        typeof record?.amountPaid !== \"undefined\" ? record?.amountPaid : 0\r\n      let totalDue =\r\n        typeof record?.totalDue !== \"undefined\" ? record?.totalDue : 0\r\n      let disc = 0\r\n      if (typeof record?.others !== \"undefined\") {\r\n        for (const key of Object.keys(record?.others)) {\r\n          disc = record?.others[key]\r\n          break\r\n        }\r\n      }\r\n      const balanceDue = Number(totalDue) - Number(amountPaid) - Number(disc)\r\n      return <span>{Number(balanceDue).toFixed(2)}</span>\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"TOTAL AMOUNT\",\r\n  //   dataIndex: \"totalDue\",\r\n  //   key: \"totalDue\",\r\n  //   align: \"right\",\r\n  // },\r\n  // {\r\n  //   title: \"OTHERS/DEDUCTION\",\r\n  //   dataIndex: \"others\",\r\n  //   key: \"others\",\r\n  //   align: \"right\",\r\n  //   render: (tags) => {\r\n  //     return (\r\n  //       <>\r\n  //         {typeof tags !== \"undefined\" ? (\r\n  //           Object.keys(tags).map((tag) => {\r\n  //             return <Tag key={tag}>{`${tags[tag]}`}</Tag>\r\n  //           })\r\n  //         ) : (\r\n  //           <Tag></Tag>\r\n  //         )}\r\n  //       </>\r\n  //     )\r\n  //   },\r\n  // },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  //   render: (data) => {\r\n  //     if (data === \"Discounted\") {\r\n  //       return <span style={{ color: \"red\" }}>{data}</span>\r\n  //     } else {\r\n  //       return <span>{data}</span>\r\n  //     }\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default tableColumns\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\rangeHandler.js",["924","925","926"],"import moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(Service) {\r\n  // example instance class: SchedulerServicess\r\n  // how to call hook example: const [rangeHandler, loadData] = useRangeHandler(ScheduleServicess)\r\n  const format = \"MM/DD/YYYY\"\r\n  const defaultDate = moment(new Date(), format)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState([defaultDate, defaultDate])\r\n  const [rangeData, setRangeData] = useState([])\r\n  const [searchData, setSearchData] = useState([])\r\n\r\n  const loadData = async (args) => {\r\n    const { search = null, dateField, orderBy } = args\r\n    setIsLoading(true)\r\n    let dateRange = []\r\n    if (value.length > 0) {\r\n      dateRange = [value[0]._d, value[1]._d]\r\n      let _data = []\r\n      _data = await new Service({\r\n        _dateField: dateField,\r\n        _orderBy: orderBy,\r\n        _dateRange: dateRange,\r\n      }).getRange()\r\n      if (_data.length > 0 && search) {\r\n        const _searchData = _data.filter((data) => {\r\n          let filterResult = true\r\n          for (const key in search) {\r\n            if (search[key] && data[key]) {\r\n              if (data[key].includes(search[key])) {\r\n                // console.log(\"result\", true)\r\n                filterResult = filterResult && true\r\n              } else {\r\n                // console.log(\"result\", false)\r\n                filterResult = filterResult && false\r\n              }\r\n            } else {\r\n              if (search[key]) {\r\n                filterResult = filterResult && false\r\n              } else {\r\n                filterResult = filterResult && true\r\n              }\r\n            }\r\n          }\r\n          return filterResult\r\n        })\r\n        console.log(\"_searchData\", _searchData)\r\n        setSearchData(_searchData)\r\n      } else {\r\n        setSearchData([])\r\n      }\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const onChange = (value) => {\r\n    if (value) {\r\n      setValue(value)\r\n    }\r\n  }\r\n\r\n  return [\r\n    { showTime: false, format, value, onChange }, // rangeComponentHandler\r\n    { value /*rangeData*/, searchData }, // filtered data result\r\n    loadData,\r\n    isLoading,\r\n    // load data example : loadRangeHandlerData({\r\n    //   dateField: \"StartTime\", // required\r\n    //   orderBy: \"StartTime\", // required\r\n    //   search: { //optional\r\n    //     partnerMerchantOrderNo: searchValue,\r\n    //     orderViaPartner: selectHandler.value,\r\n    //   },\r\n    //   specialSearch: \"datePayment\", // use in filter together with search check if value already has a payment //optional\r\n    // })\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\SchedulesServicess.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\base\\index.js",["927"],"import db from \"Services/firebase\"\r\n\r\nexport default class Commands {\r\n  #collectionName\r\n  #id\r\n  #data\r\n  #fieldName\r\n  #fieldValue\r\n  #orderBy\r\n  constructor(args) {\r\n    const {\r\n      _collectionName,\r\n      _id,\r\n      _data = {},\r\n      _fieldName = \"\",\r\n      _fieldValue = \"\",\r\n      _orderBy = \"\",\r\n    } = args\r\n    this.#collectionName = _collectionName\r\n    this.#id = _id\r\n    this.#data = _data\r\n    this.#fieldName = _fieldName\r\n    this.#fieldValue = _fieldValue\r\n    this.#orderBy = _orderBy\r\n  }\r\n\r\n  async getData() {\r\n    const ref = db.collection(this.#collectionName)\r\n    const snapshot = await ref.get()\r\n    if (snapshot.empty) {\r\n      console.log(\"No matching documents.\")\r\n      return []\r\n    }\r\n\r\n    const data = []\r\n    snapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  async getDataWithId() {\r\n    if (this.#id) {\r\n      const ref = db.collection(this.#collectionName).doc(this.#id)\r\n      const doc = await ref.get()\r\n      if (!doc.exists) {\r\n        return {}\r\n      } else {\r\n        const data = { ...doc.data() }\r\n        return data\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n\r\n  getDataWithFieldName() {\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(this.#collectionName)\r\n        .where(this.#fieldName, \"==\", this.#fieldValue)\r\n        .orderBy(this.#orderBy, \"desc\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            _dataFetched.push({ ..._data, _id: doc.id })\r\n          })\r\n          resolve(_dataFetched)\r\n        })\r\n        .catch((error) => {\r\n          reject(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    }).catch((error) => {\r\n      console.log(\"code error\", error)\r\n    })\r\n  }\r\n\r\n  async mergeData() {\r\n    const ref = db.collection(this.#collectionName).doc(this.#id)\r\n    const setWithMerge = ref.set(\r\n      {\r\n        ...this.#data,\r\n      },\r\n      { merge: true }\r\n    )\r\n  }\r\n\r\n  async updateData() {\r\n    if (this.#id) {\r\n      console.log(`Updated ${this.#id}`, this.#data)\r\n    }\r\n  }\r\n\r\n  async deleteData() {\r\n    if (this.#id) {\r\n      console.log(`Deleted ${this.#id}`, this.#data)\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\index.js",["928"],"import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Modal,\r\n  Button,\r\n  DatePicker,\r\n  Table,\r\n  Space,\r\n  Input,\r\n  Select,\r\n  Card,\r\n  Switch,\r\n  Alert,\r\n} from \"antd\"\r\nimport { SearchOutlined } from \"@ant-design/icons\"\r\nimport useGroupPaymentHook from \"./hook\"\r\nimport GroupPaymentPrint from \"./groupPaymentPrint\"\r\nconst { Option } = Select\r\nconst { RangePicker } = DatePicker\r\n\r\nconst CustomModal = ({ visible, setVisible }) => {\r\n  const [\r\n    {\r\n      rangeProps,\r\n      searchInputProps,\r\n      selectProps,\r\n      searchButtonProps,\r\n      refNoProps,\r\n      datePaymentProps,\r\n      editButtonProps,\r\n      discardButtonProps,\r\n      saveButtonProps,\r\n      switchProps,\r\n      tableProps,\r\n    },\r\n    { filteredData, selectData },\r\n  ] = useGroupPaymentHook()\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Group Payments\"\r\n      visible={visible}\r\n      width={2000}\r\n      onCancel={() => setVisible(false)}\r\n      footer={[\r\n        <Button key=\"back\" onClick={() => setVisible(false)}>\r\n          Cancel\r\n        </Button>,\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            saveButtonProps.onClick()\r\n            setVisible(false)\r\n          }}\r\n          disabled={saveButtonProps.disabled}\r\n          danger\r\n        >\r\n          Save\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Space\r\n        direction=\"vertical\"\r\n        style={{\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <Space>\r\n            <Switch {...switchProps} />\r\n            {filteredData.length > 0 && (\r\n              <GroupPaymentPrint filteredData={filteredData} />\r\n            )}\r\n          </Space>\r\n          <Space direction=\"horizontal\" wrap>\r\n            Order Date:\r\n            <RangePicker {...rangeProps} />\r\n            <Input\r\n              // value={searchValue}\r\n              // onChange={(e) => setSearchValue(e.target.value)}\r\n              {...searchInputProps}\r\n              addonAfter={\r\n                <Select {...selectProps}>\r\n                  {selectData.map((value) => (\r\n                    <Option key={value} value={value}>\r\n                      {value}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              }\r\n            />\r\n            <Button\r\n              {...searchButtonProps}\r\n              danger\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </div>\r\n        <div style={{ width: \"100%\", display: \"flex\", flexFlow: \"row wrap\" }}>\r\n          <Card\r\n            style={{ width: \"100%\", maxWidth: \"375px\", position: \"relative\" }}\r\n          >\r\n            <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n              {filteredData.length > 0 && (\r\n                <Alert\r\n                  message=\"Informational Notes\"\r\n                  description={\r\n                    discardButtonProps.disabled\r\n                      ? \"Step 1: Click Edit button below to show the checkboxes in the table\"\r\n                      : \"Step 2: Please input the Ref No first before checking the box\"\r\n                  }\r\n                  type=\"info\"\r\n                  showIcon\r\n                  closable\r\n                />\r\n              )}\r\n              <label>Ref No</label>\r\n              <Input {...refNoProps} />\r\n              <label>Date Payment</label>\r\n              <DatePicker\r\n                allowClear={false}\r\n                style={{ width: \"100%\" }}\r\n                format=\"MM/DD/YYYY\"\r\n                {...datePaymentProps}\r\n                onKeyDown={(e) => {\r\n                  e.preventDefault()\r\n                  return false\r\n                }}\r\n              />\r\n            </Space>\r\n            <br />\r\n            <br />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"right\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <Space>\r\n                <Button {...discardButtonProps}>Discard</Button>\r\n                <Button danger {...editButtonProps}>\r\n                  Edit\r\n                </Button>\r\n              </Space>\r\n            </div>\r\n          </Card>\r\n          {/* <div style={{ overflowY: \"auto\", flex: 1, minWidth: \"375px\" }}> */}\r\n          <Table\r\n            {...tableProps}\r\n            style={{ flex: 1, minWidth: \"375px\" }}\r\n            pagination={{\r\n              size: \"small\",\r\n              defaultPageSize: 20,\r\n            }}\r\n            size=\"small\"\r\n            // scroll={{ y: 690 }}\r\n          />\r\n          {/* </div> */}\r\n        </div>\r\n      </Space>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst GroupPayments = () => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"default\" shape=\"round\" onClick={() => setVisible(true)}>\r\n        Add Group Payment\r\n      </Button>\r\n      {visible && <CustomModal visible={visible} setVisible={setVisible} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GroupPayments\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\hook.js",["929"],"import React from \"react\"\r\nimport ScheduleServicess from \"Services/firebase/SchedulesServicess\"\r\nimport DropdownServicess from \"Services/firebase/DropdownServicess\"\r\nimport useSelectComponentHandler from \"./selectComponentHandler\"\r\nimport useRangeHandler from \"./rangeHandler\"\r\n// import useFindDataHandler from \"hooks/findDataHandler\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n} from \"Helpers/dateFormat\"\r\nimport handleAutoFill from \"./handleAutoFill\"\r\nimport { useState, useEffect, useContext } from \"react\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport moment from \"moment\"\r\nimport useFindDataHandlers from \"./findDataHandler\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport { displayPaymentProp } from \"Helpers/collectionData\"\r\n\r\nexport default function useGroupPaymentHook() {\r\n  const format = \"MM/DD/YYYY\"\r\n  // user slice from redux\r\n  const { user } = useContext(UnauthorizedContext)\r\n  // reusableHook from hooks folder for dateFrom and dateTo\r\n  const [rangeProps, rangeHandlerFilteredData, loadRangeHandlerData] =\r\n    useRangeHandler(ScheduleServicess)\r\n\r\n  // find data on firebase dropdown collection\r\n  const [dataHandler] = useFindDataHandlers(\r\n    new DropdownServicess({\r\n      _fieldName: \"name\",\r\n      _fieldValue: \"orderViaPartner\",\r\n    })\r\n  )\r\n  // this selectHandler is dependent on dataHandler\r\n  const [selectHandler] = useSelectComponentHandler(dataHandler.data?.list)\r\n\r\n  // states\r\n  const [searchValue, setSearchValue] = useState(\"\")\r\n  const [filteredData, setFilteredData] = useState([])\r\n  const [cacheFilteredData, setCacheFilteredData] = useState([])\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n  const [isChecked, setIsChecked] = useState(false)\r\n  const [isEditClicked, setIsEditClicked] = useState(true)\r\n  const [isDiscardClicked, setIsDiscardClicked] = useState(true)\r\n  const [additionalInfo, setAdditionalInfo] = useState({\r\n    refNo: \"\",\r\n    datePayment: new Date(),\r\n  })\r\n  useEffect(() => {\r\n    switchHandler(isChecked)\r\n    if (rangeHandlerFilteredData.searchData.length > 0) {\r\n      setIsEditClicked(false)\r\n      setIsDiscardClicked(true)\r\n    } else {\r\n      setIsEditClicked(true)\r\n      setIsDiscardClicked(true)\r\n    }\r\n  }, [rangeHandlerFilteredData.searchData, isChecked])\r\n\r\n  const switchHandler = (value) => {\r\n    setIsChecked(value)\r\n    setCacheFilteredData([])\r\n    setSelectedRows([])\r\n    if (rangeHandlerFilteredData.searchData.length > 0) {\r\n      const _filteredData = [...rangeHandlerFilteredData.searchData]\r\n      if (isChecked) {\r\n        const _newFilteredData = _filteredData.filter(\r\n          (data) => data?.datePayment\r\n        )\r\n        setFilteredData(_newFilteredData)\r\n      } else {\r\n        const _newFilteredData = _filteredData.filter(\r\n          (data) => typeof data?.datePayment === \"undefined\"\r\n        )\r\n        setFilteredData(_newFilteredData)\r\n      }\r\n    } else {\r\n      setFilteredData([])\r\n    }\r\n  }\r\n\r\n  const searchHandler = () => {\r\n    setSelectedRows([])\r\n    setCacheFilteredData([])\r\n    loadRangeHandlerData({\r\n      dateField: \"StartTime\", // required\r\n      orderBy: \"StartTime\", // required\r\n      search: {\r\n        //optional\r\n        partnerMerchantOrderNo: searchValue,\r\n        [SchedulersClass.ORDER_VIA_WEBSITE]: selectHandler.value,\r\n        branch: user?.branchSelected,\r\n      },\r\n    })\r\n  }\r\n\r\n  const amountPaidChangeHandler = (e, id) => {\r\n    // const _amountPaidList = [...amountPaidList]\r\n    const _dataIndex = cacheFilteredData.findIndex(\r\n      (dataRow) => dataRow._id === id\r\n    )\r\n    // _amountPaidList[_dataIndex] = e.target.value\r\n    // setAmountPaidList(_amountPaidList)\r\n\r\n    const _cacheFilteredData = { ...cacheFilteredData[_dataIndex] }\r\n    _cacheFilteredData.amountPaid = Number(e.target.value).toFixed(2)\r\n    const newCache = arrayReplace(\r\n      cacheFilteredData,\r\n      _dataIndex,\r\n      _cacheFilteredData\r\n    )\r\n    setCacheFilteredData(newCache)\r\n  }\r\n\r\n  const submitHandler = () => {\r\n    if (selectedRows.length > 0) {\r\n      for (const obj of cacheFilteredData) {\r\n        console.log(\"cacheFilteredData\", cacheFilteredData)\r\n        if (selectedRows.includes(obj._id)) {\r\n          let others = 0\r\n          for (const key of Object.keys(obj[SchedulersClass.OTHERS] || {})) {\r\n            others = obj[SchedulersClass.OTHERS][key]\r\n          }\r\n          console.log(\"others\", others)\r\n          const _totalAmountDeducted =\r\n            Number(obj[SchedulersClass.TOTAL_DUE]) -\r\n            Number(obj[SchedulersClass.AMOUNT_PAID])\r\n          const submissionData = {\r\n            [SchedulersClass.PARTIALS]: [\r\n              {\r\n                [SchedulersClass.ACCOUNT_NUMBER]:\r\n                  obj[SchedulersClass.ACCOUNT_NUMBER],\r\n                [SchedulersClass.REF_NO]: obj[SchedulersClass.REF_NO],\r\n                [SchedulersClass.MODE_PAYMENT]:\r\n                  obj[SchedulersClass.MODE_PAYMENT],\r\n                [SchedulersClass.SOURCE]: obj[SchedulersClass.SOURCE],\r\n                date: obj[SchedulersClass.DATE_PAYMENT],\r\n                amount: Number(obj?.amountPaid) - Number(others),\r\n                [SchedulersClass.SOA_NUMBER]:\r\n                  obj[SchedulersClass.SOA_NUMBER] || \"\",\r\n                [SchedulersClass.PAYMENT_NOTES]:\r\n                  obj[SchedulersClass.PAYMENT_NOTES] || \"\",\r\n                [SchedulersClass.OR_NO]: obj[SchedulersClass.OR_NO] || \"\",\r\n              },\r\n            ],\r\n            [SchedulersClass.FIXED_DEDUCTION]: {\r\n              amountDeduction: 10,\r\n              percentage: 0.95,\r\n              totalAmountDeducted: _totalAmountDeducted, // not yet done\r\n            },\r\n          }\r\n          console.log(\"submissionData\", submissionData)\r\n          // const service = new ScheduleServicess({\r\n          //   _id: obj._id,\r\n          //   _data: submissionData,\r\n          // })\r\n          // service.mergeData()\r\n        }\r\n      }\r\n    } else {\r\n      alert(\"no data\")\r\n    }\r\n  }\r\n\r\n  const componentProps = {\r\n    rangeProps,\r\n    searchInputProps: {\r\n      value: searchValue,\r\n      onChange: (e) => setSearchValue(e.target.value),\r\n    },\r\n    selectProps: {\r\n      ...selectHandler,\r\n      loading: dataHandler.isLoading,\r\n      disabled: true,\r\n    },\r\n    searchButtonProps: { onClick: searchHandler },\r\n    refNoProps: {\r\n      value: additionalInfo?.refNo,\r\n      onChange: (e) => {\r\n        setAdditionalInfo({\r\n          ...additionalInfo,\r\n          refNo: e.target.value,\r\n        })\r\n      },\r\n    },\r\n    datePaymentProps: {\r\n      value: moment(additionalInfo.datePayment, format),\r\n      onChange: (date, dateString) => {\r\n        if (!date) return\r\n        setAdditionalInfo({\r\n          ...additionalInfo,\r\n          datePayment: date._d,\r\n        })\r\n      },\r\n    },\r\n    editButtonProps: {\r\n      onClick: () => {\r\n        setIsEditClicked(true)\r\n        setIsDiscardClicked(false)\r\n        setCacheFilteredData([...filteredData])\r\n      },\r\n      disabled: isEditClicked,\r\n    },\r\n    discardButtonProps: {\r\n      onClick: () => {\r\n        setIsDiscardClicked(true)\r\n        setIsEditClicked(!rangeHandlerFilteredData.searchData.length > 0)\r\n        setCacheFilteredData([])\r\n        setSelectedRows([])\r\n      },\r\n      disabled: isDiscardClicked,\r\n    },\r\n    saveButtonProps: {\r\n      onClick: submitHandler,\r\n      disabled: selectedRows.length === 0,\r\n    },\r\n    switchProps: {\r\n      onChange: switchHandler,\r\n      checked: isChecked,\r\n      checkedChildren: \"Paid\",\r\n      unCheckedChildren: \"Unpaid\",\r\n    },\r\n    tableProps: {\r\n      rowSelection: !isDiscardClicked\r\n        ? {\r\n            type: isChecked ? \"radio\" : \"checkbox\",\r\n            onChange: (record) => {\r\n              if (additionalInfo.refNo && additionalInfo.datePayment) {\r\n                const newData = handleAutoFill(\r\n                  record,\r\n                  cacheFilteredData, // this is a copy of the original\r\n                  additionalInfo.refNo,\r\n                  additionalInfo.datePayment,\r\n                  filteredData // this the original data cannot be modified to prevent error\r\n                )\r\n                setSelectedRows(record)\r\n                setCacheFilteredData(newData)\r\n              }\r\n            },\r\n            getCheckboxProps: (record) =>\r\n              additionalInfo.refNo && additionalInfo.datePayment\r\n                ? { disabled: false }\r\n                : { disabled: true },\r\n          }\r\n        : false,\r\n      dataSource:\r\n        cacheFilteredData.length > 0\r\n          ? [\r\n              ...cacheFilteredData.map((data) => {\r\n                return { ...data, key: data._id }\r\n              }),\r\n            ]\r\n          : [\r\n              ...filteredData.map((data) => {\r\n                return { ...data, key: data._id }\r\n              }),\r\n            ],\r\n      columns: [\r\n        {\r\n          title: \"ORDER DATE/TIME\",\r\n          key: \"StartTime\",\r\n          dataIndex: \"StartTime\",\r\n          render: (date) => {\r\n            const formatDate = formatDateFromDatabase(date)\r\n            const dateSlash = formatDateDashWithTime(formatDate)\r\n            return <span>{dateSlash}</span>\r\n          },\r\n        },\r\n        {\r\n          title: \"ORDER #\",\r\n          key: \"orderNo\",\r\n          dataIndex: \"orderNo\",\r\n        },\r\n        {\r\n          title: \"UTAK #\",\r\n          key: \"utakNo\",\r\n          dataIndex: \"utakNo\",\r\n        },\r\n        {\r\n          title: \"PARTNER MERCH ORDER #\",\r\n          key: \"partnerMerchantOrderNo\",\r\n          dataIndex: \"partnerMerchantOrderNo\",\r\n        },\r\n        {\r\n          title: \"CUSTOMER\",\r\n          key: \"customer\",\r\n          dataIndex: \"customer\",\r\n        },\r\n        {\r\n          title: \"REF #\",\r\n          key: \"refNo\",\r\n          dataIndex: \"refNo\",\r\n          render: (data, record) => {\r\n            if (typeof record[SchedulersClass.PARTIALS] !== \"undefined\") {\r\n              if (record[SchedulersClass.PARTIALS].length > 0) {\r\n                return displayPaymentProp(data, record, SchedulersClass.REF_NO)\r\n              }\r\n            }\r\n            return data\r\n          },\r\n        },\r\n        {\r\n          title: \"DATE PAID\",\r\n          key: \"datePayment\",\r\n          dataIndex: \"datePayment\",\r\n          render: (date) => {\r\n            if (date) {\r\n              const formatDate = formatDateFromDatabase(date)\r\n              const dateSlash = formatDateDash(formatDate)\r\n              return <span>{dateSlash}</span>\r\n            } else {\r\n              return <></>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"TOTAL DUE\",\r\n          key: \"totalDue\",\r\n          dataIndex: \"totalDue\",\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          key: \"amountPaid\",\r\n          dataIndex: \"amountPaid\",\r\n          align: \"right\",\r\n          render: (value, record) => {\r\n            const _dataIndex = cacheFilteredData.findIndex(\r\n              (dataRow) => dataRow._id === record._id\r\n            )\r\n            return cacheFilteredData.length > 0 &&\r\n              selectedRows.includes(record._id) ? (\r\n              <input\r\n                type=\"number\"\r\n                step=\".00\"\r\n                placeholder=\"0\"\r\n                value={cacheFilteredData[_dataIndex]?.amountPaid}\r\n                onChange={(e) => {\r\n                  amountPaidChangeHandler(e, record._id)\r\n                }}\r\n              />\r\n            ) : (\r\n              <span>{value || \"0.00\"}</span>\r\n            )\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  }\r\n\r\n  const dataResponses = {\r\n    filteredData,\r\n    selectData: dataHandler?.data?.list || [],\r\n    selectedRows,\r\n  }\r\n\r\n  return [componentProps, dataResponses]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\groupPaymentPrint.js",["930","931","932","933","934","935","936","937"],"import { Button, DatePicker, Input } from \"antd\"\r\nimport React from \"react\"\r\n// import {\r\n//   AMOUNT_PAID,\r\n//   DATE_PAYMENT,\r\n//   REF_NO,\r\n// } from \"components/PaymentDetails/types\"\r\nimport moment from \"moment\"\r\nimport {\r\n  AiFillCloseCircle,\r\n  AiFillFilter,\r\n  AiFillPrinter,\r\n  AiOutlineClose,\r\n} from \"react-icons/ai\"\r\nimport Print from \"Components/Features/Print\"\r\n// import {\r\n//   CUSTOMER,\r\n//   DATE_START,\r\n//   ORDER_NO,\r\n//   PARTNER_MERCHANT_ORDER_NO,\r\n// } from \"Constants/schedules\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Helpers/dateFormat\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nconst defaultDate = moment(new Date(), \"MM/DD/YYYY\")\r\nfunction GroupPaymentPrint({ filteredData }) {\r\n  const startDate = formatDateFromDatabase(\r\n    filteredData[SchedulersClass.DATE_START]\r\n  )\r\n  const datePayment = formatDateFromDatabase(\r\n    filteredData[SchedulersClass.DATE_PAYMENT]\r\n  )\r\n  return (\r\n    <Print\r\n      component={\r\n        <div>\r\n          <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n            <tr style={{ width: \"100%\" }}>\r\n              <th>ORDER DATE/TIME</th>\r\n              <th>ORDER #</th>\r\n              <th>PARTNER MERCH ORDER #</th>\r\n              <th>CUSTOMER</th>\r\n              <th>REF NO</th>\r\n              <th>DATE PAID</th>\r\n              <th align=\"right\">TOTAL DUE</th>\r\n              <th align=\"right\">AMOUNT PAID</th>\r\n            </tr>\r\n            {filteredData.map((data) => {\r\n              return (\r\n                <tr>\r\n                  <td>{formatDateSlash(startDate)}</td>\r\n                  <td>{data[SchedulersClass.ORDER_NO]}</td>\r\n                  <td>{data[SchedulersClass.PARTNER_MERCHANT_ORDER_NO]}</td>\r\n                  <td>{data[SchedulersClass.CUSTOMER]}</td>\r\n                  <td>{data[SchedulersClass.REF_NO]}</td>\r\n                  <td>{formatDateSlash(datePayment)}</td>\r\n                  <td align=\"right\">{data?.totalDue}</td>\r\n                  <td align=\"right\">{data[SchedulersClass.AMOUNT_PAID]}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n            <tr style={{ color: \"red\" }}>\r\n              <td>TOTAL</td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td align=\"right\">\r\n                {sumArray(filteredData, \"totalDue\").toFixed(2)}\r\n              </td>\r\n              <td align=\"right\">\r\n                {sumArray(filteredData, SchedulersClass.AMOUNT_PAID).toFixed(2)}\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      }\r\n      button={<AiFillPrinter fontSize=\"2rem\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default GroupPaymentPrint\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\handleAutoFill.js",["938"],"import { formatDateDash } from \"Helpers/dateFormat\"\r\n\r\nconst ifOrigHasRef = (originalData) => {\r\n  if (originalData?.refNo && originalData?.datePayment) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nconst handleAutoFill = (\r\n  checkedId,\r\n  cacheFilteredData,\r\n  refNo,\r\n  datePayment,\r\n  filteredData\r\n) => {\r\n  const result = []\r\n  for (const obj of cacheFilteredData) {\r\n    const originalData = filteredData.find((data) => data._id === obj._id)\r\n    let withPercent = 0\r\n    let totalAmountPaid = 0\r\n    if (originalData?.totalDue) {\r\n      withPercent = Number(originalData?.totalDue) * 0.05\r\n      totalAmountPaid = Number(originalData?.totalDue) - (withPercent + 10)\r\n    }\r\n    if (checkedId.includes(obj?._id)) {\r\n      result.push({\r\n        ...obj,\r\n        modePayment: \"Zap\",\r\n        source: \"Zap\",\r\n        accountNumber: \"BDO / 609\",\r\n        amountPaid: ifOrigHasRef(originalData)\r\n          ? obj?.amountPaid\r\n          : Number(obj?.amountPaid) > 0\r\n          ? Number(obj?.amountPaid).toFixed(2)\r\n          : totalAmountPaid.toFixed(2),\r\n        refNo: ifOrigHasRef(originalData)\r\n          ? refNo\r\n          : obj.refNo\r\n          ? obj.refNo\r\n          : refNo,\r\n        datePayment: ifOrigHasRef(originalData)\r\n          ? datePayment\r\n          : obj.datePayment\r\n          ? obj.datePayment\r\n          : datePayment,\r\n      })\r\n    } else {\r\n      result.push({\r\n        ...obj,\r\n        modePayment: \"\",\r\n        source: \"\",\r\n        accountNumber: \"\",\r\n        amountPaid: originalData?.amountPaid\r\n          ? originalData?.amountPaid\r\n          : \"0.00\",\r\n        refNo: originalData?.refNo ? originalData?.refNo : \"\",\r\n        datePayment: originalData?.datePayment ? originalData?.datePayment : \"\",\r\n      })\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nexport default handleAutoFill\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\findDataHandler.js",["939"],"import { useEffect, useState } from \"react\"\r\n\r\nexport default function useFindDataHandlers(service) {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [data, setData] = useState(null)\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [])\r\n\r\n  // will cause an error in the develeopment server database due to indexing but will work in production\r\n  const loadData = async () => {\r\n    setIsLoading(true)\r\n    const _data = await service.getDataWithFieldName()\r\n    if (typeof _data === \"object\") {\r\n      setData(_data[0])\r\n    }\r\n    setData(_data)\r\n    setIsLoading(false)\r\n  }\r\n  return [{ data, isLoading }]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\DropdownServicess.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\index.js",["940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\index.js",["957","958","959","960"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\index.js",["961"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardScheduler\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\groupPaymentPrint.js",["962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\hook.js",["1001","1002","1003","1004","1005","1006","1007"],"D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\rangeHandler.js",["1008","1009","1010"],"D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\FirestoreCommands.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\PaginateCommands.js",["1011","1012","1013"],"D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\SchedulesServicess.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\PrintComponent.js",["1014","1015","1016"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\othersTableColumns.js",["1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\hook.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardScheduler\\hooks.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\findDataHandler.js",["1038"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\handleAutoFill.js",["1039"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\tableColumns.js",["1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061"],"D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\DropdownServicess.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\base\\index.js",["1062"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\index.js",["1063","1064","1065","1066","1067","1068","1069"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\PrintComponent.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\PrintComponent.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\hook.js",["1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080"],"D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\hook.js",["1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unauthorized.js",["1092","1093"],"import useAuthentication from \"Components/Features/Authentication/hook\"\r\nimport React, { createContext, useState, useEffect } from \"react\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nimport { getAuth, onAuthStateChanged } from \"Services/firebase\"\r\n\r\nexport const UnauthorizedContext = createContext({})\r\nfunction Unauthorized({ children }) {\r\n  const [user, setUser] = useState({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [loaded, setLoaded] = useState(false)\r\n  const [isAuthenticated, setIsAuthenticated] = useState(true)\r\n  const [error, setError] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    const auth = getAuth()\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        // User is signed in, see docs for a list of available properties\r\n        // https://firebase.google.com/docs/reference/js/firebase.User\r\n        const uid = user.uid\r\n        if (uid) {\r\n          loadUser(user?.email)\r\n        }\r\n        // ...\r\n      } else {\r\n        // User is signed out\r\n        // ...\r\n        setIsAuthenticated(false)\r\n        setIsLoading(false)\r\n        setLoaded(true)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const loadUser = async (email) => {\r\n    try {\r\n      const user = await UsersClass.getDataById(email)\r\n      if (user) {\r\n        setUser(user)\r\n      }\r\n    } catch (e) {\r\n      setError(\"Oops something went wrong. Please try again\")\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (user?._id) {\r\n      setIsAuthenticated(true)\r\n      setLoaded(true)\r\n      setIsLoading(false)\r\n    }\r\n  }, [user])\r\n\r\n  return (\r\n    <UnauthorizedContext.Provider\r\n      value={{\r\n        setError,\r\n        setIsLoading,\r\n        isAuthenticated,\r\n        user,\r\n        setUser,\r\n        isLoading,\r\n        setIsLoading,\r\n        error,\r\n        setLoaded,\r\n        loaded,\r\n      }}\r\n    >\r\n      {children}\r\n    </UnauthorizedContext.Provider>\r\n  )\r\n}\r\n\r\nexport default Unauthorized\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\LoginPage.js",["1094"],"import Authentication from \"Components/Features/Authentication\"\r\nimport styled from \"styled-components\"\r\nimport React, { useContext } from \"react\"\r\nimport { Route, Switch } from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { Spin } from \"antd\"\r\n\r\nfunction LoginPage() {\r\n  const { isAuthenticated, isLoading, loaded } = useContext(UnauthorizedContext)\r\n  return (\r\n    <LoginContainer>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Authentication />\r\n        </Route>\r\n        <Route exact path=\"/login\">\r\n          <Authentication />\r\n        </Route>\r\n        <Route exact path=\"*\">\r\n          {!isAuthenticated && loaded ? <URLNotFound /> : <Spin size=\"large\" />}\r\n        </Route>\r\n      </Switch>\r\n    </LoginContainer>\r\n  )\r\n}\r\n\r\nconst LoginContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  background-color: #d6e4ff;\r\n`\r\nexport default LoginPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\URLNotFound.js",["1095"],"import { Result } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nfunction URLNotFound() {\r\n  const history = useHistory()\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        width: \"100%\",\r\n        height: \"80vh\",\r\n        backgroundColor: \"transparent\",\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      <Result\r\n        status=\"404\"\r\n        title=\"404\"\r\n        subTitle=\"Sorry, the page you visited does not exist.\"\r\n        subTitle=\"Sorry, the page you visited does not exist.\"\r\n        extra={\r\n          <MainButton label=\"Back Home\" onClick={() => history.push(\"/\")} />\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default URLNotFound\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\UsersClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Predefined.js",["1096","1097","1098","1099","1100"],"import { useSelectMenus } from \"Components/Features/Sidenav/hook\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport React, { useContext, useEffect } from \"react\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport Pages from \"./Pages\"\r\nimport RouteWithSubRoutes from \"./RouteWithSubRoutes\"\r\n\r\nfunction Predefined({}) {\r\n  const { menus } = useSelectMenus()\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <MainPage />\r\n      </Route>\r\n      {menus.map((menu) => {\r\n        return (\r\n          // <RouteWithSubRoutes key={menu.dataKey} {...menu} />\r\n          <Route key={menu.key} exact path={`${menu.path}`}>\r\n            {Pages[menu.dataKey]}\r\n          </Route>\r\n        )\r\n      })}\r\n\r\n      {menus.map(({ subMenu = [] }) => {\r\n        return subMenu.map((sub) => {\r\n          return (\r\n            <Route key={sub.key} path={`${sub.path}`}>\r\n              {Pages[sub.dataKey]}\r\n            </Route>\r\n          )\r\n        })\r\n      })}\r\n      {menus.length > 0 && (\r\n        <Route path=\"*\">\r\n          <URLNotFound />\r\n        </Route>\r\n      )}\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Predefined\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\hook.js",["1101","1102"],"import { useContext, useEffect, useState } from \"react\"\r\nimport validateAuth from \"Validations/validateAuth\"\r\nimport { message } from \"antd\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nexport default function useAuthentication() {\r\n  const { user, setUser } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const [data, setData] = useState({})\r\n  const [response, setResponse] = useState({})\r\n  const [branches, setBranches] = useState([])\r\n  const [enableChangePass, setEnabledChangePass] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!response?.valid) {\r\n      for (const key in response.errors) {\r\n        message.error(`${AuthClass.LABELS[key]}: ${response.errors[key]}`)\r\n      }\r\n    }\r\n  }, [response])\r\n\r\n  useEffect(() => {\r\n    loadUser(data[AuthClass.USERNAME])\r\n    setData({ ...data, [AuthClass.BRANCH]: \"\" })\r\n  }, [data[AuthClass.USERNAME]])\r\n\r\n  const loadUser = async (email) => {\r\n    try {\r\n      const user = await UsersClass.getDataById(email)\r\n      if (user) {\r\n        setBranches(user.branches)\r\n      }\r\n    } catch (e) {\r\n      message.error(\"Connection not available\")\r\n      console.log(\"Authentication hook\", e?.message)\r\n    }\r\n  }\r\n\r\n  const handleChange = (value, fieldName) => {\r\n    setData({ ...data, [fieldName]: value })\r\n  }\r\n  const handleCancel = () => {\r\n    const _data = { ...data }\r\n    delete _data[AuthClass.RETYPE_PASSWORD]\r\n    setData({ ..._data, [AuthClass.PASSWORD]: \"\" })\r\n\r\n    setEnabledChangePass(false)\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    const validatedData = validateAuth(data)\r\n    setResponse(validatedData)\r\n    if (validatedData.valid) {\r\n      message.loading({ content: \"Loading...\", key: \"updatable\", duration: 10 })\r\n      try {\r\n        const result = await AuthClass.login(\r\n          data[AuthClass.USERNAME],\r\n          data[AuthClass.PASSWORD],\r\n          data[AuthClass.BRANCH],\r\n          history\r\n        )\r\n        if (result) {\r\n          setUser({ ...user, [AuthClass.BRANCH]: data[AuthClass.BRANCH] })\r\n          message.success({\r\n            content: \"Logged In\",\r\n            key: \"updatable\",\r\n            duration: 2,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        if (error === \"auth/user-not-found\") {\r\n          const result = await AuthClass.checkEmailIfExist(\r\n            data[AuthClass.USERNAME],\r\n            data[AuthClass.PASSWORD]\r\n          )\r\n          if (result === \"Email Exist\") {\r\n            setEnabledChangePass(true)\r\n            setData({ ...data, [AuthClass.PASSWORD]: \"\" })\r\n            message.destroy(\"updatable\")\r\n            message.info(\"Please change your password to proceed\")\r\n          } else {\r\n            message.destroy(\"updatable\")\r\n            message.error(result)\r\n          }\r\n        } else {\r\n          message.destroy(\"updatable\")\r\n          message.error(error)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const onSignup = async () => {\r\n    const _newData = { ...data }\r\n    if (data[AuthClass.PASSWORD] !== data[AuthClass.RETYPE_PASSWORD]) {\r\n      message.error(\"Password mismatch\")\r\n      return\r\n    }\r\n    delete _newData[AuthClass.RETYPE_PASSWORD]\r\n    const validatedData = validateAuth(_newData)\r\n    setResponse(validatedData)\r\n    if (validatedData.valid) {\r\n      message.loading({ content: \"Loading...\", key: \"updatable\", duration: 10 })\r\n      try {\r\n        const result = await AuthClass.createLogin(\r\n          _newData[AuthClass.USERNAME],\r\n          _newData[AuthClass.PASSWORD],\r\n          _newData[AuthClass.BRANCH],\r\n          history\r\n        )\r\n        if (result) {\r\n          message.success({\r\n            content: \"Logged In\",\r\n            key: \"updatable\",\r\n            duration: 2,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        message.destroy(\"updatable\")\r\n        message.error(error)\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    data,\r\n    branches,\r\n    handleChange,\r\n    onSubmit,\r\n    onSignup,\r\n    enableChangePass,\r\n    handleCancel,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Authentication\\index.js",["1103","1104","1105","1106","1107"],"import { UserOutlined, LockOutlined } from \"@ant-design/icons\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport styled from \"styled-components\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport useAuthentication from \"./hook\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport VitosLogo from \"Images/vitosLogo.png\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { Result, Space, Spin } from \"antd\"\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\n\r\nfunction Authentication() {\r\n  const {\r\n    data,\r\n    branches = [],\r\n    handleChange,\r\n    onSubmit,\r\n    onSignup,\r\n    enableChangePass,\r\n    handleCancel,\r\n  } = useAuthentication()\r\n  return enableChangePass ? (\r\n    <ConfigSpace>\r\n      <Logo>\r\n        <img src={VitosLogo} style={{ width: \"100%\" }} />\r\n      </Logo>\r\n      <br />\r\n      <CustomTitle typographyType=\"text\" label=\"Setup New Password\" level={5} />\r\n      <br />\r\n      <Password\r\n        onChange={handleChange}\r\n        value={data[AuthClass.PASSWORD]}\r\n        placeholder=\"New Password\"\r\n      />\r\n      <br />\r\n      <RetypePassword\r\n        onChange={handleChange}\r\n        value={data[AuthClass.RETYPE_PASSWORD]}\r\n      />\r\n      <br />\r\n      <br />\r\n      <Space>\r\n        <Cancel onClick={handleCancel} />\r\n        <LoginButton onClick={onSignup} />\r\n      </Space>\r\n    </ConfigSpace>\r\n  ) : (\r\n    <ConfigSpace>\r\n      <Logo>\r\n        <img src={VitosLogo} style={{ width: \"100%\" }} />\r\n      </Logo>\r\n      <br />\r\n      <Username onChange={handleChange} value={data[AuthClass.USERNAME]} />\r\n      <br />\r\n      <Password onChange={handleChange} value={data[AuthClass.PASSWORD]} />\r\n      <br />\r\n      <SelectBranch onChange={handleChange} options={branches} data={data} />\r\n      <br />\r\n      <LoginButton onClick={onSubmit} />\r\n    </ConfigSpace>\r\n  )\r\n}\r\n\r\n// Custom Components\r\nconst ConfigSpace = ({ children }) => {\r\n  const { sm, xs } = useBreakpoint()\r\n  const { isLoading, error } = useContext(UnauthorizedContext)\r\n\r\n  const reloadPage = () => {\r\n    window.location.reload(false)\r\n  }\r\n  if (xs) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          width: \"23rem\",\r\n          padding: \"2rem 2rem 2rem 2rem\",\r\n        }}\r\n      >\r\n        {isLoading && <Spin size=\"large\" />}\r\n        {error && (\r\n          <Result\r\n            status=\"500\"\r\n            title=\"500\"\r\n            subTitle={error}\r\n            extra={<MainButton label=\"Reload page\" onClick={reloadPage} />}\r\n          />\r\n        )}\r\n        {!isLoading && !error && children}\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"23rem\",\r\n        padding: \"2rem 2rem 2rem 2rem\",\r\n        // boxShadow: isLoading || error ? \"none\" : \"0px 1px 1rem #999\",\r\n        borderRadius: \".5rem\",\r\n        backgroundColor: isLoading || error ? \"transparent\" : \"white\",\r\n      }}\r\n    >\r\n      {isLoading && <Spin size=\"large\" />}\r\n      {error && (\r\n        <Result\r\n          status=\"500\"\r\n          title=\"500\"\r\n          subTitle={error}\r\n          extra={<MainButton label=\"Reload page\" onClick={reloadPage} />}\r\n        />\r\n      )}\r\n      {!isLoading && !error && children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Username = (props) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<UserOutlined />}\r\n      size=\"large\"\r\n      placeholder={AuthClass.LABELS[AuthClass.USERNAME]}\r\n      value={props.value}\r\n      onChange={(e) => props.onChange(e.target.value, AuthClass.USERNAME)}\r\n    />\r\n  )\r\n}\r\n\r\nconst Password = ({\r\n  placeholder = AuthClass.LABELS[AuthClass.PASSWORD],\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<LockOutlined />}\r\n      size=\"large\"\r\n      placeholder={placeholder}\r\n      type=\"password\"\r\n      value={rest.value}\r\n      onChange={(e) => rest.onChange(e.target.value, AuthClass.PASSWORD)}\r\n    />\r\n  )\r\n}\r\n\r\nconst RetypePassword = (props) => {\r\n  return (\r\n    <CustomInput\r\n      prefix={<LockOutlined />}\r\n      size=\"large\"\r\n      placeholder={AuthClass.LABELS[AuthClass.RETYPE_PASSWORD]}\r\n      type=\"password\"\r\n      value={props.value}\r\n      onChange={(e) =>\r\n        props.onChange(e.target.value, AuthClass.RETYPE_PASSWORD)\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nconst SelectBranch = (props) => {\r\n  return (\r\n    <AutoSelect\r\n      placeholder=\"Select branch\"\r\n      options={[...props.options]}\r\n      value={props.data[AuthClass.BRANCH]}\r\n      onChange={(value) => props.onChange(value, AuthClass.BRANCH)}\r\n      size=\"large\"\r\n      width={\"100%\"}\r\n    />\r\n  )\r\n}\r\n\r\nconst Cancel = (props) => {\r\n  return <MainButton label=\"Cancel\" size=\"large\" danger {...props} />\r\n}\r\n\r\nconst LoginButton = (props) => {\r\n  return <MainButton label=\"Login\" size=\"large\" {...props} />\r\n}\r\n\r\n// additional styles\r\n\r\nconst Logo = styled.div`\r\n  background-color: #333;\r\n  border-radius: 50%;\r\n  height: 10rem;\r\n  width: 10rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\nexport default Authentication\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Error\\Unavailable.js",["1108","1109"],"import React, { createContext, useEffect, useState } from \"react\"\r\nimport { Spin, Result } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { useLocation, useHistory } from \"react-router\"\r\n\r\nexport const UnavailableContext = createContext({})\r\nfunction Unavailable({ children }) {\r\n  const location = useLocation()\r\n  const history = useHistory()\r\n  const [error, setError] = useState(\"\")\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [loaded, setLoaded] = useState(true)\r\n\r\n  // cleared the error if the routes changes to render the component requested\r\n  useEffect(() => {\r\n    if (error) {\r\n      setError(\"\")\r\n      setLoaded(true)\r\n    }\r\n  }, [location.pathname])\r\n\r\n  const reloadPage = () => {\r\n    history.push(\"/\")\r\n  }\r\n  return (\r\n    <UnavailableContext.Provider value={{ setError, setIsLoading, setLoaded }}>\r\n      <div\r\n        style={\r\n          isLoading || error\r\n            ? {\r\n                height: \"85vh\",\r\n                overflow: \"hidden\",\r\n              }\r\n            : {}\r\n        }\r\n      >\r\n        {isLoading && (\r\n          <Container>\r\n            <Spin size=\"large\" />\r\n          </Container>\r\n        )}\r\n\r\n        {error && isLoading === false && (\r\n          <Container>\r\n            <Result\r\n              status=\"500\"\r\n              title=\"500\"\r\n              subTitle={error}\r\n              extra={<MainButton label=\"Back Home\" onClick={reloadPage} />}\r\n            />\r\n          </Container>\r\n        )}\r\n\r\n        {children}\r\n      </div>\r\n    </UnavailableContext.Provider>\r\n  )\r\n}\r\n\r\nconst Container = ({ children }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Unavailable\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\RouteWithSubRoutes.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\RolesClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Secure\\Routes\\Pages.js",["1110","1111","1112","1113","1114","1115","1116"],"import {\r\n  BRANCH_MASTERFILE,\r\n  CUSTOMER_REPORTS,\r\n  DAILY_REPORTS,\r\n  DASHBOARD,\r\n  DROPDOWN_MASTERFILE,\r\n  FOR_DEPOSITS,\r\n  GRILL_RESERVATION,\r\n  INCIDENT_REPORTS,\r\n  INVENTORY,\r\n  MASTER_DATA,\r\n  MONTHLY_SALES_SUMMARY,\r\n  PAYMENT_TRANSACTION,\r\n  PRODUCTS_MASTERFILE,\r\n  REPORTS,\r\n  ROLES_MASTERFILE,\r\n  USER_MASTERFILE,\r\n} from \"Constants/pathNames\"\r\nimport {\r\n  DashboardOutlined,\r\n  SettingOutlined,\r\n  FolderOutlined,\r\n} from \"@ant-design/icons\"\r\nimport React from \"react\"\r\nimport DashboardGrillingPage from \"Pages/DashboardGrillingPage\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport DashboardStoreInventory from \"Pages/DashboardStoreInventory\"\r\nimport SettingsUserMasterfilePage from \"Pages/SettingsUserMasterfilePage\"\r\nimport SettingsProductMasterfile from \"Components/Features/SettingsProductMasterfile\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport { useRouteMatch } from \"react-router\"\r\nimport SettingsRoleMasterfile from \"Components/Features/SettingsRoleMasterfile\"\r\nimport SettingsDropdownMasterfile from \"Components/Features/SettingsDropdownMasterfile\"\r\nimport SettingsBranchMasterfile from \"Components/Features/SettingsBranchMasterfile\"\r\nimport AnalyticsIncidents from \"Components/Features/AnalyticsIncidents\"\r\nimport AnalyticsCustomer from \"Components/Features/AnalyticsCustomer\"\r\nimport AnalyticsDailyReport from \"Components/Features/AnalyticsDailyReport\"\r\nimport DashboardForDeposits from \"Components/Features/DashboardForDeposits\"\r\nimport MonthlySalesPage from \"Pages/MonthlySalesPage\"\r\nimport AnalyticsMonthlySales from \"Components/Features/AnalyticsMonthlySales\"\r\n\r\nconst iconSize = {\r\n  fontSize: \"15rem\",\r\n  color: \"#888\",\r\n}\r\nexport default {\r\n  [DASHBOARD]: (\r\n    <MainPage>\r\n      <DashboardOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [REPORTS]: (\r\n    <MainPage>\r\n      <FolderOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [MASTER_DATA]: (\r\n    <MainPage>\r\n      <SettingOutlined style={iconSize} />\r\n    </MainPage>\r\n  ),\r\n  [GRILL_RESERVATION]: <DashboardGrillingPage />,\r\n  [PAYMENT_TRANSACTION]: <DashboardTransactionPage />,\r\n  [FOR_DEPOSITS]: <DashboardForDeposits />,\r\n  [USER_MASTERFILE]: <SettingsUserMasterfilePage />,\r\n  [PRODUCTS_MASTERFILE]: <SettingsProductMasterfile />,\r\n  [ROLES_MASTERFILE]: <SettingsRoleMasterfile />,\r\n  [DROPDOWN_MASTERFILE]: <SettingsDropdownMasterfile />,\r\n  [BRANCH_MASTERFILE]: <SettingsBranchMasterfile />,\r\n  [INCIDENT_REPORTS]: <AnalyticsIncidents />,\r\n  [CUSTOMER_REPORTS]: <AnalyticsCustomer />,\r\n  [DAILY_REPORTS]: <AnalyticsDailyReport />,\r\n  [MONTHLY_SALES_SUMMARY]: <MonthlySalesPage />,\r\n}\r\n\r\n// const Pages = (props) => {\r\n//   const { path, url } = useRouteMatch()\r\n//   return (\r\n//     <div>\r\n//       <Switch>\r\n//         <Route path={path}>\r\n//           <DashboardTransactionPage {...props} />\r\n//         </Route>\r\n//         <Route exact path={`${path}/tobehonest`}>\r\n//           <div>Hello world</div>\r\n//         </Route>\r\n//       </Switch>\r\n//     </div>\r\n//   )\r\n// }\r\n// export default Pagess\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\index.js",["1117"],"import React, { useEffect } from \"react\"\r\nimport { Menu } from \"antd\"\r\nimport { useSelectMenus } from \"./hook\"\r\nimport { useHistory } from \"react-router\"\r\nconst { SubMenu } = Menu\r\n\r\nfunction Sidenav() {\r\n  const history = useHistory()\r\n  const { menus, selectedKeys } = useSelectMenus()\r\n  return (\r\n    <Menu\r\n      mode=\"inline\"\r\n      theme=\"dark\"\r\n      style={{ display: \"flex\", flexDirection: \"column\" }}\r\n      selectedKeys={selectedKeys}\r\n    >\r\n      {menus.map((menu) => {\r\n        const subMenu = [...menu.subMenu]\r\n        return (\r\n          <SubMenu\r\n            key={menu.key}\r\n            icon={menu.Icon}\r\n            title={menu.title}\r\n            style={{ display: menu.display ? \"block\" : \"none\" }}\r\n            onTitleClick={() => history.push(menu.path)}\r\n          >\r\n            {subMenu.map((sub) => {\r\n              return (\r\n                <Menu.Item\r\n                  key={sub.key}\r\n                  onClick={() => {\r\n                    history.push(sub.path)\r\n                  }}\r\n                  style={{ display: sub?.display ? \"block\" : \"none\" }}\r\n                >\r\n                  {sub.title}\r\n                </Menu.Item>\r\n              )\r\n            })}\r\n          </SubMenu>\r\n        )\r\n      })}\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default Sidenav\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\MainPage.js",["1118"],"import React, { useEffect } from \"react\"\r\nimport CookedChef from \"Images/cookedChef.jpg\"\r\nimport { Avatar, Space, Typography } from \"antd\"\r\nconst { Title } = Typography\r\n\r\nfunction MainPage({ children = <Welcome /> }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        position: \"relative\",\r\n        height: \"80vh\",\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"transparent\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Welcome = () => {\r\n  return (\r\n    <Space direction=\"vertical\" align=\"center\">\r\n      <Avatar\r\n        src={CookedChef}\r\n        shape=\"circle\"\r\n        style={{ width: \"15rem\", height: \"15rem\" }}\r\n      />\r\n      <Title level={3}>Welcome to Vito's BBQ</Title>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default MainPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\MainButton.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\AuthClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\hook.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardTransactionPage.js",["1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133"],"import DashboardTransaction from \"Components/Features/DashboardTransaction\"\r\nimport { Link, Route, Switch } from \"react-router-dom\"\r\nimport { useHistory, useRouteMatch, useParams } from \"react-router\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { Space, Tabs } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport OrderForm, {\r\n  StyledContainer,\r\n} from \"Components/Features/DashboardTransaction/OrderForm\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nconst { TabPane } = Tabs\r\n\r\nfunction DashboardTransactionPage() {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const [dataLoaded, setDataLoaded] = useState(null)\r\n  const [modifiedData, setModifiedData] = useState({})\r\n  const [advancefilterButton, setAdvanceFilterButton] = useState(\"flex\")\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <DashboardTransaction\r\n        // exposeData={(data) => setDataLoaded(data)}\r\n        modifiedData={modifiedData}\r\n        advanceButtonDisplay={advancefilterButton}\r\n      />\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        <Route exact path={`${path}/add`}>\r\n          <OrderForm\r\n            back={() => {\r\n              history.push(path)\r\n              setAdvanceFilterButton(\"flex\")\r\n            }}\r\n            formType=\"add\"\r\n            setAdvanceFilterButton={setAdvanceFilterButton}\r\n            modifiedData={(data) => setModifiedData(data)}\r\n          />\r\n        </Route>\r\n        <Route exact path={`${path}/modified`}>\r\n          <OrderForm\r\n            back={() => {\r\n              history.push(path)\r\n              setAdvanceFilterButton(\"flex\")\r\n            }}\r\n            formType=\"modified\"\r\n            setAdvanceFilterButton={setAdvanceFilterButton}\r\n            modifiedData={(data) => setModifiedData(data)}\r\n          />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <StyledContainer>\r\n            <URLNotFound />\r\n          </StyledContainer>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DashboardTransactionPage\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTitle.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\AutoSelect.js",["1134"],"import { Select } from \"antd\"\r\nimport React, { useEffect } from \"react\"\r\nconst { Option } = Select\r\n\r\nconst AutoSelect = React.forwardRef((props, ref) => {\r\n  const {\r\n    placeholder = \"\",\r\n    onChange = () => {},\r\n    options = [],\r\n    size = \"default\",\r\n    width = 120,\r\n    value = \"\",\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <Select\r\n      ref={ref}\r\n      style={{ width: width }}\r\n      size={size}\r\n      showSearch\r\n      placeholder={placeholder}\r\n      optionFilterProp=\"children\"\r\n      onChange={onChange}\r\n      value={value}\r\n      {...rest}\r\n      // onFocus={onFocus}\r\n      // onBlur={onBlur}\r\n      // onSearch={onSearch}\r\n      filterOption={(input, option) =>\r\n        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      }\r\n    >\r\n      {options.map((option, index) => (\r\n        <Option value={option} key={index}>\r\n          {option}\r\n        </Option>\r\n      ))}\r\n    </Select>\r\n  )\r\n})\r\n\r\nexport default AutoSelect\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\MonthlySalesPage.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Base.js",["1135"],"import { UNAVAILABLE } from \"Constants/errorCodes\"\r\nimport db, {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  setDoc,\r\n  startAt,\r\n  endAt,\r\n} from \"./firebase\"\r\nexport default class Base {\r\n  static async getData(collectionName) {\r\n    const q = query(collection(db, collectionName))\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataBySort(collectionName, orderedBy) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    console.log(\"responsedata\", data)\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    console.log(\"responsedata\", data)\r\n    return data\r\n  }\r\n\r\n  static async getDataById(collectionName, id) {\r\n    if (!id) {\r\n      return []\r\n    }\r\n    try {\r\n      const docRef = doc(db, collectionName, id)\r\n      const docSnap = await getDoc(docRef)\r\n      if (docSnap.exists()) {\r\n        console.log(\"docSnap\", docSnap.data())\r\n        return docSnap.data()\r\n      } else {\r\n        return {}\r\n      }\r\n    } catch (error) {\r\n      throw new Error(error.code)\r\n    }\r\n  }\r\n\r\n  static async getDataByDate(collectionName, dates, fieldname, branch) {\r\n    const startTime = new Date(dates[0].setHours(0, 0, 0, 0))\r\n    const endTime = new Date(dates[1].setHours(23, 59, 59, 59))\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \">=\", startTime),\r\n      where(fieldname, \"<=\", endTime),\r\n      where(\"branch\", \"==\", branch),\r\n      orderBy(fieldname, \"asc\")\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  // only for filter panel of dashboard scheduler\r\n  static async getDataByDatePanel(collectionName, dates, fieldname, branch) {\r\n    const startTime = new Date(dates[0].setHours(0, 0, 0, 0))\r\n    const endTime = new Date(dates[1].setHours(23, 59, 59, 59))\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \">=\", startTime),\r\n      where(fieldname, \"<=\", endTime),\r\n      where(\"branch\", \"==\", branch),\r\n      orderBy(fieldname, \"asc\")\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataByFieldname(collectionName, fieldname, value, branch) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \"==\", value)\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataByFieldnameWithBranch(\r\n    collectionName,\r\n    fieldname,\r\n    value,\r\n    branch\r\n  ) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \"==\", value),\r\n      where(\"branch\", \"==\", branch)\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataByKeyword(collectionName, fieldname, value) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      orderBy(fieldname),\r\n      startAt(value),\r\n      endAt(fieldname + \"\\uf8ff\")\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async getDataNotEqualToFieldname(\r\n    collectionName,\r\n    orderedBy,\r\n    fieldname,\r\n    value\r\n  ) {\r\n    const q = query(\r\n      collection(db, collectionName),\r\n      where(fieldname, \"!=\", value),\r\n      orderBy(fieldname),\r\n      orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async addData(collectionName, data) {\r\n    console.log(collectionName, data)\r\n    try {\r\n      const docRef = await addDoc(collection(db, collectionName), { ...data })\r\n      if (docRef?.id) {\r\n        return { ...data, _id: docRef.id }\r\n      }\r\n      return {}\r\n    } catch (error) {\r\n      throw new Error(error)\r\n    }\r\n  }\r\n\r\n  static async setData(collectionName, id, data) {\r\n    try {\r\n      return await setDoc(\r\n        doc(db, collectionName, id),\r\n        {\r\n          ...data,\r\n        },\r\n        { merge: true }\r\n      )\r\n    } catch (error) {\r\n      throw new Error(error.code)\r\n    }\r\n  }\r\n\r\n  static async updateDataById(collectionName, id, data) {\r\n    console.log(\"id\", id)\r\n    console.log(\"data to be updated\", data)\r\n    try {\r\n      const docRef = doc(db, collectionName, id)\r\n      updateDoc(docRef, {\r\n        ...data,\r\n      })\r\n    } catch (err) {\r\n      console.log(\"error during update\", err)\r\n      throw new Error(err.code)\r\n    }\r\n  }\r\n\r\n  static async setDataById(collectionName, id, data) {\r\n    try {\r\n      const docRef = doc(db, collectionName, id)\r\n      setDoc(\r\n        docRef,\r\n        {\r\n          ...data,\r\n        },\r\n        { merge: true }\r\n      )\r\n    } catch (err) {\r\n      throw new Error(err.code)\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\SettingsUserMasterfilePage.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardStoreInventory.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\menuData.js",["1136","1137","1138","1139"],"import {\r\n  BRANCH_MASTERFILE,\r\n  CUSTOMER_REPORTS,\r\n  DAILY_REPORTS,\r\n  DASHBOARD,\r\n  DIRECT_AND_THIRD_PARTY,\r\n  DISCOUNT_OTHERS,\r\n  DROPDOWN_MASTERFILE,\r\n  FOR_DEPOSITS,\r\n  GRILL_RESERVATION,\r\n  INCIDENT_REPORTS,\r\n  INVENTORY,\r\n  LABEL,\r\n  MASTER_DATA,\r\n  MONTHLY_SALES_SUMMARY,\r\n  PAYMENT_TRANSACTION,\r\n  PRODUCTS_MASTERFILE,\r\n  REPORTS,\r\n  ROLES_MASTERFILE,\r\n  TRANSACTION,\r\n  USER_MASTERFILE,\r\n} from \"Constants/pathNames\"\r\nimport React from \"react\"\r\nimport MainPage from \"Pages/MainPage\"\r\nimport DashboardTransactionPage from \"Pages/DashboardTransactionPage\"\r\nimport {\r\n  DashboardOutlined,\r\n  SettingOutlined,\r\n  FolderOutlined,\r\n} from \"@ant-design/icons\"\r\n\r\nexport default function (modules) {\r\n  return [\r\n    {\r\n      title: LABEL[DASHBOARD],\r\n      key: DASHBOARD,\r\n      dataKey: DASHBOARD,\r\n      Icon: <DashboardOutlined />,\r\n      active: true,\r\n      display: modules.includes(LABEL[DASHBOARD]),\r\n      component: MainPage,\r\n      path: \"/dashboard\",\r\n      subMenu: [\r\n        {\r\n          title: LABEL[GRILL_RESERVATION],\r\n          key: GRILL_RESERVATION,\r\n          dataKey: GRILL_RESERVATION,\r\n          active: true,\r\n          path: \"/dashboard/grillReservation\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[GRILL_RESERVATION]),\r\n        },\r\n        {\r\n          title: LABEL[PAYMENT_TRANSACTION],\r\n          key: PAYMENT_TRANSACTION,\r\n          dataKey: PAYMENT_TRANSACTION,\r\n          active: false,\r\n          path: \"/dashboard/paymentTransaction\",\r\n          component: DashboardTransactionPage,\r\n          display: modules.includes(LABEL[PAYMENT_TRANSACTION]),\r\n        },\r\n        {\r\n          title: LABEL[FOR_DEPOSITS],\r\n          key: FOR_DEPOSITS,\r\n          dataKey: FOR_DEPOSITS,\r\n          active: false,\r\n          path: \"/dashboard/forDeposits\",\r\n          // component: MainPage,\r\n          display: modules.includes(LABEL[FOR_DEPOSITS]),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: LABEL[REPORTS],\r\n      key: REPORTS,\r\n      dataKey: REPORTS,\r\n      Icon: <FolderOutlined />,\r\n      active: false,\r\n      flex: 1,\r\n      display: modules.includes(LABEL[REPORTS]),\r\n      path: `/${REPORTS}`,\r\n      component: MainPage,\r\n      subMenu: [\r\n        // {\r\n        //   title: LABEL[TRANSACTION],\r\n        //   key: TRANSACTION,\r\n        //   dataKey: TRANSACTION,\r\n        //   active: false,\r\n        //   path: \"/reports/transaction\",\r\n        //   component: MainPage,\r\n        //   display: modules.includes(LABEL[TRANSACTION]),\r\n        // },\r\n        // {\r\n        //   title: LABEL[DIRECT_AND_THIRD_PARTY],\r\n        //   key: DIRECT_AND_THIRD_PARTY,\r\n        //   dataKey: DIRECT_AND_THIRD_PARTY,\r\n        //   active: false,\r\n        //   path: \"/reports/directAndThirdParty\",\r\n        //   component: MainPage,\r\n        //   display: modules.includes(LABEL[DIRECT_AND_THIRD_PARTY]),\r\n        // },\r\n        {\r\n          title: LABEL[INCIDENT_REPORTS],\r\n          key: INCIDENT_REPORTS,\r\n          dataKey: INCIDENT_REPORTS,\r\n          active: false,\r\n          path: \"/reports/incidentReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[INCIDENT_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[DAILY_REPORTS],\r\n          key: DAILY_REPORTS,\r\n          dataKey: DAILY_REPORTS,\r\n          active: false,\r\n          path: \"/reports/dailyReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DAILY_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[CUSTOMER_REPORTS],\r\n          key: CUSTOMER_REPORTS,\r\n          dataKey: CUSTOMER_REPORTS,\r\n          active: false,\r\n          path: \"/reports/customerReports\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[CUSTOMER_REPORTS]),\r\n        },\r\n        {\r\n          title: LABEL[DISCOUNT_OTHERS],\r\n          key: DISCOUNT_OTHERS,\r\n          dataKey: DISCOUNT_OTHERS,\r\n          active: false,\r\n          path: \"/reports/analyticsDiscounts\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DISCOUNT_OTHERS]),\r\n        },\r\n        {\r\n          title: LABEL[MONTHLY_SALES_SUMMARY],\r\n          key: MONTHLY_SALES_SUMMARY,\r\n          dataKey: MONTHLY_SALES_SUMMARY,\r\n          active: false,\r\n          path: \"/reports/monthlySalesSummary\",\r\n          display: modules.includes(LABEL[MONTHLY_SALES_SUMMARY]),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: LABEL[MASTER_DATA],\r\n      key: MASTER_DATA,\r\n      dataKey: MASTER_DATA,\r\n      Icon: <SettingOutlined />,\r\n      active: false,\r\n      display: modules.includes(LABEL[MASTER_DATA]),\r\n      path: `/${MASTER_DATA}`,\r\n      component: MainPage,\r\n      subMenu: [\r\n        {\r\n          title: LABEL[USER_MASTERFILE],\r\n          key: USER_MASTERFILE,\r\n          dataKey: USER_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/userMasterFile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[USER_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[BRANCH_MASTERFILE],\r\n          key: BRANCH_MASTERFILE,\r\n          dataKey: BRANCH_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/branchMasterFile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[BRANCH_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[DROPDOWN_MASTERFILE],\r\n          key: DROPDOWN_MASTERFILE,\r\n          dataKey: DROPDOWN_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/dropdownMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[DROPDOWN_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[ROLES_MASTERFILE],\r\n          key: ROLES_MASTERFILE,\r\n          dataKey: ROLES_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/rolesMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[ROLES_MASTERFILE]),\r\n        },\r\n        {\r\n          title: LABEL[PRODUCTS_MASTERFILE],\r\n          key: PRODUCTS_MASTERFILE,\r\n          dataKey: PRODUCTS_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/productMasterfile\",\r\n          component: MainPage,\r\n          display: modules.includes(LABEL[PRODUCTS_MASTERFILE]),\r\n        },\r\n      ],\r\n    },\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Validations\\validateAuth\\index.js",["1140"],"import {\r\n  basicValidation,\r\n  validateEmail,\r\n  validateMaxChar,\r\n} from \"Helpers/validations\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\n\r\nexport default (data) => {\r\n  let validationResponse = { valid: true, errors: {} }\r\n  const optionals = [] // list of optional properties\r\n  const basicData = basicValidation(AuthClass, data, optionals)\r\n  const validateUsername = validateEmail(AuthClass.USERNAME, data)\r\n  const validatePassword = validateMaxChar(AuthClass.PASSWORD, data, 6)\r\n  if (!basicData.valid) {\r\n    return { ...validationResponse, ...basicData }\r\n  }\r\n\r\n  if (!validateUsername.valid) {\r\n    validationResponse = { ...validationResponse, ...validateUsername }\r\n  }\r\n\r\n  if (!validatePassword.valid) {\r\n    validationResponse = { ...validationResponse, ...validatePassword }\r\n  }\r\n  return validationResponse\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\index.js",["1141","1142","1143","1144","1145","1146","1147","1148"],"import { Table, Space, DatePicker, Spin, Card, Tabs, Button } from \"antd\"\r\nimport React, { useState, useEffect, useContext } from \"react\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport DepositsClass from \"Services/Classes/DepositsClass\"\r\nimport UnauthorizedContext from \"Error/Unauthorized\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport { displayOrderVia } from \"Helpers/collectionData\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { AiFillFileExcel } from \"react-icons/ai\"\r\nimport generateReport from \"./generateReport\"\r\nimport ExportService from \"Services/ExportService\"\r\nimport classes from \"./row.module.css\"\r\nimport generateReportA from \"./generateReportA\"\r\nimport generateReportB from \"./generateReportB\"\r\nimport generatePercentage from \"./generatePercentage\"\r\nimport { getAgingDateStartFrom } from \"Helpers/dateAging\"\r\nimport generateReportCollectibles from \"./generateReportCollectibles\"\r\nconst { RangePicker } = DatePicker\r\nconst { TabPane } = Tabs\r\n\r\nfunction AnalyticsMonthlySales({ user }) {\r\n  const [data, setData] = useState([])\r\n  const [servedData, setServedData] = useState([])\r\n  const [tabKey, setTabKey] = useState(\"1\")\r\n  const [dates, setDates] = useState([])\r\n  const [deposits, setDeposits] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [forPercentageData, setForPercentageData] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadData(dates)\r\n      depositList(dates)\r\n    }\r\n  }, [dates, user])\r\n\r\n  const depositList = async (_dates) => {\r\n    if (_dates.length === 0 || _dates === null) return\r\n    const dateFrom = _dates[0]._d\r\n    const dateTo = _dates[1]._d\r\n    const _deposits = await DepositsClass.getDataByDate(\r\n      [dateFrom, dateTo],\r\n      DepositsClass.DATE_DEPOSIT,\r\n      user.branchSelected\r\n    )\r\n    setDeposits(_deposits)\r\n  }\r\n\r\n  const loadData = async (_dates) => {\r\n    setIsLoading(true)\r\n    const perDeposit = await getData(_dates)\r\n    const perServed = await getData(_dates, SchedulersClass.DATE_START)\r\n    setIsLoading(false)\r\n\r\n    const transformedPerDeposit = await getDeposits(_dates, perDeposit)\r\n    const transformedPerServed = await getDeposits(_dates, perServed)\r\n    if (transformedPerDeposit) {\r\n      const sortedPerDeposits = sorted(transformedPerDeposit)\r\n      setData(sortedPerDeposits)\r\n    }\r\n    if (transformedPerServed) {\r\n      const sortedPerServed = sorted(transformedPerServed)\r\n      setServedData(sortedPerServed)\r\n    }\r\n  }\r\n\r\n  const sorted = (data) => {\r\n    return data.sort((a, b) => {\r\n      const dateA = a[SchedulersClass.DATE_PAYMENT]\r\n      const dateB = b[SchedulersClass.DATE_PAYMENT]\r\n      const formatDateA = new Date(formatDateFromDatabase(dateA))\r\n      const formatDateB = new Date(formatDateFromDatabase(dateB))\r\n      return formatDateA.getTime() - formatDateB.getTime()\r\n    })\r\n  }\r\n\r\n  const getDeposits = async (_dates, paymentList) => {\r\n    if (_dates.length > 0 && typeof _dates === \"object\") {\r\n      const dateFrom = _dates[0]._d\r\n      const dateTo = _dates[1]._d\r\n      const _deposits = await DepositsClass.getDataByDate(\r\n        [dateFrom, dateTo],\r\n        DepositsClass.DATE_PAYMENT,\r\n        user.branchSelected\r\n      )\r\n\r\n      let paymentListCopy = [...paymentList] // [...paymentList]\r\n      let paymentListDepCopy = [] // list from deposited\r\n      if (_deposits.length > 0) {\r\n        for (const deposit of _deposits) {\r\n          const paymentListDeposits = [...deposit?.paymentList]\r\n          for (const paymentObj of paymentListDeposits) {\r\n            const indexPaymentListCopy = paymentList.findIndex(\r\n              (_payment) => _payment._id === paymentObj._id\r\n            )\r\n\r\n            if (indexPaymentListCopy >= 0) {\r\n              paymentListCopy[indexPaymentListCopy].status = \"DEPOSITED\"\r\n              paymentListCopy[indexPaymentListCopy][\r\n                DepositsClass.ACCOUNT_NUMBER\r\n              ] = deposit[DepositsClass.ACCOUNT_NUMBER]\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return [...paymentListCopy, ...paymentListDepCopy]\r\n    }\r\n  }\r\n\r\n  const getData = async (_dates, fieldName = SchedulersClass.DATE_PAYMENT) => {\r\n    if (_dates.length > 0 && typeof _dates === \"object\") {\r\n      const dateFrom = _dates[0]._d\r\n      const dateTo = _dates[1]._d\r\n      const _data = await SchedulersClass.getDataByDatePanel(\r\n        [dateFrom, dateTo],\r\n        fieldName,\r\n        user.branchSelected\r\n      )\r\n      if (_data.length > 0) {\r\n        setForPercentageData(_data)\r\n      }\r\n\r\n      const renewedData = []\r\n      _data\r\n        .filter((obj) => obj[SchedulersClass.STATUS] !== \"CANCELLED\")\r\n        .forEach((obj) => {\r\n          const partials = obj[SchedulersClass.PARTIALS] || []\r\n          const via = displayOrderVia(obj)\r\n          if (partials?.length > 0) {\r\n            partials.forEach((payment) => {\r\n              renewedData.push({\r\n                [SchedulersClass._ID]: obj[SchedulersClass._ID],\r\n                [SchedulersClass.DATE_ORDER_PLACED]:\r\n                  obj[SchedulersClass.DATE_ORDER_PLACED],\r\n                [SchedulersClass.DATE_START]: obj[SchedulersClass.DATE_START],\r\n                [SchedulersClass.DATE_PAYMENT]: payment[\"date\"],\r\n                [SchedulersClass.VIA]: via,\r\n                [SchedulersClass.MODE_PAYMENT]:\r\n                  payment[SchedulersClass.MODE_PAYMENT],\r\n                [SchedulersClass.SOURCE]: payment[SchedulersClass.SOURCE],\r\n                [SchedulersClass.ACCOUNT_NUMBER]:\r\n                  payment[SchedulersClass.ACCOUNT_NUMBER],\r\n                [SchedulersClass.REF_NO]: payment[SchedulersClass.REF_NO],\r\n                [SchedulersClass.TOTAL_DUE]: obj[SchedulersClass.TOTAL_DUE],\r\n                [SchedulersClass.AMOUNT_PAID]: payment[\"amount\"],\r\n                [SchedulersClass.UTAK_NO]: obj[SchedulersClass.UTAK_NO],\r\n                [SchedulersClass.OTHERS]: obj[SchedulersClass.OTHERS],\r\n                [SchedulersClass.ORDER_VIA]: obj[SchedulersClass.ORDER_VIA],\r\n                [SchedulersClass.ORDER_VIA_WEBSITE]:\r\n                  obj[SchedulersClass.ORDER_VIA_WEBSITE],\r\n                [SchedulersClass.ORDER_VIA_PARTNER]:\r\n                  obj[SchedulersClass.ORDER_VIA_PARTNER],\r\n                [SchedulersClass.STATUS]: obj[SchedulersClass.STATUS],\r\n              })\r\n            })\r\n          }\r\n        })\r\n      return renewedData\r\n    }\r\n  }\r\n\r\n  const handleChange = (_dates) => {\r\n    setDates(_dates)\r\n  }\r\n\r\n  const handleExport = async () => {\r\n    if (dates.length > 0) {\r\n      const dateFrom = formatDateDash(dates[0]._d)\r\n      const dateTo = formatDateDash(dates[1]._d)\r\n\r\n      const days = [dateFrom]\r\n      let nextDate = dateFrom\r\n      // this loop is infinite until the condition is satisfied, then it breaks\r\n      for (let day = 0; day < 1; day = 0) {\r\n        if (dateTo !== nextDate) {\r\n          let dateNow = new Date(nextDate)\r\n          dateNow.setDate(dateNow.getDate() + 1)\r\n          days.push(formatDateDash(dateNow))\r\n          nextDate = formatDateDash(dateNow)\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n      const asPerDeposit = generateReport(\r\n        days,\r\n        data,\r\n        SchedulersClass.DATE_PAYMENT\r\n      )\r\n      const asPerServed = generateReport(days, data, SchedulersClass.DATE_START)\r\n      const asPerServedA = generateReportA(\r\n        days,\r\n        data,\r\n        SchedulersClass.DATE_START\r\n      )\r\n      const asPerServedB = generateReportB(\r\n        days,\r\n        data,\r\n        SchedulersClass.DATE_START\r\n      )\r\n      const asPerServedPercentage = await generatePercentage(\r\n        forPercentageData,\r\n        data\r\n      )\r\n      const byCollectibles = await generateReportCollectibles(\r\n        user.branchSelected,\r\n        dates\r\n      )\r\n      const monthNames = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\",\r\n      ]\r\n      const month = monthNames[new Date(dateFrom).getMonth()]\r\n      const year = new Date(dateFrom).getFullYear()\r\n      ExportService.exportExcelReports({\r\n        \"AS PER DEPOSIT\": [\r\n          [`VITO'S BBQ ${user.branchSelected.toUpperCase()}`],\r\n          [\"MONTHLY SALES REPORT\"],\r\n          [`${month.toUpperCase()} ${year}`],\r\n          [\"AS PER DEPOSITED\"],\r\n          [],\r\n          [\r\n            \"DATE\",\r\n            \"BDO / 981\",\r\n            \"BDO / 609\",\r\n            \"GCASH\",\r\n            \"CASH\",\r\n            \"ZAP\",\r\n            \"MBTC 909\",\r\n            \"MBTC 895\",\r\n            \"REMARKS\",\r\n          ],\r\n          ...asPerDeposit,\r\n        ],\r\n        \"AS PER SERVED\": [\r\n          [`VITO'S BBQ ${user.branchSelected.toUpperCase()}`],\r\n          [\"MONTHLY SALES REPORT\"],\r\n          [`${month.toUpperCase()} ${year}`],\r\n          [\"AS PER SERVED\"],\r\n          [],\r\n          [\r\n            \"DATE\",\r\n            \"BDO / 981\",\r\n            \"BDO / 609\",\r\n            \"GCASH\",\r\n            \"CASH\",\r\n            \"ZAP\",\r\n            \"MBTC 909\",\r\n            \"MBTC 895\",\r\n            \"REMARKS\",\r\n          ],\r\n          ...asPerServed,\r\n        ],\r\n        \"AS PER SERVED (A)\": [\r\n          [`VITO'S BBQ ${user.branchSelected.toUpperCase()}`],\r\n          [\"MONTHLY SALES REPORT\"],\r\n          [`${month.toUpperCase()} ${year}`],\r\n          [\"AS PER SERVED\"],\r\n          [],\r\n          [\r\n            \"DATE\",\r\n            \"REGULAR\",\r\n            \"SPWD\",\r\n            \"ZAP\",\r\n            \"GF\",\r\n            \"FP\",\r\n            \"DISC / OWNER\",\r\n            \"PM / MKTG\",\r\n            \"IR\",\r\n            \"OTH\",\r\n            \"AMOUNT\",\r\n            \"REMARK\",\r\n          ],\r\n          ...asPerServedA,\r\n        ],\r\n        \"AS PER SERVED (B)\": [\r\n          [`VITO'S BBQ ${user.branchSelected.toUpperCase()}`],\r\n          [\"MONTHLY SALES REPORT\"],\r\n          [`${month.toUpperCase()} ${year}`],\r\n          [\"AS PER SERVED\"],\r\n          [],\r\n          [\r\n            \"DATE\",\r\n            \"CASH RECEIVED\",\r\n            \"BDO - 981\",\r\n            \"BDO - 609\",\r\n            \"GCASH\",\r\n            \"CC\",\r\n            \"ZAP\",\r\n            \"FF\",\r\n            \"FP\",\r\n            \"COLL\",\r\n            \"IR\",\r\n            \"AMOUNT\",\r\n            \"REMARKS\",\r\n          ],\r\n          ...asPerServedB,\r\n        ],\r\n        \"BY PERCENTAGE\": [\r\n          [`VITO'S BBQ ${user.branchSelected.toUpperCase()}`],\r\n          [`${month.toUpperCase()} ${year}`],\r\n          [\"MONTHLY SALES REPORT\"],\r\n          [],\r\n          [],\r\n          ...asPerServedPercentage,\r\n        ],\r\n        \"BY COLLECTIBLES\": [\r\n          [`VITO'S BBQ ${user.branchSelected.toUpperCase()}`],\r\n          [`${month.toUpperCase()} ${year}`],\r\n          [\"ACCOUNTS RECEIVABLE\"],\r\n          [],\r\n          [],\r\n          ...byCollectibles,\r\n        ],\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <Space style={{ justifyContent: \"space-between\", width: \"100%\" }}>\r\n        <Space>\r\n          Date Paid:\r\n          <RangePicker\r\n            onChange={(d) => {\r\n              if (d) {\r\n                handleChange(d)\r\n              }\r\n            }}\r\n            format=\"MM-DD-YYYY\"\r\n            value={dates}\r\n          />\r\n          {isLoading && <Spin size=\"small\" />}\r\n        </Space>\r\n        {data || servedData ? (\r\n          <Space>\r\n            <MainButton\r\n              shape=\"circle\"\r\n              Icon={<AiFillFileExcel />}\r\n              onClick={handleExport}\r\n            />\r\n          </Space>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Space>\r\n      <Tabs defaultActiveKey={tabKey} onChange={(key) => setTabKey(key)}>\r\n        <TabPane key=\"1\" tab=\"AS PER DEPOSIT\">\r\n          <Table\r\n            columns={columns}\r\n            dataSource={data.map((orders, index) => {\r\n              return { key: index, ...orders }\r\n            })}\r\n            size=\"small\"\r\n            // expandable={{\r\n            //   expandedRowRender: (record) => {\r\n            //     return expandedRowRender({\r\n            //       record,\r\n            //       deposits: deposits.find((d) => d._id === record._id),\r\n            //     })\r\n            //   },\r\n            // }}\r\n            pagination={{ pageSize: 15 }}\r\n          />\r\n        </TabPane>\r\n        <TabPane key=\"2\" tab=\"AS PER SERVED\">\r\n          <Table\r\n            columns={columns}\r\n            dataSource={servedData}\r\n            size=\"small\"\r\n            pagination={{ pageSize: 15 }}\r\n            // expandable={{\r\n            //   expandedRowRender: (record) => {\r\n            //     return expandedRowRender({\r\n            //       record,\r\n            //       deposits: deposits.find((d) => d._id === record._id),\r\n            //     })\r\n            //   },\r\n            // }}\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default AnalyticsMonthlySales\r\n\r\nconst expandedRowRender = ({ record, deposits }) => {\r\n  const data = []\r\n  for (let i = 0; i < 3; ++i) {\r\n    data.push({\r\n      key: i,\r\n      date: \"2014-12-24 23:12:00\",\r\n      name: \"This is production name\",\r\n      upgradeNum: \"Upgraded: 56\",\r\n    })\r\n  }\r\n  return typeof deposits?.paymentList !== \"undefined\" ? (\r\n    <Table\r\n      columns={[\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.DATE_PAYMENT],\r\n          key: SchedulersClass.DATE_PAYMENT,\r\n          dataIndex: SchedulersClass.DATE_PAYMENT,\r\n          render: (data) => {\r\n            const formatD = formatDateFromDatabase(data)\r\n            const formattedDate = formatDateDash(formatD)\r\n            return formattedDate\r\n          },\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.DATE_ORDER_PLACED],\r\n          key: SchedulersClass.DATE_ORDER_PLACED,\r\n          dataIndex: SchedulersClass.DATE_ORDER_PLACED,\r\n          render: (data) => {\r\n            const formatD = formatDateFromDatabase(data)\r\n            const formattedDate = formatDateDash(formatD)\r\n            return formattedDate\r\n          },\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.DATE_START],\r\n          key: SchedulersClass.DATE_START,\r\n          dataIndex: SchedulersClass.DATE_START,\r\n          render: (data) => {\r\n            const formatD = formatDateFromDatabase(data)\r\n            const formattedDate = formatDateDash(formatD)\r\n            return formattedDate\r\n          },\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.UTAK_NO],\r\n          key: SchedulersClass.UTAK_NO,\r\n          dataIndex: SchedulersClass.UTAK_NO,\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.VIA],\r\n          key: SchedulersClass.VIA,\r\n          dataIndex: SchedulersClass.VIA,\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.MODE_PAYMENT],\r\n          key: SchedulersClass.MODE_PAYMENT,\r\n          dataIndex: SchedulersClass.MODE_PAYMENT,\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.SOURCE],\r\n          key: SchedulersClass.SOURCE,\r\n          dataIndex: SchedulersClass.SOURCE,\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.ACCOUNT_NUMBER],\r\n          key: SchedulersClass.ACCOUNT_NUMBER,\r\n          dataIndex: SchedulersClass.ACCOUNT_NUMBER,\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.REF_NO],\r\n          key: SchedulersClass.REF_NO,\r\n          dataIndex: SchedulersClass.REF_NO,\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.AMOUNT_PAID],\r\n          key: SchedulersClass.AMOUNT_PAID,\r\n          dataIndex: SchedulersClass.AMOUNT_PAID,\r\n          align: \"right\",\r\n          render: (data) => {\r\n            const amount = thousandsSeparators(data.toFixed(2))\r\n            return amount\r\n          },\r\n        },\r\n        {\r\n          title: SchedulersClass.LABELS[SchedulersClass.STATUS],\r\n          key: SchedulersClass.STATUS,\r\n          dataIndex: SchedulersClass.STATUS,\r\n        },\r\n      ]}\r\n      dataSource={deposits.paymentList}\r\n      pagination={false}\r\n      showHeader={false}\r\n      rowClassName={classes.red}\r\n    />\r\n  ) : (\r\n    <></>\r\n  ) //<Table columns={columns} dataSource={data} pagination={false} />\r\n}\r\n\r\nconst columns = [\r\n  // { title: \"id\", key: \"_id\", dataIndex: \"_id\" },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.DATE_PAYMENT],\r\n    key: SchedulersClass.DATE_PAYMENT,\r\n    dataIndex: SchedulersClass.DATE_PAYMENT,\r\n    render: (data) => {\r\n      const formatD = formatDateFromDatabase(data)\r\n      const formattedDate = formatDateDash(formatD)\r\n      return formattedDate\r\n    },\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.DATE_ORDER_PLACED],\r\n    key: SchedulersClass.DATE_ORDER_PLACED,\r\n    dataIndex: SchedulersClass.DATE_ORDER_PLACED,\r\n    render: (data) => {\r\n      const formatD = formatDateFromDatabase(data)\r\n      const formattedDate = formatDateDash(formatD)\r\n      return formattedDate\r\n    },\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.DATE_START],\r\n    key: SchedulersClass.DATE_START,\r\n    dataIndex: SchedulersClass.DATE_START,\r\n    render: (data) => {\r\n      const formatD = formatDateFromDatabase(data)\r\n      const formattedDate = formatDateDash(formatD)\r\n      return formattedDate\r\n    },\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.UTAK_NO],\r\n    key: SchedulersClass.UTAK_NO,\r\n    dataIndex: SchedulersClass.UTAK_NO,\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.VIA],\r\n    key: SchedulersClass.VIA,\r\n    dataIndex: SchedulersClass.VIA,\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.MODE_PAYMENT],\r\n    key: SchedulersClass.MODE_PAYMENT,\r\n    dataIndex: SchedulersClass.MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.SOURCE],\r\n    key: SchedulersClass.SOURCE,\r\n    dataIndex: SchedulersClass.SOURCE,\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.ACCOUNT_NUMBER],\r\n    key: SchedulersClass.ACCOUNT_NUMBER,\r\n    dataIndex: SchedulersClass.ACCOUNT_NUMBER,\r\n    render: (data, record) => {\r\n      return data\r\n    },\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.REF_NO],\r\n    key: SchedulersClass.REF_NO,\r\n    dataIndex: SchedulersClass.REF_NO,\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.AMOUNT_PAID],\r\n    key: SchedulersClass.AMOUNT_PAID,\r\n    dataIndex: SchedulersClass.AMOUNT_PAID,\r\n    align: \"right\",\r\n    render: (data) => {\r\n      const amount = thousandsSeparators(data.toFixed(2))\r\n      return amount\r\n    },\r\n  },\r\n  {\r\n    title: SchedulersClass.LABELS[SchedulersClass.STATUS],\r\n    key: SchedulersClass.STATUS,\r\n    dataIndex: SchedulersClass.STATUS,\r\n  },\r\n]\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardForDeposits\\index.js",["1149","1150","1151"],"import {\r\n  Button,\r\n  Input,\r\n  message,\r\n  Popconfirm,\r\n  Select,\r\n  Space,\r\n  Spin,\r\n  Table,\r\n} from \"antd\"\r\nimport { FilterOutlined } from \"@ant-design/icons\"\r\nimport CustomDate from \"Components/Commons/CustomDate\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport React, { useEffect, useState, useContext } from \"react\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport DepositsClass from \"Services/Classes/DepositsClass\"\r\nimport transformedSched from \"../TableHandler/transformedSched\"\r\nimport sorting from \"Helpers/sorting\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport classes from \"./deposit.module.css\"\r\nconst { Option } = Select\r\n\r\nfunction DashboardForDeposits() {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [dataSource, setDataSource] = useState([])\r\n  const [date, setDate] = useState(new Date())\r\n  const [dateDeposit, setDateDeposit] = useState(new Date())\r\n  const [accountDestination, setAccountDestination] = useState(\"BDO / 981\")\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [amount, setAmount] = useState(0)\r\n  useEffect(() => {\r\n    if (user?.branchSelected) {\r\n      getPayments()\r\n    }\r\n  }, [user])\r\n\r\n  useEffect(() => {\r\n    handleDate(new Date())\r\n  }, [dataSource])\r\n\r\n  const columns = [\r\n    {\r\n      title: \"DATE PAID\",\r\n      dataIndex: SchedulersClass.DATE_PAYMENT,\r\n      key: SchedulersClass.DATE_PAYMENT,\r\n      render: (data) => {\r\n        const formatFromD = formatDateFromDatabase(data)\r\n        const date = formatDateDash(formatFromD)\r\n        return date\r\n      },\r\n    },\r\n    {\r\n      title: \"DATE PLACE\",\r\n      dataIndex: SchedulersClass.DATE_ORDER_PLACED,\r\n      key: SchedulersClass.DATE_ORDER_PLACED,\r\n      render: (data) => {\r\n        const formatFromD = formatDateFromDatabase(data)\r\n        const date = formatDateDash(formatFromD)\r\n        return date\r\n      },\r\n    },\r\n    {\r\n      title: \"SERVE DATE\",\r\n      dataIndex: SchedulersClass.DATE_START,\r\n      key: SchedulersClass.DATE_START,\r\n      render: (data) => {\r\n        const formatFromD = formatDateFromDatabase(data)\r\n        const date = formatDateDash(formatFromD)\r\n        return date\r\n      },\r\n    },\r\n    {\r\n      title: \"UTAK #\",\r\n      dataIndex: SchedulersClass.UTAK_NO,\r\n      key: SchedulersClass.UTAK_NO,\r\n    },\r\n    {\r\n      title: \"PP #\",\r\n      dataIndex: SchedulersClass.PARTNER_MERCHANT_ORDER_NO,\r\n      key: SchedulersClass.PARTNER_MERCHANT_ORDER_NO,\r\n      render: (data, record) => {\r\n        if (record[SchedulersClass.ZAP_NUMBER]) {\r\n          return record[SchedulersClass.ZAP_NUMBER]\r\n        }\r\n        return data\r\n      },\r\n    },\r\n    {\r\n      title: \"MODE OF PAYMENT\",\r\n      dataIndex: SchedulersClass.MODE_PAYMENT,\r\n      key: SchedulersClass.MODE_PAYMENT,\r\n    },\r\n    {\r\n      title: \"SOURCE\",\r\n      dataIndex: SchedulersClass.SOURCE,\r\n      key: SchedulersClass.SOURCE,\r\n    },\r\n    {\r\n      title: \"REF #\",\r\n      dataIndex: SchedulersClass.REF_NO,\r\n      key: SchedulersClass.REF_NO,\r\n    },\r\n    {\r\n      title: \"ACCT #\",\r\n      dataIndex: SchedulersClass.ACCOUNT_NUMBER,\r\n      key: SchedulersClass.ACCOUNT_NUMBER,\r\n    },\r\n    {\r\n      title: \"AMOUNT PAID\",\r\n      dataIndex: SchedulersClass.AMOUNT_PAID,\r\n      key: SchedulersClass.AMOUNT_PAID,\r\n      align: \"right\",\r\n      render: (data) => {\r\n        return thousandsSeparators(data.toFixed(2))\r\n      },\r\n    },\r\n  ]\r\n\r\n  const handleDate = (_d) => {\r\n    const formatD = formatDateDash(_d)\r\n    const paymentList = dataSource.filter((obj) => {\r\n      const formatDateFromD = formatDateFromDatabase(\r\n        obj[SchedulersClass.DATE_PAYMENT]\r\n      )\r\n      const dateDash = formatDateDash(formatDateFromD)\r\n      return dateDash === formatD\r\n    })\r\n    const totalAmount = sumArray(paymentList, SchedulersClass.AMOUNT_PAID)\r\n    setAmount(totalAmount)\r\n    setDate(_d)\r\n  }\r\n\r\n  const getPayments = async () => {\r\n    const data = await SchedulersClass.getDataByFieldnameWithBranch(\r\n      SchedulersClass.CASH_FOR_DEPOSIT,\r\n      true,\r\n      user?.branchSelected\r\n    )\r\n\r\n    // const deposits = await DepositsClass.getDataByFieldName(DepositsClass.DATE_PAID_STRING, )\r\n    const payments = await transformedSched(data)\r\n    if (payments) {\r\n      // payments.sort(function (a, b) {\r\n      //   const dateFromA = new Date(\r\n      //     formatDateFromDatabase(a[SchedulersClass.DATE_PAYMENT])\r\n      //   )\r\n      //   const dateFromB = new Date(\r\n      //     formatDateFromDatabase(b[SchedulersClass.DATE_PAYMENT])\r\n      //   )\r\n\r\n      //   return dateFromB.getTime() - dateFromA.getTime()\r\n      // })\r\n      const sortedPayment = sorting(payments, SchedulersClass.DATE_PAYMENT)\r\n      sortedPayment.reverse()\r\n\r\n      const pendingPayments = sortedPayment.filter((obj) => {\r\n        return obj[SchedulersClass.CASH_FOR_DEPOSIT] === \"Pending\"\r\n      })\r\n      setDataSource(pendingPayments)\r\n    }\r\n  }\r\n\r\n  const confirm = async () => {\r\n    if (!user?.branchSelected) {\r\n      message.error(\"Failed to deposit\")\r\n    }\r\n    if (amount > 0) {\r\n      try {\r\n        setIsLoading(true)\r\n        const paymentList = dataSource.filter((obj) => {\r\n          const formatDateFromD = formatDateFromDatabase(\r\n            obj[SchedulersClass.DATE_PAYMENT]\r\n          )\r\n          const formatDate = formatDateDash(formatDateFromD)\r\n          const formatDatePaidInput = formatDateDash(date)\r\n          return formatDate === formatDatePaidInput\r\n        })\r\n\r\n        await DepositsClass.handleTransaction(paymentList)\r\n        const result = await DepositsClass.addData({\r\n          [DepositsClass.DATE_PAID_STRING]: formatDateDash(dateDeposit),\r\n          [DepositsClass.DATE_PAYMENT]: date,\r\n          [SchedulersClass.DATE_START]: new Date(dateDeposit),\r\n          [SchedulersClass.DATE_ORDER_PLACED]: new Date(dateDeposit),\r\n          [DepositsClass.DATE_DEPOSIT]: new Date(dateDeposit),\r\n          [DepositsClass.MODE_PAYMENT]: \"Cash\",\r\n          [DepositsClass.SOURCE]: \"Cash\",\r\n          [DepositsClass.ACCOUNT_NUMBER]: accountDestination,\r\n          [DepositsClass.PAYMENT_LIST]: [...paymentList],\r\n          [DepositsClass.TOTAL_DEPOSIT]: amount,\r\n          [DepositsClass.BRANCH]: user?.branchSelected,\r\n        })\r\n\r\n        setAmount(0)\r\n        setDate(new Date())\r\n        setDateDeposit(new Date())\r\n        // data updated will be remove from the datasource of the table\r\n        const newDataSource = dataSource.filter((obj) => {\r\n          const formatDateFromD = formatDateFromDatabase(\r\n            obj[SchedulersClass.DATE_PAYMENT]\r\n          )\r\n          const formatDate = formatDateDash(formatDateFromD)\r\n          const formatDatePaidInput = formatDateDash(date)\r\n          return formatDate !== formatDatePaidInput\r\n        })\r\n        setDataSource(newDataSource)\r\n        setIsLoading(false)\r\n        message.info(\"Successfully deposited\")\r\n      } catch (e) {\r\n        console.log(\"error\", e)\r\n        setIsLoading(false)\r\n        message.error(\"Failed to deposit\")\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n        <Space style={{ justifyContent: \"space-between\", width: \"100%\" }}>\r\n          <Space>\r\n            <Space>\r\n              <FilterOutlined />\r\n            </Space>\r\n            <Space>\r\n              Date Paid:\r\n              <CustomDate\r\n                format=\"MM-DD-YYYY\"\r\n                showTime={false}\r\n                onChange={(_d) => {\r\n                  handleDate(new Date(_d))\r\n                }}\r\n                value={date}\r\n              />\r\n            </Space>\r\n            <Space>\r\n              Amount:\r\n              <Input\r\n                value={thousandsSeparators(amount.toFixed(2))}\r\n                type=\"text\"\r\n              />\r\n            </Space>\r\n          </Space>\r\n          <Space>\r\n            <Space>\r\n              Date Deposit:\r\n              <CustomDate\r\n                format=\"MM-DD-YYYY\"\r\n                showTime={false}\r\n                onChange={(_d) => {\r\n                  setDateDeposit(new Date(_d))\r\n                }}\r\n                value={dateDeposit}\r\n              />\r\n            </Space>\r\n            <Space>\r\n              Actual Deposit:\r\n              <Select\r\n                style={{ width: \"150px\" }}\r\n                value={accountDestination}\r\n                onChange={(value) => {\r\n                  if (value) {\r\n                    setAccountDestination(value)\r\n                  }\r\n                }}\r\n              >\r\n                <Option value=\"BDO / 981\">BDO / 981</Option>\r\n                <Option value=\"BDO / 609\">BDO / 609</Option>\r\n                <Option value=\"MBTC 909\">MBTC 909</Option>\r\n                <Option value=\"MBTC 895\">MBTC 895</Option>\r\n              </Select>\r\n            </Space>\r\n            <Space>\r\n              {isLoading ? (\r\n                <Button shape=\"round\" size=\"medium\">\r\n                  <Spin />\r\n                </Button>\r\n              ) : (\r\n                <Popconfirm\r\n                  placement=\"bottomRight\"\r\n                  title=\"Are you sure you want to deposit this payments?\"\r\n                  onConfirm={confirm}\r\n                  okText=\"Yes\"\r\n                  cancelText=\"No\"\r\n                >\r\n                  <MainButton label=\"Deposit\" disabled={amount === 0} />\r\n                </Popconfirm>\r\n              )}\r\n            </Space>\r\n          </Space>\r\n        </Space>\r\n        <Table\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          size=\"small\"\r\n          rowClassName={(data) => {\r\n            const formattedDate = formatDateFromDatabase(\r\n              data[SchedulersClass.DATE_PAYMENT]\r\n            )\r\n            const formatDate = formatDateDash(formattedDate)\r\n            const formatDatePaid = formatDateDash(date)\r\n            if (formatDate === formatDatePaid) {\r\n              return classes[`green`]\r\n            }\r\n            return classes[\"notHighlighted\"]\r\n          }}\r\n          pagination={{ pageSize: 15 }}\r\n        />\r\n      </Space>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DashboardForDeposits\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsIncidents\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\index.js",["1152","1153","1154","1155","1156"],"import React, { useEffect, useState } from \"react\"\r\n// import DailyReportType from \"./dailyReportType\"\r\nimport { Flex, Grid, Item } from \"../Styles\"\r\nimport { Card } from \"antd\"\r\nimport SalesImage from \"Images/sales.jpg\"\r\nimport ServedReportType from \"./servedReportType\"\r\n// import ReportDirectSales from \"components/features/AnalyticsReportDirectSales\"\r\n// import ReportThirdPartySales from \"components/features/AnalyticsReportThirdPartySales\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nconst { Meta } = Card\r\n\r\nconst ORDER_VIA = SchedulersClass.ORDER_VIA\r\nconst ORDER_VIA_PARTNER = SchedulersClass.ORDER_VIA_PARTNER\r\nconst ORDER_VIA_WEBSITE = SchedulersClass.ORDER_VIA_WEBSITE\r\nfunction AnalyticsDailyReport() {\r\n  const [clickedReport, setClickedReport] = useState(null)\r\n  return (\r\n    <div>\r\n      {clickedReport === null && (\r\n        <>\r\n          <Grid padding=\"1rem\">\r\n            <h1>DAILY SALES REPORT</h1>\r\n          </Grid>\r\n          <Grid padding=\"1rem\" height=\"70vh\" alignItems=\"center\">\r\n            <Flex justifyContent=\"center\">\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={<img alt=\"sales-image\" src={SalesImage} />}\r\n                  onClick={() => {\r\n                    setClickedReport(\"DIRECT\")\r\n                  }}\r\n                >\r\n                  <Meta title=\"DIRECT ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={\r\n                    <img\r\n                      alt=\"sales-image\"\r\n                      src={SalesImage}\r\n                      onClick={() => {\r\n                        setClickedReport(\"THIRD PARTY\")\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Meta title=\"THIRD PARTY ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={<img alt=\"sales-image\" src={SalesImage} />}\r\n                  onClick={() => {\r\n                    setClickedReport(\"SERVED\")\r\n                  }}\r\n                >\r\n                  <Meta title=\"SERVED ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n            </Flex>\r\n          </Grid>\r\n        </>\r\n      )}\r\n\r\n      {/* {clickedReport === \"DIRECT\" && (\r\n        <ReportDirectSales back={() => setClickedReport(null)} />\r\n        <DailyReportType\r\n          Services={ScheduleServices}\r\n          filterBasis={ORDER_VIA}\r\n          title=\"DAILY SALES DIRECT ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )} */}\r\n      {/*\r\n      {clickedReport === \"THIRD PARTY\" && (\r\n        <ReportThirdPartySales back={() => setClickedReport(null)} />\r\n        <DailyReportType\r\n          Services={ScheduleServices}\r\n          filterBasis={ORDER_VIA}\r\n          title=\"DAILY SALES DIRECT ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )} */}\r\n\r\n      {clickedReport === \"SERVED\" && (\r\n        <ServedReportType\r\n          filterBasis={[ORDER_VIA, ORDER_VIA_PARTNER]}\r\n          title=\"DAILY SALES SERVED ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDailyReport\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsDropdownMasterfile\\index.js",["1157"],"import React, { useEffect } from \"react\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport TableHandler from \"../SettingsTableHandler\"\r\n\r\nfunction SettingsDropdownMasterfile() {\r\n  return (\r\n    <>\r\n      <TableHandler\r\n        ServiceClass={DropdownsClass}\r\n        hideColumns={[DropdownsClass._ID]}\r\n        enableEdit\r\n        enableAdd\r\n        onCell={() => {\r\n          return { style: { verticalAlign: \"top\" } }\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SettingsDropdownMasterfile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsBranchMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsRoleMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\index.js",["1158","1159"],"import { async } from \"@firebase/util\"\r\nimport { Select, Space, Spin } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport NewProductsClass from \"Services/Classes/NewProductsClass\"\r\nimport TableHandler from \"../SettingsTableHandler\"\r\nimport migrateProduct from \"./migrateProduct\"\r\nimport OrderViaPrices from \"./OrderViaPrices\"\r\n\r\nconst { Option } = Select\r\n\r\nfunction SettingsProductMasterfile() {\r\n  const [orderVia, setOrderVia] = useState(\"\")\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [])\r\n\r\n  const loadDropdowns = async () => {\r\n    setIsLoading(true)\r\n    const data = await DropdownsClass.getDataByFieldname(\r\n      \"name\",\r\n      \"orderViaPartner\"\r\n    )\r\n    const orderViaWebsite = await DropdownsClass.getDataByFieldname(\r\n      \"name\",\r\n      \"orderViaWebsite\"\r\n    )\r\n    if (data.length) {\r\n      setOrderVia(data[0]?.list[0])\r\n      setDropdowns([...data[0]?.list, ...orderViaWebsite[0]?.list])\r\n      setIsLoading(false)\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TableHandler\r\n        ServiceClass={NewProductsClass}\r\n        hideColumns={[NewProductsClass._ID]}\r\n        widths={{\r\n          [NewProductsClass.NO]: 100,\r\n          [NewProductsClass.GROUP_HEADER]: 150,\r\n        }}\r\n        bySort\r\n        enableAdd\r\n        enableEdit\r\n        onCell={() => {\r\n          return { style: { verticalAlign: \"top\" } }\r\n        }}\r\n      />\r\n\r\n      <Space style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <span>{isLoading && <Spin />}</span>\r\n        <Space>\r\n          Order_Via_Filter:\r\n          <Select\r\n            style={{ width: \"15rem\" }}\r\n            value={orderVia}\r\n            onChange={setOrderVia}\r\n          >\r\n            {dropdowns.map((value, index) => {\r\n              return (\r\n                <Option key={index} value={value}>\r\n                  {value}\r\n                </Option>\r\n              )\r\n            })}\r\n          </Select>\r\n        </Space>\r\n      </Space>\r\n      <br />\r\n      <OrderViaPrices orderVia={orderVia} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SettingsProductMasterfile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useQuery.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generateReport.js",["1160"],"import { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nexport default function (days = [], data = [], dateFieldname) {\r\n  const dataByDate = {}\r\n  for (const obj of data) {\r\n    const dateFromD = formatDateFromDatabase(obj[dateFieldname])\r\n    const formatDate = formatDateDash(dateFromD)\r\n    if (typeof dataByDate[formatDate] === \"undefined\") {\r\n      dataByDate[formatDate] = [\r\n        {\r\n          [SchedulersClass.AMOUNT_PAID]: obj[SchedulersClass.AMOUNT_PAID],\r\n          [SchedulersClass.ACCOUNT_NUMBER]: obj[SchedulersClass.ACCOUNT_NUMBER],\r\n          [SchedulersClass.VIA]: obj[SchedulersClass.VIA],\r\n        },\r\n      ]\r\n    } else {\r\n      dataByDate[formatDate].push({\r\n        [SchedulersClass.AMOUNT_PAID]: obj[SchedulersClass.AMOUNT_PAID],\r\n        [SchedulersClass.ACCOUNT_NUMBER]: obj[SchedulersClass.ACCOUNT_NUMBER],\r\n        [SchedulersClass.VIA]: obj[SchedulersClass.VIA],\r\n      })\r\n    }\r\n  }\r\n  const finalReport = []\r\n  let grandTotals = {\r\n    bdo: 0,\r\n    bdo909: 0,\r\n    gcash: 0,\r\n    cash: 0,\r\n    zap: 0,\r\n    mbtc909: 0,\r\n    mbtc895: 0,\r\n  }\r\n  for (const date of days) {\r\n    if (typeof dataByDate[date] !== \"undefined\") {\r\n      const {\r\n        sumOfBdo,\r\n        sumOfBdo909,\r\n        sumOfCash,\r\n        sumOfGCash,\r\n        sumOfZap,\r\n        sumOfMbtc909,\r\n        sumOfMbtc895,\r\n      } = segragateByAccount(dataByDate[date], date)\r\n      grandTotals.bdo = grandTotals.bdo + sumOfBdo\r\n      grandTotals.bdo909 = grandTotals.bdo909 + sumOfBdo909\r\n      grandTotals.gcash = grandTotals.gcash + sumOfGCash\r\n      grandTotals.cash = grandTotals.cash + sumOfCash\r\n      grandTotals.zap = grandTotals.zap + sumOfZap\r\n      grandTotals.mbtc909 = grandTotals.mbtc909 + sumOfMbtc909\r\n      grandTotals.mbtc895 = grandTotals.mbtc895 + sumOfMbtc895\r\n      finalReport.push([\r\n        date,\r\n        thousandsSeparators(sumOfBdo.toFixed(2)),\r\n        thousandsSeparators(sumOfBdo909.toFixed(2)),\r\n        thousandsSeparators(sumOfGCash.toFixed(2)),\r\n        thousandsSeparators(sumOfCash.toFixed(2)),\r\n        thousandsSeparators(sumOfZap.toFixed(2)),\r\n        thousandsSeparators(sumOfMbtc909.toFixed(2)),\r\n        thousandsSeparators(sumOfMbtc895.toFixed(2)),\r\n      ])\r\n    } else {\r\n      finalReport.push([\r\n        date,\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n      ])\r\n    }\r\n  }\r\n\r\n  finalReport.push([\r\n    \"\",\r\n    thousandsSeparators(grandTotals.bdo.toFixed(2)),\r\n    thousandsSeparators(grandTotals.bdo909.toFixed(2)),\r\n    thousandsSeparators(grandTotals.gcash.toFixed(2)),\r\n    thousandsSeparators(grandTotals.cash.toFixed(2)),\r\n    thousandsSeparators(grandTotals.zap.toFixed(2)),\r\n    thousandsSeparators(grandTotals.mbtc909.toFixed(2)),\r\n    thousandsSeparators(grandTotals.mbtc895.toFixed(2)),\r\n  ])\r\n\r\n  return finalReport\r\n}\r\n\r\nconst segragateByAccount = (data) => {\r\n  const bdo = []\r\n  const bdo609 = []\r\n  const cash = []\r\n  const gcash = []\r\n  const zap = []\r\n  const mbtc909 = []\r\n  const mbtc895 = []\r\n\r\n  for (const obj of data) {\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"BDO / 981\") {\r\n      bdo.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"BDO / 609\") {\r\n      bdo609.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\") {\r\n      cash.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"KP GCash\") {\r\n      gcash.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.VIA] === \"ZAP\") {\r\n      zap.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"MBTC 909\") {\r\n      mbtc909.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"MBTC 895\") {\r\n      mbtc895.push(obj)\r\n    }\r\n  }\r\n\r\n  const sumOfBdo = sumArray(bdo, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfBdo909 = sumArray(bdo609, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfCash = sumArray(cash, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfGCash = sumArray(gcash, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfZap = sumArray(zap, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfMbtc909 = sumArray(mbtc909, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfMbtc895 = sumArray(mbtc895, SchedulersClass.AMOUNT_PAID)\r\n\r\n  return {\r\n    sumOfBdo,\r\n    sumOfBdo909,\r\n    sumOfCash,\r\n    sumOfGCash,\r\n    sumOfZap,\r\n    sumOfMbtc909,\r\n    sumOfMbtc895,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\errorCodes.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\transformedSched.js",["1161","1162"],"import { calculateBalanceScheduler } from \"Helpers/collectionData\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nexport default async function (schedByPartials, dateTobeFilter) {\r\n  const newSched = []\r\n  // const dateFormat = formatDateFromDatabase(dateTobeFilter)\r\n  // const dateString = formatDateDash(dateFormat)\r\n  schedByPartials.forEach((obj) => {\r\n    const paymentList = obj[SchedulersClass.PARTIALS]\r\n    const orderViaWebsite = obj[SchedulersClass.ORDER_VIA_WEBSITE]\r\n    const orderViaPartner = obj[SchedulersClass.ORDER_VIA_PARTNER]\r\n    // const cashForDeposit = obj[SchedulersClass.CASH_FOR_DEPOSIT]\r\n    const balance = calculateBalanceScheduler(obj)\r\n    if (obj[SchedulersClass.STATUS] !== \"CANCELLED\") {\r\n      if (typeof paymentList !== \"undefined\") {\r\n        if (paymentList.length === 0) {\r\n          newSched.push({\r\n            [SchedulersClass._ID]: obj[SchedulersClass._ID],\r\n            [SchedulersClass.DATE_ORDER_PLACED]: formatDateFromDatabase(\r\n              obj[SchedulersClass.DATE_ORDER_PLACED]\r\n            ),\r\n            [SchedulersClass.DATE_START]: formatDateFromDatabase(\r\n              obj[SchedulersClass.DATE_START]\r\n            ),\r\n            [SchedulersClass.UTAK_NO]: obj[SchedulersClass.UTAK_NO] || \"\",\r\n            [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: orderViaPartner\r\n              ? obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] || \"\"\r\n              : \"\",\r\n            [SchedulersClass.ZAP_NUMBER]: orderViaWebsite\r\n              ? obj[SchedulersClass.ZAP_NUMBER] || \"\"\r\n              : \"\",\r\n            [SchedulersClass.STATUS]: obj[SchedulersClass.STATUS] || \"\",\r\n            [SchedulersClass.DATE_PAYMENT]: \"\",\r\n            [SchedulersClass.MODE_PAYMENT]: \"\",\r\n            [SchedulersClass.SOURCE]: \"\",\r\n            [SchedulersClass.REF_NO]: \"\",\r\n            [SchedulersClass.OR_NO]: \"\",\r\n            [SchedulersClass.SOA_NUMBER]: \"\",\r\n            [SchedulersClass.PAYMENT_NOTES]: \"\",\r\n            [SchedulersClass.ACCOUNT_NUMBER]: \"\",\r\n            [SchedulersClass.AMOUNT_PAID]: 0,\r\n            collectibles: balance,\r\n          })\r\n        }\r\n\r\n        // if paymentList array length is equal to zero it will not loop\r\n        paymentList.forEach((paymentDetails) => {\r\n          const cashForDeposit =\r\n            paymentDetails[SchedulersClass.MODE_PAYMENT] === \"Cash\" &&\r\n            paymentDetails[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\"\r\n          newSched.push({\r\n            [SchedulersClass._ID]: obj[SchedulersClass._ID],\r\n            [SchedulersClass.DATE_ORDER_PLACED]: formatDateFromDatabase(\r\n              obj[SchedulersClass.DATE_ORDER_PLACED]\r\n            ),\r\n            [SchedulersClass.DATE_START]: formatDateFromDatabase(\r\n              obj[SchedulersClass.DATE_START]\r\n            ),\r\n            [SchedulersClass.UTAK_NO]: obj[SchedulersClass.UTAK_NO],\r\n            [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: orderViaPartner\r\n              ? obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] || \"\"\r\n              : \"\",\r\n            [SchedulersClass.ZAP_NUMBER]: orderViaWebsite\r\n              ? obj[SchedulersClass.ZAP_NUMBER] || \"\"\r\n              : \"\",\r\n            [SchedulersClass.STATUS]: obj[SchedulersClass.STATUS] || \"\",\r\n            [SchedulersClass.DATE_PAYMENT]: formatDateFromDatabase(\r\n              paymentDetails?.date\r\n            ),\r\n            [SchedulersClass.MODE_PAYMENT]:\r\n              paymentDetails[SchedulersClass.MODE_PAYMENT],\r\n            [SchedulersClass.SOURCE]:\r\n              paymentDetails[SchedulersClass.SOURCE] || \"\",\r\n            [SchedulersClass.REF_NO]:\r\n              paymentDetails[SchedulersClass.REF_NO] || \"\",\r\n            [SchedulersClass.OR_NO]:\r\n              paymentDetails[SchedulersClass.OR_NO] || \"\",\r\n            [SchedulersClass.SOA_NUMBER]:\r\n              paymentDetails[SchedulersClass.SOA_NUMBER] || \"\",\r\n            [SchedulersClass.PAYMENT_NOTES]:\r\n              paymentDetails[SchedulersClass.PAYMENT_NOTES] || \"\",\r\n            [SchedulersClass.ACCOUNT_NUMBER]:\r\n              paymentDetails[SchedulersClass.ACCOUNT_NUMBER] || \"\",\r\n            [SchedulersClass.AMOUNT_PAID]: paymentDetails?.amount,\r\n            collectibles:\r\n              paymentDetails[SchedulersClass.MODE_PAYMENT] === \"Cash\" &&\r\n              paymentDetails[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\"\r\n                ? paymentDetails?.amount\r\n                : balance,\r\n            // collectibles: paymentDetails?.cashForDeposit\r\n            //   ? paymentDetails?.amount\r\n            //   : balance,\r\n            cashForDeposit:\r\n              paymentDetails[SchedulersClass.MODE_PAYMENT] === \"Cash\" &&\r\n              paymentDetails[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\"\r\n                ? \"Pending\"\r\n                : balance === 0 && cashForDeposit\r\n                ? \"Paid\"\r\n                : \"\",\r\n          })\r\n        })\r\n      }\r\n    }\r\n  })\r\n  return newSched\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\servedReportType.js",["1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181"],"import { Button, DatePicker, Input, Switch, Table, Tag } from \"antd\"\r\nimport moment from \"moment\"\r\nimport React, { useState, useEffect, useContext } from \"react\"\r\nimport { Flex, Grid, Item } from \"../Styles\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n  formatDateSlash,\r\n} from \"Helpers/dateFormat\"\r\nimport {\r\n  AiFillCaretLeft,\r\n  AiFillCaretRight,\r\n  AiFillPrinter,\r\n  AiOutlineArrowLeft,\r\n} from \"react-icons/ai\"\r\nimport addMinusDay from \"Helpers/addMinusDay\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport LiquidChart from \"./LiquidChart\"\r\nimport sumArray, {\r\n  sumArrayDatas,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Helpers/sumArray\"\r\nimport checkDate from \"Helpers/checkDate\"\r\nimport Print from \"../Print\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nconst { RangePicker } = DatePicker\r\nconst dateFormat = (date) => {\r\n  return moment(date, \"MM/DD/YYYY\")\r\n}\r\n\r\nconst CUSTOMER = SchedulersClass.CUSTOMER\r\nconst ORDER_NO = SchedulersClass.ORDER_NO\r\nconst SOURCE = SchedulersClass.SOURCE\r\nconst ACCOUNT_NUMBER = SchedulersClass.ACCOUNT_NUMBER\r\nconst DATE_START = SchedulersClass.DATE_START\r\nconst DATE_PAYMENT = SchedulersClass.DATE_PAYMENT\r\nconst DATE_ORDER_PLACED = SchedulersClass.DATE_ORDER_PLACED\r\nconst ORDER_VIA_PARTNER = SchedulersClass.ORDER_VIA_PARTNER\r\nconst AMOUNT_PAID = SchedulersClass.AMOUNT_PAID\r\nconst TOTAL_DUE = SchedulersClass.TOTAL_DUE\r\nconst ORDER_VIA = SchedulersClass.ORDER_VIA\r\nconst UTAK_NO = SchedulersClass.UTAK_NO\r\n\r\nfunction ServedReportType({ Services, filterBasis, title, back }) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [date, setDate] = useState(dateFormat(new Date()))\r\n  const [dateTo, setDateTo] = useState(dateFormat(new Date()))\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [dataList, setDataList] = useState([])\r\n  const [subTotalOfDataList, setSubTotalOfDataList] = useState([])\r\n  const [subTotalOfOrderVia, setSubTotalOfOrderVia] = useState([])\r\n  const [subTotalOfSources, setSubTotalOfSources] = useState([])\r\n  const [grandTotalDue, setGrandTotalDue] = useState(0)\r\n  const [grandAmountPaid, setGrandAmountPaid] = useState(0)\r\n  const [targetAmount, setTargetAmount] = useState(0)\r\n  const [isSwitch, setIsSwitch] = useState(true)\r\n  const [targets, setTargets] = useState([35000, 5000, 15000])\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [Services, date, dateTo])\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [Services])\r\n\r\n  const loadDropdowns = async () => {\r\n    if (typeof filterBasis === \"object\") {\r\n      setIsSwitch(false)\r\n      let dropdowns = []\r\n      for (const value of filterBasis) {\r\n        const _dropdowns = await DropdownsClass.getDataByFieldName(\r\n          \"name\",\r\n          value\r\n        )\r\n        if (_dropdowns?.list) {\r\n          dropdowns = [...dropdowns, ..._dropdowns?.list]\r\n        }\r\n      }\r\n      setDropdowns(dropdowns)\r\n    } else {\r\n      const dropdowns = await DropdownsClass.getDataByFieldName(\r\n        \"name\",\r\n        filterBasis\r\n      )\r\n      if (dropdowns?.list) {\r\n        setDropdowns(dropdowns?.list)\r\n      }\r\n    }\r\n  }\r\n\r\n  const loadData = async () => {\r\n    if (dropdowns.length > 0) {\r\n      const data = await SchedulersClass.getDataByDate(\r\n        [date._d, dateTo._d],\r\n        SchedulersClass.DATE_START,\r\n        user?.branchSelected\r\n      )\r\n      let newData = []\r\n      if (typeof filterBasis === \"object\") {\r\n        for (const value of filterBasis) {\r\n          const _data = data.filter((row) => dropdowns.includes(row[value]))\r\n          for (const obj of _data) {\r\n            if (typeof obj?.partials === \"object\") delete obj.partials\r\n            newData.push({\r\n              ...obj,\r\n              [ORDER_VIA]: obj[ORDER_VIA_PARTNER]\r\n                ? obj[ORDER_VIA_PARTNER]\r\n                : obj[ORDER_VIA],\r\n            })\r\n          }\r\n        }\r\n        console.log(\"newDDD\", newData)\r\n      } else {\r\n        newData = data.filter((row) => dropdowns.includes(row[filterBasis]))\r\n      }\r\n\r\n      /// set the dataSources of SALES DIRECT ORDERS TABLE\r\n      const formattedDataList = []\r\n      for (const obj of newData) {\r\n        const datePaid =\r\n          typeof obj[DATE_PAYMENT] === \"undefined\"\r\n            ? null\r\n            : formatDateFromDatabase(obj[DATE_PAYMENT])\r\n        const dateOrderPlaced = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n        const dateStart = formatDateFromDatabase(obj[DATE_START])\r\n        formattedDataList.push({\r\n          [ORDER_VIA]: obj[ORDER_VIA],\r\n          [SOURCE]: obj[SOURCE],\r\n          [TOTAL_DUE]: obj[TOTAL_DUE],\r\n          [ACCOUNT_NUMBER]: obj[ACCOUNT_NUMBER],\r\n          [CUSTOMER]: obj[CUSTOMER],\r\n          [ORDER_NO]: obj[ORDER_NO],\r\n          [UTAK_NO]: obj[UTAK_NO],\r\n          [DATE_PAYMENT]: datePaid ? formatDateSlash(datePaid) : 0,\r\n          [DATE_START]: formatDateSlash(dateStart),\r\n          [DATE_ORDER_PLACED]: formatDateSlash(dateOrderPlaced),\r\n          [AMOUNT_PAID]: datePaid ? obj[AMOUNT_PAID] : 0,\r\n        })\r\n      }\r\n      setDataList(formattedDataList)\r\n\r\n      // dataList sub total\r\n      const subtotalDue = sumArray(formattedDataList, TOTAL_DUE)\r\n      const subAmountPaid = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfDataList([\r\n        {\r\n          [DATE_PAYMENT]: \"\",\r\n          [DATE_ORDER_PLACED]: \"\",\r\n          [ORDER_NO]: \"\",\r\n          [CUSTOMER]: \"Sub Total\",\r\n          [TOTAL_DUE]: subtotalDue.toFixed(2),\r\n          [AMOUNT_PAID]: subAmountPaid.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // orderVia sub total\r\n      const subAmountPaidOrderVia = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfOrderVia([\r\n        {\r\n          [ORDER_VIA]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidOrderVia.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // sources sub total\r\n      const subAmountPaidSources = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfSources([\r\n        {\r\n          [ACCOUNT_NUMBER]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidSources,\r\n        },\r\n      ])\r\n\r\n      /// set the dataSources of SUMMARY OF SALES\r\n      const totalDue = sumArray([...newData], TOTAL_DUE)\r\n      const totalAmountPaid = sumArray([...newData], AMOUNT_PAID)\r\n      setGrandTotalDue(totalDue.toFixed(2))\r\n      setGrandAmountPaid(totalAmountPaid.toFixed(2))\r\n      setTargetAmount(totalDue.toFixed(2))\r\n    }\r\n  }\r\n\r\n  const calculatePercent = (paidValue, totalValue) => {\r\n    // if (isSwitch) {\r\n    return paidValue / totalValue\r\n    // } else {\r\n    //   if (targetAmount) {\r\n    //     return grandAmountPaid / targetAmount\r\n    //   } else {\r\n    //     return grandAmountPaid / 0\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  const columnsOfOrders = [\r\n    {\r\n      title: \"DATE SERVED\",\r\n      key: DATE_START,\r\n      dataIndex: DATE_START,\r\n    },\r\n    {\r\n      title: \"ORDER DATE\",\r\n      key: DATE_ORDER_PLACED,\r\n      dataIndex: DATE_ORDER_PLACED,\r\n    },\r\n    {\r\n      title: \"UTAK #\",\r\n      key: UTAK_NO,\r\n      dataIndex: UTAK_NO,\r\n    },\r\n    {\r\n      title: \"VBS #\",\r\n      key: ORDER_NO,\r\n      dataIndex: ORDER_NO,\r\n    },\r\n    {\r\n      title: \"CUSTOMER\",\r\n      key: CUSTOMER,\r\n      dataIndex: CUSTOMER,\r\n    },\r\n    {\r\n      title: \"VIA\",\r\n      key: ORDER_VIA,\r\n      dataIndex: ORDER_VIA,\r\n    },\r\n    {\r\n      title: \"TOTAL\",\r\n      key: TOTAL_DUE,\r\n      dataIndex: TOTAL_DUE,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n    {\r\n      title: \"AMT PAID\",\r\n      key: AMOUNT_PAID,\r\n      dataIndex: AMOUNT_PAID,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n  ]\r\n\r\n  const getPageMargins = () => {\r\n    return `@page { margin: 1rem 1rem 1rem 1rem !important; }`\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <Grid padding=\"1rem\">\r\n          <Flex justifyContent=\"center\">\r\n            <div style={{ padding: \"1rem\", flex: 1 }}>\r\n              <Button\r\n                icon={<AiOutlineArrowLeft />}\r\n                size=\"large\"\r\n                shape=\"circle\"\r\n                type=\"primary\"\r\n                danger\r\n                onClick={back}\r\n              />\r\n            </div>\r\n            <RangePicker\r\n              showTime={false}\r\n              value={[date, dateTo]}\r\n              format=\"MM/DD/YYYY\"\r\n              onChange={(date) => {\r\n                if (date) {\r\n                  setDate(date[0])\r\n                  setDateTo(date[1])\r\n                }\r\n              }}\r\n            />\r\n            <div style={{ padding: \"1rem\" }}>{formatDateLong(date._d)}</div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretLeft />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"minus\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretRight />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"add\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n        <Grid padding=\" 1rem 4rem\">\r\n          <h1>{title}</h1>\r\n          <Table\r\n            dataSource={[...dataList, ...subTotalOfDataList]}\r\n            columns={columnsOfOrders}\r\n            pagination={false}\r\n          />\r\n        </Grid>\r\n        <Grid padding=\"1rem 4rem\">\r\n          <h1>SUMMARY OF SALES</h1>\r\n          <Flex\r\n            alignItems=\"flex-start\"\r\n            justifyContent=\"flex-end\"\r\n            flexFlow=\"row\"\r\n          >\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ORDER_VIA,\r\n                    AMOUNT_PAID\r\n                  ),\r\n                  ...subTotalOfOrderVia,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"ORDER VIA\",\r\n                    key: \"orderVia\",\r\n                    dataIndex: \"orderVia\",\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ACCOUNT_NUMBER,\r\n                    AMOUNT_PAID\r\n                  ).filter((obj) => {\r\n                    if (parseInt(obj[AMOUNT_PAID]) > 0) {\r\n                      return obj\r\n                    }\r\n                  }),\r\n                  ...subTotalOfSources,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"SOURCES\",\r\n                    key: ACCOUNT_NUMBER,\r\n                    dataIndex: ACCOUNT_NUMBER,\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n\r\n            {/* this is the percentage portion */}\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n                marginTop: \"-5rem\",\r\n              }}\r\n            >\r\n              <Flex justifyContent=\"flex-end\">\r\n                <div style={{ width: \"15rem\" }}>\r\n                  <LiquidChart\r\n                    percent={() =>\r\n                      calculatePercent(grandAmountPaid, grandTotalDue)\r\n                    }\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"green\">Target</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[0])}\r\n                      </span>\r\n                      <span style={{ marginLeft: \"6rem\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[0]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"red\">Below</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[1])}\r\n                      </span>\r\n                      <span style={{ marginLeft: \"6rem\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[1]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"orange\">Above</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[2])}\r\n                      </span>\r\n                      <span style={{ float: \"left\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[2]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                </div>\r\n              </Flex>\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n      </div>\r\n      {/* this is print */}\r\n      <div style={{ position: \"fixed\", right: 0, bottom: 0, padding: \"1rem\" }}>\r\n        <Print\r\n          component={\r\n            <div>\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SERVED ORDERS\r\n                </thead>\r\n                <tbody style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      {columnsOfOrders.map((field) => {\r\n                        return <th>{field?.title}</th>\r\n                      })}\r\n                    </tr>\r\n                    {[...dataList].reverse().map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    {subTotalOfDataList.map((data) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (dataList.length + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n              <br />\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SUMMARY OF SALES\r\n                </thead>\r\n                <tbody\r\n                  style={{ fontSize: \"8px\", display: \"flex\", width: \"100%\" }}\r\n                >\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                      marginRight: \"1rem\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>ORDER VIA</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ].map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          <td>{data[ORDER_VIA]}</td>\r\n                          <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                  <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>RECEIVING ACCT</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ACCOUNT_NUMBER,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ]\r\n                      .filter((obj) => {\r\n                        if (parseInt(obj[AMOUNT_PAID]) > 0) {\r\n                          return obj\r\n                        }\r\n                      })\r\n                      .map((data, index) => {\r\n                        return (\r\n                          <tr\r\n                            style={\r\n                              (index + 1) % 2 === 0\r\n                                ? { backgroundColor: \"white\" }\r\n                                : { backgroundColor: \"#999\" }\r\n                            }\r\n                          >\r\n                            <td>{data[ACCOUNT_NUMBER]}</td>\r\n                            <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                          </tr>\r\n                        )\r\n                      })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          }\r\n          button={<AiFillPrinter fontSize=\"2.5rem\" />}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ServedReportType\r\n\r\n{\r\n  /* <Grid>\r\n              <div>\r\n                <h4>VITOS BBQ DAILY REPORT</h4>\r\n              </div>\r\n              <Grid>\r\n                <h5>SERVED ORDER</h5>\r\n                <table>\r\n                  <thead>\r\n                    {columnsOfOrders.map((data) => (\r\n                      <th>{data.title}</th>\r\n                    ))}\r\n                  </thead>\r\n                  <tbody>\r\n                    {[...dataList, ...subTotalOfDataList].map((data) => {\r\n                      return (\r\n                        <tr>\r\n                          {Object.keys(data).map((field) => (\r\n                            <td>{data[field]}</td>\r\n                          ))}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    <tr>\r\n                      <td>data 1</td>\r\n                      <td>data 2</td>\r\n                      <td>data 3</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <Table\r\n                  size=\"small\"\r\n                  dataSource={[...dataList, ...subTotalOfDataList]}\r\n                  columns={columnsOfOrders}\r\n                  pagination={false}\r\n                />\r\n              </Grid>\r\n              <Grid>\r\n                <h5>SUMMARY OF SALES</h5>\r\n                <Flex alignItems=\"flex-start\">\r\n                  <Table\r\n                    size=\"small\"\r\n                    showHeader={false}\r\n                    pagination={false}\r\n                    dataSource={[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ]}\r\n                    columns={[\r\n                      {\r\n                        title: \"ORDER VIA\",\r\n                        key: \"orderVia\",\r\n                        dataIndex: \"orderVia\",\r\n                      },\r\n                      {\r\n                        title: \"AMOUNT PAID\",\r\n                        key: \"amountPaid\",\r\n                        dataIndex: \"amountPaid\",\r\n                        align: \"right\",\r\n                        render: (value) => {\r\n                          return <a>{thousandsSeparators(value)}</a>\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                  <Table\r\n                    showHeader={false}\r\n                    pagination={false}\r\n                    size=\"small\"\r\n                    dataSource={[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ]}\r\n                    columns={[\r\n                      {\r\n                        title: \"SOURCES\",\r\n                        key: \"source\",\r\n                        dataIndex: \"source\",\r\n                      },\r\n                      {\r\n                        title: \"AMOUNT PAID\",\r\n                        key: \"amountPaid\",\r\n                        dataIndex: \"amountPaid\",\r\n                        align: \"right\",\r\n                        render: (value) => {\r\n                          return <a>{thousandsSeparators(value)}</a>\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                </Flex>\r\n              </Grid>\r\n            </Grid> */\r\n}\r\n\r\n{\r\n  /* <Flex>\r\n                  <div style={{ flex: 1 }}>\r\n                    <h1>TOTAL AMOUNT PAID</h1>\r\n                  </div>\r\n                  {isSwitch ? (\r\n                    <span style={{ marginRight: \".5rem\" }}>Total Due</span>\r\n                  ) : (\r\n                    <span style={{ marginRight: \".5rem\" }}>Target Amount</span>\r\n                  )}\r\n                  <Switch\r\n                    checked={isSwitch}\r\n                    onChange={() => {\r\n                      setIsSwitch(!isSwitch)\r\n                    }}\r\n                  />\r\n                </Flex> */\r\n}\r\n{\r\n  /* <Flex>\r\n                  <LiquidChart percent={calculatePercent} />\r\n                  <div>\r\n                    <Tag color={isSwitch ? \"#2db7f5\" : \"\"}>\r\n                      {isSwitch ? \"Total Due\" : \"Target Amount\"}\r\n                    </Tag>\r\n                    {isSwitch ? (\r\n                      <div style={{ marginLeft: \".7rem\" }}>\r\n                        {thousandsSeparators(grandTotalDue)}\r\n                      </div>\r\n                    ) : (\r\n                      <div style={{ width: \"10rem\" }}>\r\n                        <Input\r\n                          value={targetAmount}\r\n                          bordered={false}\r\n                          onChange={(e) => setTargetAmount(e.target.value)}\r\n                          onBlur={(e) => {\r\n                            if (\r\n                              Number(e.target.value) < Number(grandAmountPaid)\r\n                            ) {\r\n                              setTargetAmount(grandAmountPaid)\r\n                            }\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    <br />\r\n                    <Tag color=\"#ff4d4f\">Amount Paid</Tag>\r\n                    <div style={{ marginLeft: \".7rem\" }}>\r\n                      {thousandsSeparators(grandAmountPaid)}\r\n                    </div>\r\n                  </div>\r\n                </Flex> */\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\pathNames.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\migrateProduct.js",["1182"],"import ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport NewProductsClass from \"Services/Classes/NewProductsClass\"\r\n\r\nexport default async function () {\r\n  const data = await ProductsClass.getData()\r\n  let count = 0\r\n  if (data.length > 0) {\r\n    for (const obj of data) {\r\n      await NewProductsClass.addData(obj)\r\n    }\r\n    count = count + 1\r\n    console.log(count)\r\n  }\r\n  alert(\"success\")\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsProductMasterfile\\OrderViaPrices.jsx",["1183","1184","1185","1186"],"import React, { useEffect, useState } from \"react\"\r\nimport { Button, Card, Input, Space, Spin, Table } from \"antd\"\r\nimport NewProductsClass from \"Services/Classes/NewProductsClass\"\r\nimport {\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n} from \"Helpers/collectionData\"\r\nimport SpecificPricesClass from \"Services/Classes/SpecificPricesClass\"\r\nimport CustomModal from \"Components/Commons/CustomModal\"\r\nimport { SettingOutlined } from \"@ant-design/icons\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\n\r\nfunction OrderViaPrices({ orderVia }) {\r\n  const [originalData, setOriginalData] = useState([])\r\n  const [withDescriptions, setWithDescriptions] = useState([])\r\n  const [dataSource, setDataSource] = useState([])\r\n  const [dataToBeSaved, setDataToBeSaved] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    loadProducts()\r\n  }, [orderVia])\r\n\r\n  const loadProducts = async () => {\r\n    const _products = await NewProductsClass.getData()\r\n    setWithDescriptions(producedProductListWithGroupAndAmounts(_products))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (withDescriptions.length > 0) {\r\n      loadSpecificPrices(orderVia, withDescriptions)\r\n    }\r\n  }, [withDescriptions, orderVia])\r\n\r\n  const loadSpecificPrices = async (_orderVia, _withDescriptions) => {\r\n    const _data = await SpecificPricesClass.getData()\r\n    if (_data.length > 0) {\r\n      const specificPrice = _data.find((data) => data._id === _orderVia)\r\n      const _dataSource = []\r\n\r\n      for (const obj of withDescriptions) {\r\n        _dataSource.push(obj)\r\n      }\r\n      for (const key in specificPrice) {\r\n        if (key !== \"_id\") {\r\n          const description = _withDescriptions.find(\r\n            (data) => data?.code === key\r\n          )\r\n          const sourceIndex = _dataSource.findIndex(\r\n            (data) => data?.code === key\r\n          )\r\n          if (sourceIndex >= 0) {\r\n            _dataSource[sourceIndex] = {\r\n              groupHeader: description?.groupHeader,\r\n              code: key,\r\n              description: description?.description,\r\n              price: specificPrice[key],\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setDataSource(_dataSource)\r\n    }\r\n  }\r\n\r\n  const handleChange = (e, code) => {\r\n    const dataToBeSavedCopy = dataToBeSaved ? { ...dataToBeSaved } : {}\r\n    const value = Number(e.target.value)\r\n    if (value >= 0) {\r\n      dataToBeSavedCopy[code] = value\r\n      setDataToBeSaved(dataToBeSavedCopy)\r\n\r\n      if (originalData.length === 0) {\r\n        setOriginalData(dataSource)\r\n      }\r\n      const dataSourceCopy = [...dataSource]\r\n      const dataSourceIndex = dataSource.findIndex((data) => data.code === code)\r\n      const dataSourceValue = dataSource.find((data) => data.code === code)\r\n\r\n      if (dataSourceIndex >= 0) {\r\n        dataSourceCopy[dataSourceIndex] = {\r\n          ...dataSourceValue,\r\n          price: e.target.value,\r\n        }\r\n        setDataSource(dataSourceCopy)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    const originalCopy = [...originalData]\r\n    setDataSource(originalCopy)\r\n    setOriginalData([])\r\n    setDataToBeSaved(null)\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    if (dataToBeSaved) {\r\n      setLoading(true)\r\n      await SpecificPricesClass.setDataById(orderVia, dataToBeSaved)\r\n      setOriginalData([])\r\n      setDataToBeSaved(null)\r\n      setLoading(false)\r\n    }\r\n  }\r\n  return (\r\n    <Card\r\n      title={orderVia}\r\n      extra={\r\n        dataToBeSaved && (\r\n          <Space>\r\n            <MainButton label=\"Save\" onClick={handleSave} />\r\n            <Button danger type=\"outline\" shape=\"round\" onClick={handleCancel}>\r\n              Cancel\r\n            </Button>\r\n          </Space>\r\n        )\r\n      }\r\n    >\r\n      {loading && <Spin size=\"small\" />}\r\n      <Table\r\n        columns={[\r\n          {\r\n            title: \"Code\",\r\n            dataIndex: \"code\",\r\n            key: \"code\",\r\n          },\r\n          {\r\n            title: \"Group\",\r\n            dataIndex: \"groupHeader\",\r\n            key: \"groupHeader\",\r\n          },\r\n          {\r\n            title: \"Description\",\r\n            dataIndex: \"description\",\r\n            key: \"description\",\r\n          },\r\n          {\r\n            title: \"Price\",\r\n            dataIndex: \"price\",\r\n            key: \"price\",\r\n            align: \"right\",\r\n            render: (data, record) => {\r\n              return (\r\n                <Input\r\n                  value={data}\r\n                  type=\"number\"\r\n                  onChange={(e) => {\r\n                    handleChange(e, record?.code)\r\n                  }}\r\n                />\r\n              )\r\n            },\r\n          },\r\n        ]}\r\n        dataSource={[...dataSource]}\r\n        size=\"small\"\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default OrderViaPrices\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\ExportService.js",["1187"],"import XLSX from \"xlsx\"\r\nimport path from \"path\"\r\nexport default class ExportService {\r\n  static produceSheets(workBook, arrayOfArrayData = [], sheetName = \"\") {\r\n    const customMerge = [\r\n      { s: { r: 0, c: 0 }, e: { r: 0, c: 23 } },\r\n      { s: { r: 1, c: 0 }, e: { r: 1, c: 23 } },\r\n      { s: { r: 2, c: 0 }, e: { r: 2, c: 23 } },\r\n      { s: { r: 3, c: 0 }, e: { r: 3, c: 23 } },\r\n      { s: { r: 4, c: 0 }, e: { r: 4, c: 23 } },\r\n      // s = row start, e = row end\r\n      // r = row index, c = column index\r\n      // { s: { r: 5, c: 0 }, e: { r: 5, c: 6 } },\r\n      // { s: { r: 5, c: 7 }, e: { r: 5, c: 14 } },\r\n    ]\r\n\r\n    const [date, name] = sheetName\r\n    const numberMerges = []\r\n    let noColumn = 0\r\n    let noIndex = 0\r\n    arrayOfArrayData.forEach((row, index) => {\r\n      if (typeof row[0] !== \"undefined\") {\r\n        if (row[0] === \"TOTALS\") {\r\n          // customMerge.push({ s: { r: index, c: 0 }, e: { r: index, c: 17 } })\r\n        }\r\n\r\n        // this is for the merging of NO column\r\n        if (name !== \"RC\") {\r\n          // if (Number(row[0]) > 0) {\r\n          //   numberMerges[row[0]] = {\r\n          //     s: { r: index + 1, c: 0 },\r\n          //     e: { r: index, c: 0 },\r\n          //   }\r\n          //   noColumn = Number(row[0])\r\n          //   noIndex = index + 1\r\n          // }\r\n\r\n          if (noColumn > 0 && row[0] !== \"__\") {\r\n            if (row[1] !== \"\") {\r\n              numberMerges[noColumn] = {\r\n                s: { r: noIndex, c: 0 },\r\n                e: { r: index + 1, c: 0 },\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // this is for the merging of Recap Summary of Discounts\r\n        if (row[0] === \"__\") {\r\n          customMerge.push({ s: { r: index, c: 0 }, e: { r: index, c: 19 } })\r\n          customMerge.push({ s: { r: index, c: 20 }, e: { r: index, c: 22 } })\r\n        }\r\n\r\n        if (row[0] === \"ORDER DETAILS\") {\r\n          customMerge.push({ s: { r: index, c: 0 }, e: { r: index, c: 12 } })\r\n          customMerge.push({ s: { r: index, c: 13 }, e: { r: index, c: 23 } })\r\n        }\r\n      }\r\n    })\r\n    numberMerges.forEach((obj) => customMerge.push(obj))\r\n\r\n    const workSheet = XLSX.utils.aoa_to_sheet(arrayOfArrayData)\r\n    // workSheet.A1.s = {\r\n    //   font: {\r\n    //     name: \"Calibri Light\",\r\n    //   },\r\n    //   alignment: {\r\n    //     horizontal: \"center\",\r\n    //   },\r\n    // }\r\n    if (!workSheet[\"!merges\"]) workSheet[\"!merges\"] = []\r\n    for (const mergeObj of customMerge) {\r\n      workSheet[\"!merges\"].push(mergeObj)\r\n    }\r\n\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, sheetName)\r\n  }\r\n\r\n  static exportExcelReports(sheets = {}) {\r\n    const workBook = XLSX.utils.book_new()\r\n    const sheetNames = Object.keys(sheets)\r\n    for (const key of sheetNames) {\r\n      this.produceSheets(workBook, sheets[key], key)\r\n    }\r\n\r\n    XLSX.writeFile(workBook, path.resolve(\"./excel-report.xlsx\"))\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\DepositsClass.js",["1188","1189","1190","1191","1192"],"import {\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport db, { runTransaction, doc, writeBatch } from \"../firebase\"\r\nimport Base from \"Services/Base\"\r\nimport { formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport { collection, getDocs, orderBy, query, where } from \"firebase/firestore\"\r\n\r\nexport default class DepositsClass {\r\n  static COLLECTION_NAME = \"deposits\"\r\n\r\n  static getDataByDate(dates, fieldname, branch) {\r\n    return Base.getDataByDate(this.COLLECTION_NAME, dates, fieldname, branch)\r\n  }\r\n\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.NO, \"asc\"]\r\n    )\r\n  }\r\n\r\n  static getDataByFieldName(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static getDataByFieldNameWithBranch(fieldname, value, branch) {\r\n    return Base.getDataByFieldnameWithBranch(\r\n      this.COLLECTION_NAME,\r\n      fieldname,\r\n      value,\r\n      branch\r\n    )\r\n  }\r\n\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  // this is a specialize function\r\n  static async getSpecificDate(branch) {\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(\"paymentList.0.refNo\", \"==\", \"111\"),\r\n      where(\"branch\", \"==\", branch)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(\"UNAVAILABLE\")\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static async handleTransaction(data = []) {\r\n    const batch = writeBatch(db)\r\n\r\n    // Set the value of 'NYC'\r\n    data.forEach((obj) => {\r\n      const document = doc(db, \"schedules\", obj._id)\r\n      const _data = [\r\n        {\r\n          amount: obj?.amountPaid,\r\n          date: obj?.datePayment,\r\n          orNo: obj?.orNo || \"\",\r\n          paymentNotes: obj?.paymentNotes || \"\",\r\n          refNo: obj?.refNo || \"\",\r\n          soaNumber: obj?.soaNumber || \"\",\r\n          modePayment: \"Cash\",\r\n          source: \"Cash\",\r\n          accountNumber: \"BDO / 981\",\r\n        },\r\n      ]\r\n      console.log(\"objbatch\", { partials: [..._data] })\r\n\r\n      batch.update(document, { partials: [..._data], cashForDeposit: false })\r\n    })\r\n\r\n    // Commit the batch\r\n    try {\r\n      const result = await batch.commit()\r\n    } catch {}\r\n    // Create a reference to the SF doc.\r\n    // const sfDocRef = doc(db, SchedulersClass.COLLECTION_NAME, id)\r\n\r\n    // try {\r\n    //   const schedRef = await runTransaction(db, async (transaction) => {\r\n    //     const sfDoc = await transaction.get(sfDocRef)\r\n    //     if (!sfDoc.exists()) {\r\n    //       throw \"Document does not exist!\"\r\n    //     }\r\n\r\n    //     if (newPop <= 1000000) {\r\n    //       transaction.update(sfDocRef, { population: newPop })\r\n    //       return newPop\r\n    //     } else {\r\n    //       return Promise.reject(\"Sorry! Population is too big\")\r\n    //     }\r\n    //   })\r\n\r\n    //   console.log(\"Population increased to \", newPopulation)\r\n    // } catch (e) {\r\n    //   // This will be a \"population is too big\" error.\r\n    //   console.error(e)\r\n    // }\r\n  }\r\n  static _ID = \"_id\"\r\n  static DATE_PAID_STRING = \"datePaidString\" // this is a string string format date of dateDeposit\r\n  static DATE_PAYMENT = \"datePayment\"\r\n  static DATE_DEPOSIT = \"dateDeposit\"\r\n  static TOTAL_DEPOSIT = \"totalDeposit\"\r\n  static MODE_PAYMENT = \"modePayment\"\r\n  static SOURCE = \"source\"\r\n  static ACCOUNT_NUMBER = \"accountNumber\"\r\n  static PAYMENT_LIST = \"paymentList\"\r\n  static BRANCH = \"branch\"\r\n\r\n  static PROPERTIES = [\r\n    this._ID,\r\n    this.DATE_DEPOSIT,\r\n    this.DATE_PAYMENT,\r\n    this.MODE_PAYMENT,\r\n    this.SOURCE,\r\n    this.ACCOUNT_NUMBER,\r\n    this.TOTAL_DEPOSIT,\r\n    this.PAYMENT_LIST,\r\n    this.BRANCH,\r\n  ]\r\n\r\n  static LABELS = {\r\n    [this.DATE_DEPOSIT]: \"Date Deposit\",\r\n    [this.TOTAL_DEPOSIT]: \"Total Deposits\",\r\n    [this.MODE_PAYMENT]: \"Mode\",\r\n    [this.SOURCE]: \"Source\",\r\n    [this.ACCOUNT_NUMBER]: \"Acct No\",\r\n    [this.PAYMENT_LIST]: \"Payment List\",\r\n    [this.BRANCH]: \"Branch\",\r\n  }\r\n  static TYPES = {\r\n    [this.DATE_DEPOSIT]: STRING_TYPE,\r\n    [this.TOTAL_DEPOSIT]: STRING_TYPE,\r\n    [this.MODE_PAYMENT]: STRING_TYPE,\r\n    [this.SOURCE]: STRING_TYPE,\r\n    [this.ACCOUNT_NUMBER]: STRING_TYPE,\r\n    [this.PAYMENT_LIST]: ARRAY_OF_OBJECT_TYPE,\r\n    [this.BRANCH]: STRING_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\SchedulesClass.js",["1193"],"import {\r\n  AMOUNT_TYPE,\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  DATE_TYPE,\r\n  DROPDOWN_TYPE,\r\n  NUMBER_TYPE,\r\n  TEXT_AREA_TYPE,\r\n} from \"Constants/types\"\r\nimport Base from \"Services/Base\"\r\nimport PaginateCommands from \"Services/PaginateCommands\"\r\nimport db, {\r\n  query,\r\n  where,\r\n  collection,\r\n  getDocs,\r\n  orderBy,\r\n  endAt,\r\n} from \"Services/firebase\"\r\nimport { UNAVAILABLE } from \"Constants/errorCodes\"\r\nimport { startAt } from \"@firebase/firestore\"\r\n\r\nexport default class SchedulersClass {\r\n  static COLLECTION_NAME = \"schedules\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.DATE_START, \"asc\"]\r\n    )\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static getDataByDate(dates, fieldname, branch) {\r\n    return Base.getDataByDate(this.COLLECTION_NAME, dates, fieldname, branch)\r\n  }\r\n\r\n  static async getDataByPartialDate(date, branchSelected = \"\") {\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(this.PARTIAL_DATES_STRING, \"array-contains\", date),\r\n      where(this.BRANCH, \"==\", branchSelected)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n\r\n    console.log(\"data list\", data)\r\n    return data\r\n  }\r\n\r\n  static getDataByDatePanel(dates, fieldname, branch) {\r\n    return Base.getDataByDatePanel(\r\n      this.COLLECTION_NAME,\r\n      dates,\r\n      fieldname,\r\n      branch\r\n    )\r\n  }\r\n\r\n  static getDataByFieldname(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static getDataByFieldnameWithBranch(fieldname, value, branch) {\r\n    return Base.getDataByFieldnameWithBranch(\r\n      this.COLLECTION_NAME,\r\n      fieldname,\r\n      value,\r\n      branch\r\n    )\r\n  }\r\n\r\n  static async getDataByKeyword(fieldname, value = \"\", branchSelected = \"\") {\r\n    // return Base.getDataByKeyword(this.COLLECTION_NAME, fieldname, value)\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      orderBy(fieldname),\r\n      startAt(value),\r\n      endAt(value + \"\\uf8ff\"),\r\n      where(this.BRANCH, \"==\", branchSelected)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n\r\n    console.log(\"data list\", data)\r\n    return data\r\n  }\r\n\r\n  static async getDataNotEqualToFieldname(\r\n    fieldname = \"\",\r\n    value = \"\",\r\n    branchSelected = \"\"\r\n  ) {\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(fieldname, \"!=\", value),\r\n      where(this.BRANCH, \"==\", branchSelected)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n\r\n    console.log(\"data list\", data)\r\n    return data\r\n  }\r\n\r\n  static async getDataOthers(fieldname, value, branchSelected = \"\") {\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(`others.${fieldname}`, \"!=\", value),\r\n      where(this.BRANCH, \"==\", branchSelected)\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n\r\n    console.log(\"data list\", data)\r\n    return data\r\n  }\r\n\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getPaginatedData(branch = \"\", customSort = [\"StartTime\", \"desc\"]) {\r\n    return PaginateCommands.getData(\r\n      this.COLLECTION_NAME,\r\n      150,\r\n      branch,\r\n      customSort\r\n    )\r\n  }\r\n\r\n  static getNextPaginatedData(\r\n    lastVisible,\r\n    branch = \"\",\r\n    customSort = [\"StartTime\", \"desc\"]\r\n  ) {\r\n    return PaginateCommands.getMoreData(\r\n      this.COLLECTION_NAME,\r\n      150,\r\n      lastVisible,\r\n      branch,\r\n      customSort\r\n    )\r\n  }\r\n\r\n  static async getGeneratedIdToday(\r\n    branchCode = \"\",\r\n    orderNo = \"\",\r\n    orderNoDate = \"\"\r\n  ) {\r\n    console.log(\"branchCode\", branchCode)\r\n    console.log(\"orderNo\", orderNo)\r\n    console.log(\"orderNoDate\", orderNoDate)\r\n    const q = query(\r\n      collection(db, this.COLLECTION_NAME),\r\n      where(this.ORDER_NO, \"<=\", `${branchCode}-${orderNo}-685`),\r\n      where(this.ORDER_NO, \">\", `${branchCode}-${orderNoDate}-685`)\r\n      // orderBy(orderedBy[0], orderedBy[1])\r\n    )\r\n    const querySnapshot = await getDocs(q)\r\n    // use .metadata.fromCache of firebase instead since try catch is not working here\r\n    if (querySnapshot.metadata.fromCache) {\r\n      throw new Error(UNAVAILABLE)\r\n    }\r\n    const data = []\r\n    querySnapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  static QTY = \"qty\" // this is not a firebase field\r\n  static OTHERS = \"others\"\r\n  static MODE_PAYMENT = \"modePayment\"\r\n  static SOURCE = \"source\"\r\n  static AMOUNT_PAID = \"amountPaid\"\r\n  static BRANCH = \"branch\"\r\n  static CUSTOMER = \"customer\"\r\n  static CONTACT_NUMBER = \"contactNumber\"\r\n  static DATE_START = \"StartTime\" // this is default of syncfusion\r\n  static DATE_END = \"EndTime\" // this is default of syncfusion\r\n  static EIGHT = \"gcEight\"\r\n  static TWELVE = \"gcTwelve\"\r\n  static BC = \"gBc\"\r\n  static BC_HALF = \"gBcHalf\"\r\n  static DATE_ORDER_PLACED = \"dateOrderPlaced\"\r\n  static UTAK_NO = \"utakNo\"\r\n  static ACCOUNT_NAME = \"accountName\"\r\n  static ACCOUNT_NUMBER = \"accountNumber\"\r\n  static REF_NO = \"refNo\"\r\n  static PAYMENT_MODE = \"paymentMode\"\r\n  static MERCHANT_ORDER = \"merchantOrder\"\r\n  static STATUS = \"status\"\r\n  static ID = \"Id\" // this is default of syncfusion\r\n  static GUID = \"Guid\" // this is default of syncfusion\r\n  static START_TIME_ZONE = \"StartTimezone\" // this is default of syncfusion\r\n  static END_TIME_ZONE = \"EndTimezone\" // this is default of syncfusion\r\n  static SUBJECT = \"Subject\"\r\n  static _ID = \"_id\"\r\n  static ORDER_NO = \"orderNo\"\r\n  static INDICATE_REASON = \"indicateReason\"\r\n  static DATE_PAYMENT = \"datePayment\"\r\n  static CH_8 = \"ch8\"\r\n  static CH_12 = \"ch12\"\r\n  static CL_8 = \"cl8\"\r\n  static CL_12 = \"cl12\"\r\n  static BC_2 = \"bc2\"\r\n  static BC_4 = \"bc4\"\r\n  static JV_4 = \"jc4\"\r\n  static JV_2 = \"jv2\"\r\n  static BCJ_4 = \"bcj4\"\r\n  static BCJ_2 = \"bcj2\"\r\n  static BCJ_1 = \"bcj1\"\r\n  static FCH_8 = \"fch8\"\r\n  static FCH_12 = \"fch12\"\r\n  static FBC_4 = \"fbc4\"\r\n  static ATCHARA = \"atchara\"\r\n  static BC_SAUCE = \"bcSauce\"\r\n  static SPICED_VINEGAR = \"spiceVinegar\"\r\n  static BASTING_SAUCE = \"bastingSauce\"\r\n  static CHILI_OIL = \"chiliOil\"\r\n  static REPAER = \"reaper\"\r\n  static BAO = \"bao\"\r\n  static TOTAL = \"total\"\r\n  static TOTAL_DUE = \"totalDue\"\r\n  static DELIVERY_DATE = \"deliveryDate\"\r\n  static MENU_GROUP_HEADERS = \"menu_group_headers\"\r\n  static REMARKS = \"remarks\"\r\n  static M_A = \"M-A\"\r\n  static CH_8_PS = \"CH8-PS\"\r\n  static M_B = \"M-B\"\r\n  static PRT = \"PRT\"\r\n  static JV_1 = \"JV_1\"\r\n  static ORDER_VIA = \"orderVia\"\r\n  static ORDER_VIA_PARTNER = \"orderViaPartner\"\r\n  static ORDER_VIA_WEBSITE = \"orderViaWebsite\"\r\n  static PARTNER_MERCHANT_ORDER_NO = \"partnerMerchantOrderNo\"\r\n  static DISCOUNT_ADDITIONAL_DETAILS = \"discountAdditionalDetails\"\r\n  static PAYMENT_NOTES = \"paymentNotes\"\r\n\r\n  static PARTIALS = \"partials\"\r\n  static PARTIAL_DATES_STRING = \"partialDates\"\r\n  static CASH_FOR_DEPOSIT = \"cashForDeposit\"\r\n\r\n  // this is not included in the database post of data, this is only for viewing in print document particular field\r\n  static TIME_SLOT = \"timeSlot\"\r\n  static BALANCE_DUE = \"balanceDue\"\r\n\r\n  static REVENUE_CHANNEL = \"revenueChannel\"\r\n  static OR_NO = \"orNo\"\r\n  static SOA_NUMBER = \"soaNumber\"\r\n  static VIA = \"via\"\r\n  static SALES_TYPE = \"salesType\"\r\n  static FIXED_DEDUCTION = \"fixedDeduction\"\r\n  static IS_VIP = \"isVIP\"\r\n  static ZAP_NUMBER = \"zapNumber\"\r\n  static EXCESS_PAYMENT = \"excessPayment\"\r\n  static WITH_FLEXIBLE_PRICES = \"withFlexiblePrices\"\r\n\r\n  static PROPERTIES = [\r\n    this._ID,\r\n    this.BRANCH,\r\n    this.DATE_ORDER_PLACED,\r\n    this.DATE_START,\r\n    this.DATE_END,\r\n    this.UTAK_NO,\r\n    this.OR_NO,\r\n    this.ORDER_NO,\r\n    this.REVENUE_CHANNEL,\r\n    this.CUSTOMER,\r\n    this.CONTACT_NUMBER,\r\n    this.VIA,\r\n    this.PARTNER_MERCHANT_ORDER_NO,\r\n    this.TIME_SLOT,\r\n    this.ORDER_VIA_WEBSITE,\r\n    this.ORDER_VIA,\r\n    this.ORDER_VIA_PARTNER,\r\n    this.QTY,\r\n    this.DATE_PAYMENT,\r\n    this.MODE_PAYMENT,\r\n    this.SOURCE,\r\n    this.SOA_NUMBER,\r\n    this.REF_NO,\r\n    this.SUBJECT,\r\n    this.ACCOUNT_NAME,\r\n    this.ACCOUNT_NUMBER,\r\n    this.SALES_TYPE,\r\n    this.DISCOUNT_ADDITIONAL_DETAILS,\r\n    this.END_TIME_ZONE, // should be null value\r\n    this.START_TIME_ZONE, // should be null value\r\n    this.PAYMENT_NOTES,\r\n    this.OTHERS,\r\n    this.TOTAL_DUE,\r\n    this.BALANCE_DUE,\r\n    this.AMOUNT_PAID,\r\n    this.EXCESS_PAYMENT,\r\n  ]\r\n\r\n  static TYPES = {\r\n    [this.TOTAL_DUE]: AMOUNT_TYPE,\r\n    [this.DATE_PAYMENT]: DATE_TYPE,\r\n    [this.DATE_START]: DATE_TYPE,\r\n    [this.DATE_END]: DATE_TYPE,\r\n    [this.DATE_ORDER_PLACED]: DATE_TYPE,\r\n    [this.OTHERS]: AMOUNT_TYPE,\r\n    [this.AMOUNT_PAID]: AMOUNT_TYPE,\r\n    [this.QTY]: NUMBER_TYPE,\r\n    [this.REMARKS]: TEXT_AREA_TYPE,\r\n    [this.ORDER_VIA]: DROPDOWN_TYPE,\r\n    [this.ORDER_VIA_PARTNER]: DROPDOWN_TYPE,\r\n    [this.ORDER_VIA_WEBSITE]: DROPDOWN_TYPE,\r\n    [this.STATUS]: DROPDOWN_TYPE,\r\n    [this.INDICATE_REASON]: TEXT_AREA_TYPE,\r\n    [this.BALANCE_DUE]: AMOUNT_TYPE,\r\n    [this.PARTIALS]: ARRAY_OF_OBJECT_TYPE,\r\n    [this.EXCESS_PAYMENT]: AMOUNT_TYPE,\r\n  }\r\n\r\n  static LABELS = {\r\n    [this.SOA_NUMBER]: \"SOA #\",\r\n    [this.ZAP_NUMBER]: \"ZAP #\",\r\n    [this.TIME_SLOT]: \"TIME SLOT\",\r\n    [this.REVENUE_CHANNEL]: \"R/C\",\r\n    [this.DATE_ORDER_PLACED]: \"DATE PLACED\",\r\n    [this.STATUS]: \"STATUS\",\r\n    [this.REF_NO]: \"REF #\",\r\n    [this.SALES_TYPE]: \"S/T\",\r\n    [this.UTAK_NO]: \"UTAK #\",\r\n    [this.OR_NO]: \"OR #\",\r\n    [this.INDICATE_REASON]: \"REASON\",\r\n    [this.BRANCH]: \"BRANCH\",\r\n    [this.CUSTOMER]: \"CUSTOMER NAME\",\r\n    [this.CONTACT_NUMBER]: \"CONTACT NUMBER\",\r\n    [this.DELIVERY_DATE]: \"DELIVERY DATE/TIME\",\r\n    [this.DATE_START]: \"DATE SERVED\", // cannot be change\r\n    [this.DATE_END]: \"DATE/TIME END\", // cannot be change\r\n    [this.ORDER_VIA]: \"DIRECT\",\r\n    [this.PAYMENT_MODE]: \"PAYMENT CODE\",\r\n    [this.MERCHANT_ORDER]: \"MERCHANT ORDER #\",\r\n    [this.ACCOUNT_NAME]: \"ACCOUNT NAME\",\r\n    [this.ORDER_NO]: \"ORDER #\",\r\n    [this.CH_8]: '8\"',\r\n    [this.CH_12]: '12\"',\r\n    [this.CL_8]: \"CALI 8\",\r\n    [this.CL_12]: \"CALI 12\",\r\n    [this.BC_4]: \"BC FULL [4]\",\r\n    [this.BC_2]: \"BC HALF [2]\",\r\n    [this.BCJ_4]: \"BCJ [4]\",\r\n    [this.BCJ_2]: \"BCJ HALF [2]\",\r\n    [this.BCJ_1]: \"BCJ1\",\r\n    [this.M_A]: 'A - 2pc 8\" w/ JV',\r\n    [this.CH_8_PS]: '*add 8\" STICK',\r\n    [this.M_B]: \"B - 1pc BC w/ JV\",\r\n    [this.JV_4]: \"JAVA FULL [4]\",\r\n    [this.JV_2]: \"JAVA HALF [2]\",\r\n    [this.JV_1]: \"JAVA SOLO [1]\",\r\n    [this.FCH_8]: \"FCH8\",\r\n    [this.FCH_12]: \"FCH12\",\r\n    [this.FBC_4]: \"FBC4\",\r\n    [this.ATCHARA]: \"X-ATC\",\r\n    [this.BC_SAUCE]: \"X-BCS\",\r\n    [this.SPICED_VINEGAR]: \"X-SVN\",\r\n    [this.BASTING_SAUCE]: \"X-BTS\",\r\n    [this.CHILI_OIL]: \"X-DCO\",\r\n    [this.REPAER]: \"RP\",\r\n    [this.BAO]: \"BAO-B-Q\",\r\n    [this.PRT]: \"PARTY TRAY\",\r\n    [this.TOTAL]: \"TOTAL\",\r\n    [this.REMARKS]: \"NOTES\",\r\n    [this.TIME_SLOT]: \"TIME SLOT\",\r\n    [this.PARTNER_MERCHANT_ORDER_NO]: \"PP #\",\r\n    [this.VIA]: \"VIA\",\r\n    [this.ORDER_VIA_PARTNER]: \"PARTNER MERCHANT\",\r\n    [this.ORDER_VIA_WEBSITE]: \"WEBSITE\",\r\n    [this.ACCOUNT_NUMBER]: \"ACCT #\",\r\n    [this.QTY]: \"QTY\",\r\n    [this.DATE_PAYMENT]: \"DATE PAID\",\r\n    [this.MODE_PAYMENT]: \"MOP\",\r\n    [this.SOURCE]: \"SOURCE\",\r\n    [this.TOTAL_DUE]: \"TOTAL\",\r\n    [this.AMOUNT_PAID]: \"AMOUNT PAID\",\r\n    [this.OTHERS]: \"OTHERS\",\r\n    [this.BALANCE_DUE]: \"COLLECTIBLE\",\r\n    [this.EXCESS_PAYMENT]: \"OVER PAYMENT\",\r\n  }\r\n}\r\n/* (\r\n  <center>\r\n  <span>\r\n    OTHERS / <br />\r\n    DEDUCTIONS\r\n  </span>\r\n</center>\r\n),*/\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDate.js",["1194","1195"],"import { DatePicker } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport moment from \"moment\"\r\n\r\nconst handleDateFormatting = (date) => {\r\n  const minutes = date.getMinutes()\r\n  const hours = date.getHours()\r\n  const defaultMin = minutes >= 30 ? 30 : 0\r\n  return new Date(date.setHours(hours, defaultMin, 0, 0))\r\n}\r\n\r\nfunction CustomDate({\r\n  width = \"100%\",\r\n  onChange = () => {},\r\n  value = handleDateFormatting(new Date()),\r\n  format = \"MM/DD/YYYY hh:mm\",\r\n  showTime = true,\r\n  ...rest\r\n}) {\r\n  const dateValue = moment(handleDateFormatting(value), format)\r\n  return (\r\n    <div style={{ width }}>\r\n      <DatePicker\r\n        {...rest}\r\n        style={{ width: width }}\r\n        value={dateValue}\r\n        format={format}\r\n        showTime={\r\n          showTime\r\n            ? {\r\n                minuteStep: 30,\r\n                use12Hours: true,\r\n                disabledHours: () => {\r\n                  return [1, 2, 3, 4, 5, 6, 7, 20, 21, 22, 23, 24]\r\n                },\r\n                hideDisabledOptions: true,\r\n              }\r\n            : showTime\r\n        }\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CustomDate\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sumArray.js",["1196","1197","1198"],"import thousandsSeparators from \"./formatNumber\"\r\n\r\nexport default function (array, field) {\r\n  // Getting sum of numbers\r\n  if (array.length > 0) {\r\n    if (field) {\r\n      const sum = array.reduce(function (a = 0, b) {\r\n        let fieldNumber = typeof b[field] !== \"undefined\" ? b[field] : 0\r\n        return Number(a) + Number(fieldNumber)\r\n      }, 0)\r\n      return sum\r\n    }\r\n    const sum = array.reduce(function (a, b) {\r\n      return Number(a) + Number(b)\r\n    }, 0)\r\n    return sum\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const sumArrayDatas = (array, index) => {\r\n  if (array.length > 0) {\r\n    const sum = array.reduce(function (a = 0, b) {\r\n      if (typeof b[index] === \"number\") {\r\n        return parseInt(a) + parseInt(b[index])\r\n      }\r\n      if (b[index]) {\r\n        if (!isNaN(b[index])) {\r\n          return parseInt(a) + parseInt(b[index])\r\n        } else {\r\n          return parseInt(a) + 0\r\n        }\r\n      } else {\r\n        return parseInt(a) + 0\r\n      }\r\n    }, 0)\r\n    return sum\r\n  }\r\n  return 0\r\n}\r\n\r\n// to group the same name of value in an object\r\nexport const sumArrayOfObjectsGrouping = (data, field1, field2) => {\r\n  const newDataByGroup = []\r\n  data.forEach((obj) => {\r\n    let newDataByGroupIndex = 0\r\n\r\n    // check first if data already exist\r\n    const dataExist = newDataByGroup.find((d, index2) => {\r\n      if (typeof d[field1] !== \"undefined\") {\r\n        if (d[field1] === obj[field1]) {\r\n          newDataByGroupIndex = index2\r\n        }\r\n        return d[field1] === obj[field1]\r\n      }\r\n    })\r\n\r\n    if (dataExist) {\r\n      const number1 = Number(dataExist[field2])\r\n      const number2 = Number(obj[field2])\r\n      const sumNumber = number1 + number2\r\n      const renewedData = {\r\n        // ...obj,\r\n        // [field2]: sumNumber.toFixed(2),\r\n        [field1]: obj[field1],\r\n        [field2]: sumNumber.toFixed(2),\r\n      }\r\n      newDataByGroup.splice(newDataByGroupIndex, 1, renewedData)\r\n    } else {\r\n      const number = Number(obj[field2])\r\n      newDataByGroup.push({\r\n        // ...obj,\r\n        // [field2]: number.toFixed(2),\r\n        [field1]: obj[field1],\r\n        [field2]: number.toFixed(2),\r\n      })\r\n    }\r\n  })\r\n  return newDataByGroup\r\n}\r\n\r\nexport const sumNumbers = (array) => {\r\n  if (array.length > 0) {\r\n    return array.reduce((a, b) => Number(a) + Number(b), 0)\r\n  } else {\r\n    return 0\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\formatNumber.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\dateFormat.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\BranchClass.js",["1199"],"import { ARRAY_OF_STRING_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport Base from \"Services/Base\"\r\n\r\nexport default class BranchClass {\r\n  static COLLECTION_NAME = \"branches\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.NO, \"asc\"]\r\n    )\r\n  }\r\n\r\n  static getDataByFieldName(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n  static _ID = \"_id\"\r\n  static BRANCH_ADDRESS = \"branchAddress\"\r\n  static BRANCH_NAME = \"branchName\"\r\n  static PROPERTIES = [this._ID, this.BRANCH_NAME, this.BRANCH_ADDRESS]\r\n\r\n  static LABELS = {\r\n    [this.BRANCH_ADDRESS]: \"Address\",\r\n    [this.BRANCH_NAME]: \"Branch\",\r\n  }\r\n  static TYPES = {\r\n    [this.BRANCH_ADDRESS]: STRING_TYPE,\r\n    [this.BRANCH_NAME]: STRING_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\index.js",["1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216"],"import { Space } from \"antd\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport {\r\n  ReloadOutlined,\r\n  FileExcelOutlined,\r\n  PrinterOutlined,\r\n} from \"@ant-design/icons\"\r\nimport styled from \"styled-components\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport useTableHandler from \"./hook\"\r\nimport classes from \"./table.module.css\"\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useLocation,\r\n  useRouteMatch,\r\n} from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport FormHandler from \"../FormHandler\"\r\nimport FormHandlerAdd from \"../FormHandler/FormHandlerAdd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport FilterOptions from \"../FilterOptions\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport CustomRangePicker from \"Components/Commons/RangePicker\"\r\nimport useRangeHandler from \"Hooks/useRangeHandler\"\r\nimport useGetDocumentsByKeyword from \"Hooks/useGetDocumentsByKeyword\"\r\nimport DropdownChannel from \"./DropdownChannel\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nfunction TableHandler(props) {\r\n  const {\r\n    ServiceClass,\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableAdd,\r\n    defaultAddForm, // this is true or false\r\n    enableFilter,\r\n    enableRowSelect,\r\n    isLoading,\r\n    setIsLoading,\r\n    rowSelection,\r\n    enableEdit,\r\n    handleModified,\r\n    paginateRequest,\r\n  } = useTableHandler(props)\r\n\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const [isFiltered, setIsFiltered] = useState(false)\r\n  const [filteredData, setFilteredData] = useState([])\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      {data.length > 0 && isLoading === false && (\r\n        <div\r\n          style={\r\n            location.pathname === path\r\n              ? { visibility: \"visible\" }\r\n              : { visibility: \"hidden\" }\r\n          }\r\n        >\r\n          <ActionButtons\r\n            enableFilter={enableFilter}\r\n            enableAdd={enableAdd}\r\n            ServiceClass={ServiceClass}\r\n            setIsLoading={setIsLoading}\r\n            isFiltered={isFiltered}\r\n            setIsFiltered={setIsFiltered}\r\n            loadData={loadData}\r\n            hideColumns={hideColumns}\r\n            setFilteredData={setFilteredData}\r\n          />\r\n          <CustomTable\r\n            isFiltered={isFiltered}\r\n            columns={[...columns]}\r\n            dataSource={isFiltered ? [...filteredData] : [...data]}\r\n            size=\"small\"\r\n            scroll={{ x: \"calc(375px + 50%)\", y: \"90vh\" }}\r\n            rowClassName={() => {\r\n              return classes[\"DEFAULT\"]\r\n            }}\r\n            onRow={(record) => {\r\n              return enableRowSelect\r\n                ? {\r\n                    onClick: () => {\r\n                      rowSelection(record) // this is for row clicked used by Dashboard Transactions\r\n                    },\r\n                  }\r\n                : {}\r\n            }}\r\n            pagination={{ pageSize: 15, showSizeChanger: false }}\r\n            loadData={paginateRequest ? loadData : () => {}}\r\n            paginateRequest={paginateRequest}\r\n          />\r\n        </div>\r\n      )}\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        {enableAdd && defaultAddForm && (\r\n          <Route exact path={`${path}/add`}>\r\n            <FormHandlerAdd\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {enableEdit && defaultAddForm && (\r\n          <Route exact path={`${path}/modified`}>\r\n            <FormHandler\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              formSave={(data) => {\r\n                handleModified(data)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {defaultAddForm && (\r\n          <Route path=\"*\">\r\n            <StyledURLNotFound>\r\n              <URLNotFound />\r\n            </StyledURLNotFound>\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableHandler\r\n\r\nconst ActionButtons = (props) => {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const {\r\n    enableFilter,\r\n    enableAdd,\r\n    ServiceClass,\r\n    loadData,\r\n    setIsLoading,\r\n    setIsFiltered,\r\n    isFiltered,\r\n    hideColumns,\r\n    setFilteredData,\r\n  } = props\r\n  return (\r\n    <StyledContainer enableFilter={enableFilter} wrap>\r\n      <StyledLeftContent enableFilter={enableFilter}>\r\n        <Space>\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<PrinterOutlined />}\r\n          />\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<FileExcelOutlined />}\r\n          />\r\n        </Space>\r\n      </StyledLeftContent>\r\n      <StyledRightContent enableAdd={enableAdd}>\r\n        <MainButton\r\n          Icon={<ReloadOutlined />}\r\n          label=\"\"\r\n          type=\"default\"\r\n          shape=\"circle\"\r\n          onClick={() => {\r\n            loadData({}, user?.branchSelected, true) // refresh data if true\r\n            setIsLoading(true)\r\n          }}\r\n        />\r\n        <MainButton\r\n          label=\"Add\"\r\n          onClick={() => {\r\n            history.push(`${path}/add`)\r\n          }}\r\n        />\r\n      </StyledRightContent>\r\n    </StyledContainer>\r\n  )\r\n}\r\n\r\nconst MobileTableView = (props) => {\r\n  return <div>Mobile view</div>\r\n}\r\n\r\nconst StyledURLNotFound = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledContainer = styled(Space)`\r\n  display: flex;\r\n  width: 100%;\r\n  padding-bottom: 1rem;\r\n  justify-content: ${(props) =>\r\n    props?.enableFilter ? \"space-between\" : \"flex-end\"};\r\n`\r\nconst StyledLeftContent = styled(Space)`\r\n  display: ${(props) => (props.enableFilter ? \"flex\" : \"none\")};\r\n  justify-content: flex-start;\r\n`\r\nconst StyledRightContent = styled(Space)`\r\n  display: ${(props) => (props.enableAdd ? \"flex\" : \"none\")};\r\n  justify-content: flex-end;\r\n`\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\DropdownsClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsUserMasterfile\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Styles\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\NewProductsClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\validations\\index.js",["1217","1218"],"// check if the properties of the data object is in the array of strings otherwise false if not\r\nexport const arrayContainsKey = (\r\n  array = [], //array of strings\r\n  data = {}\r\n) => {\r\n  const errors = {}\r\n  for (const key in data) {\r\n    if (!array.includes(key)) {\r\n      errors[key] = \"Invalid key\"\r\n    }\r\n  }\r\n  return errors\r\n}\r\n\r\n// check if the object properties contains a value otherwise false if null\r\nexport const objectContainsNull = (data = {}) => {\r\n  const errors = {}\r\n  for (const key in data) {\r\n    if (data[key].trim() === \"\") {\r\n      errors[key] = \"This is required\"\r\n    }\r\n  }\r\n  return errors\r\n}\r\n\r\n// remove key from the data object. If it is optional key and contains null it will be included\r\nexport const validateOptionals = (\r\n  optionalKeys = [], //array of strings\r\n  data = {}\r\n) => {\r\n  const newData = { ...data }\r\n  for (const key in data) {\r\n    if (optionalKeys.includes(key)) {\r\n      if (data[key].trim() === \"\") {\r\n        delete newData[key]\r\n      }\r\n    }\r\n  }\r\n  return newData\r\n}\r\n\r\n// add key if it is not stated in an object and is required\r\nexport const validateRequired = (\r\n  array = [], //array of strings (required keys)\r\n  data = {}\r\n) => {\r\n  const newData = { ...data }\r\n  for (const key of array) {\r\n    if (typeof newData[key] === \"undefined\") {\r\n      newData[key] = \"\"\r\n    }\r\n  }\r\n  return newData\r\n}\r\n\r\nexport const validateMaxChar = (fieldName, data, max = 10) => {\r\n  if (typeof data[fieldName] !== \"undefined\") {\r\n    if (data[fieldName].length < max) {\r\n      return {\r\n        valid: false,\r\n        errors: { [fieldName]: `Must be at least ${max} characters required` },\r\n      }\r\n    }\r\n  }\r\n  return { valid: true }\r\n}\r\n\r\nexport const validateEmail = (fieldName, data) => {\r\n  const res =\r\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n  if (typeof data[fieldName] !== \"undefined\") {\r\n    const validate = res.test(String(data[fieldName]).toLowerCase())\r\n    if (!validate) {\r\n      return {\r\n        valid: false,\r\n        errors: { [fieldName]: `Invalid Email` },\r\n      }\r\n    }\r\n  }\r\n  return { valid: true }\r\n}\r\n\r\n// check if properties are valid, remove optional fields with null values and check if data contains null\r\nexport const basicValidation = (ServiceClass, data, optionals = []) => {\r\n  const ifArrayContainsKey = arrayContainsKey(ServiceClass.PROPERTIES, data)\r\n  const validatedRequired = validateRequired(ServiceClass.PROPERTIES, data)\r\n  const validatedOptionals = validateOptionals(optionals, validatedRequired)\r\n  const isNull = objectContainsNull(validatedOptionals)\r\n\r\n  if (Object.keys(ifArrayContainsKey).length > 0) {\r\n    return { valid: false, errors: ifArrayContainsKey }\r\n  }\r\n\r\n  if (Object.keys(isNull).length > 0) {\r\n    return { valid: false, errors: isNull }\r\n  }\r\n\r\n  return { valid: true }\r\n}\r\n\r\nexport default validateOptionals\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\collectionData.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\checkDate.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\DropdownChannel.js",["1219","1220","1221"],"import { Dropdown, Menu, Button } from \"antd\"\r\nimport { UserOutlined, DownOutlined } from \"@ant-design/icons\"\r\nimport React from \"react\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\n\r\nfunction DropdownChannel({ history, path }) {\r\n  const handleButtonClick = (e) => {\r\n    console.log(\"click left button\", e)\r\n  }\r\n\r\n  const handleMenuClick = (e) => {\r\n    console.log(\"click\", e)\r\n  }\r\n\r\n  const menu = (\r\n    <Menu onClick={handleMenuClick}>\r\n      <Menu.Item\r\n        key=\"1\"\r\n        onClick={() => history.push(`${path}/add?channelOption=direct`)}\r\n      >\r\n        Direct\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key=\"2\"\r\n        onClick={() =>\r\n          history.push(`${path}/add?channelOption=partnerMerchant`)\r\n        }\r\n      >\r\n        Partner Merchant\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key=\"3\"\r\n        onClick={() => history.push(`${path}/add?channelOption=website`)}\r\n      >\r\n        Website\r\n      </Menu.Item>\r\n    </Menu>\r\n  )\r\n\r\n  return (\r\n    <Dropdown overlay={menu}>\r\n      <Button shape=\"round\" type=\"primary\">\r\n        Add Order <DownOutlined />\r\n      </Button>\r\n    </Dropdown>\r\n  )\r\n}\r\n\r\nexport default DropdownChannel\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\ProductsClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\addMinusDay.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\hook.js",["1222","1223","1224","1225","1226","1227"],"import React, { useState, useEffect } from \"react\"\r\nimport { Space, Tag } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport { handleTitle, handleAlignment } from \"./helpers\"\r\nimport {\r\n  AMOUNT_TYPE,\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  DATE_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport { EditOutlined } from \"@ant-design/icons\"\r\nimport { arrayReplace, replaceArrayData } from \"Helpers/arrayFuntions\"\r\nimport { useHistory, useRouteMatch } from \"react-router\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nexport default function useTableHandler({\r\n  ServiceClass, // Class\r\n  hideColumns = [],\r\n  overideRender = {},\r\n  bySort, // boolean\r\n  customSort = [],\r\n  defaultColumnAlign = \"left\",\r\n  widths = {},\r\n  hasWidths = true,\r\n  defaultFontSize = \"12px\",\r\n  enableEdit = false,\r\n  enableFilter = false,\r\n  enableAdd = false,\r\n  defaultAddForm = true,\r\n  enableRowSelect = false,\r\n  rowSelection = () => {},\r\n  onCell = () => {},\r\n  useHook = useGetDocuments,\r\n  paginateRequest = false,\r\n  exposeData = () => {},\r\n  modifiedData,\r\n}) {\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const [collectionData, loadData] = useGetDocuments(ServiceClass, {\r\n    bySort,\r\n    customSort,\r\n  })\r\n\r\n  const [data, setData] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    handleColumns(collectionData)\r\n    setIsLoading(false)\r\n    setData(collectionData)\r\n\r\n    // in order to access the data list outside this component\r\n    exposeData(collectionData)\r\n  }, [collectionData])\r\n\r\n  useEffect(() => {\r\n    handleColumns(data)\r\n  }, [data])\r\n\r\n  // if modifiedData is trigger it will automatically update the state base on the new data save\r\n  useEffect(() => {\r\n    // const collectionIndex = data.findIndex(\r\n    //   (obj) => obj[ServiceClass._ID] === modifiedData[ServiceClass._ID]\r\n    // )\r\n    // if (collectionIndex >= 0) {\r\n    //   const updatedData = arrayReplace(data, collectionIndex, modifiedData)\r\n    //   setData(updatedData)\r\n    // }\r\n    // handleModified(modifiedData)\r\n    if (Object.keys(modifiedData || {}).length > 0) {\r\n      loadData(modifiedData)\r\n    }\r\n  }, [modifiedData])\r\n\r\n  const handleColumns = (data) => {\r\n    const _columns = []\r\n    if (typeof ServiceClass?.PROPERTIES === \"undefined\") {\r\n      const properties = data.length > 0 ? Object.keys(data[0]) : []\r\n      for (const key of properties) {\r\n        if (!hideColumns.includes(key)) {\r\n          const columnObj = {\r\n            title: handleTitle(ServiceClass, key),\r\n            key,\r\n            dataIndex: key,\r\n            align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n            ellipsis: {\r\n              showTitle: false,\r\n            },\r\n            onCell,\r\n            render: (value, record) => {\r\n              return handleTypeRender({ value, record }, key)\r\n            },\r\n          }\r\n          if (hasWidths) {\r\n            columnObj.width =\r\n              typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n          }\r\n          _columns.push({ ...columnObj })\r\n        }\r\n      }\r\n      if (enableEdit) {\r\n        _columns.push({\r\n          title: \"\",\r\n          key: \"action\",\r\n          dataIndex: \"action\",\r\n          align: \"right\",\r\n          onCell,\r\n          render: (data, record) => {\r\n            return (\r\n              <MainButton\r\n                type=\"default\"\r\n                shape=\"circle\"\r\n                Icon={<EditOutlined />}\r\n                onClick={() =>\r\n                  history.push(\r\n                    `${path}/modified?id=${record[ServiceClass._ID]}`\r\n                  )\r\n                }\r\n              />\r\n            )\r\n          },\r\n        })\r\n      }\r\n      setColumns(_columns)\r\n      return\r\n    }\r\n\r\n    for (const key of ServiceClass.PROPERTIES) {\r\n      if (!hideColumns.includes(key)) {\r\n        const columnObj = {\r\n          title: handleTitle(ServiceClass, key),\r\n          key,\r\n          dataIndex: key,\r\n          align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n          ellipsis: {\r\n            showTitle: false,\r\n          },\r\n          onCell,\r\n          render: (value, record) => {\r\n            return handleTypeRender({ value, record }, key)\r\n          },\r\n        }\r\n        if (hasWidths) {\r\n          columnObj.width =\r\n            typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n        }\r\n        _columns.push({ ...columnObj })\r\n      }\r\n    }\r\n    if (enableEdit) {\r\n      _columns.push({\r\n        title: \"\",\r\n        key: \"action\",\r\n        dataIndex: \"action\",\r\n        align: \"right\",\r\n        onCell,\r\n        render: (data, record) => {\r\n          return (\r\n            <MainButton\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              Icon={<EditOutlined />}\r\n              onClick={() =>\r\n                history.push(`${path}/modified?id=${record[ServiceClass._ID]}`)\r\n              }\r\n            />\r\n          )\r\n        },\r\n      })\r\n    }\r\n    setColumns(_columns)\r\n  }\r\n\r\n  const handleTypeRender = ({ value, record }, key) => {\r\n    if (typeof overideRender[key] !== \"undefined\") {\r\n      return overideRender[key](value, record)\r\n    }\r\n\r\n    if (typeof ServiceClass.TYPES === \"undefined\") {\r\n      if (typeof value === \"object\") {\r\n        return \"Object without types\"\r\n      }\r\n      return value\r\n    }\r\n\r\n    let result = value\r\n    switch (ServiceClass.TYPES[key]) {\r\n      case STRING_TYPE:\r\n        result = value\r\n        break\r\n      case ARRAY_OF_OBJECT_TYPE:\r\n        const renderObj =\r\n          typeof ServiceClass.OBJECTS === \"undefined\" ? (\r\n            \"Object Undefined\"\r\n          ) : (\r\n            <Space>\r\n              {value.map((valueObj) => {\r\n                const dataObj =\r\n                  typeof ServiceClass.OBJECTS[key] === \"undefined\"\r\n                    ? \"undefined title\"\r\n                    : valueObj[ServiceClass.OBJECTS[key].title]\r\n                return (\r\n                  <Tag style={{ cursor: \"pointer\" }} color=\"cyan\" wrap>\r\n                    {dataObj}\r\n                  </Tag>\r\n                )\r\n              })}\r\n            </Space>\r\n          )\r\n        result = renderObj\r\n        break\r\n      case ARRAY_OF_STRING_TYPE:\r\n        result = (\r\n          <Space wrap>\r\n            {(value || []).map((valueKey) => {\r\n              return <Tag color=\"cyan\">{valueKey}</Tag>\r\n            })}\r\n          </Space>\r\n        )\r\n        break\r\n      case AMOUNT_TYPE:\r\n        result = thousandsSeparators(Number(value).toFixed(2))\r\n        break\r\n      case DATE_TYPE:\r\n        const formattedDate = formatDateFromDatabase(value)\r\n        result = formatDateDash(formattedDate)\r\n        break\r\n      case BOOLEAN_TYPE:\r\n        result = value ? (\r\n          <span style={{ color: \"green\" }}>Active</span>\r\n        ) : (\r\n          <span style={{ color: \"red\" }}>Inactive</span>\r\n        )\r\n        break\r\n    }\r\n    return <div style={{ fontSize: defaultFontSize }}>{result}</div>\r\n  }\r\n\r\n  const handleModified = (data) => {\r\n    loadData(data)\r\n  }\r\n  return {\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableFilter,\r\n    enableEdit,\r\n    enableRowSelect,\r\n    rowSelection,\r\n    enableAdd,\r\n    defaultAddForm,\r\n    setIsLoading,\r\n    isLoading,\r\n    ServiceClass,\r\n    handleModified,\r\n    paginateRequest,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsDailyReport\\LiquidChart\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\FormHandlerAdd.js",["1228","1229","1230","1231","1232","1233","1234"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport {\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport EditableTagGroup from \"../EditableTagGroup\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport useModifiedCount from \"./useModifiedCount\"\r\nimport CustomPopConfirm from \"Components/Commons/CustomPopConfirm\"\r\nimport StringField from \"./StringField\"\r\nimport StringFieldArray from \"./StringFieldArray\"\r\nimport BooleanField from \"./BooleanField\"\r\nimport UsersClass from \"Services/Classes/UsersClass\"\r\nfunction FormHandlerAdd({ ServiceClass, back, formSave = () => {} }) {\r\n  const [defaultData, setDefaultData] = useState()\r\n  const [properties, setProperties] = useState([])\r\n  const [modifiedData, setModifiedData] = useState({})\r\n  useEffect(() => {\r\n    if (ServiceClass.PROPERTIES.length > 0) {\r\n      const newProperties = ServiceClass.PROPERTIES.filter(\r\n        (field) => field !== \"_id\"\r\n      )\r\n\r\n      if (ServiceClass.COLLECTION_NAME === UsersClass.COLLECTION_NAME) {\r\n        // includes the _id property if it is user class\r\n        newProperties.splice(0, 0, ServiceClass._ID)\r\n      }\r\n      setProperties(newProperties)\r\n\r\n      const _defaultData = {} // set some default value to prevent error when the fields do not have an input\r\n      for (const key of newProperties) {\r\n        switch (ServiceClass.TYPES[key]) {\r\n          case STRING_TYPE:\r\n            _defaultData[key] = \"\"\r\n            break\r\n          case ARRAY_OF_STRING_TYPE:\r\n            _defaultData[key] = []\r\n            break\r\n          case ARRAY_OF_OBJECT_TYPE:\r\n            _defaultData[key] = []\r\n            break\r\n          case BOOLEAN_TYPE:\r\n            _defaultData[key] = true\r\n            break\r\n          default:\r\n            _defaultData[key] = \"\"\r\n        }\r\n      }\r\n      setDefaultData(_defaultData)\r\n    }\r\n  }, [ServiceClass])\r\n\r\n  const handleModification = (value, name) => {\r\n    const _modifiedData = { ...modifiedData }\r\n    _modifiedData[name] = value\r\n    setModifiedData(_modifiedData)\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    if (ServiceClass.COLLECTION_NAME === UsersClass.COLLECTION_NAME) {\r\n      await ServiceClass.setData(modifiedData[ServiceClass._ID], {\r\n        ...defaultData,\r\n        ...modifiedData,\r\n      })\r\n      back()\r\n      return\r\n    }\r\n    // if the collection is not equal to user this function will be trigger\r\n    await ServiceClass.addData({\r\n      ...defaultData,\r\n      ...modifiedData,\r\n    })\r\n    back()\r\n  }\r\n  return (\r\n    <>\r\n      <StyledContainer>\r\n        <Header back={back} modifiedData={modifiedData} />\r\n        <StyledFormContainer>\r\n          <StyledForm direction=\"vertical\">\r\n            {properties.map((name) => {\r\n              switch (ServiceClass.TYPES[name]) {\r\n                case STRING_TYPE:\r\n                  return (\r\n                    <StringField\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n                case ARRAY_OF_STRING_TYPE:\r\n                  return (\r\n                    <StringFieldArray\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n                case ARRAY_OF_OBJECT_TYPE:\r\n                  return <div>I am array of object</div>\r\n                case BOOLEAN_TYPE:\r\n                  return (\r\n                    <BooleanField\r\n                      ServiceClass={ServiceClass}\r\n                      collectionData={defaultData}\r\n                      name={name}\r\n                      handleModification={handleModification}\r\n                    />\r\n                  )\r\n              }\r\n              return (\r\n                <StringField\r\n                  ServiceClass={ServiceClass}\r\n                  collectionData={defaultData}\r\n                  name={name}\r\n                  handleModification={handleModification}\r\n                />\r\n              )\r\n            })}\r\n            <ActionButtons\r\n              modifiedData={modifiedData}\r\n              back={back}\r\n              handleSave={handleSave}\r\n            />\r\n          </StyledForm>\r\n        </StyledFormContainer>\r\n      </StyledContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Header = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledHeader>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{ Icon: <ArrowLeftOutlined />, shape: \"circle\" }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      Form Data\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nconst ActionButtons = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledActionContainer>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{\r\n          label: \"Cancel\",\r\n          danger: true,\r\n          disabled: modifiedCount > 0 ? false : true,\r\n        }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      <MainButton\r\n        label=\"Save\"\r\n        disabled={modifiedCount > 0 ? false : true}\r\n        onClick={props.handleSave}\r\n      />\r\n    </StyledActionContainer>\r\n  )\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default FormHandlerAdd\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsCustomer\\styles.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\SpecificPricesClass.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomModal.js",["1235"],"import { Modal } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport MainButton from \"./MainButton\"\r\n\r\nfunction CustomModal({\r\n  buttonLabel = \"\",\r\n  handleOk = () => {},\r\n  buttonType = \"primary\",\r\n  buttonShape = \"round\",\r\n  buttonSize = \"medium\",\r\n  ButtonIcon = <></>,\r\n  ...rest\r\n}) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true)\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    handleOk()\r\n    setIsModalVisible(false)\r\n  }\r\n  return (\r\n    <>\r\n      <MainButton\r\n        type={buttonType}\r\n        onClick={showModal}\r\n        label={buttonLabel}\r\n        shape={buttonShape}\r\n        size={buttonSize}\r\n        Icon={ButtonIcon}\r\n      />\r\n      <Modal\r\n        title={rest.title}\r\n        visible={isModalVisible}\r\n        onOk={handleConfirm}\r\n        onCancel={handleCancel}\r\n        footer={rest.footer}\r\n        {...rest}\r\n      >\r\n        {rest.children}\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomModal\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Constants\\types.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\PaginateCommands.js",["1236","1237","1238","1239","1240","1241","1242"],"import db, {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  orderBy,\r\n  query,\r\n  where,\r\n  updateDoc,\r\n  limit,\r\n  startAfter,\r\n  setDoc,\r\n} from \"./firebase\"\r\nimport { formatDateFromDatabase, formatDateDash } from \"Helpers/dateFormat\"\r\nimport { UNAVAILABLE } from \"Constants/errorCodes\"\r\nexport default class PaginateCommands {\r\n  static async getData(\r\n    collectionName,\r\n    customLimit = 150,\r\n    branch,\r\n    customSort = []\r\n  ) {\r\n    const ref = collection(db, collectionName)\r\n    if (branch) {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    } else {\r\n      const request = query(\r\n        ref,\r\n        orderBy(customSort[0], customSort[1]),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    }\r\n  }\r\n\r\n  static async getMoreData(\r\n    collectionName,\r\n    customLimit = 150,\r\n    lastVisible,\r\n    branch,\r\n    customSort = []\r\n  ) {\r\n    const ref = collection(db, collectionName)\r\n    if (branch) {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        startAfter(lastVisible),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    } else {\r\n      const request = query(\r\n        ref,\r\n        where(\"branch\", \"==\", branch),\r\n        orderBy(customSort[0], customSort[1]),\r\n        startAfter(lastVisible),\r\n        limit(customLimit)\r\n      )\r\n      const querySnapshot = await getDocs(request)\r\n      // use .metadata.fromCache of firebase instead since try catch is not working here\r\n      if (querySnapshot.metadata.fromCache) {\r\n        throw new Error(UNAVAILABLE)\r\n      }\r\n\r\n      const _lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1]\r\n      const data = []\r\n      querySnapshot.forEach((doc) => {\r\n        data.push({ ...doc.data(), _id: doc.id })\r\n      })\r\n      return [_lastVisible, data]\r\n    }\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByKeyword.js",["1243","1244","1245"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentsByKeyword(ServiceClass) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n  const loadData = async (fieldname, value) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      let _data = []\r\n      switch (fieldname) {\r\n        case ServiceClass.MODE_PAYMENT:\r\n          _data = await ServiceClass.getDataByKeyword(\r\n            fieldname,\r\n            value,\r\n            user.branchSelected\r\n          )\r\n        case ServiceClass.SOURCE:\r\n          _data = await ServiceClass.getDataByKeyword(\r\n            fieldname,\r\n            value,\r\n            user.branchSelected\r\n          )\r\n        case ServiceClass.REVENUE_CHANNEL:\r\n          if (value === \"DR\") {\r\n            _data = await ServiceClass.getDataNotEqualToFieldname(\r\n              ServiceClass.ORDER_VIA,\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            setData(_data)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          } else if (value === \"PP\") {\r\n            _data = await ServiceClass.getDataNotEqualToFieldname(\r\n              ServiceClass.ORDER_VIA_PARTNER,\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            setData(_data)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          } else {\r\n            _data = await ServiceClass.getDataNotEqualToFieldname(\r\n              ServiceClass.ORDER_VIA_WEBSITE,\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            setData(_data)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n        case ServiceClass.SALES_TYPE:\r\n          if (value === \"D/O\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Automatic 50 percent off\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => obj[ServiceClass.ORDER_VIA]\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"D/PM\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Promo\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => obj[ServiceClass.ORDER_VIA]\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"D/IR\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Incidents\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => obj[ServiceClass.ORDER_VIA]\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"D/S\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Special\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => obj[ServiceClass.ORDER_VIA]\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"SPWD\") {\r\n            _data = await ServiceClass.getDataOthers(\r\n              \"Senior Citizen\",\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            setData(_data)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n\r\n          if (value === \"R\") {\r\n            _data = await ServiceClass.getDataNotEqualToFieldname(\r\n              ServiceClass.ORDER_VIA,\r\n              \"\",\r\n              user.branchSelected\r\n            )\r\n            const filteredData = _data.filter(\r\n              (obj) => Object.keys(obj?.others || {}).length === 0\r\n            )\r\n            setData(filteredData)\r\n            setIsLoading(false)\r\n            setLoaded(true)\r\n            return\r\n          }\r\n          return\r\n        default:\r\n          _data = await ServiceClass.getDataByKeyword(\r\n            fieldname,\r\n            value,\r\n            user.branchSelected\r\n          )\r\n      }\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useRangeHandler.js",["1246"],"import { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(ServiceClass) {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n\r\n  const loadData = async (dates, fieldname) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataByDate(\r\n        [dates[0]._d, dates[1]._d],\r\n        fieldname,\r\n        user?.branchSelected\r\n      )\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\RangePicker.js",["1247"],"import React from \"react\"\r\nimport { DatePicker, Space } from \"antd\"\r\nconst { RangePicker } = DatePicker\r\n\r\nfunction CustomRangePicker({\r\n  onChange,\r\n  value,\r\n  disabled,\r\n  showTime = false,\r\n  format = \"MM/DD/YYYY hh:mm A\",\r\n}) {\r\n  return (\r\n    <RangePicker\r\n      showTime={showTime}\r\n      use12Hours\r\n      format={format}\r\n      minuteStep={30}\r\n      onChange={onChange}\r\n      disabled={disabled}\r\n      value={value}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CustomRangePicker\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilterOptions\\index.js",["1248","1249","1250"],"import CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport { FilterOutlined } from \"@ant-design/icons\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { Radio, Space } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction FilterOptions({\r\n  ServiceClass,\r\n  hideColumns,\r\n  setIsFiltered,\r\n  valueSelected = () => {},\r\n}) {\r\n  const ref = useRef(null)\r\n  const [value, setValue] = useState(\"NONE\")\r\n  const [properties, setProperties] = useState([])\r\n\r\n  useEffect(() => {\r\n    const properties = ServiceClass.PROPERTIES.filter(\r\n      (key) => !hideColumns.includes(key)\r\n    )\r\n    const selectedProperties = properties.filter(\r\n      (key) => ServiceClass.TYPES[key] === DATE_TYPE\r\n    )\r\n\r\n    if ((ServiceClass.COLLECTION_NAME = SchedulersClass.COLLECTION_NAME)) {\r\n      // selectedProperties.push(ServiceClass.SOURCE)\r\n      // selectedProperties.push(ServiceClass.MODE_PAYMENT)\r\n      selectedProperties.push(ServiceClass.DATE_START)\r\n      selectedProperties.push(ServiceClass.REVENUE_CHANNEL)\r\n      selectedProperties.push(ServiceClass.SALES_TYPE)\r\n      selectedProperties.push(ServiceClass.PARTNER_MERCHANT_ORDER_NO)\r\n      selectedProperties.push(ServiceClass.UTAK_NO)\r\n      selectedProperties.push(ServiceClass.CUSTOMER)\r\n    }\r\n\r\n    setProperties(selectedProperties)\r\n  }, [ServiceClass, hideColumns])\r\n\r\n  useEffect(() => {\r\n    valueSelected(value)\r\n  }, [value])\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value)\r\n    ref?.current?.click()\r\n    if (e.target.value !== \"NONE\") {\r\n      setIsFiltered(true)\r\n    } else {\r\n      setIsFiltered(false)\r\n    }\r\n  }\r\n  return (\r\n    <CustomDrawer\r\n      type={value !== \"NONE\" ? \"primary\" : \"default\"}\r\n      shape=\"circle\"\r\n      title=\"Filter Options\"\r\n      size=\"medium\"\r\n      placement=\"left\"\r\n      Icon={<FilterOutlined />}\r\n      clickedRef={ref}\r\n    >\r\n      <Radio.Group value={value} onChange={handleChange}>\r\n        <Space direction=\"vertical\">\r\n          {[\"NONE\", ...properties].map((data) => {\r\n            return (\r\n              <>\r\n                <Radio value={data}>{ServiceClass.LABELS[data] || data}</Radio>\r\n              </>\r\n            )\r\n          })}\r\n        </Space>\r\n      </Radio.Group>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nexport default FilterOptions\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\index.js",["1251","1252","1253","1254","1255"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport {\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport EditableTagGroup from \"../EditableTagGroup\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport useModifiedCount from \"./useModifiedCount\"\r\nimport CustomPopConfirm from \"Components/Commons/CustomPopConfirm\"\r\nimport StringField from \"./StringField\"\r\nimport StringFieldArray from \"./StringFieldArray\"\r\nimport BooleanField from \"./BooleanField\"\r\nimport ObjectFieldArray from \"./ObjectFieldArray\"\r\nfunction FormHandler(\r\n  { ServiceClass, back, formSave = () => {} },\r\n  productData = {}\r\n) {\r\n  const query = useQuery()\r\n  const id = query.get(\"id\")\r\n  const [collectionData] = useGetDocumentById(ServiceClass, id)\r\n  const [properties, setProperties] = useState([])\r\n  const [modifiedData, setModifiedData] = useState({})\r\n  useEffect(() => {\r\n    console.log(ServiceClass.COLLECTION_NAME)\r\n    if (ServiceClass.PROPERTIES.length > 0) {\r\n      const newProperties = ServiceClass.PROPERTIES.filter(\r\n        (field) => field !== \"_id\"\r\n      )\r\n      setProperties(newProperties)\r\n    }\r\n  }, [ServiceClass])\r\n\r\n  const handleModification = (value, name) => {\r\n    const _modifiedData = { ...modifiedData }\r\n    _modifiedData[name] = value\r\n    setModifiedData({ ..._modifiedData })\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    const dataToBeSaved = { ...modifiedData }\r\n    // remove if field is not included in the properties of a class\r\n    for (const key in dataToBeSaved) {\r\n      if (!properties.includes(key)) {\r\n        delete dataToBeSaved[key]\r\n      }\r\n    }\r\n\r\n    await ServiceClass.updateDataById(id, dataToBeSaved)\r\n    formSave({ ...collectionData, ...dataToBeSaved, [ServiceClass._ID]: id })\r\n    back()\r\n  }\r\n\r\n  console.log(\"collectionData\", collectionData)\r\n  return (\r\n    <>\r\n      {Object.keys(collectionData).length > 0 && (\r\n        <StyledContainer>\r\n          <Header back={back} modifiedData={modifiedData} />\r\n          <StyledFormContainer>\r\n            <StyledForm direction=\"vertical\">\r\n              {properties.map((name) => {\r\n                switch (ServiceClass.TYPES[name]) {\r\n                  case STRING_TYPE:\r\n                    return (\r\n                      <StringField\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case ARRAY_OF_STRING_TYPE:\r\n                    return (\r\n                      <StringFieldArray\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case ARRAY_OF_OBJECT_TYPE:\r\n                    return (\r\n                      <ObjectFieldArray\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                  case BOOLEAN_TYPE:\r\n                    return (\r\n                      <BooleanField\r\n                        ServiceClass={ServiceClass}\r\n                        collectionData={collectionData}\r\n                        name={name}\r\n                        handleModification={handleModification}\r\n                      />\r\n                    )\r\n                }\r\n                return (\r\n                  <StringField\r\n                    ServiceClass={ServiceClass}\r\n                    collectionData={collectionData}\r\n                    name={name}\r\n                    handleModification={handleModification}\r\n                  />\r\n                )\r\n              })}\r\n              <ActionButtons\r\n                modifiedData={modifiedData}\r\n                back={back}\r\n                handleSave={handleSave}\r\n              />\r\n            </StyledForm>\r\n          </StyledFormContainer>\r\n        </StyledContainer>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst Header = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledHeader>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{ Icon: <ArrowLeftOutlined />, shape: \"circle\" }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount}\r\n      />\r\n      Form Data\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nconst ActionButtons = (props) => {\r\n  const modifiedCount = useModifiedCount(props)\r\n  return (\r\n    <StyledActionContainer>\r\n      <CustomPopConfirm\r\n        Component={MainButton}\r\n        componentProps={{\r\n          label: \"Cancel\",\r\n          danger: true,\r\n          disabled: modifiedCount > 0 ? false : true,\r\n        }}\r\n        onConfirm={props.back}\r\n        count={modifiedCount} // count is used for notification discard Changes\r\n      />\r\n      <MainButton\r\n        label=\"Save\"\r\n        disabled={modifiedCount > 0 ? false : true}\r\n        onClick={props.handleSave}\r\n      />\r\n    </StyledActionContainer>\r\n  )\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default FormHandler\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomInput.js",["1256","1257","1258","1259"],"import { Input } from \"antd\"\r\nimport React from \"react\"\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\"\r\n\r\nfunction CustomInput({\r\n  prefix = null,\r\n  placeholder = \"\",\r\n  size = \"default\",\r\n  type = \"text\",\r\n  onChange = () => {},\r\n  ...rest\r\n}) {\r\n  if (type !== \"password\") {\r\n    if (!prefix) {\r\n      return (\r\n        <Input\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          {...rest}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <Input\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          prefix={prefix}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          {...rest}\r\n        />\r\n      )\r\n    }\r\n  } else {\r\n    if (!prefix) {\r\n      return (\r\n        <Input.Password\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          iconRender={(visible) =>\r\n            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\r\n          }\r\n          {...rest}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <Input.Password\r\n          size=\"default\"\r\n          placeholder={placeholder}\r\n          size={size}\r\n          prefix={prefix}\r\n          type={type}\r\n          onChange={onChange}\r\n          style={{ width: \"100%\" }}\r\n          iconRender={(visible) =>\r\n            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\r\n          }\r\n          {...rest}\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default CustomInput\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTable.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\ComponentToPrint.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\index.js",["1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279"],"import { Space } from \"antd\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport {\r\n  ReloadOutlined,\r\n  FileExcelOutlined,\r\n  PrinterOutlined,\r\n} from \"@ant-design/icons\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport styled from \"styled-components\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport useTableHandler from \"./hook\"\r\nimport classes from \"./table.module.css\"\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useLocation,\r\n  useRouteMatch,\r\n} from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport FormHandler from \"../FormHandler\"\r\nimport FormHandlerAdd from \"../FormHandler/FormHandlerAdd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport FilterOptions from \"../FilterOptions\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport CustomRangePicker from \"Components/Commons/RangePicker\"\r\nimport useRangeHandler from \"Hooks/useRangeHandler\"\r\nimport useGetDocumentsByKeyword from \"Hooks/useGetDocumentsByKeyword\"\r\nimport DropdownChannel from \"./DropdownChannel\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport ExportService from \"Services/ExportService\"\r\nimport schedulerExcel, {\r\n  calculateTotalRevChannel,\r\n} from \"Helpers/schedulerExcel\"\r\nimport {\r\n  displayOrderVia,\r\n  displayPaymentProp,\r\n  displaySalesType,\r\n} from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport TransactionGroupPayment from \"../TransactionGroupPayments\"\r\nimport { produceSalesSummary } from \"./produceSalesSummary\"\r\nimport segregateAdvanceOrders, {\r\n  advanceOrders,\r\n  notAdvanceOrders,\r\n} from \"./segregateAdvanceOrders\"\r\nimport { produceSalesSummary1 } from \"./produceSalesSummary1\"\r\nimport { produceSalesSummary2 } from \"./produceSalesSummary2\"\r\nimport NewProductsClass from \"Services/Classes/NewProductsClass\"\r\nconst produceAmount = (value) => {\r\n  return thousandsSeparators(Number(value).toFixed(2))\r\n}\r\n\r\nfunction TableHandler(props) {\r\n  const {\r\n    ServiceClass,\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableAdd,\r\n    defaultAddForm, // this is true or false\r\n    enableFilter,\r\n    enableRowSelect,\r\n    isLoading,\r\n    setIsLoading,\r\n    rowSelection,\r\n    enableEdit,\r\n    handleModified,\r\n    paginateRequest,\r\n  } = useTableHandler(props)\r\n\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const [isFiltered, setIsFiltered] = useState(false)\r\n  const [filteredData, setFilteredData] = useState([])\r\n\r\n  console.log(\"productData test\", props.productData)\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      {isLoading === false && (\r\n        <div\r\n          style={\r\n            location.pathname === path\r\n              ? { visibility: \"visible\" }\r\n              : { visibility: \"hidden\" }\r\n          }\r\n        >\r\n          <ActionButtons\r\n            enableFilter={enableFilter}\r\n            enableAdd={enableAdd}\r\n            ServiceClass={ServiceClass}\r\n            setIsLoading={setIsLoading}\r\n            isFiltered={isFiltered}\r\n            setIsFiltered={setIsFiltered}\r\n            loadData={loadData}\r\n            hideColumns={hideColumns}\r\n            setFilteredData={setFilteredData}\r\n            data={data}\r\n            filteredData={filteredData}\r\n            productData={props?.productData}\r\n          />\r\n          <CustomTable\r\n            isFiltered={isFiltered}\r\n            columns={[...columns]}\r\n            dataSource={isFiltered ? [...filteredData] : [...data]}\r\n            size=\"small\"\r\n            scroll={{ x: \"calc(375px + 50%)\", y: \"90vh\" }}\r\n            rowClassName={(data) => {\r\n              if (data?.status === \"CANCELLED\") {\r\n                return classes[`DEFAULT-${data?.status}`]\r\n              }\r\n              return classes[\"DEFAULT\"]\r\n            }}\r\n            onRow={(record) => {\r\n              return enableRowSelect\r\n                ? {\r\n                    onClick: () => {\r\n                      rowSelection(record) // this is for row clicked used by Dashboard Transactions\r\n                    },\r\n                  }\r\n                : {}\r\n            }}\r\n            pagination={{ pageSize: 15, showSizeChanger: false }}\r\n            loadData={paginateRequest ? loadData : () => {}}\r\n            paginateRequest={paginateRequest}\r\n          />\r\n        </div>\r\n      )}\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        {enableAdd && defaultAddForm && (\r\n          <Route exact path={`${path}/add`}>\r\n            <FormHandlerAdd\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {enableEdit && defaultAddForm && (\r\n          <Route exact path={`${path}/modified`}>\r\n            <FormHandler\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              formSave={(data) => {\r\n                handleModified(data)\r\n              }}\r\n              hideColumns={hideColumns}\r\n              productData={props.productData}\r\n            />\r\n          </Route>\r\n        )}\r\n        {defaultAddForm && (\r\n          <Route path=\"*\">\r\n            <StyledURLNotFound>\r\n              <URLNotFound />\r\n            </StyledURLNotFound>\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableHandler\r\n\r\nconst ActionButtons = (props) => {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const {\r\n    enableFilter,\r\n    enableAdd,\r\n    ServiceClass,\r\n    loadData,\r\n    setIsLoading,\r\n    setIsFiltered,\r\n    isFiltered,\r\n    hideColumns,\r\n    setFilteredData,\r\n    filteredData,\r\n    data,\r\n    productData,\r\n  } = props\r\n  const types = ServiceClass.TYPES\r\n  const [rangeData = [], loadRangeData, clearRangeData] =\r\n    useRangeHandler(ServiceClass)\r\n  const [documentData, loadDocumentData, clearDocumentData] =\r\n    useGetDocumentsByKeyword(ServiceClass)\r\n  const [selectedFilter, setSelectedFilter] = useState(\"\")\r\n\r\n  const [filterValue, setFilterValue] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    setFilteredData(rangeData)\r\n  }, [rangeData])\r\n\r\n  useEffect(() => {\r\n    setFilteredData(documentData)\r\n  }, [documentData])\r\n  useEffect(() => {\r\n    clearRangeData()\r\n    clearDocumentData()\r\n  }, [selectedFilter])\r\n\r\n  useEffect(() => {\r\n    if (selectedFilter !== \"NONE\" && filterValue !== \"\") {\r\n      loadDocumentData(selectedFilter, filterValue)\r\n    }\r\n  }, [filterValue, selectedFilter])\r\n\r\n  const sorted = (_data = []) => {\r\n    return _data.sort((a, b) => {\r\n      const dateA = a[SchedulersClass.DATE_START]\r\n      const dateB = b[SchedulersClass.DATE_START]\r\n      const formatA = new Date(formatDateFromDatabase(dateA))\r\n      const formatB = new Date(formatDateFromDatabase(dateB))\r\n      return formatB.getTime() - formatA.getTime()\r\n    })\r\n  }\r\n\r\n  const handleExportExcel = async (sched, branch) => {\r\n    const _schedules = sorted(sched)\r\n    const newProductData = await NewProductsClass.getData()\r\n    const defaultSheet = await segregateAdvanceOrders(\r\n      _schedules,\r\n      productData,\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    console.log(\"default\", defaultSheet)\r\n    const [cashSheet, cashTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => {\r\n        const source = displayPaymentProp(\r\n          obj[SchedulersClass.SOURCE],\r\n          obj,\r\n          SchedulersClass.SOURCE\r\n        )\r\n        return source === \"Cash\"\r\n      }),\r\n      productData,\r\n      \"CASH\",\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    const [rSheet, rTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"R\"),\r\n      productData,\r\n      \"R\",\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    const [spwdSheet, spwdTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"SPWD\"),\r\n      productData,\r\n      \"SPWD\",\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    const [ddSheet, ddTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"D/O\"),\r\n      productData,\r\n      \"DO\",\r\n      branch,\r\n      newProductData\r\n    )\r\n    const [wbSheet, wbTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => obj[SchedulersClass.ORDER_VIA_WEBSITE]),\r\n      productData,\r\n      \"WB\",\r\n      branch,\r\n      newProductData\r\n    )\r\n    const [ppSheet, ppTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"PP\"),\r\n      productData,\r\n      \"PP\",\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    const [orderVia, orderViaTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => obj[SchedulersClass.ORDER_VIA]),\r\n      productData,\r\n      \"DIRECT\",\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    const [ppGF, ppGFTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"GBF\"),\r\n      productData,\r\n      \"PP GBF\",\r\n      branch,\r\n      newProductData\r\n    )\r\n    const [ppMMF, ppMMFTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"MMF\"),\r\n      productData,\r\n      \"PP MMF\",\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    const [ppDN, ppDNTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"DN\"),\r\n      productData,\r\n      \"PP DN\",\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    const [ppFP, ppFPTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"FP\"),\r\n      productData,\r\n      \"PP FP\",\r\n      branch,\r\n      newProductData\r\n    )\r\n    const [ppZAP, ppZAPTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"ZAP\"),\r\n      productData,\r\n      \"PP ZAP\",\r\n      branch,\r\n      newProductData\r\n    )\r\n\r\n    const [orderViaWB, orderViaWBTotal] = await schedulerExcel(\r\n      _schedules.filter(\r\n        (obj) =>\r\n          obj[SchedulersClass.ORDER_VIA_WEBSITE] === \"[ ZAP ] ZAP\" ||\r\n          obj[SchedulersClass.ORDER_VIA_PARTNER] === \"[ ZAP ] ZAP\"\r\n      ),\r\n      productData,\r\n      \"WB ZAP\",\r\n      branch\r\n    )\r\n\r\n    const sumRCSheet = {}\r\n    for (const obj of _schedules) {\r\n      const formatDateFromD = formatDateFromDatabase(\r\n        obj[SchedulersClass.DATE_START]\r\n      )\r\n      const dateSheet = formatDateDash(formatDateFromD).substring(0, 5)\r\n      const sheetName = `${dateSheet} RC SUM`\r\n      if (typeof sumRCSheet[sheetName] === \"undefined\") {\r\n        sumRCSheet[sheetName] = [\r\n          [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n          [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n          [formatDateLong(formatDateFromD)],\r\n          [],\r\n          [\"REVENUE CHANNEL REPORT\"],\r\n          [\"CODE\", \"R/C\", \"TOTAL\", \"COLLECTIBLES\", \"AMOUNT PAID\"],\r\n        ]\r\n      }\r\n\r\n      const dSummary = orderViaTotal.find((row) => row.date === dateSheet)\r\n      const ppGFSummary = ppGFTotal.find((row) => row.date === dateSheet)\r\n      const ppMMFSummary = ppMMFTotal.find((row) => row.date === dateSheet)\r\n      const ppDNSummary = ppDNTotal.find((row) => row.date === dateSheet)\r\n      const ppFPSummary = ppFPTotal.find((row) => row.date === dateSheet)\r\n      const ppZAPSummary = ppZAPTotal.find((row) => row.date === dateSheet)\r\n      const wbSummary = orderViaWBTotal.find((row) => row.date === dateSheet)\r\n      if (sumRCSheet[sheetName].length === 6) {\r\n        if (dSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"DR\",\r\n            dSummary?.code,\r\n            produceAmount(dSummary?.totalDue),\r\n            produceAmount(dSummary?.collectibles),\r\n            produceAmount(dSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\"DR\", \"DIRECT\", \"0.00\", \"0.00\", \"0.00\"])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 7) {\r\n        if (ppGFSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP GBF\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppGFSummary?.totalDue),\r\n            produceAmount(ppGFSummary?.collectibles),\r\n            produceAmount(ppGFSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP GF\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 8) {\r\n        if (ppMMFSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP MMF\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppMMFSummary?.totalDue),\r\n            produceAmount(ppMMFSummary?.collectibles),\r\n            produceAmount(ppMMFSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP MMF\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 9) {\r\n        if (ppDNSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP DN\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppDNSummary?.totalDue),\r\n            produceAmount(ppDNSummary?.collectibles),\r\n            produceAmount(ppDNSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP DN\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 10) {\r\n        if (ppFPSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP FP\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppFPSummary?.totalDue),\r\n            produceAmount(ppFPSummary?.collectibles),\r\n            produceAmount(ppFPSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP FP\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 11) {\r\n        if (wbSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"WB\",\r\n            wbSummary?.code,\r\n            produceAmount(wbSummary?.totalDue),\r\n            produceAmount(wbSummary?.collectibles),\r\n            produceAmount(wbSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\"WB\", \"WEBSITE\", \"0.00\", \"0.00\", \"0.00\"])\r\n        }\r\n      }\r\n\r\n      if (sumRCSheet[sheetName].length === 12) {\r\n        const defaultValueIfNull = {\r\n          totalDue: 0,\r\n          amountPaid: 0,\r\n          collectibles: 0,\r\n        }\r\n        const { totalDue, totalAmountPaid, totalCollectibles } =\r\n          calculateTotalRevChannel([\r\n            dSummary || defaultValueIfNull,\r\n            ppGFSummary || defaultValueIfNull,\r\n            ppMMFSummary || defaultValueIfNull,\r\n            ppDNSummary || defaultValueIfNull,\r\n            ppFPSummary || defaultValueIfNull,\r\n            wbSummary || defaultValueIfNull,\r\n          ])\r\n        sumRCSheet[sheetName].push([\r\n          \"TOTAL:\",\r\n          \"\",\r\n          produceAmount(totalDue),\r\n          produceAmount(totalCollectibles),\r\n          produceAmount(totalAmountPaid),\r\n        ])\r\n      }\r\n    }\r\n\r\n    const salesSummary = await produceSalesSummary1(_schedules, branch)\r\n    const salesSummary2 = await produceSalesSummary2(_schedules, branch)\r\n\r\n    ExportService.exportExcelReports({\r\n      ...defaultSheet,\r\n      ...cashSheet,\r\n      ...rSheet,\r\n      ...ppSheet,\r\n      ...ppGF,\r\n      ...ppMMF,\r\n      ...ppDN,\r\n      ...ppFP,\r\n      ...spwdSheet,\r\n      ...ddSheet,\r\n      ...wbSheet,\r\n      ...sumRCSheet,\r\n      ...salesSummary,\r\n      ...salesSummary2,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <StyledContainer enableFilter={enableFilter} wrap>\r\n      <StyledLeftContent enableFilter={enableFilter}>\r\n        <FilterOptions\r\n          ServiceClass={ServiceClass}\r\n          isFiltered={isFiltered}\r\n          setIsFiltered={setIsFiltered}\r\n          hideColumns={hideColumns}\r\n          valueSelected={(data) => {\r\n            setFilterValue(\"\")\r\n            setSelectedFilter(data)\r\n          }}\r\n        />\r\n        {selectedFilter !== \"NONE\" && (\r\n          <Space>\r\n            <CustomTitle\r\n              typographyType=\"text\"\r\n              type=\"secondary\"\r\n              label={`${ServiceClass.LABELS[selectedFilter]} :`}\r\n            />\r\n            {types[selectedFilter] === DATE_TYPE && (\r\n              <CustomRangePicker\r\n                format=\"MM/DD/YYYY\"\r\n                onChange={(dates) => {\r\n                  if (dates) {\r\n                    loadRangeData(dates, selectedFilter)\r\n                  } else {\r\n                    clearRangeData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.SALES_TYPE && (\r\n              <AutoSelect\r\n                value={filterValue}\r\n                options={[\"R\", \"D/O\", \"D/PM\", \"D/IR\", \"D/S\", , \"SPWD\"]}\r\n                onChange={(value) => {\r\n                  setFilterValue(value)\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.REVENUE_CHANNEL && (\r\n              <AutoSelect\r\n                value={filterValue}\r\n                options={[\"DR\", \"PP\", \"WB\"]}\r\n                onChange={(value) => {\r\n                  setFilterValue(value)\r\n                }}\r\n              />\r\n            )}\r\n            {selectedFilter === SchedulersClass.UTAK_NO && (\r\n              <CustomInput\r\n                onChange={(e) => {\r\n                  if (e.target.value) {\r\n                    loadDocumentData(SchedulersClass.UTAK_NO, e.target.value)\r\n                  } else {\r\n                    clearDocumentData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.PARTNER_MERCHANT_ORDER_NO && (\r\n              <CustomInput\r\n                onChange={(e) => {\r\n                  if (e.target.value) {\r\n                    loadDocumentData(\r\n                      SchedulersClass.PARTNER_MERCHANT_ORDER_NO,\r\n                      e.target.value\r\n                    )\r\n                  } else {\r\n                    clearDocumentData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.CUSTOMER && (\r\n              <CustomInput\r\n                onChange={(e) => {\r\n                  if (e.target.value) {\r\n                    loadDocumentData(SchedulersClass.CUSTOMER, e.target.value)\r\n                  } else {\r\n                    clearDocumentData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {selectedFilter === SchedulersClass.MODE_PAYMENT && (\r\n              <CustomInput\r\n                onChange={(e) => {\r\n                  if (e.target.value) {\r\n                    loadDocumentData(\r\n                      SchedulersClass.MODE_PAYMENT,\r\n                      e.target.value\r\n                    )\r\n                  } else {\r\n                    clearDocumentData()\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n          </Space>\r\n        )}\r\n        <Space>\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<PrinterOutlined />}\r\n          />\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<FileExcelOutlined />}\r\n            onClick={async () => {\r\n              if (isFiltered) {\r\n                if (selectedFilter === SchedulersClass.REVENUE_CHANNEL) {\r\n                  const defaultSheet = await schedulerExcel(\r\n                    filteredData,\r\n                    productData\r\n                  )\r\n                  ExportService.exportExcelReports(defaultSheet)\r\n                } else {\r\n                  handleExportExcel(filteredData, user?.branchSelected)\r\n                }\r\n              } else {\r\n                handleExportExcel(data, user?.branchSelected)\r\n              }\r\n            }}\r\n          />\r\n        </Space>\r\n      </StyledLeftContent>\r\n      <StyledRightContent enableAdd={enableAdd}>\r\n        <MainButton\r\n          Icon={<ReloadOutlined />}\r\n          label=\"\"\r\n          type=\"default\"\r\n          shape=\"circle\"\r\n          onClick={() => {\r\n            loadData({}, user?.branchSelected, true) // refresh data if true\r\n            setIsLoading(true)\r\n          }}\r\n        />\r\n        {props?.ServiceClass.COLLECTION_NAME ===\r\n          SchedulersClass.COLLECTION_NAME && (\r\n          <TransactionGroupPayment />\r\n          // <MainButton label=\"Add Group Payment\" type=\"default\" />\r\n        )}\r\n        {props?.ServiceClass.COLLECTION_NAME ===\r\n        SchedulersClass.COLLECTION_NAME ? (\r\n          <DropdownChannel history={history} path={path} />\r\n        ) : (\r\n          <MainButton\r\n            label=\"Add\"\r\n            onClick={() => {\r\n              history.push(`${path}/add`)\r\n            }}\r\n          />\r\n        )}\r\n      </StyledRightContent>\r\n    </StyledContainer>\r\n  )\r\n}\r\n\r\nconst MobileTableView = (props) => {\r\n  return <div>Mobile view</div>\r\n}\r\n\r\nconst StyledURLNotFound = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledContainer = styled(Space)`\r\n  display: flex;\r\n  width: 100%;\r\n  padding-bottom: 1rem;\r\n  justify-content: ${(props) =>\r\n    props?.enableFilter ? \"space-between\" : \"flex-end\"};\r\n`\r\nconst StyledLeftContent = styled(Space)`\r\n  display: ${(props) => (props.enableFilter ? \"flex\" : \"none\")};\r\n  justify-content: flex-start;\r\n`\r\nconst StyledRightContent = styled(Space)`\r\n  display: ${(props) => (props.enableAdd ? \"flex\" : \"none\")};\r\n  justify-content: flex-end;\r\n`\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\SettingsTableHandler\\helpers.js",["1280"],"import { AMOUNT_TYPE } from \"Constants/types\"\r\n\r\nexport const handleTitle = (ServiceClass, key) => {\r\n  if (typeof ServiceClass?.LABELS === \"undefined\") {\r\n    return key\r\n  } else {\r\n    const title = ServiceClass?.LABELS[key] ? ServiceClass?.LABELS[key] : key\r\n    return title\r\n  }\r\n}\r\n\r\nexport const handleAlignment = (ServiceClass, key, defaultColumnAlign) => {\r\n  let result = defaultColumnAlign\r\n  if (typeof ServiceClass?.TYPES === \"undefined\") {\r\n    return \"left\"\r\n  }\r\n\r\n  switch (ServiceClass.TYPES[key]) {\r\n    case AMOUNT_TYPE:\r\n      result = \"right\"\r\n  }\r\n  return result\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringFieldArray.js",["1281","1282"],"import { Space } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport EditableTag from \"../EditableTagGroup\"\r\n\r\nfunction StringFieldArray({ ServiceClass, name, ...rest }) {\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [tags, setTags] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (isTouched === true) {\r\n      rest.handleModification(tags, name)\r\n    }\r\n  }, [isTouched, tags])\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [ServiceClass])\r\n\r\n  const loadDropdowns = async () => {\r\n    if (typeof ServiceClass.getDropdowns === \"undefined\") return\r\n    const _dropdowns = await ServiceClass.getDropdowns()\r\n    if (typeof _dropdowns[name] !== \"undefined\") {\r\n      setDropdowns(_dropdowns[name])\r\n    }\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\">\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <EditableTag\r\n        setIsTouched={setIsTouched}\r\n        tags={rest.collectionData[name]}\r\n        exposeData={(data) => setTags(data)}\r\n        dropdowns={dropdowns} //if field contains data dropdowns when modifying tags, The element should be select if contains a dropdown otherwise input if not.\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default StringFieldArray\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\BooleanField.js",["1283","1284"],"import { Space, Switch } from \"antd\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\nfunction BooleanField({ ServiceClass, name, ...rest }) {\r\n  const [value, setValue] = useState(\"\")\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  useEffect(() => {\r\n    if (rest.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  const handleChange = (value) => {\r\n    setValue(value)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  return (\r\n    <Space direction=\"vertical\">\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <Space>\r\n        <Switch checked={value} onChange={handleChange} />\r\n        {value ? \"Active\" : \"Inactive\"}\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default BooleanField\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\StringField.js",["1285","1286"],"import CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\nfunction StringField({ ServiceClass, name, ...rest }) {\r\n  const [value, setValue] = useState(\"\")\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  useEffect(() => {\r\n    if (rest?.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest?.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CustomTitle typographyType=\"text\">\r\n        {ServiceClass.LABELS[name]}\r\n      </CustomTitle>\r\n      <CustomInput\r\n        placeholder={ServiceClass.LABELS[name]}\r\n        value={value}\r\n        onChange={handleChange}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StringField\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\useModifiedCount.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\IncidentReportClass.js",["1287","1288"],"import { ARRAY_OF_STRING_TYPE, DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport { producedIncidents } from \"Helpers/collectionData\"\r\nimport Base from \"Services/Base\"\r\n\r\nexport default class IncidentReportClass {\r\n  static COLLECTION_NAME = \"schedules\"\r\n\r\n  static async getDataBySort(customSort = [], branch) {\r\n    const data = await Base.getDataNotEqualToFieldname(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.DATE, \"desc\"],\r\n      \"others.Incidents\",\r\n      \"\"\r\n    )\r\n    return producedIncidents(data, branch)\r\n  }\r\n\r\n  static _ID = \"_id\"\r\n  static DATE_AND_TIME = \"dateAndTime\"\r\n  static DATE = \"dateOrderPlaced\"\r\n  static ACTION_TAKEN = \"actionTaken\"\r\n  static AMOUNT = \"amount\"\r\n  static CLIENT_NAME = \"clientName\"\r\n  static CONTACT_NO = \"contactNo\"\r\n  static ON_DUTY = \"onDuty\"\r\n  static ORDER_NO = \"orderNo\"\r\n  static BRIEF_DESCRIPTION = \"briefDescription\"\r\n\r\n  static PROPERTIES = [\r\n    this.DATE,\r\n    this.ORDER_NO,\r\n    this.CLIENT_NAME,\r\n    this.CONTACT_NO,\r\n    this.BRIEF_DESCRIPTION,\r\n    this.ON_DUTY,\r\n  ]\r\n\r\n  static LABELS = {\r\n    [this.BRANCH_ADDRESS]: \"Address\",\r\n    [this.BRANCH_NAME]: \"Branch\",\r\n    [this.DATE]: \"Date\",\r\n    [this.ORDER_NO]: \"Order #\",\r\n    [this.CLIENT_NAME]: \"Client Name\",\r\n    [this.CONTACT_NO]: \"Contact No\",\r\n    [this.BRIEF_DESCRIPTION]: \"Brief Description\",\r\n    [this.ON_DUTY]: \"On Duty\",\r\n  }\r\n  static TYPES = {\r\n    [this.DATE]: DATE_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FormHandler\\ObjectFieldArray.js",["1289","1290","1291","1292","1293"],"import { Input, message, Space, Tag } from \"antd\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { AMOUNT_TYPE } from \"Constants/types\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\n\r\nfunction ObjectFieldArray({ ServiceClass, name, ...rest }) {\r\n  const inputRef = useRef(null)\r\n  const [value, setValue] = useState([])\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [editable, setEditable] = useState(null)\r\n  const properties = ServiceClass.OBJECTS[name][\"properties\"] || []\r\n  const types = ServiceClass.OBJECTS[name][\"types\"] || {}\r\n  const title = ServiceClass.OBJECTS[name][\"title\"] // this title will serve as an id field of each sub object\r\n  useEffect(() => {\r\n    if (rest?.collectionData) {\r\n      setValue(rest.collectionData[name])\r\n    }\r\n  }, [rest?.collectionData])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      rest.handleModification(value, name)\r\n    }\r\n  }, [value, isTouched])\r\n\r\n  useEffect(() => {\r\n    inputRef?.current?.focus()\r\n  }, [editable])\r\n\r\n  const handleChange = (fieldValue, key, title, data) => {\r\n    if (key === title) {\r\n      const idExist = value.find((obj) => obj[key] === fieldValue)\r\n      if (idExist) {\r\n        message.warning(`${key} already exist`)\r\n        return\r\n      }\r\n    }\r\n    const valueIndex = value.findIndex((obj) => obj[title] === data[title])\r\n    const valueCopy = [...value]\r\n    const formatValue =\r\n      types[key] === AMOUNT_TYPE ? Number(fieldValue) : fieldValue\r\n    valueCopy[valueIndex] = { ...value[valueIndex], [key]: formatValue }\r\n    setValue(valueCopy)\r\n    setIsTouched(true)\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <table style={{ width: \"100%\" }}>\r\n        <tr>\r\n          {properties.map((key) => {\r\n            return (\r\n              <th>\r\n                {\r\n                  <Tag color=\"cyan\" style={{ display: \"block\" }}>\r\n                    {ServiceClass.LABELS[key] || key}\r\n                  </Tag>\r\n                }\r\n              </th>\r\n            )\r\n          })}\r\n        </tr>\r\n        {value.map((obj) => {\r\n          return (\r\n            <tr style={{ justifyContent: \"flex-start\" }}>\r\n              {properties.map((key, index) => {\r\n                return (\r\n                  <td align={types[key] === AMOUNT_TYPE ? \"right\" : \"center\"}>\r\n                    {editable === index ? (\r\n                      <Input\r\n                        ref={inputRef}\r\n                        value={obj[key]}\r\n                        onChange={(e) => {\r\n                          handleChange(e.target.value, key, title, obj)\r\n                        }}\r\n                        onPressEnter={(e) => {\r\n                          // handleChange(e.target.value, key, title, obj[title])\r\n                          setEditable(null)\r\n                        }}\r\n                      />\r\n                    ) : (\r\n                      <Tag\r\n                        onDoubleClick={() => {\r\n                          setEditable(index)\r\n                        }}\r\n                      >\r\n                        {types[key] === AMOUNT_TYPE\r\n                          ? Number(obj[key]).toFixed(2)\r\n                          : obj[key]}\r\n                      </Tag>\r\n                    )}\r\n                  </td>\r\n                )\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n      <Space style={{ justifyContent: \"flex-end\", width: \"100%\" }}>\r\n        <Tag\r\n          color=\"cyan\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            const valueCopy = [...value]\r\n            const obj = {}\r\n            for (const key of properties) {\r\n              if (types[key] === AMOUNT_TYPE) {\r\n                obj[key] = 0\r\n              } else {\r\n                obj[key] = key\r\n              }\r\n            }\r\n            valueCopy.push(obj)\r\n            setValue(valueCopy)\r\n          }}\r\n        >\r\n          <PlusOutlined />\r\n          Add new\r\n        </Tag>\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default ObjectFieldArray\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\arrayFuntions.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\produceSalesSummary2.js",["1294","1295","1296","1297","1298","1299","1300","1301"],"import { calculateBalanceScheduler } from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Helpers/dateFormat\"\r\nimport thousandsSeparators, {\r\n  replaceThousandsSeparator,\r\n} from \"Helpers/formatNumber\"\r\nimport { amountPaid, balanceDue, paymentDetails } from \"Helpers/schedulerExcel\"\r\nimport sorting from \"Helpers/sorting\"\r\nimport sumArray, {\r\n  sumNumbers,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Helpers/sumArray\"\r\nimport DepositsClass from \"Services/Classes/DepositsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport transformedSched from \"./transformedSched\"\r\n\r\nconst dateSheetName = (string) => {\r\n  return string.substring(0, 5)\r\n  // return string\r\n}\r\n\r\nexport const produceSalesSummary2 = async (schedules, branch) => {\r\n  let dateTobeFilter = \"\"\r\n\r\n  if (schedules.length > 0) {\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      schedules[0][SchedulersClass.DATE_START]\r\n    )\r\n    dateTobeFilter = dateFromDatabase\r\n  } else {\r\n    return {}\r\n  }\r\n\r\n  // this is where the data came from (firebase)\r\n  const partials = await SchedulersClass.getDataByPartialDate(\r\n    formatDateDash(dateTobeFilter),\r\n    branch\r\n  )\r\n  const payments = await transformedSched(partials, dateTobeFilter)\r\n  //------------------------------------//\r\n\r\n  let sheet = {}\r\n  const formattedDate = formatDateDash(dateTobeFilter)\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY 2`] = [\r\n    [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n    [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n    [formatDateLong(dateTobeFilter)],\r\n    [],\r\n  ]\r\n\r\n  const [A_TRANS, A_TOTAL] = produceTRANS(\r\n    payments,\r\n    formattedDate,\r\n    \"[A] TRANSACTIONS OF DATE PAYMENT - PAID - FULFILLED\"\r\n  )\r\n\r\n  const [B_TRANS, B_TOTAL] = produceTRANS(\r\n    payments,\r\n    formattedDate,\r\n    \"[B] TRANSACTIONS OF DATE PAYMENT - PAID - NOT YET FULFILLED (ADVANCE ORDERS)\"\r\n  )\r\n\r\n  const depositList = await DepositsClass.getDataByFieldNameWithBranch(\r\n    DepositsClass.DATE_PAID_STRING,\r\n    formattedDate,\r\n    branch\r\n  )\r\n  const additionalCTrans = []\r\n  if (depositList.length > 0) {\r\n    const details = { ...depositList[0] }\r\n    const _data = {\r\n      [SchedulersClass.DATE_ORDER_PLACED]: \"\",\r\n      [SchedulersClass.DATE_START]: \"\",\r\n      [SchedulersClass.DATE_PAYMENT]: formatDateFromDatabase(\r\n        details[DepositsClass.DATE_DEPOSIT]\r\n      ),\r\n      [SchedulersClass.UTAK_NO]: \"\",\r\n      [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: \"\",\r\n      [SchedulersClass.ZAP_NUMBER]: \"\",\r\n      [SchedulersClass.MODE_PAYMENT]: \"Cash\",\r\n      [SchedulersClass.SOURCE]: \"Cash\",\r\n      [SchedulersClass.REF_NO]: \"\",\r\n      [SchedulersClass.ACCOUNT_NUMBER]: `${\r\n        details[DepositsClass.ACCOUNT_NUMBER]\r\n      } `,\r\n      [SchedulersClass.AMOUNT_PAID]: details[DepositsClass.TOTAL_DEPOSIT],\r\n      [SchedulersClass.STATUS]: \"Deposited\",\r\n    }\r\n    additionalCTrans.push(_data)\r\n  }\r\n  const [C_TRANS, C_TOTAL] = produceTRANS(\r\n    [...payments, ...additionalCTrans],\r\n    formattedDate,\r\n    \"[C] COLLECTIONS ON PREVIOUS BALANCES\"\r\n  )\r\n\r\n  const SUMMARY = produceSummary(\r\n    A_TOTAL,\r\n    B_TOTAL,\r\n    C_TOTAL,\r\n    A_TRANS,\r\n    B_TRANS,\r\n    C_TRANS\r\n  )\r\n\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY 2`] = [\r\n    ...sheet[`${dateSheetName(formattedDate)} SALES SUMMARY 2`],\r\n    ...A_TRANS,\r\n    ...B_TRANS,\r\n    ...C_TRANS,\r\n    ...SUMMARY,\r\n  ]\r\n\r\n  return sheet\r\n}\r\n\r\nconst produceTRANS = (schedules, formattedDate, title = \"\") => {\r\n  const headers = [\r\n    \"DATE PLACED\",\r\n    \"SERVE DATE\",\r\n    \"UTAK #\",\r\n    \"PP#\",\r\n    \"DATE PAID\",\r\n    \"MODE\",\r\n    \"SOURCE\",\r\n    \"REF #\",\r\n    \"ACCT #\",\r\n    \"AMOUNT PAID\",\r\n  ]\r\n\r\n  const blankColumns = [...new Array(10)].map((d, i) => {\r\n    if (i === 0) return \"ORDER DETAILS \"\r\n    if (i === 4) return \"PAYMENT DETAILS \"\r\n  })\r\n\r\n  const TRANS = [[], [title], blankColumns, headers]\r\n\r\n  const amountPaidList = []\r\n\r\n  for (const originalObj of sorting(schedules, SchedulersClass.UTAK_NO)) {\r\n    let obj = { ...originalObj }\r\n    const datePlacedDateFormat = obj[SchedulersClass.DATE_ORDER_PLACED]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_ORDER_PLACED])\r\n      : \"\"\r\n    const dateServeDateFormat = obj[SchedulersClass.DATE_START]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_START])\r\n      : \"\"\r\n    const datePayment = obj[SchedulersClass.DATE_PAYMENT]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_PAYMENT])\r\n      : \"\"\r\n\r\n    const dateEquality =\r\n      dateServeDateFormat === datePlacedDateFormat &&\r\n      dateServeDateFormat === datePayment &&\r\n      datePlacedDateFormat === datePayment\r\n\r\n    switch (title) {\r\n      case \"[A] TRANSACTIONS OF DATE PAYMENT - PAID - FULFILLED\":\r\n        if (\r\n          obj[SchedulersClass.MODE_PAYMENT] === \"OFT\" &&\r\n          obj?.collectibles === 0 &&\r\n          datePayment === formattedDate &&\r\n          dateEquality === true\r\n        ) {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n      case \"[B] TRANSACTIONS OF DATE PAYMENT - PAID - NOT YET FULFILLED (ADVANCE ORDERS)\":\r\n        if (obj?.collectibles === 0 && dateEquality === false) {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n      default:\r\n        if (obj?.collectibles > 0 && datePayment === formattedDate) {\r\n          if (\r\n            obj[SchedulersClass.CASH_FOR_DEPOSIT] === \"\" ||\r\n            obj[SchedulersClass.CASH_FOR_DEPOSIT] === \"Paid\"\r\n          ) {\r\n            TRANS.push([\r\n              datePlacedDateFormat,\r\n              dateServeDateFormat,\r\n              obj[SchedulersClass.UTAK_NO],\r\n              obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n                obj[SchedulersClass.ZAP_NUMBER],\r\n              datePayment,\r\n              obj[SchedulersClass.MODE_PAYMENT],\r\n              obj[SchedulersClass.SOURCE],\r\n              obj[SchedulersClass.REF_NO],\r\n              obj[SchedulersClass.ACCOUNT_NUMBER],\r\n              thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n            ])\r\n            amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n          }\r\n        }\r\n\r\n        if (obj[SchedulersClass.STATUS] === \"Deposited\") {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            \"\",\r\n            // obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n            //   obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n    }\r\n  }\r\n\r\n  const total = sumNumbers(amountPaidList).toFixed(2)\r\n  TRANS.push([\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"Total\",\r\n    thousandsSeparators(total),\r\n  ])\r\n\r\n  return [TRANS, total]\r\n}\r\n\r\nconst produceSummary = (\r\n  A_TOTAL,\r\n  B_TOTAL,\r\n  C_TOTAL,\r\n  A_TRANS,\r\n  B_TRANS,\r\n  C_TRANS\r\n) => {\r\n  const aTotal = A_TOTAL.replace(/,/g, \"\")\r\n  const bTotal = B_TOTAL.replace(/,/g, \"\")\r\n  const cTotal = C_TOTAL.replace(/,/g, \"\")\r\n  const paymentReceivedTotal = Number(aTotal) + Number(bTotal) + Number(cTotal)\r\n  const summaryA = produceReportASummary(A_TRANS, B_TRANS, C_TRANS)\r\n  console.log(\"A_TRANS\", A_TRANS)\r\n  console.log(\"B_TRANS\", B_TRANS)\r\n  console.log(\"C_TRANS\", C_TRANS)\r\n  const SUMMARY = [\r\n    [],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"SUMMARY\", \"\"],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"SUMMARY OF REPORT A\",\r\n      \"\",\r\n      \"\",\r\n      \"PAYMENT RECEIVED\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"BDO / 981\",\r\n      summaryA[0],\r\n      \"\",\r\n      \"A\",\r\n      thousandsSeparators(A_TOTAL),\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"BDO / 609\",\r\n      summaryA[2],\r\n      \"\",\r\n      \"B\",\r\n      thousandsSeparators(A_TOTAL),\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"KP GCash\",\r\n      summaryA[1],\r\n      \"\",\r\n      \"C\",\r\n      thousandsSeparators(B_TOTAL),\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"MBTC-895\",\r\n      summaryA[3],\r\n      \"\",\r\n      \"TOTAL\",\r\n      thousandsSeparators(paymentReceivedTotal.toFixed(2)),\r\n      \"\",\r\n    ],\r\n    [\"\", \"\", \"\", \"\", \"\", \"MBTC-909\", summaryA[4], , \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\", \"TOTAL\", summaryA[5], \"\", \"\", \"\", \"\"],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      // \"TOTAL\",\r\n      // thousandsSeparators(paymentReceivedTotal.toFixed(2)),\r\n      \"\",\r\n    ],\r\n  ]\r\n  return SUMMARY\r\n}\r\n\r\nconst produceReportASummary = (A_TRANS, B_TRANS, C_TRANS) => {\r\n  const orderList = {\r\n    BDO: [],\r\n    KP_GCASH: [],\r\n    BDO609: [],\r\n    MBTC895: [],\r\n    MBTC909: [],\r\n  }\r\n  A_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== A_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"BDO / 609\") {\r\n          orderList[\"BDO609\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"MBTC-895\") {\r\n          orderList[\"MBTC895\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"MBTC-909\") {\r\n          orderList[\"MBTC909\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  B_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== B_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"BDO / 609\") {\r\n          orderList[\"BDO609\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"MBTC-895\") {\r\n          orderList[\"MBTC895\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"MBTC-909\") {\r\n          orderList[\"MBTC909\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  C_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== C_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"BDO / 609\") {\r\n          orderList[\"BDO609\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"MBTC-895\") {\r\n          orderList[\"MBTC895\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n        if (arrayData[8] === \"MBTC-909\") {\r\n          orderList[\"MBTC909\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n  const sumOfBDO = sumNumbers(orderList[\"BDO\"])\r\n  const sumOfKP_GCASH = sumNumbers(orderList[\"KP_GCASH\"])\r\n  const sumOfBDO609 = sumNumbers(orderList[\"BDO609\"])\r\n  const sumOfMBTC895 = sumNumbers(orderList[\"MBTC895\"])\r\n  const sumOfMBTC909 = sumNumbers(orderList[\"MBTC909\"])\r\n  const sumOfTotal =\r\n    sumOfBDO + sumOfKP_GCASH + sumOfBDO609 + sumOfMBTC895 + sumOfMBTC909\r\n  return [\r\n    thousandsSeparators(sumOfBDO.toFixed(2)),\r\n    thousandsSeparators(sumOfKP_GCASH.toFixed(2)),\r\n    thousandsSeparators(sumOfBDO609.toFixed(2)),\r\n    thousandsSeparators(sumOfMBTC895.toFixed(2)),\r\n    thousandsSeparators(sumOfMBTC909.toFixed(2)),\r\n    thousandsSeparators(sumOfTotal.toFixed(2)),\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentById.js",["1302"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentById(ServiceClass, id) {\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState({})\r\n  useEffect(() => {\r\n    if (id) {\r\n      loadData(id)\r\n    }\r\n  }, [id])\r\n  const loadData = async (_id) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataById(_id)\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  return [data, loadData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomPopConfirm.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\EditableTagGroup\\index.js",["1303","1304","1305"],"import { Input, message, Space, Tag } from \"antd\"\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport styled from \"styled-components\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\n\r\nfunction EditableTag({\r\n  tags = [],\r\n  exposeData = () => {},\r\n  setIsTouched = () => {},\r\n  dropdowns = [],\r\n}) {\r\n  const inputRef = useRef()\r\n  const editInputRef = useRef()\r\n  const [newTags, setNewTags] = useState([])\r\n  const [editableIndex, setEditableIndex] = useState(null)\r\n  const [visibleInput, setVisibleInput] = useState(false)\r\n  useEffect(() => {\r\n    if (tags.length > 0) {\r\n      mergeDuplicates(tags)\r\n    }\r\n  }, [tags])\r\n\r\n  useEffect(() => {\r\n    inputRef?.current?.focus()\r\n  }, [visibleInput])\r\n\r\n  useEffect(() => {\r\n    if (editableIndex) {\r\n      editInputRef?.current?.focus()\r\n    }\r\n  }, [editableIndex])\r\n\r\n  useEffect(() => {\r\n    exposeData(newTags)\r\n  }, [newTags])\r\n\r\n  const mergeDuplicates = (arrayOfStrings) => {\r\n    const newArrayOfStrings = []\r\n    for (const value of arrayOfStrings) {\r\n      if (!newArrayOfStrings.includes(value)) {\r\n        newArrayOfStrings.push(value)\r\n      }\r\n    }\r\n    setNewTags(newArrayOfStrings)\r\n  }\r\n\r\n  const addTag = (value) => {\r\n    if (typeof value === \"object\") {\r\n      setVisibleInput(false)\r\n      setIsTouched(true)\r\n      return\r\n    }\r\n    if (value.trim() !== \"\") {\r\n      const _tags = [...newTags]\r\n      _tags.push(value)\r\n      mergeDuplicates(_tags)\r\n      setIsTouched(true)\r\n    }\r\n    setVisibleInput(false)\r\n  }\r\n\r\n  const removeTag = (e, value) => {\r\n    e.preventDefault()\r\n    let _tags = [...newTags.filter((tag) => tag !== value)]\r\n    setNewTags(_tags)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const editTag = (value, index) => {\r\n    if (newTags.includes(value)) {\r\n      message.warning(`${value} already exist`)\r\n      return\r\n    }\r\n    let _tags = [...newTags]\r\n    _tags[index] = value\r\n    setNewTags(_tags)\r\n    setIsTouched(true)\r\n  }\r\n  return (\r\n    <Space wrap>\r\n      {newTags.map((tag, index) => {\r\n        return index === editableIndex ? (\r\n          <RenderEditField\r\n            dropdowns={dropdowns}\r\n            tag={tag}\r\n            index={index}\r\n            editTag={editTag}\r\n            setEditableIndex={setEditableIndex}\r\n            editInputRef={editInputRef}\r\n          />\r\n        ) : (\r\n          <Tag closable onClose={(e) => removeTag(e, tag)}>\r\n            <span onDoubleClick={() => setEditableIndex(index)}>{tag}</span>\r\n          </Tag>\r\n        )\r\n      })}\r\n      {visibleInput ? (\r\n        <RenderAddField\r\n          dropdowns={dropdowns}\r\n          addTag={addTag}\r\n          inputRef={inputRef}\r\n        />\r\n      ) : (\r\n        <StyledAddButton onClick={() => setVisibleInput(true)} color=\"cyan\">\r\n          <PlusOutlined /> New\r\n        </StyledAddButton>\r\n      )}\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst RenderEditField = (props) => {\r\n  if (props.dropdowns.length > 0) {\r\n    return (\r\n      <AutoSelect\r\n        value={props.tag}\r\n        options={[...props.dropdowns]}\r\n        onChange={(value) => {\r\n          props.editTag(value, props.index)\r\n          props.setEditableIndex(null)\r\n        }}\r\n        onBlur={() => props.setEditableIndex(null)}\r\n        onPressEnter={() => props.setEditableIndex(null)}\r\n        ref={props.editInputRef}\r\n      />\r\n    )\r\n  } else {\r\n    return (\r\n      <Input\r\n        value={props.tag}\r\n        ref={props.editInputRef}\r\n        onChange={(e) => {\r\n          props.editTag(e.target.value, props.index)\r\n        }}\r\n        onBlur={() => props.setEditableIndex(null)}\r\n        onPressEnter={() => props.setEditableIndex(null)}\r\n        ref={props.editInputRef}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst RenderAddField = (props) => {\r\n  if (props.dropdowns.length > 0) {\r\n    return (\r\n      <AutoSelect\r\n        options={[...props.dropdowns]}\r\n        onChange={(value) => {\r\n          props.addTag(value)\r\n        }}\r\n        onBlur={(value) => props.addTag(value)}\r\n        onPressEnter={(value) => props.addTag(value)}\r\n        ref={props.inputRef}\r\n      />\r\n    )\r\n  } else {\r\n    return (\r\n      <Input\r\n        onPressEnter={(e) => props.addTag(e.target.value)}\r\n        onBlur={(e) => props.addTag(e.target.value)}\r\n        size=\"small\"\r\n        ref={props.inputRef}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst StyledAddButton = styled(Tag)`\r\n  cursor: pointer;\r\n`\r\n\r\nexport default EditableTag\r\n\r\n// <AutoSelect\r\n//   value={tag}\r\n//   options={[\"Dashboard\", \"Ronac\"]}\r\n//   onChange={(value) => {\r\n//     editTag(value, index)\r\n//     setEditableIndex(null)\r\n//   }}\r\n//   onBlur={() => setEditableIndex(null)}\r\n//   onPressEnter={() => setEditableIndex(null)}\r\n// />\r\n// <Input\r\n//   value={tag}\r\n//   ref={editInputRef}\r\n//   onChange={(e) => {\r\n//     editTag(e.target.value, index)\r\n//   }}\r\n//   onBlur={() => setEditableIndex(null)}\r\n//   onPressEnter={() => setEditableIndex(null)}\r\n// />\r\n\r\n// <AutoSelect\r\n//   options={[\"Libis\", \"Ronac\"]}\r\n//   onChange={(value) => addTag(value)}\r\n//   onPressEnter={(value) => addTag(value)}\r\n//   onBlur={(value) => addTag(value)}\r\n// />\r\n// <Input\r\n//   onPressEnter={(e) => addTag(e.target.value)}\r\n//   onBlur={(e) => addTag(e.target.value)}\r\n//   size=\"small\"\r\n//   ref={inputRef}\r\n// />\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocuments.js",["1306"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\n\r\nexport default function useGetDocuments(ServiceClass, config) {\r\n  const { setError, setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [data, setData] = useState([])\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [ServiceClass])\r\n  const loadData = async (_data = {}) => {\r\n    // this is for static data changes triggered from formHandler\r\n    if (Object.keys(_data).length > 0) {\r\n      const _dataIndex = data.findIndex(\r\n        (d) => d[ServiceClass._ID] === _data[ServiceClass._ID]\r\n      )\r\n      // this is for new added data in the table\r\n      // if (Object.keys(_dataIndex || {}).length === 0) {\r\n      //   const newData = data.splice(0, 0, _data)\r\n      //   setData(newData)\r\n      //   return\r\n      // }\r\n      const newData = arrayReplace(data, _dataIndex, _data)\r\n      setData(newData)\r\n      return\r\n    }\r\n\r\n    // this is for requesting of data from database\r\n    const customSort = config?.customSort ? config.customSort : []\r\n    const bySort = typeof config?.bySort === \"undefined\" ? false : config.bySort\r\n    setIsLoading(true)\r\n    try {\r\n      if (bySort) {\r\n        const _data = await ServiceClass.getDataBySort(\r\n          customSort,\r\n          user.branchSelected\r\n        )\r\n        setData(_data)\r\n        setIsLoading(false)\r\n      } else {\r\n        const _data = await ServiceClass.getData(user.branchSelected)\r\n        setData(_data)\r\n        setIsLoading(false)\r\n      }\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n  return [data, loadData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\segregateAdvanceOrders.js",["1307","1308"],"import { displayPaymentProp } from \"Helpers/collectionData\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport schedulerExcel from \"Helpers/schedulerExcel\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nexport default async function (\r\n  schedules,\r\n  productData,\r\n  branch,\r\n  newProductData = []\r\n) {\r\n  let dateTobeFilter = \"\"\r\n  if (schedules.length > 0) {\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      schedules[0][SchedulersClass.DATE_START]\r\n    )\r\n    dateTobeFilter = dateFromDatabase\r\n  } else {\r\n    return {}\r\n  }\r\n\r\n  const datePlacedSched = await SchedulersClass.getDataByDate(\r\n    [dateTobeFilter, dateTobeFilter],\r\n    SchedulersClass.DATE_ORDER_PLACED,\r\n    branch\r\n  )\r\n  // const _advanceOrders = advanceOrders(datePlacedSched)\r\n  // const _notAdvanceOrders = notAdvanceOrders(schedules)\r\n  const advanceSheet = await schedulerExcel(\r\n    datePlacedSched,\r\n    productData,\r\n    \"\",\r\n    branch,\r\n    newProductData\r\n  )\r\n  const notAdvanceSheet = await schedulerExcel(\r\n    schedules,\r\n    productData,\r\n    \"\",\r\n    branch,\r\n    newProductData\r\n  )\r\n  const defaultSheet = await schedulerExcel(\r\n    schedules,\r\n    productData,\r\n    \"\",\r\n    branch,\r\n    newProductData\r\n  )\r\n  let sheetName = \"\"\r\n  const defaultHeaderAndData = []\r\n  const defaultFooter = []\r\n\r\n  for (const key in defaultSheet) {\r\n    const arrayData = defaultSheet[key]\r\n    sheetName = key\r\n    arrayData.forEach((arrayList, index) => {\r\n      if (index >= 0 && index <= 4) {\r\n        defaultHeaderAndData.push(arrayList)\r\n      }\r\n      if (arrayList[0] === \"__\") {\r\n        defaultFooter.push(arrayList)\r\n      }\r\n    })\r\n  }\r\n\r\n  for (const key in notAdvanceSheet) {\r\n    const arrayData = notAdvanceSheet[key]\r\n    const arrayDataLength = arrayData.length\r\n    arrayData.forEach((arrayList, index) => {\r\n      if (index > 4 && index < arrayDataLength - 10) {\r\n        defaultHeaderAndData.push(arrayList)\r\n      }\r\n    })\r\n  }\r\n\r\n  for (const key in advanceSheet) {\r\n    const arrayData = advanceSheet[key]\r\n    const arrayDataLength = arrayData.length\r\n    arrayData.forEach((arrayList, index) => {\r\n      if (index > 4 && index < arrayDataLength - 10) {\r\n        defaultHeaderAndData.push(arrayList)\r\n      }\r\n    })\r\n  }\r\n  return defaultSheet\r\n  // return { [sheetName]: [...defaultHeaderAndData, ...defaultFooter] }\r\n}\r\n\r\nexport const advanceOrders = (schedules) => {\r\n  return schedules.filter((obj) => {\r\n    const date = displayPaymentProp(obj[\"date\"], obj, \"date\")\r\n    if (obj[SchedulersClass.STATUS] === \"CANCELLED\") {\r\n      return false\r\n    }\r\n    if (obj[SchedulersClass.STATUS] !== \"FULFILLED\") {\r\n      if (date !== \"undefined\") {\r\n        const dateFromD = formatDateFromDatabase(date)\r\n        const dateStartFromD = formatDateFromDatabase(\r\n          obj[SchedulersClass.DATE_START]\r\n        )\r\n        const dateNumber = new Date(dateFromD).getTime()\r\n        const dateNumberOfDateStart = new Date(dateStartFromD).getTime()\r\n\r\n        if (formatDateDash(dateFromD) === formatDateDash(dateStartFromD)) {\r\n          return false\r\n        }\r\n        return dateNumberOfDateStart <= dateNumber\r\n      }\r\n    }\r\n    return false\r\n  })\r\n}\r\nexport const notAdvanceOrders = (schedules) => {\r\n  return schedules.filter((obj) => {\r\n    const date = displayPaymentProp(obj[\"date\"], obj, \"date\")\r\n    if (obj[SchedulersClass.STATUS] === \"CANCELLED\") {\r\n      return false\r\n    }\r\n    if (obj[SchedulersClass.PARTIALS] !== \"undefined\") {\r\n      if (obj[SchedulersClass.PARTIALS].length === 0) {\r\n        return true\r\n      }\r\n    }\r\n    if (date !== \"undefined\") {\r\n      const dateFromD = formatDateFromDatabase(date)\r\n      const dateStartFromD = formatDateFromDatabase(\r\n        obj[SchedulersClass.DATE_START]\r\n      )\r\n      const dateNumber = new Date(dateFromD).getTime()\r\n      const dateNumberOfDateStart = new Date(dateStartFromD).getTime()\r\n\r\n      if (formatDateDash(dateFromD) === formatDateDash(dateStartFromD)) {\r\n        return true\r\n      }\r\n      if (dateNumberOfDateStart < dateNumber) {\r\n        if (obj[SchedulersClass.STATUS] !== \"FULFILLED\") {\r\n          return false\r\n        }\r\n        return true\r\n      }\r\n    } else {\r\n      return true\r\n    }\r\n    return false\r\n  })\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\produceSalesSummary1.js",["1309","1310","1311","1312","1313","1314","1315","1316","1317","1318"],"import { calculateBalanceScheduler } from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Helpers/dateFormat\"\r\nimport thousandsSeparators, {\r\n  replaceThousandsSeparator,\r\n} from \"Helpers/formatNumber\"\r\nimport { amountPaid, balanceDue, paymentDetails } from \"Helpers/schedulerExcel\"\r\nimport sorting from \"Helpers/sorting\"\r\nimport sumArray, {\r\n  sumNumbers,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Helpers/sumArray\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport DepositsClass from \"Services/Classes/DepositsClass\"\r\nimport transformedSched from \"./transformedSched\"\r\n\r\nconst dateSheetName = (string) => {\r\n  return string.substring(0, 5)\r\n  // return string\r\n}\r\n\r\nexport const produceSalesSummary1 = async (schedules, branch) => {\r\n  let dateTobeFilter = \"\"\r\n\r\n  if (schedules.length > 0) {\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      schedules[0][SchedulersClass.DATE_START]\r\n    )\r\n    dateTobeFilter = dateFromDatabase\r\n  } else {\r\n    return {}\r\n  }\r\n\r\n  // this is where the data came from (firebase)\r\n  const partials = await SchedulersClass.getDataByPartialDate(\r\n    formatDateDash(dateTobeFilter),\r\n    branch\r\n  )\r\n  const datePlacedSched = await SchedulersClass.getDataByDate(\r\n    [dateTobeFilter, dateTobeFilter],\r\n    SchedulersClass.DATE_ORDER_PLACED,\r\n    branch\r\n  )\r\n  const datePlacePayments = await transformedSched(\r\n    datePlacedSched,\r\n    dateTobeFilter\r\n  )\r\n  const dateServedSched = await SchedulersClass.getDataByDate(\r\n    [dateTobeFilter, dateTobeFilter],\r\n    SchedulersClass.DATE_START,\r\n    branch\r\n  )\r\n  const dateServePayments = await transformedSched(\r\n    dateServedSched,\r\n    dateTobeFilter\r\n  )\r\n\r\n  //------------------------------------//\r\n\r\n  let sheet = {}\r\n  const formattedDate = formatDateDash(dateTobeFilter)\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`] = [\r\n    [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n    [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n    [formatDateLong(dateTobeFilter)],\r\n    [],\r\n  ]\r\n\r\n  const [A_TRANS, A_TOTAL] = produceTRANS_NEW(\r\n    dateServePayments,\r\n    formattedDate,\r\n    \"[A] TRANSACTIONS OF ORDERS SERVED - PAID - FULFILLED\"\r\n  )\r\n  const [B_TRANS, B_TOTAL] = produceTRANS_NEW(\r\n    datePlacePayments,\r\n    formattedDate,\r\n    \"[B] TRANSACTIONS OF ORDERS PLACED - PAID - NOT YET FULFILLED (ADVANCE ORDERS)\"\r\n  )\r\n\r\n  const depositList = await DepositsClass.getDataByFieldNameWithBranch(\r\n    DepositsClass.DATE_PAID_STRING,\r\n    formattedDate,\r\n    branch\r\n  )\r\n\r\n  const additionalCTrans = []\r\n  if (depositList.length > 0) {\r\n    const details = { ...depositList[0] }\r\n    console.log(\"details\", details)\r\n    const _data = {\r\n      [SchedulersClass.DATE_ORDER_PLACED]: \"\",\r\n      [SchedulersClass.DATE_START]: \"\",\r\n      [SchedulersClass.DATE_PAYMENT]: formatDateFromDatabase(\r\n        details[DepositsClass.DATE_DEPOSIT]\r\n      ),\r\n      [SchedulersClass.UTAK_NO]: \"\",\r\n      [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: \"\",\r\n      [SchedulersClass.ZAP_NUMBER]: \"\",\r\n      [SchedulersClass.MODE_PAYMENT]: \"Cash\",\r\n      [SchedulersClass.SOURCE]: \"Cash\",\r\n      [SchedulersClass.REF_NO]: \"\",\r\n      [SchedulersClass.ACCOUNT_NUMBER]: `${\r\n        details[DepositsClass.ACCOUNT_NUMBER]\r\n      } `,\r\n      [SchedulersClass.AMOUNT_PAID]: details[DepositsClass.TOTAL_DEPOSIT],\r\n      [SchedulersClass.STATUS]: \"Deposited\",\r\n    }\r\n    additionalCTrans.push(_data)\r\n  }\r\n\r\n  const [C_TRANS, C_TOTAL] = produceTRANS_NEW(\r\n    [...datePlacePayments, ...additionalCTrans],\r\n    formattedDate,\r\n    \"[C] COLLECTIONS ON PREVIOUS BALANCES\"\r\n  )\r\n\r\n  const dateTobeFilterCopy = new Date(dateTobeFilter)\r\n  dateTobeFilterCopy.setDate(dateTobeFilterCopy.getDate() - 1)\r\n  const depositDList = await SchedulersClass.getDataByFieldnameWithBranch(\r\n    SchedulersClass.CASH_FOR_DEPOSIT,\r\n    true,\r\n    branch\r\n    // formatDateDash(dateTobeFilterCopy),\r\n    // branch\r\n  )\r\n  const additionalDTrans = []\r\n  const depositDates = {}\r\n  if (depositDList.length > 0) {\r\n    const paymentForDeposits = depositDList.filter((obj) => obj?.cashForDeposit)\r\n    paymentForDeposits.forEach((obj) => {\r\n      const _partials = obj?.partials || [{}]\r\n      if (_partials) {\r\n        const partialDate = _partials[0]?.date\r\n        const amountPaid = _partials[0]?.amount || 0\r\n        if (partialDate) {\r\n          const partialDateFormatD = formatDateFromDatabase(partialDate)\r\n          const partialDateString = formatDateDash(partialDateFormatD)\r\n          if (\r\n            new Date(partialDateFormatD).getTime() <=\r\n            new Date(dateTobeFilterCopy).getTime()\r\n          ) {\r\n            if (!depositDates[partialDateString]) {\r\n              depositDates[partialDateString] = [\r\n                {\r\n                  ...obj,\r\n                  [SchedulersClass.TOTAL_DUE]: amountPaid,\r\n                },\r\n              ]\r\n            } else {\r\n              depositDates[partialDateString].push({\r\n                ...obj,\r\n                [SchedulersClass.TOTAL_DUE]: amountPaid,\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    const sortedDepositDates = Object.keys(depositDates).sort((a, b) => {\r\n      const dateA = new Date(a).getTime()\r\n      const dateB = new Date(b).getTime()\r\n      return dateA - dateB\r\n    })\r\n    sortedDepositDates.forEach((dateString) => {\r\n      const paymentForDeposits = [...depositDates[dateString]]\r\n      const totalSum = sumArray(paymentForDeposits, SchedulersClass.TOTAL_DUE)\r\n      const _data = {\r\n        [SchedulersClass.DATE_ORDER_PLACED]: dateString,\r\n        [SchedulersClass.DATE_START]: dateString,\r\n        [SchedulersClass.DATE_PAYMENT]: dateString,\r\n        [SchedulersClass.UTAK_NO]: \"\",\r\n        [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: \"\",\r\n        [SchedulersClass.ZAP_NUMBER]: \"\",\r\n        [SchedulersClass.MODE_PAYMENT]: \"Cash\",\r\n        [SchedulersClass.SOURCE]: \"Cash\",\r\n        [SchedulersClass.REF_NO]: \"\",\r\n        [SchedulersClass.ACCOUNT_NUMBER]: \"Cash\",\r\n        [SchedulersClass.AMOUNT_PAID]: totalSum,\r\n        [SchedulersClass.CASH_FOR_DEPOSIT]: \"Pending\",\r\n      }\r\n      additionalDTrans.push(_data)\r\n    })\r\n  }\r\n\r\n  console.log(\"depositList\", additionalDTrans)\r\n  console.log(\"d trans\", additionalDTrans)\r\n  const [D_TRANS, D_TOTAL, D_COLLECTIBLES] = produceTRANS_NEW(\r\n    [...datePlacePayments, ...additionalDTrans],\r\n    formattedDate,\r\n    \"[D] TRANSACTIONS OF ORDERS PLACED - FULFILLED - CASH PAID (FOR DEPOSIT)\"\r\n  )\r\n\r\n  const [E_TRANS, E_TOTAL, E_COLLECTIBLES] = produceTRANS_NEW(\r\n    datePlacePayments,\r\n    formattedDate,\r\n    \"[E] TRANSACTIONS OF ORDERS PLACED - FULFILLED - NOT PAID (COLLECTIBLES)\"\r\n  )\r\n\r\n  const SUMMARY = produceSummary(\r\n    A_TOTAL,\r\n    B_TOTAL,\r\n    C_TOTAL,\r\n    D_TOTAL,\r\n    E_COLLECTIBLES,\r\n    A_TRANS,\r\n    B_TRANS,\r\n    C_TRANS\r\n  )\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`] = [\r\n    ...sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`],\r\n    ...A_TRANS,\r\n    ...B_TRANS,\r\n    ...C_TRANS,\r\n    ...D_TRANS,\r\n    ...E_TRANS,\r\n    ...SUMMARY,\r\n  ]\r\n\r\n  return sheet\r\n}\r\n\r\nconst produceSummary = (\r\n  A_TOTAL,\r\n  B_TOTAL,\r\n  C_TOTAL,\r\n  D_TOTAL,\r\n  E_COLLECTIBLES,\r\n  A_TRANS,\r\n  B_TRANS,\r\n  C_TRANS\r\n) => {\r\n  const aTotal = A_TOTAL.replace(/,/g, \"\")\r\n  const bTotal = B_TOTAL.replace(/,/g, \"\")\r\n  const cTotal = C_TOTAL.replace(/,/g, \"\")\r\n  const dTotal = D_TOTAL.replace(/,/g, \"\")\r\n  const eCollectibles = E_COLLECTIBLES.replace(/,/g, \"\")\r\n  const paymentReceivedTotal = Number(aTotal) + Number(bTotal) + Number(cTotal)\r\n  const collectiblesTotal = Number(dTotal) + Number(eCollectibles)\r\n  const summaryA = produceReportASummary(A_TRANS, B_TRANS, C_TRANS)\r\n  const SUMMARY = [\r\n    [],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"SUMMARY\"],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"SUMMARY OF REPORT A\",\r\n      \"\",\r\n      \"\",\r\n      \"PAYMENT RECEIVED\",\r\n      \"\",\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"BDO / 981\",\r\n      summaryA[0],\r\n      \"\",\r\n      \"A\",\r\n      thousandsSeparators(A_TOTAL),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"KP GCash\",\r\n      summaryA[1],\r\n      \"\",\r\n      \"B\",\r\n      thousandsSeparators(B_TOTAL),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      summaryA[2],\r\n      \"\",\r\n      \"C\",\r\n      thousandsSeparators(C_TOTAL),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      thousandsSeparators(paymentReceivedTotal.toFixed(2)),\r\n    ],\r\n    [],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"COLLECTIBLES\"],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"D\", thousandsSeparators(D_TOTAL)],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"E\",\r\n      thousandsSeparators(E_COLLECTIBLES),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      thousandsSeparators(collectiblesTotal.toFixed(2)),\r\n    ],\r\n    [],\r\n  ]\r\n  return SUMMARY\r\n}\r\n\r\nconst produceReportASummary = (A_TRANS, B_TRANS, C_TRANS) => {\r\n  const orderList = {\r\n    BDO: [],\r\n    KP_GCASH: [],\r\n  }\r\n  A_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== A_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  console.log(\"B_TRANS\", B_TRANS)\r\n  B_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== B_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  C_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== C_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n  const sumOfBDO = sumNumbers(orderList[\"BDO\"])\r\n  const sumOfKP_GCASH = sumNumbers(orderList[\"KP_GCASH\"])\r\n  const sumOfTotal = sumOfBDO + sumOfKP_GCASH\r\n  return [\r\n    thousandsSeparators(sumOfBDO.toFixed(2)),\r\n    thousandsSeparators(sumOfKP_GCASH.toFixed(2)),\r\n    thousandsSeparators(sumOfTotal.toFixed(2)),\r\n  ]\r\n}\r\n\r\n/**\r\n *\r\n * PRODUCE TRANS NEW\r\n */\r\n\r\n/**\r\n *\r\n * PRODUCE TRANS NEW\r\n */\r\n/**\r\n *\r\n * PRODUCE TRANS NEW\r\n */\r\n/**\r\n *\r\n * PRODUCE TRANS NEW\r\n */\r\n/**\r\n *\r\n * PRODUCE TRANS NEW\r\n */\r\n/**\r\n *\r\n * PRODUCE TRANS NEW\r\n */\r\n\r\nconst produceTRANS_NEW = (schedules, formattedDate, title = \"\") => {\r\n  const headers = [\r\n    \"DATE PLACED\",\r\n    \"SERVE DATE\",\r\n    \"UTAK #\",\r\n    \"PP#\",\r\n    \"DATE PAID\",\r\n    \"MODE\",\r\n    \"SOURCE\",\r\n    \"REF #\",\r\n    \"ACCT #\",\r\n    title ===\r\n    \"[E] TRANSACTIONS OF ORDERS PLACED - FULFILLED - NOT PAID (COLLECTIBLES)\"\r\n      ? \"COLLECTIBLES\"\r\n      : \"AMOUNT PAID\",\r\n  ]\r\n  if (\r\n    title ===\r\n    \"[D] TRANSACTIONS OF ORDERS PLACED - FULFILLED - CASH PAID (FOR DEPOSIT)\"\r\n  ) {\r\n    headers.push(\"STATUS\")\r\n  }\r\n\r\n  const blankColumns = [...new Array(10)].map((d, i) => {\r\n    if (i === 0) return \"ORDER DETAILS \"\r\n    if (i === 4) return \"PAYMENT DETAILS \"\r\n  })\r\n\r\n  const TRANS = [[], [title], blankColumns, headers]\r\n\r\n  const amountPaidList = []\r\n  const collectibleList = []\r\n\r\n  for (const originalObj of sorting(schedules, SchedulersClass.UTAK_NO)) {\r\n    let obj = { ...originalObj }\r\n    const datePlacedDateFormat = obj[SchedulersClass.DATE_ORDER_PLACED]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_ORDER_PLACED])\r\n      : \"\"\r\n    const dateServeDateFormat = obj[SchedulersClass.DATE_START]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_START])\r\n      : \"\"\r\n    const datePayment = obj[SchedulersClass.DATE_PAYMENT]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_PAYMENT])\r\n      : \"\"\r\n\r\n    const dateEquality =\r\n      dateServeDateFormat === datePlacedDateFormat &&\r\n      dateServeDateFormat === datePayment &&\r\n      datePlacedDateFormat === datePayment\r\n\r\n    switch (title) {\r\n      case \"[A] TRANSACTIONS OF ORDERS SERVED - PAID - FULFILLED\":\r\n        if (\r\n          obj[SchedulersClass.MODE_PAYMENT] === \"OFT\" &&\r\n          obj?.collectibles === 0 &&\r\n          obj[SchedulersClass.STATUS] === \"FULFILLED\"\r\n        ) {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n      case \"[B] TRANSACTIONS OF ORDERS PLACED - PAID - NOT YET FULFILLED (ADVANCE ORDERS)\":\r\n        if (\r\n          obj?.collectibles === 0 &&\r\n          typeof obj[SchedulersClass.STATUS] !== \"undefined\" &&\r\n          obj[SchedulersClass.STATUS] !== \"FULFILLED\"\r\n        ) {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n      case \"[C] COLLECTIONS ON PREVIOUS BALANCES\":\r\n        if (obj[SchedulersClass.CASH_FOR_DEPOSIT] !== \"Pending\") {\r\n          if (obj?.collectibles > 0 && datePayment !== \"\") {\r\n            TRANS.push([\r\n              datePlacedDateFormat,\r\n              dateServeDateFormat,\r\n              obj[SchedulersClass.UTAK_NO],\r\n              obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n                obj[SchedulersClass.ZAP_NUMBER],\r\n              datePayment,\r\n              obj[SchedulersClass.MODE_PAYMENT],\r\n              obj[SchedulersClass.SOURCE],\r\n              obj[SchedulersClass.REF_NO],\r\n              obj[SchedulersClass.ACCOUNT_NUMBER],\r\n              thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n            ])\r\n            amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n          }\r\n\r\n          if (\r\n            obj[SchedulersClass.MODE_PAYMENT] === \"Cash\" &&\r\n            obj?.collectibles === 0 &&\r\n            obj[SchedulersClass.ACCOUNT_NUMBER] !== \"BDO / 981\"\r\n          ) {\r\n            TRANS.push([\r\n              datePlacedDateFormat,\r\n              dateServeDateFormat,\r\n              obj[SchedulersClass.UTAK_NO],\r\n              obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n                obj[SchedulersClass.ZAP_NUMBER],\r\n              datePayment,\r\n              obj[SchedulersClass.MODE_PAYMENT],\r\n              obj[SchedulersClass.SOURCE],\r\n              obj[SchedulersClass.REF_NO],\r\n              obj[SchedulersClass.ACCOUNT_NUMBER],\r\n              thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n            ])\r\n            amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n          }\r\n\r\n          if (obj[SchedulersClass.STATUS] === \"Deposited\") {\r\n            TRANS.push([\r\n              datePlacedDateFormat,\r\n              dateServeDateFormat,\r\n              obj[SchedulersClass.UTAK_NO],\r\n              \"\",\r\n              // obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              //   obj[SchedulersClass.ZAP_NUMBER],\r\n              datePayment,\r\n              obj[SchedulersClass.MODE_PAYMENT],\r\n              obj[SchedulersClass.SOURCE],\r\n              obj[SchedulersClass.REF_NO],\r\n              obj[SchedulersClass.ACCOUNT_NUMBER],\r\n              thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n            ])\r\n            amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n          }\r\n        }\r\n        break\r\n      case \"[D] TRANSACTIONS OF ORDERS PLACED - FULFILLED - CASH PAID (FOR DEPOSIT)\":\r\n        if (obj[SchedulersClass.CASH_FOR_DEPOSIT] === \"Pending\") {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n            obj[SchedulersClass.CASH_FOR_DEPOSIT],\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n      default:\r\n        if (obj?.collectibles > 0 && datePayment === \"\") {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj?.collectibles.toFixed(2)),\r\n          ])\r\n          collectibleList.push(obj?.collectibles)\r\n        }\r\n        break\r\n    }\r\n  }\r\n\r\n  const total = sumNumbers(amountPaidList).toFixed(2)\r\n  const totalCollectibles = sumNumbers(collectibleList).toFixed(2)\r\n\r\n  TRANS.push([\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"Total\",\r\n    thousandsSeparators(total),\r\n  ])\r\n\r\n  return [TRANS, total, totalCollectibles]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\produceSalesSummary.js",["1319","1320","1321","1322","1323","1324"],"import { calculateBalanceScheduler } from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Helpers/dateFormat\"\r\nimport thousandsSeparators, {\r\n  replaceThousandsSeparator,\r\n} from \"Helpers/formatNumber\"\r\nimport { amountPaid, balanceDue, paymentDetails } from \"Helpers/schedulerExcel\"\r\nimport sorting from \"Helpers/sorting\"\r\nimport sumArray, {\r\n  sumNumbers,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Helpers/sumArray\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nconst dateSheetName = (string) => {\r\n  return string.substring(0, 5)\r\n  // return string\r\n}\r\n\r\nexport const produceSalesSummary = async (schedules, branch) => {\r\n  let dateTobeFilter = \"\"\r\n\r\n  if (schedules.length > 0) {\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      schedules[0][SchedulersClass.DATE_START]\r\n    )\r\n    dateTobeFilter = dateFromDatabase\r\n  } else {\r\n    return {}\r\n  }\r\n\r\n  // this is where the data came from (firebase)\r\n  const partials = await SchedulersClass.getDataByPartialDate(\r\n    formatDateDash(dateTobeFilter),\r\n    branch\r\n  )\r\n\r\n  const dateServedSched = await SchedulersClass.getDataByDate(\r\n    [dateTobeFilter, dateTobeFilter],\r\n    SchedulersClass.DATE_START,\r\n    branch\r\n  )\r\n  const datePlacedSched = await SchedulersClass.getDataByDate(\r\n    [dateTobeFilter, dateTobeFilter],\r\n    SchedulersClass.DATE_ORDER_PLACED,\r\n    branch\r\n  )\r\n  //------------------------------------//\r\n\r\n  let sheet = {}\r\n  const formattedDate = formatDateDash(dateTobeFilter)\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`] = [\r\n    [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n    [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n    [formatDateLong(dateTobeFilter)],\r\n    [],\r\n  ]\r\n\r\n  const fulfilledSched = dateServedSched.filter((obj) => {\r\n    const balance = calculateBalanceScheduler(obj)\r\n    return (\r\n      obj[SchedulersClass.STATUS] === \"FULFILLED\" &&\r\n      balance === 0 &&\r\n      paymentDetails(SchedulersClass.MODE_PAYMENT, obj) === \"OFT\"\r\n    )\r\n  })\r\n\r\n  const [A_TRANS, A_TOTAL] = produceTRANS(\r\n    fulfilledSched,\r\n    formattedDate,\r\n    \"[A] TRANSACTIONS OF ORDERS PLACED - PAID - FULFILLED\"\r\n  )\r\n\r\n  const unfulfilledSched = datePlacedSched.filter((obj) => {\r\n    const balance = calculateBalanceScheduler(obj)\r\n    return (\r\n      typeof obj[SchedulersClass.STATUS] !== \"undefined\" &&\r\n      obj[SchedulersClass.STATUS] !== \"FULFILLED\" &&\r\n      balance === 0\r\n    )\r\n  })\r\n\r\n  const [B_TRANS, B_TOTAL] = produceTRANS(\r\n    unfulfilledSched,\r\n    formattedDate,\r\n    \"[B] TRANSACTIONS OF ORDERS PLACED - PAID - NOT YET FULFILLED (ADVANCE ORDERS)\"\r\n  )\r\n\r\n  const unfulfilledSchedWithBalance = partials.filter((obj) => {\r\n    const balance = calculateBalanceScheduler(obj)\r\n    return balance > 0\r\n  })\r\n\r\n  const [C_TRANS, C_TOTAL] = produceTRANS(\r\n    unfulfilledSchedWithBalance,\r\n    formattedDate,\r\n    \"[C] COLLECTIONS ON PREVIOUS BALANCES\"\r\n  )\r\n\r\n  const fulfilledSchedCashPaid = dateServedSched.filter((obj) => {\r\n    return (\r\n      paymentDetails(SchedulersClass.SOURCE, obj) === \"Cash\" &&\r\n      obj[SchedulersClass.STATUS] === \"FULFILLED\"\r\n    )\r\n  })\r\n\r\n  const [D_TRANS, D_TOTAL, D_COLLECTIBLES] = produceTRANS(\r\n    fulfilledSchedCashPaid,\r\n    formattedDate,\r\n    \"[D] TRANSACTIONS OF ORDERS PLACED - FULFILLED - CASH PAID (FOR DEPOSIT)\"\r\n  )\r\n\r\n  const fulfilledSchedNotPaid = dateServedSched.filter((obj) => {\r\n    const collectible = calculateBalanceScheduler(obj)\r\n    return collectible > 0 && obj[SchedulersClass.STATUS] === \"FULFILLED\"\r\n  })\r\n\r\n  const [E_TRANS, E_TOTAL, E_COLLECTIBLES] = produceTRANS(\r\n    fulfilledSchedNotPaid,\r\n    formattedDate,\r\n    \"[E] TRANSACTIONS OF ORDERS PLACED - FULFILLED - NOT PAID (COLLECTIBLES)\"\r\n  )\r\n\r\n  const SUMMARY = produceSummary(\r\n    A_TOTAL,\r\n    B_TOTAL,\r\n    C_TOTAL,\r\n    D_TOTAL,\r\n    E_COLLECTIBLES,\r\n    A_TRANS\r\n  )\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`] = [\r\n    ...sheet[`${dateSheetName(formattedDate)} SALES SUMMARY`],\r\n    ...A_TRANS,\r\n    ...B_TRANS,\r\n    ...C_TRANS,\r\n    ...D_TRANS,\r\n    ...E_TRANS,\r\n    ...SUMMARY,\r\n  ]\r\n\r\n  return sheet\r\n}\r\n\r\nconst produceTRANS = (schedules, formattedDate, title = \"\") => {\r\n  const renewedSched = schedules.filter(\r\n    (obj) => obj[SchedulersClass.STATUS] !== \"CANCELLED\"\r\n  )\r\n\r\n  const headers = [\r\n    \"DATE PLACED\",\r\n    \"SERVE DATE\",\r\n    \"UTAK #\",\r\n    \"PP#\",\r\n    \"DATE PAID\",\r\n    \"MODE\",\r\n    \"SOURCE\",\r\n    \"REF #\",\r\n    \"ACCT #\",\r\n    \"AMOUNT PAID\",\r\n    \"COLLECTIBLES\",\r\n  ]\r\n\r\n  const blankColumns = [...new Array(10)].map((d, i) => {\r\n    if (i === 0) return \"ORDER DETAILS \"\r\n    if (i === 4) return \"PAYMENT DETAILS \"\r\n  })\r\n\r\n  const TRANS = [[], [title], blankColumns, headers]\r\n\r\n  const amountPaidList = []\r\n  const collectibleList = []\r\n\r\n  for (const originalObj of sorting(renewedSched, SchedulersClass.UTAK_NO)) {\r\n    let obj = { ...originalObj }\r\n    console.log(\"partials sched\", obj[SchedulersClass.PARTIALS])\r\n    if (title === \"[C] COLLECTIONS ON PREVIOUS BALANCES\") {\r\n      if (obj[SchedulersClass.PARTIALS].length > 0) {\r\n        const partialList = [...obj[SchedulersClass.PARTIALS]]\r\n        const partialFilter = partialList.filter((pObj) => {\r\n          const partialDate = formatDateFromDatabase(pObj?.date)\r\n          return formatDateDash(partialDate) === formattedDate\r\n        })\r\n\r\n        obj[SchedulersClass.PARTIALS] = partialFilter\r\n      }\r\n    }\r\n\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      obj[SchedulersClass.DATE_ORDER_PLACED]\r\n    )\r\n    const dateFromDatabaseDateStart = formatDateFromDatabase(\r\n      obj[SchedulersClass.DATE_START]\r\n    )\r\n    const datePlacedDateFormat = formatDateDash(dateFromDatabase)\r\n    const dateServeDateFormat = formatDateDash(dateFromDatabaseDateStart)\r\n    const utakNo = obj[SchedulersClass.UTAK_NO]\r\n    const ppNo = obj[SchedulersClass.ORDER_VIA_WEBSITE]\r\n      ? obj[SchedulersClass.ZAP_NUMBER]\r\n      : \"\"\r\n\r\n    const date = obj[SchedulersClass.PARTIALS][0]?.date\r\n    const datePayment =\r\n      typeof date !== \"undefined\"\r\n        ? formatDateDash(formatDateFromDatabase(date))\r\n        : \"\" // paymentDetails(SchedulersClass.DATE_PAYMENT, obj)\r\n    const modePayment = paymentDetails(SchedulersClass.MODE_PAYMENT, obj)\r\n    const source = paymentDetails(SchedulersClass.SOURCE, obj)\r\n    const refNo = paymentDetails(SchedulersClass.REF_NO, obj)\r\n    const accountNo = paymentDetails(SchedulersClass.ACCOUNT_NUMBER, obj)\r\n    const _amountPaid = amountPaid(\r\n      obj,\r\n      0 /*  this 0 value is just to satisfy the logic of a function since we are reusing it*/\r\n    )\r\n    const collectibles = calculateBalanceScheduler(originalObj)\r\n    amountPaidList.push(Number(_amountPaid.replace(/,/g, \"\")))\r\n    collectibleList.push(collectibles)\r\n    TRANS.push([\r\n      datePlacedDateFormat,\r\n      dateServeDateFormat,\r\n      utakNo,\r\n      ppNo,\r\n      datePayment,\r\n      modePayment,\r\n      source,\r\n      refNo,\r\n      accountNo,\r\n      _amountPaid,\r\n      thousandsSeparators(collectibles.toFixed(2)),\r\n    ])\r\n  }\r\n\r\n  const total = sumNumbers(amountPaidList).toFixed(2)\r\n  const totalCollectibles = sumNumbers(collectibleList).toFixed(2)\r\n  TRANS.push([\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"Total\",\r\n    thousandsSeparators(total),\r\n    thousandsSeparators(totalCollectibles),\r\n  ])\r\n\r\n  return [TRANS, total, totalCollectibles]\r\n}\r\n\r\nconst produceSummary = (\r\n  A_TOTAL,\r\n  B_TOTAL,\r\n  C_TOTAL,\r\n  D_TOTAL,\r\n  E_COLLECTIBLES,\r\n  A_TRANS\r\n) => {\r\n  const aTotal = A_TOTAL.replace(/,/g, \"\")\r\n  const bTotal = B_TOTAL.replace(/,/g, \"\")\r\n  const cTotal = C_TOTAL.replace(/,/g, \"\")\r\n  const dTotal = D_TOTAL.replace(/,/g, \"\")\r\n  const eCollectibles = E_COLLECTIBLES.replace(/,/g, \"\")\r\n  const paymentReceivedTotal = Number(aTotal) + Number(bTotal) + Number(cTotal)\r\n  const collectiblesTotal = Number(dTotal) + Number(eCollectibles)\r\n  const summaryA = produceReportASummary(A_TRANS)\r\n  const SUMMARY = [\r\n    [],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"SUMMARY\"],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"SUMMARY OF REPORT A\",\r\n      \"\",\r\n      \"\",\r\n      \"PAYMENT RECEIVED\",\r\n      \"\",\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"BDO / 981\",\r\n      summaryA[0],\r\n      \"\",\r\n      \"A\",\r\n      thousandsSeparators(A_TOTAL),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"KP GCash\",\r\n      summaryA[1],\r\n      \"\",\r\n      \"B\",\r\n      thousandsSeparators(B_TOTAL),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      summaryA[2],\r\n      \"\",\r\n      \"C\",\r\n      thousandsSeparators(C_TOTAL),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      thousandsSeparators(paymentReceivedTotal.toFixed(2)),\r\n    ],\r\n    [],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"COLLECTIBLES\"],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"D\", thousandsSeparators(D_TOTAL)],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"E\",\r\n      thousandsSeparators(E_COLLECTIBLES),\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      thousandsSeparators(collectiblesTotal.toFixed(2)),\r\n    ],\r\n    [],\r\n  ]\r\n  return SUMMARY\r\n}\r\n\r\nconst produceReportASummary = (A_TRANS) => {\r\n  const orderList = {\r\n    BDO: [],\r\n    KP_GCASH: [],\r\n  }\r\n  A_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== A_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n  const sumOfBDO = sumNumbers(orderList[\"BDO\"])\r\n  const sumOfKP_GCASH = sumNumbers(orderList[\"KP_GCASH\"])\r\n  const sumOfTotal = sumOfBDO + sumOfKP_GCASH\r\n  return [\r\n    thousandsSeparators(sumOfBDO.toFixed(2)),\r\n    thousandsSeparators(sumOfKP_GCASH.toFixed(2)),\r\n    thousandsSeparators(sumOfTotal.toFixed(2)),\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\DropdownChannel.js",["1325","1326","1327"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\hook.js",["1328","1329","1330","1331","1332","1333"],"import React, { useState, useEffect } from \"react\"\r\nimport { Space, Tag } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport { handleTitle, handleAlignment } from \"./helpers\"\r\nimport {\r\n  AMOUNT_TYPE,\r\n  ARRAY_OF_OBJECT_TYPE,\r\n  ARRAY_OF_STRING_TYPE,\r\n  BOOLEAN_TYPE,\r\n  DATE_TYPE,\r\n  STRING_TYPE,\r\n} from \"Constants/types\"\r\nimport { EditOutlined } from \"@ant-design/icons\"\r\nimport { arrayReplace, replaceArrayData } from \"Helpers/arrayFuntions\"\r\nimport { useHistory, useRouteMatch } from \"react-router\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nexport default function useTableHandler({\r\n  ServiceClass, // Class\r\n  hideColumns = [],\r\n  overideRender = {},\r\n  bySort, // boolean\r\n  customSort = [],\r\n  defaultColumnAlign = \"left\",\r\n  widths = {},\r\n  hasWidths = true,\r\n  defaultFontSize = \"12px\",\r\n  enableEdit = false,\r\n  enableFilter = false,\r\n  enableAdd = false,\r\n  defaultAddForm = true,\r\n  enableRowSelect = false,\r\n  rowSelection = () => {},\r\n  onCell = () => {},\r\n  useHook = useGetDocuments,\r\n  paginateRequest = false,\r\n  exposeData = () => {},\r\n  modifiedData,\r\n}) {\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const [collectionData, loadData] = useHook(ServiceClass, {\r\n    bySort,\r\n    customSort,\r\n  })\r\n\r\n  const [data, setData] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    handleColumns(collectionData)\r\n    setIsLoading(false)\r\n    setData(collectionData)\r\n\r\n    // in order to access the data list outside this component\r\n    exposeData(collectionData)\r\n  }, [collectionData])\r\n\r\n  useEffect(() => {\r\n    handleColumns(data)\r\n  }, [data])\r\n\r\n  // if modifiedData is trigger it will automatically update the state base on the new data save\r\n  useEffect(() => {\r\n    // const collectionIndex = data.findIndex(\r\n    //   (obj) => obj[ServiceClass._ID] === modifiedData[ServiceClass._ID]\r\n    // )\r\n    // if (collectionIndex >= 0) {\r\n    //   const updatedData = arrayReplace(data, collectionIndex, modifiedData)\r\n    //   setData(updatedData)\r\n    // }\r\n    // handleModified(modifiedData)\r\n    if (Object.keys(modifiedData || {}).length > 0) {\r\n      loadData(modifiedData)\r\n    }\r\n  }, [modifiedData])\r\n\r\n  const handleColumns = (data) => {\r\n    const _columns = []\r\n    if (typeof ServiceClass?.PROPERTIES === \"undefined\") {\r\n      const properties = data.length > 0 ? Object.keys(data[0]) : []\r\n      for (const key of properties) {\r\n        if (!hideColumns.includes(key)) {\r\n          const columnObj = {\r\n            title: handleTitle(ServiceClass, key),\r\n            key,\r\n            dataIndex: key,\r\n            align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n            ellipsis: {\r\n              showTitle: false,\r\n            },\r\n            onCell,\r\n            render: (value, record) => {\r\n              return handleTypeRender({ value, record }, key)\r\n            },\r\n          }\r\n          if (hasWidths) {\r\n            columnObj.width =\r\n              typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n          }\r\n          _columns.push({ ...columnObj })\r\n        }\r\n      }\r\n      if (enableEdit) {\r\n        _columns.push({\r\n          title: \"\",\r\n          key: \"action\",\r\n          dataIndex: \"action\",\r\n          align: \"right\",\r\n          onCell,\r\n          render: (data, record) => {\r\n            return (\r\n              <MainButton\r\n                type=\"default\"\r\n                shape=\"circle\"\r\n                Icon={<EditOutlined />}\r\n                onClick={() =>\r\n                  history.push(\r\n                    `${path}/modified?id=${record[ServiceClass._ID]}`\r\n                  )\r\n                }\r\n              />\r\n            )\r\n          },\r\n        })\r\n      }\r\n      setColumns(_columns)\r\n      return\r\n    }\r\n\r\n    for (const key of ServiceClass.PROPERTIES) {\r\n      if (!hideColumns.includes(key)) {\r\n        const columnObj = {\r\n          title: handleTitle(ServiceClass, key),\r\n          key,\r\n          dataIndex: key,\r\n          align: handleAlignment(ServiceClass, key, defaultColumnAlign),\r\n          ellipsis: {\r\n            showTitle: false,\r\n          },\r\n          onCell,\r\n          render: (value, record) => {\r\n            return handleTypeRender({ value, record }, key)\r\n          },\r\n        }\r\n        if (hasWidths) {\r\n          columnObj.width =\r\n            typeof widths[key] === \"undefined\" ? \"\" : widths[key]\r\n        }\r\n        _columns.push({ ...columnObj })\r\n      }\r\n    }\r\n    if (enableEdit) {\r\n      _columns.push({\r\n        title: \"\",\r\n        key: \"action\",\r\n        dataIndex: \"action\",\r\n        align: \"right\",\r\n        onCell,\r\n        render: (data, record) => {\r\n          return (\r\n            <MainButton\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              Icon={<EditOutlined />}\r\n              onClick={() =>\r\n                history.push(`${path}/modified?id=${record[ServiceClass._ID]}`)\r\n              }\r\n            />\r\n          )\r\n        },\r\n      })\r\n    }\r\n    setColumns(_columns)\r\n  }\r\n\r\n  const handleTypeRender = ({ value, record }, key) => {\r\n    if (typeof overideRender[key] !== \"undefined\") {\r\n      return overideRender[key](value, record)\r\n    }\r\n\r\n    if (typeof ServiceClass.TYPES === \"undefined\") {\r\n      if (typeof value === \"object\") {\r\n        return \"Object without types\"\r\n      }\r\n      return value\r\n    }\r\n\r\n    let result = value\r\n    switch (ServiceClass.TYPES[key]) {\r\n      case STRING_TYPE:\r\n        result = value\r\n        break\r\n      case ARRAY_OF_OBJECT_TYPE:\r\n        const renderObj =\r\n          typeof ServiceClass.OBJECTS === \"undefined\" ? (\r\n            \"Object Undefined\"\r\n          ) : (\r\n            <Space>\r\n              {value.map((valueObj) => {\r\n                const dataObj =\r\n                  typeof ServiceClass.OBJECTS[key] === \"undefined\"\r\n                    ? \"undefined title\"\r\n                    : valueObj[ServiceClass.OBJECTS[key].title]\r\n                return (\r\n                  <Tag style={{ cursor: \"pointer\" }} color=\"cyan\" wrap>\r\n                    {dataObj}\r\n                  </Tag>\r\n                )\r\n              })}\r\n            </Space>\r\n          )\r\n        result = renderObj\r\n        break\r\n      case ARRAY_OF_STRING_TYPE:\r\n        result = (\r\n          <Space wrap>\r\n            {(value || []).map((valueKey) => {\r\n              return <Tag color=\"cyan\">{valueKey}</Tag>\r\n            })}\r\n          </Space>\r\n        )\r\n        break\r\n      case AMOUNT_TYPE:\r\n        result = thousandsSeparators(Number(value).toFixed(2))\r\n        break\r\n      case DATE_TYPE:\r\n        const formattedDate = formatDateFromDatabase(value)\r\n        result = formatDateDash(formattedDate)\r\n        break\r\n      case BOOLEAN_TYPE:\r\n        result = value ? (\r\n          <span style={{ color: \"green\" }}>Active</span>\r\n        ) : (\r\n          <span style={{ color: \"red\" }}>Inactive</span>\r\n        )\r\n        break\r\n    }\r\n    return <div style={{ fontSize: defaultFontSize }}>{result}</div>\r\n  }\r\n\r\n  const handleModified = (data) => {\r\n    loadData(data)\r\n  }\r\n  return {\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableFilter,\r\n    enableEdit,\r\n    enableRowSelect,\r\n    rowSelection,\r\n    enableAdd,\r\n    defaultAddForm,\r\n    setIsLoading,\r\n    isLoading,\r\n    ServiceClass,\r\n    handleModified,\r\n    paginateRequest,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\schedulerExcel.js",["1334","1335","1336","1337","1338","1339","1340","1341","1342","1343"],"import productStaticPrices from \"Components/Features/DashboardTransaction/productStaticPrices\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport {\r\n  calculateBalanceScheduler,\r\n  producedPaymentList,\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n  displaySalesType,\r\n  calculateDiscountScheduler,\r\n} from \"./collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n  formatTime,\r\n} from \"./dateFormat\"\r\nimport thousandsSeparators from \"./formatNumber\"\r\nimport sorting, { sortByNumber } from \"./sorting\"\r\nimport sumArray, { sumArrayDatas, sumArrayOfObjectsGrouping } from \"./sumArray\"\r\n\r\nconst dateSheetName = (string) => {\r\n  return string.substring(0, 5)\r\n  // return string\r\n}\r\n\r\nconst produceLabels = (key) => {\r\n  return typeof SchedulersClass.LABELS[key] !== \"undefined\"\r\n    ? SchedulersClass.LABELS[key]\r\n    : key\r\n}\r\n\r\nconst produceAmount = (value) => {\r\n  return thousandsSeparators(Number(value).toFixed(2))\r\n}\r\n\r\nconst produceExcelHeaders = () => {\r\n  const properties = [\"no\"]\r\n  const labels = [\"NO\"]\r\n  for (const key of SchedulersClass.PROPERTIES) {\r\n    if (\r\n      key === SchedulersClass.BRANCH ||\r\n      key === SchedulersClass._ID ||\r\n      key === SchedulersClass.DATE_START ||\r\n      key === SchedulersClass.DATE_END ||\r\n      key === SchedulersClass.ORDER_NO ||\r\n      key === SchedulersClass.ORDER_VIA ||\r\n      key === SchedulersClass.ORDER_VIA_PARTNER ||\r\n      key === SchedulersClass.ORDER_VIA_WEBSITE ||\r\n      key === SchedulersClass.SUBJECT ||\r\n      key === SchedulersClass.ACCOUNT_NAME ||\r\n      key === SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS ||\r\n      key === SchedulersClass.END_TIME_ZONE ||\r\n      key === SchedulersClass.START_TIME_ZONE ||\r\n      key === SchedulersClass.PAYMENT_NOTES\r\n    ) {\r\n    } else {\r\n      if (key === SchedulersClass.TIME_SLOT) {\r\n        labels.push(produceLabels(key))\r\n        properties.push(key)\r\n        labels.push(\"PRODUCT CODE\")\r\n        properties.push(\"productCode\")\r\n      } else if (key === SchedulersClass.QTY) {\r\n        labels.push(produceLabels(key))\r\n        properties.push(key)\r\n        labels.push(\"PRICE\")\r\n        properties.push(\"price\")\r\n      } else {\r\n        labels.push(produceLabels(key))\r\n        properties.push(key)\r\n      }\r\n    }\r\n  }\r\n  return { labels, properties }\r\n}\r\n\r\nconst handlePayments = (key, partials) => {\r\n  if (typeof partials !== \"undefined\") {\r\n    if (partials.length === 0) return null\r\n    // const lastPayment = partials[partials.length - 1]\r\n    const lastPayment = partials[0]\r\n    if (key === SchedulersClass.DATE_PAYMENT) {\r\n      if (Object.keys(lastPayment?.date || {}).length > 0) {\r\n        const formatDate = formatDateFromDatabase(lastPayment?.date)\r\n        const datePaid = formatDateDash(formatDate)\r\n        return datePaid || null\r\n      }\r\n      return null\r\n    }\r\n    return lastPayment[key] || null\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const paymentDetails = (key, data) => {\r\n  if (typeof data[SchedulersClass.PARTIALS] === \"undefined\") return \"\"\r\n  const payments = handlePayments(key, data[SchedulersClass.PARTIALS])\r\n  if (payments) {\r\n    return payments\r\n  } else {\r\n    if (typeof data[key] !== \"undefined\") {\r\n      if (key === SchedulersClass.DATE_PAYMENT) {\r\n        const dateFormat = formatDateFromDatabase(data[key])\r\n        const datePaid = formatDateDash(dateFormat)\r\n        return datePaid\r\n      }\r\n      return data[key] || \"\"\r\n    } else {\r\n      return \"\"\r\n    }\r\n  }\r\n}\r\n\r\nconst salesType = (data) => {\r\n  if (typeof data[SchedulersClass.OTHERS] === \"undefined\") return \"\"\r\n  if (typeof data[SchedulersClass.OTHERS] !== \"undefined\") {\r\n    for (const key in data[SchedulersClass.OTHERS]) {\r\n      if (key === \"Senior Citizen\" || key === \"PWD\") {\r\n        return \"SPWD\"\r\n      }\r\n    }\r\n  }\r\n  if (data[SchedulersClass.ORDER_VIA]) {\r\n    if (typeof data[SchedulersClass.OTHERS] !== \"undefined\") {\r\n      for (const key in data[SchedulersClass.OTHERS]) {\r\n        if (key === \"Automatic 50 percent off\") {\r\n          return \"D/O\"\r\n        }\r\n        if (key === \"Incidents\") {\r\n          return \"D/IR\"\r\n        }\r\n        if (key === \"Promo\") {\r\n          return \"D/PM\"\r\n        }\r\n      }\r\n    }\r\n    return \"R\"\r\n  }\r\n  if (data[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n    return \"PP\"\r\n  }\r\n\r\n  if (data[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n    return \"PP\"\r\n  }\r\n  return \"\"\r\n}\r\n\r\nconst timeSlot = (data) => {\r\n  if (typeof data[SchedulersClass.DATE_START] === \"undefined\") return \"\"\r\n  const dateStart = formatDateFromDatabase(data[SchedulersClass.DATE_START])\r\n  const dateEnd = formatDateFromDatabase(data[SchedulersClass.DATE_END])\r\n\r\n  let timeStart = formatTime(dateStart).split(\" \")\r\n  const timeEnd = formatTime(dateEnd)\r\n  const date = formatDateDash(dateStart)\r\n  return `${timeStart[0]}-${timeEnd}`\r\n}\r\n\r\nconst via = (data) => {\r\n  if (data[SchedulersClass.ORDER_VIA]) {\r\n    const split1 = data[SchedulersClass.ORDER_VIA].split(\" ]\")\r\n    const split2 = split1[0].split(\"[ \")\r\n    return split2[1]\r\n  }\r\n  if (data[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n    const split1 = data[SchedulersClass.ORDER_VIA_PARTNER].split(\" ]\")\r\n    const split2 = split1[0].split(\"[ \")\r\n    return split2[1]\r\n  }\r\n  if (data[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n    const split1 = data[SchedulersClass.ORDER_VIA_WEBSITE].split(\" ]\")\r\n    const split2 = split1[0].split(\"[ \")\r\n    return split2[1]\r\n  }\r\n  return \"\"\r\n}\r\n\r\nconst revenueChan = (data) => {\r\n  if (data[SchedulersClass.ORDER_VIA]) return \"DR\"\r\n  if (data[SchedulersClass.ORDER_VIA_PARTNER]) return \"PP\"\r\n  if (data[SchedulersClass.ORDER_VIA_WEBSITE]) return \"WB\"\r\n  return \"\"\r\n}\r\n\r\nconst balanceDue = (data, count, numCount) => {\r\n  const renewedData = {\r\n    ...data,\r\n    [SchedulersClass.TOTAL_DUE]: data[SchedulersClass.TOTAL],\r\n  }\r\n  if (numCount) return \"\"\r\n  if (count > 0) return \"\"\r\n  let _balanceDue = calculateBalanceScheduler(renewedData)\r\n  if (_balanceDue < 0) {\r\n    return 0\r\n  }\r\n  return produceAmount(_balanceDue) || 0\r\n}\r\n\r\nconst excessPayment = (data, count, numCount) => {\r\n  const renewedData = {\r\n    ...data,\r\n    [SchedulersClass.TOTAL_DUE]: data[SchedulersClass.TOTAL],\r\n  }\r\n  if (numCount) return \"\"\r\n  if (count > 0) return \"\"\r\n  let _balanceDue = calculateBalanceScheduler(renewedData)\r\n  if (_balanceDue < 0) {\r\n    return produceAmount(_balanceDue * -1) || 0\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const amountPaid = (data, count, numCount) => {\r\n  if (numCount) return \"\"\r\n  if (count > 0) return \"\"\r\n\r\n  const paymentList = producedPaymentList(data)\r\n  const _amountPaid =\r\n    paymentList.length > 0 ? sumArray(paymentList, \"amount\") : 0\r\n  return produceAmount(_amountPaid)\r\n}\r\n\r\nconst totalDue = (data, count) => {\r\n  if (typeof data[SchedulersClass.TOTAL_DUE] === \"undefined\" && count > 0)\r\n    return \"\"\r\n  let _totalDue =\r\n    typeof data[SchedulersClass.TOTAL_DUE] === \"undefined\"\r\n      ? 0\r\n      : data[SchedulersClass.TOTAL_DUE]\r\n  return produceAmount(_totalDue)\r\n}\r\n\r\nconst producePurchasedProducts = (\r\n  data,\r\n  properties,\r\n  count,\r\n  numCount /*schedules length by row*/,\r\n  hiddenRevenueChannelData = false,\r\n  numberOfPurchased = 0\r\n) => {\r\n  const row = []\r\n  for (const key of properties) {\r\n    switch (key) {\r\n      case \"no\":\r\n        row.push(count === 0 && numCount ? numCount : \"\")\r\n        break\r\n      case SchedulersClass.REVENUE_CHANNEL:\r\n        if (hiddenRevenueChannelData === false) {\r\n          row.push(revenueChan(data))\r\n          // if (count === 0) {\r\n          //   row.push(revenueChan(data))\r\n          // } else {\r\n          //   row.push(\"\")\r\n          // }\r\n        } else {\r\n          row.push(\"\")\r\n        }\r\n        break\r\n      case SchedulersClass.DATE_PAYMENT:\r\n        row.push(paymentDetails(SchedulersClass.DATE_PAYMENT, data))\r\n        break\r\n      case SchedulersClass.MODE_PAYMENT:\r\n        row.push(paymentDetails(SchedulersClass.MODE_PAYMENT, data))\r\n        break\r\n      case SchedulersClass.SOURCE:\r\n        row.push(paymentDetails(SchedulersClass.SOURCE, data))\r\n        break\r\n      case SchedulersClass.REF_NO:\r\n        row.push(paymentDetails(SchedulersClass.REF_NO, data))\r\n        break\r\n      case SchedulersClass.ACCOUNT_NUMBER:\r\n        row.push(paymentDetails(SchedulersClass.ACCOUNT_NUMBER, data))\r\n        break\r\n      case SchedulersClass.OR_NO:\r\n        if (count > 0 && hiddenRevenueChannelData) {\r\n          row.push(\"\")\r\n        } else {\r\n          row.push(paymentDetails(SchedulersClass.OR_NO, data))\r\n        }\r\n        break\r\n      case SchedulersClass.SALES_TYPE:\r\n        row.push(displaySalesType(data))\r\n        break\r\n      case SchedulersClass.PARTNER_MERCHANT_ORDER_NO:\r\n        if (data[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n          row.push(data[SchedulersClass.ZAP_NUMBER])\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n\r\n      case SchedulersClass.TIME_SLOT:\r\n        if (data?.timeSlot) {\r\n          row.push(timeSlot(data))\r\n        } else {\r\n          row.push(\"\")\r\n        }\r\n        break\r\n      case SchedulersClass.VIA:\r\n        if (count > 0 && hiddenRevenueChannelData) {\r\n          row.push(\"\")\r\n        } else {\r\n          row.push(via(data))\r\n        }\r\n        break\r\n      case SchedulersClass.AMOUNT_PAID:\r\n        if (numberOfPurchased === 1) {\r\n          row.push(amountPaid(data, 0, \"\"))\r\n          break\r\n        } else {\r\n          row.push(amountPaid(data, count, numCount))\r\n          break\r\n        }\r\n      case SchedulersClass.BALANCE_DUE:\r\n        if (numberOfPurchased === 1) {\r\n          row.push(balanceDue(data, 0, \"\"))\r\n          break\r\n        } else {\r\n          row.push(balanceDue(data, count, numCount))\r\n          break\r\n        }\r\n      case SchedulersClass.EXCESS_PAYMENT:\r\n        if (numberOfPurchased === 1) {\r\n          row.push(excessPayment(data, 0, \"\"))\r\n          break\r\n        } else {\r\n          row.push(excessPayment(data, count, numCount))\r\n          break\r\n        }\r\n      case SchedulersClass.TOTAL_DUE:\r\n        row.push(totalDue(data, count))\r\n        break\r\n      case SchedulersClass.DATE_ORDER_PLACED:\r\n        if (typeof data[SchedulersClass.DATE_ORDER_PLACED] !== \"undefined\") {\r\n          const dateFormat = formatDateFromDatabase(\r\n            data[SchedulersClass.DATE_ORDER_PLACED]\r\n          )\r\n          const dateStart = formatDateDash(dateFormat)\r\n          row.push(dateStart)\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case SchedulersClass.UTAK_NO:\r\n        if (typeof data[SchedulersClass.UTAK_NO] !== \"undefined\") {\r\n          row.push(data[SchedulersClass.UTAK_NO])\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case SchedulersClass.OTHERS:\r\n        if (typeof data[SchedulersClass.OTHERS] !== \"undefined\") {\r\n          if (numberOfPurchased === 0) {\r\n            // row.push(produceAmount(calculateDiscountScheduler(data)))\r\n            row.push(calculateDiscountScheduler(data))\r\n            break\r\n          } else {\r\n            if (numberOfPurchased === 1) {\r\n              // row.push(produceAmount(calculateDiscountScheduler(data)))\r\n              row.push(calculateDiscountScheduler(data))\r\n              break\r\n            } else {\r\n              row.push(\"\")\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case \"price\":\r\n        row.push(data[key] || \"\")\r\n        break\r\n\r\n      case SchedulersClass.QTY:\r\n        if (typeof data[key] !== \"undefined\") {\r\n          row.push(data[key])\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case \"productCode\":\r\n        if (typeof data[key] !== \"undefined\") {\r\n          row.push(data[key])\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n      case SchedulersClass.TOTAL:\r\n        row.push(data[key])\r\n        break\r\n      default:\r\n        if (typeof data[key] !== \"undefined\") {\r\n          if (count > 0 && hiddenRevenueChannelData) {\r\n            row.push(\"\")\r\n          } else {\r\n            row.push(data[key])\r\n          }\r\n          break\r\n        } else {\r\n          row.push(\"\")\r\n          break\r\n        }\r\n    }\r\n  }\r\n  return row\r\n}\r\n\r\nexport default async function (\r\n  schedules = [],\r\n  productData = [],\r\n  additionalSheetInfo = \"\",\r\n  branch = \"\",\r\n  newProductData = []\r\n) {\r\n  const productList = producedProductListOfAllCodes(productData)\r\n  const newProductList = producedProductListOfAllCodes(newProductData)\r\n  const productListWithAmounts =\r\n    producedProductListWithGroupAndAmounts(productData)\r\n\r\n  const reversedSchedules = [\r\n    ...schedules.filter((obj) => obj[SchedulersClass.STATUS] !== \"CANCELLED\"),\r\n  ]\r\n\r\n  // creation of sheets and its data rows happened here\r\n  const sheets = {}\r\n  let numCount = 0\r\n  for (const data of sortByNumber(reversedSchedules, SchedulersClass.UTAK_NO)) {\r\n    numCount = numCount + 1\r\n    const startTime = data[SchedulersClass.DATE_START]\r\n    if (typeof startTime !== \"undefined\") {\r\n      const formatDate = formatDateFromDatabase(startTime)\r\n      const headerDate = formatDateLong(formatDate)\r\n      const startDate = formatDateDash(formatDate)\r\n      const sheetName = `${dateSheetName(startDate)} ${additionalSheetInfo}`\r\n      const headers = produceExcelHeaders()\r\n      if (typeof sheets[sheetName] === \"undefined\") {\r\n        sheets[sheetName] = [\r\n          [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n          [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n          [headerDate],\r\n          [],\r\n          [],\r\n          [\"ORDER DETAILS\", ...new Array(12), \"PAYMENT DETAILS\"],\r\n          headers.labels,\r\n        ]\r\n      }\r\n\r\n      let numberOfPurchased = 0\r\n      let totalQty = 0\r\n      let totalProductPrice = 0\r\n      const totalPrice = {}\r\n      const productPrice = {}\r\n      const _productList = data?.withFlexiblePrices\r\n        ? newProductList\r\n        : productList\r\n      for (const code of _productList) {\r\n        if (typeof data[code] !== \"undefined\") {\r\n          const qty = Number(data[code])\r\n          if (qty > 0) {\r\n            numberOfPurchased = numberOfPurchased + 1\r\n            totalQty = totalQty + qty\r\n            const prodDetails = productListWithAmounts.find((obj) => {\r\n              return obj?.code === code\r\n            })\r\n            // const defaultPrice = productStaticPrices(\r\n            //   data[SchedulersClass.ORDER_VIA_PARTNER],\r\n            //   code,\r\n            //   prodDetails?.price\r\n            // )\r\n\r\n            let defaultPrice = data?.withFlexiblePrices\r\n              ? data[`customPrice${code}`]\r\n              : prodDetails?.price\r\n            // totalProductPrice =\r\n            // productPrice[code] = Number(defaultPrice) + totalProductPrice\r\n\r\n            const price = Number(defaultPrice) || data[`customPrice${code}`]\r\n            productPrice[code] = price\r\n\r\n            // productPrice[code] =\r\n            //   Number(prodDetails?.price) || data[`customPrice${code}`]\r\n            totalPrice[code] = qty * price\r\n          }\r\n        }\r\n      }\r\n\r\n      // producing row details of schedules by looping each product purchased that is not equal to zero\r\n      let count = 0\r\n      for (const code of _productList) {\r\n        if (typeof data[code] !== \"undefined\") {\r\n          const qty = Number(data[code])\r\n          let propertyHeaders = [...headers.properties]\r\n          if (qty > 0) {\r\n            let renewedData = {\r\n              ...data,\r\n              productCode: code,\r\n              qty,\r\n              price: produceAmount(productPrice[code]),\r\n              [SchedulersClass.TOTAL]: data[SchedulersClass.TOTAL_DUE], // the original value of totalDue is transferred to total since it is already been setup to logic (prevent logical errors)\r\n              [SchedulersClass.TOTAL_DUE]: totalPrice[code],\r\n              timeSlot: true,\r\n            }\r\n            if (count > 0) {\r\n              // delete renewedData[SchedulersClass.DATE_ORDER_PLACED]\r\n              delete renewedData[SchedulersClass.UTAK_NO]\r\n              // delete renewedData[SchedulersClass.OR_NO]\r\n              // delete renewedData[SchedulersClass.CUSTOMER]\r\n              // delete renewedData[SchedulersClass.CONTACT_NUMBER]\r\n              // delete renewedData[SchedulersClass.ORDER_VIA]\r\n              // delete renewedData[SchedulersClass.ORDER_VIA_PARTNER]\r\n              // delete renewedData[SchedulersClass.ORDER_VIA_WEBSITE]\r\n              // delete renewedData[SchedulersClass.PARTNER_MERCHANT_ORDER_NO]\r\n              // delete renewedData[SchedulersClass.PARTIALS]\r\n              // delete renewedData[SchedulersClass.OTHERS]\r\n              // delete renewedData[SchedulersClass.DATE_START]\r\n              delete renewedData[SchedulersClass.BALANCE_DUE]\r\n              delete renewedData[SchedulersClass.AMOUNT_PAID]\r\n              // delete renewedData?.timeSlot\r\n            }\r\n            if (count === 0) {\r\n              // delete renewedData[SchedulersClass.OTHERS]\r\n            }\r\n            const _producedPurchasedProducts = producePurchasedProducts(\r\n              renewedData,\r\n              propertyHeaders,\r\n              count,\r\n              numCount,\r\n              false, // view data of revenueChannel cell\r\n              numberOfPurchased\r\n            )\r\n            count = count + 1\r\n\r\n            if (numberOfPurchased !== count) {\r\n              sheets[sheetName].push(_producedPurchasedProducts)\r\n            } else {\r\n              let _totalRow = {\r\n                ...data,\r\n                productCode: code,\r\n                qty,\r\n                price: produceAmount(productPrice[code]),\r\n                [SchedulersClass.UTAK_NO]: \"\",\r\n                [SchedulersClass.TOTAL]: data[SchedulersClass.TOTAL_DUE], // the original value of totalDue is transferred to total since it is already been setup to logic (prevent logical errors)\r\n                [SchedulersClass.TOTAL_DUE]: totalPrice[code],\r\n                timeSlot: true,\r\n              }\r\n              if (numberOfPurchased === 1) {\r\n                sheets[sheetName].push(_producedPurchasedProducts)\r\n              } else {\r\n                sheets[sheetName].push(\r\n                  producePurchasedProducts(\r\n                    {\r\n                      ..._totalRow,\r\n                    },\r\n                    propertyHeaders,\r\n                    0, // important do not remove,\r\n                    \"\",\r\n                    false // view data of revenueChannel cell\r\n                  )\r\n                )\r\n              }\r\n            }\r\n            // numberOfPurchased = 0\r\n            // if (numberOfPurchased === count) {\r\n            // let _totalRow = {\r\n            //   ...data,\r\n            //   productCode: code,\r\n            //   qty: \"\",\r\n            // }\r\n            // sheets[sheetName].push(\r\n            //   producePurchasedProducts(\r\n            //     {\r\n            //       ..._totalRow,\r\n            //       productCode: \"\",\r\n            //       [SchedulersClass.QTY]: \"\",\r\n            //       price: \"__\",\r\n            //       [SchedulersClass.UTAK_NO]: \"\",\r\n            //       // [SchedulersClass.DATE_ORDER_PLACED]: \"\",\r\n            //       // productCode: \"TOTAL\",\r\n            //       // [SchedulersClass.QTY]: totalQty,\r\n            //       // price: produceAmount(totalProductPrice),\r\n            //     },\r\n            //     headers.properties,\r\n            //     0, // important do not remove,\r\n            //     \"\",\r\n            //     true\r\n            //   )\r\n            // )\r\n            // numberOfPurchased = 0\r\n            // }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const sumOfRevenues = []\r\n  for (const key in sheets) {\r\n    // const subTotals = {}\r\n    const subTotals = []\r\n    const sources = {}\r\n    const summaries = {}\r\n    sheets[key].forEach((list) => {\r\n      if (list.length > 0) {\r\n        const excessPayment = list[list.length - 1] || \"0\"\r\n        const amountPaid = list[list.length - 2] || \"0\" // amountPaid column\r\n        const collectibles = list[list.length - 3] || \"0\" // collectibles column\r\n        const totalDue = list[list.length - 4] || \"0\" // total Column\r\n        const others = list[list.length - 5] || \"0\" // others Column\r\n        const totalQty = isNaN(Number(list[11])) ? \"0\" : Number(list[11]) // qty column\r\n        const revenueChannel = list[4] // R/C column\r\n        const price = list[12] // PRICE column\r\n        const salesType = list[19] // S/T column\r\n        const source = list[15] // Source column\r\n        if (revenueChannel) {\r\n          if (revenueChannel === \"R/C\") return\r\n          // if (typeof subTotals[revenueChannel] === \"undefined\") {\r\n          //   subTotals[revenueChannel] = []\r\n          // }\r\n          subTotals.push({\r\n            others: Number(others.replace(/,/g, \"\")),\r\n            totalDue: Number(totalDue.replace(/,/g, \"\")),\r\n            collectibles: Number(collectibles.replace(/,/g, \"\")),\r\n            amountPaid: Number(amountPaid.replace(/,/g, \"\")),\r\n            excessPayment: Number(excessPayment.replace(/,/g, \"\")),\r\n            totalQty: totalQty,\r\n          })\r\n        }\r\n\r\n        if (salesType) {\r\n          if (salesType === \"S/T\") return\r\n          if (typeof summaries[salesType] === \"undefined\") {\r\n            summaries[salesType] = []\r\n          }\r\n\r\n          summaries[salesType].push({\r\n            others: Number(others.replace(/,/g, \"\")),\r\n            totalDue: Number(totalDue.replace(/,/g, \"\")),\r\n            collectibles: Number(collectibles.replace(/,/g, \"\")),\r\n            amountPaid: Number(amountPaid.replace(/,/g, \"\")),\r\n            excessPayment: Number(excessPayment.replace(/,/g, \"\")),\r\n          })\r\n        }\r\n\r\n        if (source) {\r\n          if (source === \"SOURCE\") return\r\n          if (typeof sources[source] === \"undefined\") {\r\n            sources[source] = []\r\n          }\r\n          sources[source].push({\r\n            others: Number(others.replace(/,/g, \"\")),\r\n            totalDue: Number(totalDue.replace(/,/g, \"\")),\r\n            collectibles: Number(collectibles.replace(/,/g, \"\")),\r\n            amountPaid: Number(amountPaid.replace(/,/g, \"\")),\r\n            excessPayment: Number(excessPayment.replace(/,/g, \"\")),\r\n          })\r\n        }\r\n      }\r\n    })\r\n\r\n    const others = sumArray(subTotals, \"others\")\r\n    const totalDue = sumArray(subTotals, \"totalDue\")\r\n    const collectibles = sumArray(subTotals, \"collectibles\")\r\n    const amountPaid = sumArray(subTotals, \"amountPaid\")\r\n    const totalExcess = sumArray(subTotals, \"excessPayment\")\r\n    const totalQty = sumArray(subTotals, \"totalQty\")\r\n    const blankColumns = [...new Array(19)].map((d, i) => {\r\n      return i === 11 ? \"\" /*totalQty*/ : \"\"\r\n    })\r\n\r\n    sheets[key].push([\r\n      ...blankColumns,\r\n      \"TOTAL:\",\r\n      produceAmount(others),\r\n      produceAmount(totalDue),\r\n      produceAmount(collectibles),\r\n      produceAmount(amountPaid),\r\n      produceAmount(totalExcess),\r\n    ])\r\n\r\n    if (additionalSheetInfo) {\r\n      const [date = \"\", code = \"\"] = key.split(\" \")\r\n      sumOfRevenues.push({\r\n        sheetName: key,\r\n        date,\r\n        code,\r\n        totalDue,\r\n        collectibles,\r\n        amountPaid,\r\n        totalExcess,\r\n      })\r\n    }\r\n\r\n    if (!additionalSheetInfo) {\r\n      // This is for Summary Area:\r\n      const rowOrder = [\r\n        \"R\",\r\n        \"PP\",\r\n        \"SPWD\",\r\n        \"D/O\",\r\n        \"D/IR\",\r\n        \"D/PM\",\r\n        \"--\",\r\n        \"\",\r\n        \"CASH RECEIVED\", //\"CASH RECEIVABLE\",\r\n      ]\r\n      const finalSummary = []\r\n      let firstPartTotal = 0\r\n      for (const subKey of rowOrder) {\r\n        if (typeof summaries[subKey] !== \"undefined\") {\r\n          const summaryList = [...summaries[subKey]]\r\n          // const others = sumArray(summaryList, \"others\")\r\n          // const totalDue = sumArray(summaryList, \"totalDue\")\r\n          const collectibles = sumArray(summaryList, \"collectibles\")\r\n          const amountPaid = sumArray(summaryList, \"amountPaid\")\r\n          firstPartTotal = firstPartTotal + (amountPaid + collectibles)\r\n          finalSummary.push([\r\n            forRecapLabel(subKey),\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            produceAmount(amountPaid + collectibles),\r\n          ])\r\n        } else {\r\n          if (subKey === \"--\") {\r\n            finalSummary.push([\r\n              subKey,\r\n              \"\",\r\n              \"\",\r\n              \"\",\r\n              produceAmount(firstPartTotal),\r\n            ])\r\n          } else if (subKey === \"CASH RECEIVED\") {\r\n            const cashList = sources[\"Cash\"] || []\r\n            const cash = sumArray(cashList, \"amountPaid\")\r\n            finalSummary.push([subKey, \"\", \"\", \"\", produceAmount(cash)])\r\n          } else if (subKey === \"\") {\r\n            finalSummary.push([])\r\n            finalSummary.push([])\r\n          } else {\r\n            finalSummary.push([subKey, \"\", \"\", \"\", produceAmount(0)])\r\n          }\r\n        }\r\n      }\r\n      sheets[key].push([])\r\n      sheets[key].push([])\r\n      const _blankColumns = new Array(19).map(() => \"\")\r\n      finalSummary.forEach((list) =>\r\n        sheets[key].push([\"__\", ..._blankColumns, ...list])\r\n      )\r\n    }\r\n  }\r\n  if (additionalSheetInfo) {\r\n    return [sheets, sumOfRevenues]\r\n  }\r\n  return sheets\r\n}\r\n\r\nconst forRecapLabel = (subKey) => {\r\n  switch (subKey) {\r\n    case \"R\":\r\n      return `${subKey} - REGULAR`\r\n    case \"PP\":\r\n      return `${subKey} - PARTNER PROVIDER`\r\n    case \"SPWD\":\r\n      return `${subKey} - SENIOR SPWD`\r\n    case \"D/PM\":\r\n      return `${subKey} - PROMO`\r\n    default:\r\n      return subKey\r\n  }\r\n}\r\n\r\nexport const calculateTotalRevChannel = (list) => {\r\n  const totalDue = sumArray(list, \"totalDue\")\r\n  const totalAmountPaid = sumArray(list, \"amountPaid\")\r\n  const totalCollectibles = sumArray(list, \"collectibles\")\r\n  return { totalDue, totalAmountPaid, totalCollectibles }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TableHandler\\helpers.js",["1344"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\sorting.js",["1345"],"export const sortByNumber = (array, field) => {\r\n  return array.sort((a, b) => {\r\n    const numA = Number(a[field])\r\n    const numB = Number(b[field])\r\n    if (numA < numB) {\r\n      return -1\r\n    }\r\n    if (numA > numB) {\r\n      return 1\r\n    }\r\n    return 0\r\n  })\r\n}\r\n\r\nexport default function (array, field) {\r\n  return array.sort((a, b) => {\r\n    if (a[field] < b[field]) {\r\n      return -1\r\n    }\r\n    if (a[field] > b[field]) {\r\n      return 1\r\n    }\r\n    return 0\r\n  })\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\productStaticPrices.js",["1346"],"export default function (orderVia, code, defaultPrice, specificPrices = []) {\r\n  const productObj = {\r\n    price: defaultPrice,\r\n  }\r\n  if (orderVia) {\r\n    // start boundary of FP\r\n    if (\r\n      orderVia.includes(\"FP\") ||\r\n      orderVia.includes(\"DD\") ||\r\n      orderVia.includes(\"DN\") ||\r\n      orderVia.includes(\"GBF\") ||\r\n      orderVia.includes(\"MMF\") ||\r\n      orderVia.includes(\"ZAP\")\r\n    ) {\r\n      const isOrderViaExist = specificPrices.find(\r\n        (data) => data._id === orderVia\r\n      )\r\n      if (typeof isOrderViaExist !== \"undefined\") {\r\n        if (typeof isOrderViaExist[code] !== \"undefined\") {\r\n          if (isOrderViaExist[code] > 0) {\r\n            return isOrderViaExist[code]\r\n          } else {\r\n            return defaultPrice\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // end boundary of FP\r\n\r\n    // start boundary of DN\r\n    // if (orderVia.includes(\"DD\") || orderVia.includes(\"DN\")) {\r\n    //   const isOrderViaExist = specificPrices.find(\r\n    //     (data) => data._id === orderVia\r\n    //   )\r\n    //   console.log(\"sdfsd\", isOrderViaExist)\r\n    //   if (typeof isOrderViaExist !== \"undefined\") {\r\n    //     if (typeof isOrderViaExist[code] !== \"undefined\") {\r\n    //       if (isOrderViaExist[code] > 0) {\r\n    //         return isOrderViaExist[code]\r\n    //       } else {\r\n    //         return defaultPrice\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n  return productObj.price\r\n}\r\n\r\n// FP\r\n// switch (code) {\r\n//   case \"CH8\":\r\n//     productObj.price = 445\r\n//     break\r\n//   case \"CH12\":\r\n//     productObj.price = 660\r\n//     break\r\n//   case \"BC4\":\r\n//     productObj.price = 665\r\n//     break\r\n//   case \"BC2\":\r\n//     productObj.price = 345\r\n//     break\r\n//   case \"M-A\":\r\n//     productObj.price = 185\r\n//     break\r\n//   case \"M-B\":\r\n//     productObj.price = 235\r\n//     break\r\n//   case \"PRT\":\r\n//     productObj.price = 1745\r\n//     break\r\n//   case \"JV4\":\r\n//     productObj.price = 220\r\n//     break\r\n//   case \"JV2\":\r\n//     productObj.price = 120\r\n//     break\r\n//   case \"JV1\":\r\n//     productObj.price = 65\r\n//     break\r\n//   case \"ATC\":\r\n//     productObj.price = 30\r\n//     break\r\n//   case \"SPV\":\r\n//     productObj.price = 20\r\n//     break\r\n//   case \"BCS\":\r\n//     productObj.price = 30\r\n//     break\r\n//   case \"DCO-S1\":\r\n//     productObj.price = 85\r\n//     break\r\n//   case \"DCO LARGE\":\r\n//     productObj.price = 155\r\n//     break\r\n//   case \"CH8-PS\":\r\n//     productObj.price = 55\r\n//     break\r\n//   default:\r\n//     productObj.price = defaultPrice\r\n// }\r\n\r\n// DD\r\n// switch (code) {\r\n//   case \"CH8\":\r\n//     productObj.price = 440\r\n//     break\r\n//   case \"CH12\":\r\n//     productObj.price = 635\r\n//     break\r\n//   case \"BC4\":\r\n//     productObj.price = 635\r\n//     break\r\n//   case \"BC2\":\r\n//     productObj.price = 330\r\n//     break\r\n//   case \"M-4\":\r\n//     productObj.price = 180\r\n//     break\r\n//   case \"M-B\":\r\n//     productObj.price = 225\r\n//     break\r\n//   case \"ATC\":\r\n//     productObj.price = 30\r\n//     break\r\n//   case \"SPV\":\r\n//     productObj.price = 20\r\n//     break\r\n//   case \"BCS\":\r\n//     productObj.price = 30\r\n//     break\r\n//   case \"DCO-S\":\r\n//     productObj.price = 75\r\n//     break\r\n//   case \"DCO-L\":\r\n//     productObj.price = 145\r\n//     break\r\n//   case \"CHF8\":\r\n//     productObj.price = 390\r\n//     break\r\n//   case \"CHF12\":\r\n//     productObj.price = 555\r\n//     break\r\n//   default:\r\n//     productObj.price = defaultPrice\r\n// }\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\rangeHandler.js",["1347","1348","1349"],"import moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(Service) {\r\n  // example instance class: SchedulerServicess\r\n  // how to call hook example: const [rangeHandler, loadData] = useRangeHandler(ScheduleServicess)\r\n  const format = \"MM/DD/YYYY\"\r\n  const defaultDate = moment(new Date(), format)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState([defaultDate, defaultDate])\r\n  const [rangeData, setRangeData] = useState([])\r\n  const [searchData, setSearchData] = useState([])\r\n\r\n  const loadData = async (args) => {\r\n    const { search = null, dateField, orderBy } = args\r\n    setIsLoading(true)\r\n    let dateRange = []\r\n    if (value.length > 0) {\r\n      dateRange = [value[0]._d, value[1]._d]\r\n      const _data = await new Service({\r\n        _dateField: dateField,\r\n        _orderBy: orderBy,\r\n        _dateRange: dateRange,\r\n      }).getRange()\r\n      if (_data.length > 0 && search) {\r\n        const _searchData = _data.filter((data) => {\r\n          let filterResult = true\r\n          for (const key in search) {\r\n            if (search[key] && data[key]) {\r\n              if (data[key].includes(search[key])) {\r\n                // console.log(\"result\", true)\r\n                filterResult = filterResult && true\r\n              } else {\r\n                // console.log(\"result\", false)\r\n                filterResult = filterResult && false\r\n              }\r\n            } else {\r\n              if (search[key]) {\r\n                filterResult = filterResult && false\r\n              } else {\r\n                filterResult = filterResult && true\r\n              }\r\n            }\r\n          }\r\n          return filterResult\r\n        })\r\n        console.log(\"_searchData\", _searchData)\r\n        setSearchData(_searchData)\r\n      } else {\r\n        setSearchData([])\r\n      }\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const onChange = (value) => {\r\n    if (value) {\r\n      setValue(value)\r\n    }\r\n  }\r\n\r\n  return [\r\n    { showTime: false, format, value, onChange }, // rangeComponentHandler\r\n    { value /*rangeData*/, searchData }, // filtered data result\r\n    loadData,\r\n    isLoading,\r\n    // load data example : loadRangeHandlerData({\r\n    //   dateField: \"StartTime\", // required\r\n    //   orderBy: \"StartTime\", // required\r\n    //   search: { //optional\r\n    //     partnerMerchantOrderNo: searchValue,\r\n    //     orderViaPartner: selectHandler.value,\r\n    //   },\r\n    //   specialSearch: \"datePayment\", // use in filter together with search check if value already has a payment //optional\r\n    // })\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\TransactionGroupPayments\\selectComponentHandler.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomDrawer.js",["1350","1351"],"import { Button, Drawer, Space } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\nfunction CustomDrawer({\r\n  title = \"User Profile\",\r\n  children,\r\n  shape = \"round\",\r\n  type = \"default\",\r\n  Icon = <></>,\r\n  buttonLabel = \"\",\r\n  size = \"large\",\r\n  width = \"375px\",\r\n  Footer = <></>,\r\n  placement = \"right\",\r\n  bodyStyle = {},\r\n  clickedRef,\r\n}) {\r\n  const [visible, setVisible] = useState(false)\r\n  const onClose = () => {\r\n    setVisible(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={clickedRef}\r\n        type={type}\r\n        shape={shape}\r\n        icon={Icon}\r\n        size={size}\r\n        onClick={() => {\r\n          setVisible(!visible)\r\n        }}\r\n      >\r\n        {buttonLabel}\r\n      </Button>\r\n      <Drawer\r\n        title={title}\r\n        placement={placement}\r\n        onClose={onClose}\r\n        visible={visible}\r\n        width={width}\r\n        footer={Footer}\r\n        bodyStyle={bodyStyle}\r\n      >\r\n        {children}\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomDrawer\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderForm.js",["1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374"],"import {\r\n  Card,\r\n  Col,\r\n  Row,\r\n  Space,\r\n  Tabs,\r\n  Table,\r\n  message,\r\n  Alert,\r\n  Spin,\r\n  Button,\r\n} from \"antd\"\r\nimport useQuery from \"Hooks/useQuery\"\r\nimport React, { useEffect, useState, useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport {\r\n  ArrowLeftOutlined,\r\n  SaveOutlined,\r\n  EditFilled,\r\n  DeleteFilled,\r\n  ReloadOutlined,\r\n  UnorderedListOutlined,\r\n  PlusCircleOutlined,\r\n} from \"@ant-design/icons\"\r\nimport { Flex } from \"../Styles\"\r\nimport OrderDetails from \"./OrderDetails\"\r\nimport ProductPurchased from \"./ProductPurchased\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport DiscountAndOthersDialog from \"./DiscountAndOthersDialog\"\r\nimport {\r\n  calculateBalanceScheduler,\r\n  calculateDiscountScheduler,\r\n  calculateTotalDueMinusDiscount,\r\n  calculateTotalPayments,\r\n  producedPaymentList,\r\n  producedProductListOfAllCodes,\r\n} from \"Helpers/collectionData\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport PaymentForm from \"./PaymentForm\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport useOrderNoCounter from \"Hooks/hookOrderNoCounter\"\r\nimport UploadFiles from \"../Upload\"\r\nimport { useGetUploads } from \"../Upload/useGetUploads\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport LogsClass from \"Services/Classes/LogsClass\"\r\nimport CustomModal from \"Components/Commons/CustomModal\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport ExcessPaymentsClass from \"Services/Classes/ExcessPaymentsClass\"\r\n\r\nfunction OrderForm({\r\n  back,\r\n  formType,\r\n  modifiedData = () => {},\r\n  setAdvanceFilterButton = () => {},\r\n}) {\r\n  const [productData] = useGetDocuments(ProductsClass)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { handleRemove, handleUpload } = useGetUploads()\r\n  const [productPurchased, setProductPurchased] = useState({})\r\n  const [generateNewOrder] = useOrderNoCounter()\r\n  const [dropdownCollections] = useGetDocuments(DropdownsClass)\r\n  const [orderData, loadOrderData] = useGetDocumentById(SchedulersClass)\r\n  const query = useQuery()\r\n  const id = query.get(\"id\")\r\n  const channelOption = query.get(\"channelOption\")\r\n  const orderNoHeader = orderData?.orderNo ? `(${orderData?.orderNo})` : \"\"\r\n  const tabs = [\r\n    SchedulersClass.ORDER_VIA,\r\n    SchedulersClass.ORDER_VIA_PARTNER,\r\n    SchedulersClass.ORDER_VIA_WEBSITE,\r\n  ]\r\n  const [channel, setChannel] = useState(tabs[0])\r\n  const [isDiscountReset, setIsDiscountReset] = useState(false)\r\n  const [sched, setSched] = useState({})\r\n  const [paymentList, setPaymentList] = useState([])\r\n  const [uploads, setUploads] = useState({ removedPaths: [], fileList: [] })\r\n\r\n  const [totalPayments, setTotalPayments] = useState(0) // for displaying data purposes only\r\n  const [totalDue, setTotalDue] = useState(0) // for displaying data purposes only\r\n  const [discounts, setDiscounts] = useState(0) // for displaying data purposes only\r\n  const [balanceDue, setBalanceDue] = useState(0) // for displaying data purposes only\r\n\r\n  const [loadingButton, setLoadingButton] = useState(false)\r\n\r\n  const [fixedDeduction, setFixedDeduction] = useState({})\r\n\r\n  const [userLogs, setUserLogs] = useState([])\r\n  console.log(\"user\", user)\r\n  console.log(\"logs user\", userLogs)\r\n  console.log(\"sched\", sched)\r\n  console.log(\"paymentList\", paymentList)\r\n  console.log(\"removedPaths\", uploads?.removedPaths)\r\n  console.log(\"fileList\", uploads?.fileList)\r\n  console.log(\"product purch\", productPurchased)\r\n  console.log(\"formType\", formType)\r\n\r\n  useEffect(() => {\r\n    setAdvanceFilterButton(\"none\")\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    loadLogs()\r\n  }, [id])\r\n\r\n  const loadLogs = async () => {\r\n    if (id) {\r\n      const _data = await LogsClass.getDataByFieldName(\"_id\", id)\r\n      setUserLogs(_data)\r\n    }\r\n  }\r\n\r\n  const handleTab = (value) => {\r\n    setChannel(value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const _totalDue = calculateTotalDueMinusDiscount({\r\n      ...sched,\r\n      [SchedulersClass.PARTIALS]: paymentList,\r\n    })\r\n    const _balanceDue = calculateBalanceScheduler({\r\n      ...sched,\r\n      [SchedulersClass.PARTIALS]: paymentList,\r\n      // ...fixedDeduction,\r\n    })\r\n    const _totalPayments = calculateTotalPayments({\r\n      ...sched,\r\n      [SchedulersClass.PARTIALS]: paymentList,\r\n    })\r\n    const _discounts = calculateDiscountScheduler({ ...sched })\r\n    console.log(\"_discounts\", _discounts)\r\n    setTotalDue(_totalDue)\r\n    setBalanceDue(_balanceDue)\r\n    setTotalPayments(_totalPayments)\r\n    setDiscounts(_discounts)\r\n  }, [paymentList, sched /*fixedDeduction*/])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      Object.keys(sched?.others || {}).length === 0 &&\r\n      Object.keys(orderData).length > 0 &&\r\n      !isDiscountReset\r\n    ) {\r\n      setIsDiscountReset(true)\r\n      message.info(\"Discount/Others has been reset\")\r\n    }\r\n  }, [sched])\r\n\r\n  useEffect(() => {\r\n    if (typeof sched[SchedulersClass.TOTAL_DUE] !== \"undefined\") {\r\n      if (sched[SchedulersClass.ORDER_VIA_WEBSITE] === \"[ ZAP ] ZAP\") {\r\n        const _fixedDeduction = orderData[SchedulersClass.FIXED_DEDUCTION] || {}\r\n        const percentage = 0.95\r\n        const amountDeduction = 10\r\n        const _totalAmount = sched?.totalDue * percentage - amountDeduction\r\n        // setFixedDeduction({\r\n        //   [SchedulersClass.FIXED_DEDUCTION]: {\r\n        //     percentage,\r\n        //     amountDeduction,\r\n        //     totalAmountDeducted: sched?.totalDue - _totalAmount,\r\n        //   },\r\n        // })\r\n        if (sched[SchedulersClass.TOTAL_DUE] === 0) {\r\n          setFixedDeduction({})\r\n        }\r\n      } else {\r\n        setFixedDeduction({})\r\n      }\r\n    }\r\n  }, [sched])\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      loadOrderData(id)\r\n      setSched({ [SchedulersClass._ID]: id })\r\n    }\r\n  }, [id])\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(orderData).length > 0) {\r\n      if (orderData[tabs[0]]) {\r\n        setChannel(tabs[0])\r\n      }\r\n      if (orderData[tabs[1]]) {\r\n        setChannel(tabs[1])\r\n      }\r\n      if (orderData[tabs[2]]) {\r\n        setChannel(tabs[2])\r\n      }\r\n      const _sched = {\r\n        [SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS]:\r\n          orderData[SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS] || {},\r\n        [SchedulersClass.OTHERS]: orderData[SchedulersClass.OTHERS] || {},\r\n        [SchedulersClass.TOTAL_DUE]: orderData[SchedulersClass.TOTAL_DUE] || 0,\r\n        [SchedulersClass.ORDER_VIA]: orderData[SchedulersClass.ORDER_VIA],\r\n        [SchedulersClass.ORDER_VIA_PARTNER]:\r\n          orderData[SchedulersClass.ORDER_VIA_PARTNER],\r\n        [SchedulersClass.ORDER_VIA_WEBSITE]:\r\n          orderData[SchedulersClass.ORDER_VIA_WEBSITE],\r\n        [SchedulersClass._ID]: id,\r\n        [SchedulersClass.FIXED_DEDUCTION]: {}, // replace fixed deduction without data\r\n      }\r\n\r\n      setSched(_sched)\r\n      const _totalDue = calculateTotalDueMinusDiscount(orderData)\r\n      const _balanceDue = calculateBalanceScheduler(orderData)\r\n      const _totalPayments = calculateTotalPayments(orderData)\r\n      const _discounts = calculateDiscountScheduler(orderData)\r\n      setTotalDue(_totalDue)\r\n      setBalanceDue(_balanceDue)\r\n      setTotalPayments(_totalPayments)\r\n      setDiscounts(_discounts)\r\n      const payments = producedPaymentList(orderData)\r\n      const sortedPayments = payments.sort((a, b) => {\r\n        return b.date - a.date\r\n      })\r\n      setPaymentList(sortedPayments)\r\n      if (productData.length > 0) {\r\n        const listOfCodes = producedProductListOfAllCodes(productData)\r\n        const codesObj = {}\r\n        for (const code of listOfCodes) {\r\n          codesObj[code] = _sched[code]\r\n        }\r\n        setProductPurchased(codesObj)\r\n      }\r\n    } else {\r\n      const _sched = { ...sched }\r\n      if (formType === \"add\") {\r\n        _sched[SchedulersClass.DATE_ORDER_PLACED] = new Date() // this is for default data of dates\r\n        _sched[SchedulersClass.DATE_START] = new Date() // this is for default data of dates\r\n        _sched[SchedulersClass.DATE_END] = new Date() //  this is for default data of dates\r\n        _sched[SchedulersClass.BRANCH] = user.branchSelected\r\n        _sched[SchedulersClass.WITH_FLEXIBLE_PRICES] = true\r\n      }\r\n      setSched(_sched)\r\n    }\r\n  }, [orderData, user, productData])\r\n\r\n  useEffect(() => {\r\n    if (channelOption === \"partnerMerchant\")\r\n      setChannel(SchedulersClass.ORDER_VIA_PARTNER)\r\n    if (channelOption === \"website\") {\r\n      setChannel(SchedulersClass.ORDER_VIA_WEBSITE)\r\n      setSched({ ...sched, [SchedulersClass.ORDER_VIA_WEBSITE]: \"[ ZAP ] ZAP\" })\r\n    }\r\n    if (channelOption === \"direct\") setChannel(SchedulersClass.ORDER_VIA)\r\n  }, [channelOption])\r\n\r\n  const handleSave = async () => {\r\n    if (formType === \"modified\") {\r\n      const data = {\r\n        ...sched,\r\n        [SchedulersClass.PARTIALS]: paymentList,\r\n        [SchedulersClass.SUBJECT]: sched[SchedulersClass.CUSTOMER],\r\n        ...fixedDeduction,\r\n      }\r\n\r\n      // this is a resolution for the field naming error in firebase since previous data contains this field\r\n      // field that contains \"/\" is not allowed in firebase\r\n      if (typeof data[\"CLONG - P/S - 1 PC\"] !== \"undefined\") {\r\n        delete data[\"CLONG - P/S - 1 PC\"]\r\n        if (typeof data[\"customPriceCLONG - P/S - 1 PC\"] !== \"undefined\") {\r\n          delete data[\"customPriceCLONG - P/S - 1 PC\"]\r\n        }\r\n      }\r\n      if (typeof data[\"SPORK W/ KNIFE\"] !== \"undefined\") {\r\n        delete data[\"SPORK W/ KNIFE\"]\r\n        if (typeof data[\"customPriceSPORK W/ KNIFE\"] !== \"undefined\") {\r\n          delete data[\"customPriceSPORK W/ KNIFE\"]\r\n        }\r\n      }\r\n      //////\r\n\r\n      if (typeof sched[SchedulersClass.ORDER_VIA] === \"undefined\") {\r\n        data[SchedulersClass.ORDER_VIA] = null\r\n      }\r\n\r\n      if (typeof sched.Subject === \"undefined\") {\r\n        data.Subject = null\r\n        data[SchedulersClass.CUSTOMER] = \"\"\r\n      }\r\n\r\n      if (sched[SchedulersClass.CUSTOMER]) {\r\n        data.Subject = sched[SchedulersClass.CUSTOMER]\r\n        data[SchedulersClass.CUSTOMER] = sched[SchedulersClass.CUSTOMER]\r\n      }\r\n\r\n      // remove all product purchased aside from \"others\" and \"totalDue\" to be resetted in the next line of this loop\r\n      for (const key in productPurchased) {\r\n        if (key === \"others\" || key === \"totalDue\") {\r\n        } else {\r\n          delete data[key]\r\n        }\r\n      }\r\n\r\n      // to set the product that contains values greater than 0\r\n      for (const key in productPurchased) {\r\n        if (Number(productPurchased[key]) > 0) {\r\n          data[key] = Number(productPurchased[key])\r\n        } else {\r\n          if (typeof orderData[key] !== \"undefined\") {\r\n            if (Number(orderData[key]) > 0) {\r\n              if (typeof productPurchased[key] !== \"undefined\") {\r\n                data[key] = productPurchased[key]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (paymentList.length > 0) {\r\n        data[SchedulersClass.DATE_PAYMENT] = paymentList[0].date\r\n      }\r\n      if (data[SchedulersClass.PARTIALS]?.length > 0) {\r\n        const _partialDates = []\r\n        let cashForDeposit = false\r\n        data[SchedulersClass.PARTIALS].forEach((pObj) => {\r\n          _partialDates.push(formatDateDash(pObj?.date || new Date()))\r\n          if (\r\n            pObj[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\" &&\r\n            pObj[SchedulersClass.MODE_PAYMENT] === \"Cash\"\r\n          ) {\r\n            cashForDeposit = true\r\n          }\r\n\r\n          if (\r\n            pObj[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\" &&\r\n            pObj[SchedulersClass.MODE_PAYMENT] === \"BDO / 981\"\r\n          ) {\r\n            cashForDeposit = false\r\n          }\r\n        })\r\n        data[SchedulersClass.PARTIAL_DATES_STRING] = _partialDates\r\n        data[SchedulersClass.CASH_FOR_DEPOSIT] = cashForDeposit\r\n      }\r\n      const result = await SchedulersClass.updateDataById(id, data)\r\n      modifiedData(data)\r\n      setLoadingButton(true)\r\n      handleRemove(uploads?.removedPaths)\r\n      await handleUpload(uploads?.fileList, id)\r\n      // save to logs\r\n      await LogsClass.addData({\r\n        [LogsClass._ID]: id,\r\n        [LogsClass.ACTION]: \"Modified\",\r\n        [LogsClass.DATE]: new Date(),\r\n        [LogsClass.DISPLAY_NAME]: user?.name,\r\n        [LogsClass.EMAIL]: user?._id,\r\n      })\r\n      // calculate excess payments\r\n      const amountPaid =\r\n        paymentList.length > 0 ? sumArray(paymentList, \"amount\") : 0\r\n      const excessPayment = totalDue - amountPaid\r\n      if (excessPayment < 0) {\r\n        const isExcessPaymentExist =\r\n          await ExcessPaymentsClass.getDataByFieldName(\"_id\", id)\r\n        const convertExcessPaymentToPositive = excessPayment * -1\r\n        if (isExcessPaymentExist.length === 0) {\r\n          await ExcessPaymentsClass.addData({\r\n            [ExcessPaymentsClass._ID]: id,\r\n            [ExcessPaymentsClass.AMOUNT]: convertExcessPaymentToPositive,\r\n            [ExcessPaymentsClass.DATE]: new Date(),\r\n            [ExcessPaymentsClass.NAME]: data?.customer,\r\n          })\r\n        } else {\r\n          const _id = isExcessPaymentExist[0]._id\r\n          await ExcessPaymentsClass.setData(_id, {\r\n            [ExcessPaymentsClass.AMOUNT]: convertExcessPaymentToPositive,\r\n            [ExcessPaymentsClass.DATE]: new Date(),\r\n            [ExcessPaymentsClass.NAME]: data?.customer,\r\n          })\r\n        }\r\n      }\r\n\r\n      setLoadingButton(false)\r\n      back()\r\n    } else {\r\n      if (user.branchSelected) {\r\n        const newOrderNo = await generateNewOrder(user.branchSelected)\r\n        const newSched = {\r\n          ...sched,\r\n          [SchedulersClass.PARTIALS]: paymentList,\r\n          [SchedulersClass.ORDER_NO]: newOrderNo,\r\n          [SchedulersClass.BRANCH]: user.branchSelected,\r\n          ...fixedDeduction,\r\n          withFlexiblePrices: true,\r\n        }\r\n        // this is for added partial dates string\r\n        if (newSched[SchedulersClass.PARTIALS]?.length > 0) {\r\n          const _partialDates = []\r\n          let cashForDeposit = false\r\n          newSched[SchedulersClass.PARTIALS].forEach((pObj) => {\r\n            if (\r\n              pObj[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\" &&\r\n              pObj[SchedulersClass.MODE_PAYMENT] === \"Cash\"\r\n            ) {\r\n              cashForDeposit = true\r\n            }\r\n\r\n            if (\r\n              pObj[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\" &&\r\n              pObj[SchedulersClass.MODE_PAYMENT] === \"BDO / 981\"\r\n            ) {\r\n              cashForDeposit = false\r\n            }\r\n            _partialDates.push(formatDateDash(pObj?.date || new Date()))\r\n          })\r\n          newSched[SchedulersClass.PARTIAL_DATES_STRING] = _partialDates\r\n          newSched[SchedulersClass.CASH_FOR_DEPOSIT] = cashForDeposit\r\n        }\r\n\r\n        try {\r\n          console.log(\"newSched\", { ...newSched })\r\n          if (paymentList.length > 0) {\r\n            newSched[SchedulersClass.DATE_PAYMENT] = paymentList[0].date\r\n          }\r\n\r\n          // result contains a collection of data saved\r\n          const result = await SchedulersClass.addData(newSched)\r\n          console.log(\"result\", result)\r\n          modifiedData(result)\r\n          setLoadingButton(true)\r\n          handleRemove(uploads?.removedPaths)\r\n          await handleUpload(uploads?.fileList, result?._id)\r\n          // save to logs\r\n          await LogsClass.addData({\r\n            [LogsClass._ID]: result._id,\r\n            [LogsClass.ACTION]: \"Created\",\r\n            [LogsClass.DATE]: new Date(),\r\n            [LogsClass.DISPLAY_NAME]: user?.name,\r\n            [LogsClass.EMAIL]: user?._id,\r\n          })\r\n          setLoadingButton(false)\r\n          back()\r\n        } catch (error) {\r\n          console.log(\"error\", error)\r\n          message.error(\"Oops something went wrong\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleRemovePayment = (_index) => {\r\n    const _paymentList = paymentList.filter((obj, index) => index !== _index)\r\n    setPaymentList(_paymentList)\r\n  }\r\n\r\n  const handleForDeposit = (_index) => {\r\n    const paymentListCopy = [...paymentList]\r\n    const paymentData = paymentList.find((obj, index) => index === _index)\r\n    paymentData.cashForDeposit = true\r\n    paymentListCopy[_index] = paymentData\r\n    setPaymentList(paymentListCopy)\r\n  }\r\n\r\n  if (formType === \"modified\" && Object.keys(orderData).length === 0) {\r\n    return (\r\n      <StyledContainer>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            width: \"100%\",\r\n            height: \"80vh\",\r\n            backgroundColor: \"transparent\",\r\n            bottom: 0,\r\n          }}\r\n        >\r\n          <Spin size=\"large\" />\r\n        </div>\r\n        {/* <URLNotFound /> */}\r\n      </StyledContainer>\r\n    )\r\n  } else {\r\n    return (\r\n      <StyledContainer>\r\n        <Space\r\n          style={{\r\n            width: \"100%\",\r\n            justifyContent: \"space-between\",\r\n            padding: \".5rem\",\r\n          }}\r\n          wrap\r\n        >\r\n          <Space>\r\n            <MainButton\r\n              shape=\"circle\"\r\n              Icon={<ArrowLeftOutlined />}\r\n              onClick={back}\r\n            />\r\n            {`${\r\n              formType === \"add\" ? \"Add \" : \"Modify \"\r\n            }Order Form ${orderNoHeader}`}\r\n          </Space>\r\n\r\n          <Space wrap>\r\n            {tabs.map((key) => {\r\n              return (\r\n                <MainButton\r\n                  label={SchedulersClass.LABELS[key]}\r\n                  type={channel === key ? \"primary\" : \"default\"}\r\n                  shape=\"square\"\r\n                  onClick={() => handleTab(key)}\r\n                />\r\n              )\r\n            })}\r\n          </Space>\r\n        </Space>\r\n\r\n        <Row gutter={[16, 16]}>\r\n          <Col xs={24} sm={24} md={24} xl={6} lg={12}>\r\n            <OrderDetails\r\n              channel={channel}\r\n              modifiedData={(orderDetailsData) => {\r\n                setSched({ ...sched, ...orderDetailsData, _id: id })\r\n              }}\r\n              orderData={orderData}\r\n              tabs={tabs}\r\n              branch={user?.branchSelected}\r\n            />\r\n          </Col>\r\n\r\n          <Col xs={24} sm={24} md={24} lg={12} xl={6}>\r\n            <ProductPurchased\r\n              modifiedData={(products, productCodes = []) => {\r\n                const schedCopy = { ...sched }\r\n                for (const key in productCodes) {\r\n                  if (productCodes[key] === false) {\r\n                    if (typeof schedCopy[`customPrice${key}`] !== \"undefined\") {\r\n                      schedCopy[`customPrice${key}`] = 0\r\n                    }\r\n                  }\r\n                }\r\n                setProductPurchased({ ...products })\r\n                setSched({ ...schedCopy, ...products, _id: id })\r\n              }}\r\n              orderData={orderData}\r\n              orderVia={\r\n                sched[SchedulersClass.ORDER_VIA_PARTNER] ||\r\n                sched[SchedulersClass.ORDER_VIA_WEBSITE]\r\n              }\r\n              formType={formType}\r\n            />\r\n            <br />\r\n            <Card\r\n              title=\"Discounts and Others\"\r\n              extra={[\r\n                Object.keys(sched[SchedulersClass.OTHERS] || {}).length > 0 ? (\r\n                  <MainButton\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    type=\"text\"\r\n                    danger\r\n                    Icon={<DeleteFilled />}\r\n                    onClick={() => {\r\n                      setSched({ ...sched, [SchedulersClass.OTHERS]: {} })\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <></>\r\n                ),\r\n              ]}\r\n            >\r\n              <Space\r\n                style={{\r\n                  justifyContent: \"space-between\",\r\n                  width: \"100%\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <Space direction=\"vertical\">\r\n                  {Object.keys(sched?.others || {}).length > 0 && (\r\n                    <Space direction=\"vertical\">\r\n                      <CustomTitle\r\n                        typographyType=\"text\"\r\n                        label={Object.keys(sched?.others || {}).map(\r\n                          (key) => key\r\n                        )}\r\n                        type=\"secondary\"\r\n                      />\r\n                      <CustomTitle\r\n                        typographyType=\"text\"\r\n                        label={Object.keys(sched?.others || {}).map((key) =>\r\n                          thousandsSeparators(\r\n                            Number(sched?.others[key]).toFixed(2)\r\n                          )\r\n                        )}\r\n                      />\r\n                    </Space>\r\n                  )}\r\n\r\n                  {(sched[SchedulersClass.ORDER_VIA_WEBSITE] ===\r\n                    \"[ ZAP ] ZAP\" &&\r\n                    totalDue > 0) ||\r\n                  (orderData[SchedulersClass.ORDER_VIA_WEBSITE] ===\r\n                    \"[ ZAP ] ZAP\" &&\r\n                    totalDue > 0) ? (\r\n                    <Space direction=\"vertical\">\r\n                      {/* <CustomTitle\r\n                        typographyType=\"text\"\r\n                        label=\"ZAP 5% + Fixed Fee 10\"\r\n                        type=\"secondary\"\r\n                      />\r\n                      <CustomTitle\r\n                        typographyType=\"text\"\r\n                        label={\r\n                          fixedDeduction[SchedulersClass.FIXED_DEDUCTION]\r\n                            ?.totalAmountDeducted\r\n                        }\r\n                      /> */}\r\n                    </Space>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </Space>\r\n                {/* <ActionButton label=\"Less\" danger /> */}\r\n                <DiscountAndOthersDialog\r\n                  orderNo={orderData?.orderNo}\r\n                  formFields={\r\n                    sched[SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS] || {}\r\n                  }\r\n                  others={sched[SchedulersClass.OTHERS] || {}}\r\n                  totalDue={sched.totalDue}\r\n                  modifiedData={(additional, others = \"\") => {\r\n                    setIsDiscountReset(false)\r\n                    setSched({\r\n                      ...sched,\r\n                      [SchedulersClass.DISCOUNT_ADDITIONAL_DETAILS]: additional,\r\n                      [SchedulersClass.OTHERS]: {\r\n                        [others]: additional[others]?.amount || 0,\r\n                      },\r\n                    })\r\n                  }}\r\n                />\r\n              </Space>\r\n            </Card>\r\n            <br />\r\n            <Card title=\"Attachments\">\r\n              <div\r\n                style={{\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <UploadFiles\r\n                  id={id}\r\n                  modifiedData={(fileLists, removedPaths) => {\r\n                    setUploads({\r\n                      fileList: fileLists,\r\n                      removedPaths: removedPaths,\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={24} sm={24} md={24} lg={24} xl={12}>\r\n            <Card\r\n              title=\"Payment Details\"\r\n              actions={[\r\n                <Due label=\"Total Payment\" value={totalPayments} />,\r\n                <Due label=\"Balance Due\" value={balanceDue} />,\r\n                <PaymentForm\r\n                  paymentList={paymentList}\r\n                  index={null}\r\n                  modifiedData={(data) => {\r\n                    setPaymentList(data)\r\n                  }}\r\n                  fixedDeduction={\r\n                    fixedDeduction[SchedulersClass.FIXED_DEDUCTION]\r\n                      ?.totalAmountDeducted || 0\r\n                  }\r\n                  balanceDue={balanceDue}\r\n                  enabledButton={balanceDue <= 0 ? false : true}\r\n                  dropdownCollections={dropdownCollections}\r\n                />,\r\n              ]}\r\n              extra={\r\n                balanceDue < 0 ? (\r\n                  <Alert\r\n                    message=\"Conflicts: Balance Due is Negative\"\r\n                    type=\"error\"\r\n                    showIcon\r\n                  />\r\n                ) : (\r\n                  <MainButton\r\n                    shape=\"circle\"\r\n                    Icon={<ReloadOutlined />}\r\n                    type=\"default\"\r\n                    onClick={() => {\r\n                      if (formType === \"modified\") {\r\n                        const _paymentList = producedPaymentList(orderData)\r\n                        setPaymentList(_paymentList)\r\n                      }\r\n                    }}\r\n                  />\r\n                )\r\n              }\r\n            >\r\n              <Table\r\n                size=\"small\"\r\n                scroll={{ x: \"calc(320px + 50%)\", y: \"50vh\" }}\r\n                pagination={false}\r\n                columns={[\r\n                  {\r\n                    title: \"Date\",\r\n                    dataIndex: \"date\",\r\n                    width: 100,\r\n                    render: (data) => {\r\n                      return formatDateDash(data)\r\n                    },\r\n                  },\r\n                  {\r\n                    title: \"OR #\",\r\n                    dataIndex: SchedulersClass.OR_NO,\r\n                    width: 100,\r\n                  },\r\n                  {\r\n                    title: \"SOA #\",\r\n                    dataIndex: SchedulersClass.SOA_NUMBER,\r\n                    width: 100,\r\n                  },\r\n                  {\r\n                    title: \"MOP\",\r\n                    dataIndex: SchedulersClass.MODE_PAYMENT,\r\n                    width: 150,\r\n                  },\r\n                  {\r\n                    title: \"Source\",\r\n                    dataIndex: SchedulersClass.SOURCE,\r\n                    width: 150,\r\n                  },\r\n                  {\r\n                    title: \"Ref #\",\r\n                    dataIndex: SchedulersClass.REF_NO,\r\n                    width: 150,\r\n                  },\r\n                  {\r\n                    title: \"Receiving Acct\",\r\n                    dataIndex: SchedulersClass.ACCOUNT_NUMBER,\r\n                    width: 150,\r\n                  },\r\n                  {\r\n                    title: \"Amount Paid\",\r\n                    dataIndex: \"amount\",\r\n                    align: \"right\",\r\n                    width: 130,\r\n                    render: (data) => {\r\n                      return thousandsSeparators(Number(data).toFixed(2))\r\n                    },\r\n                  },\r\n                  // {\r\n                  //   title: \"Payment Notes\",\r\n                  //   dataIndex: SchedulersClass.PAYMENT_NOTES,\r\n                  // },\r\n                  {\r\n                    title: \"\",\r\n                    dataIndex: \"actions\",\r\n                    width: 80,\r\n                    render: (value, record, index) => {\r\n                      return (\r\n                        <Space>\r\n                          <PaymentForm\r\n                            paymentList={paymentList}\r\n                            buttonSize=\"small\"\r\n                            ButtonIcon={<EditFilled />}\r\n                            buttonShape=\"circle\"\r\n                            buttonLabel=\"\" // value is equal to \"\" to disable default label value Add Product\r\n                            padding=\"rem\"\r\n                            index={index}\r\n                            modifiedData={(data) => {\r\n                              setPaymentList(data)\r\n                            }}\r\n                            balanceDue={balanceDue} // use for conditioning amount input of payment form only for add\r\n                            totalDue={totalDue} // use for conditioning amount input of payment form only for update\r\n                            discounts={discounts} // use for conditioning amount input of payment form for update\r\n                            dropdownCollections={dropdownCollections}\r\n                            fixedDeduction={\r\n                              fixedDeduction[SchedulersClass.FIXED_DEDUCTION]\r\n                                ?.totalAmountDeducted || 0\r\n                            }\r\n                          />\r\n                          <MainButton\r\n                            shape=\"circle\"\r\n                            Icon={<DeleteFilled />}\r\n                            size=\"small\"\r\n                            type=\"text\"\r\n                            danger\r\n                            onClick={() => handleRemovePayment(index)}\r\n                          />\r\n                          {/* {record[SchedulersClass.MODE_PAYMENT] === \"Cash\" && (\r\n                            <MainButton\r\n                              type={record?.cashForDeposit ? \"text\" : \"primary\"}\r\n                              label={\r\n                                record?.cashForDeposit ? \"Pending\" : \"Unpaid\"\r\n                              }\r\n                              onClick={() => {\r\n                                if (record?.cashForDeposit) {\r\n                                } else {\r\n                                  handleForDeposit(index)\r\n                                }\r\n                              }}\r\n                              size=\"small\"\r\n                            />\r\n                          )} */}\r\n                        </Space>\r\n                      )\r\n                    },\r\n                  },\r\n                ]}\r\n                dataSource={[...paymentList]}\r\n              />\r\n            </Card>\r\n            <br />\r\n            <Card title=\"Transaction Summary\">\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                size=\"small\"\r\n                columns={[\r\n                  { title: \"Description\", dataIndex: \"description\" },\r\n                  { title: \"Amount\", dataIndex: \"amount\", align: \"right\" },\r\n                ]}\r\n                dataSource={[\r\n                  {\r\n                    description: \"Total Due\",\r\n                    amount: thousandsSeparators(\r\n                      (Number(sched?.totalDue) || 0).toFixed(2)\r\n                    ),\r\n                    // amount: thousandsSeparators(\r\n                    //   (Number(totalDue) + Number(discounts)).toFixed(2)\r\n                    // ),\r\n                  },\r\n                  {\r\n                    description: \"Discount / Others\",\r\n                    amount: discounts, //thousandsSeparators(Number(discounts).toFixed(2)),\r\n                  },\r\n                  {\r\n                    description: \"ZAP 5% + Fixed Fee 10\",\r\n                    amount: thousandsSeparators(\r\n                      Number(\r\n                        fixedDeduction[SchedulersClass.FIXED_DEDUCTION]\r\n                          ?.totalAmountDeducted || 0\r\n                      ).toFixed(2)\r\n                    ),\r\n                  },\r\n                  {\r\n                    description: \"Total Payment\",\r\n                    amount: thousandsSeparators(\r\n                      Number(totalPayments).toFixed(2)\r\n                    ),\r\n                  },\r\n                  {\r\n                    description: \"Balance Due\",\r\n                    amount: thousandsSeparators(Number(balanceDue).toFixed(2)),\r\n                  },\r\n                ]}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            right: \"3rem\",\r\n            bottom: \"1rem\",\r\n          }}\r\n        >\r\n          {Object.keys(sched).length > 0 && (\r\n            <Space style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\r\n              <CustomModal\r\n                ButtonIcon={<UnorderedListOutlined />}\r\n                buttonShape=\"circle\"\r\n                buttonType=\"text\"\r\n              >\r\n                <Table\r\n                  columns={[\r\n                    {\r\n                      title: LogsClass.LABELS[LogsClass.EMAIL],\r\n                      dataIndex: LogsClass.EMAIL,\r\n                      key: LogsClass.EMAIL,\r\n                    },\r\n                    {\r\n                      title: LogsClass.LABELS[LogsClass.DISPLAY_NAME],\r\n                      dataIndex: LogsClass.DISPLAY_NAME,\r\n                      key: LogsClass.DISPLAY_NAME,\r\n                    },\r\n                    {\r\n                      title: LogsClass.LABELS[LogsClass.ACTION],\r\n                      dataIndex: LogsClass.ACTION,\r\n                      key: LogsClass.ACTION,\r\n                    },\r\n                    {\r\n                      title: LogsClass.LABELS[LogsClass.DATE],\r\n                      dataIndex: LogsClass.DATE,\r\n                      key: LogsClass.DATE,\r\n                      render: (data) => {\r\n                        const formatFromDatabase = formatDateFromDatabase(data)\r\n                        const formatDate = formatDateDash(formatFromDatabase)\r\n                        return formatDate\r\n                      },\r\n                    },\r\n                  ]}\r\n                  dataSource={[...userLogs]}\r\n                  pagination={false}\r\n                  size=\"small\"\r\n                />\r\n              </CustomModal>\r\n              {loadingButton ? (\r\n                <MainButton\r\n                  size=\"large\"\r\n                  type=\"default\"\r\n                  Icon={<Spin />}\r\n                  shape=\"circle\"\r\n                />\r\n              ) : (\r\n                <MainButton\r\n                  label=\"Save\"\r\n                  Icon={<SaveOutlined />}\r\n                  size=\"large\"\r\n                  onClick={handleSave}\r\n                />\r\n              )}\r\n            </Space>\r\n          )}\r\n        </div>\r\n      </StyledContainer>\r\n    )\r\n  }\r\n}\r\n\r\nconst Due = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <span style={{ position: \"absolute\", fontSize: \"10px\" }}>\r\n        {props.label}\r\n      </span>\r\n      <span style={{ position: \"absolute\", top: \"1rem\", color: \"red\" }}>\r\n        {thousandsSeparators(Number(props.value).toFixed(2))}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ActionButton = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <MainButton label={props.label} type=\"default\" danger={props.danger} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StyledContainer = styled.div`\r\n  display: flex;\r\n  /* grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr; */\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 100vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n`\r\n\r\nconst StyledHeader = styled(Space)`\r\n  display: flex;\r\n`\r\n\r\nconst StyledFormContainer = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n`\r\nconst StyledForm = styled(Space)`\r\n  display: flex;\r\n  max-width: 375px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledActionContainer = styled(Space)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 1rem;\r\n`\r\nexport default OrderForm\r\n// backgroundColor: \"#1890ff\"\r\n// backgroundColor: \"#1890ff\"\r\n// backgroundColor: \"#1890ff\"\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Sidenav\\SidenavMobile.js",["1375","1376"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport { Menu } from \"antd\"\r\nimport { useSelectMenus } from \"./hook\"\r\nimport { useHistory } from \"react-router\"\r\nimport CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport { MenuOutlined } from \"@ant-design/icons\"\r\nconst { SubMenu } = Menu\r\n\r\nfunction SidenavMobile() {\r\n  const history = useHistory()\r\n  const { menus, selectedKeys } = useSelectMenus()\r\n  const clickedRef = useRef()\r\n  return (\r\n    <CustomDrawer\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      title=\"VITO'S BBQ\"\r\n      Icon={<MenuOutlined />}\r\n      placement=\"left\"\r\n      bodyStyle={{ padding: 0 }}\r\n      clickedRef={clickedRef}\r\n    >\r\n      <Menu\r\n        mode=\"inline\"\r\n        theme=\"light\"\r\n        style={{ display: \"flex\", flexDirection: \"column\" }}\r\n        selectedKeys={selectedKeys}\r\n      >\r\n        {menus.map((menu) => {\r\n          const subMenu = [...menu.subMenu]\r\n          return (\r\n            <SubMenu\r\n              key={menu.key}\r\n              icon={menu.Icon}\r\n              title={menu.title}\r\n              style={{ display: menu.display ? \"block\" : \"none\" }}\r\n              onTitleClick={() => {\r\n                history.push(menu.path)\r\n              }}\r\n            >\r\n              {subMenu.map((sub) => {\r\n                return (\r\n                  <Menu.Item\r\n                    key={sub.key}\r\n                    onClick={() => {\r\n                      history.push(sub.path)\r\n                      clickedRef.current.click()\r\n                    }}\r\n                    style={{ display: menu.display ? \"block\" : \"none\" }}\r\n                  >\r\n                    {sub.title}\r\n                  </Menu.Item>\r\n                )\r\n              })}\r\n            </SubMenu>\r\n          )\r\n        })}\r\n      </Menu>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nexport default SidenavMobile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\ContentNavigator\\hook.js",["1377","1378","1379"],"import { useHistory, useLocation } from \"react-router\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { LABEL } from \"Constants/pathNames\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\n\r\n// Notes: The header label of this page is dependent in the constants/pathNames file (if it doesnt exist you must create a variable first)\r\n\r\nexport default function useContentNavigator() {\r\n  const location = useLocation()\r\n  const [breadcrumb, setBreadcrumb] = useState([])\r\n  const [header, setHeader] = useState(\"\")\r\n  const [breadcrumbCount, setBreadcrumbCount] = useState(0)\r\n  useEffect(() => {\r\n    const pathNames = handlePathNames(location.pathname)\r\n    setBreadcrumbCount(pathNames.length)\r\n    const _breadcrumb = []\r\n    if (pathNames.length === 0) {\r\n      setHeader(\"Home\")\r\n    }\r\n    for (const routeName of pathNames) {\r\n      let url = producedURL(routeName, pathNames)\r\n      const title = LABEL[routeName] ? LABEL[routeName] : routeName\r\n      _breadcrumb.push({\r\n        title,\r\n        url: url,\r\n      })\r\n      setHeader(title)\r\n    }\r\n    setBreadcrumb(_breadcrumb)\r\n  }, [location.pathname])\r\n\r\n  // this function will split tha location pathName url and produced an array of strings\r\n  const handlePathNames = (pathUrl) => {\r\n    const pathNameSplit = pathUrl.split(\"/\")\r\n    // to clear empty strings inside array\r\n    const pathNames = pathNameSplit.filter((e) => e)\r\n    return pathNames\r\n  }\r\n  return { header, breadcrumb, breadcrumbCount }\r\n}\r\n\r\n// this function will produced a path url for each breadcrumb click\r\nconst producedURL = (routeName, pathNames) => {\r\n  let url = \"\"\r\n  const pathNameIndex = pathNames.indexOf(routeName)\r\n  for (let index = 0; index <= pathNameIndex; index++) {\r\n    url += `/${pathNames[index]}`\r\n  }\r\n  return url\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\PaymentForm.js",["1380","1381","1382","1383","1384","1385"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\DiscountAndOthersDialog.js",["1386"],"import React, { useEffect, useState } from \"react\"\r\nimport { Modal, Button } from \"antd\"\r\nimport { Radio, Input, Space, Slider } from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nconst { TextArea } = Input\r\n\r\nconst SENIOR = \"Senior Citizen\"\r\nconst PWD = \"PWD\"\r\nconst AUTOMATIC = \"Automatic 20 percent off\"\r\nconst PROMO = \"Promo\"\r\nconst SPECIAL = \"Special\"\r\nconst INCIDENTS = \"Incidents\"\r\nconst REFUND = \"Refund\"\r\n\r\nconst fields = {\r\n  name: \"Name\",\r\n  city: \"City\",\r\n  id: \"ID#\",\r\n  amount: \"Amount\",\r\n  remarks: \"REMARKS\",\r\n}\r\n\r\nconst initialState = {\r\n  [SENIOR]: {\r\n    name: \"\",\r\n    city: \"\",\r\n    id: \"\",\r\n    amount: 0,\r\n  },\r\n  [PWD]: {\r\n    name: \"\",\r\n    city: \"\",\r\n    id: \"\",\r\n    amount: 0,\r\n  },\r\n  [AUTOMATIC]: {\r\n    amount: 0,\r\n    remarks: \"\",\r\n  },\r\n  [REFUND]: {\r\n    amount: 0,\r\n    remarks: \"\",\r\n  },\r\n  [PROMO]: {\r\n    percentage: 0,\r\n    amount: 0,\r\n  },\r\n  [INCIDENTS]: {\r\n    orderNo: \"\",\r\n    clientName: \"\",\r\n    contactNo: \"\",\r\n    dateAndTime: \"\",\r\n    briefDescription: \"\",\r\n    actionTaken: \"\",\r\n    onDuty: \"\",\r\n    amount: 0,\r\n  },\r\n  [SPECIAL]: {\r\n    orderNo: \"\",\r\n    clientName: \"\",\r\n    contactNo: \"\",\r\n    dateAndTime: \"\",\r\n    onDuty: \"\",\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nfunction DiscountAndOthersDialog(props) {\r\n  const [visible, setVisible] = useState(false)\r\n  const [state, setState] = useState(SENIOR)\r\n  const [additionalDetails, setAdditionalDetails] = useState({\r\n    ...initialState,\r\n  })\r\n\r\n  useEffect(() => {\r\n    const { formFields = {}, others = {}, orderNo = \"\" } = props\r\n    if (Object.keys(others).length > 0) {\r\n      for (const discName of Object.keys(others)) {\r\n        setState(discName)\r\n      }\r\n    } else {\r\n      setState(SENIOR)\r\n    }\r\n    if (formFields) {\r\n      setAdditionalDetails({\r\n        ...initialState,\r\n        ...formFields,\r\n      })\r\n    } else {\r\n      setAdditionalDetails({\r\n        ...initialState,\r\n        [AUTOMATIC]: { remarks: \"\", amount: props.totalDue * 0.5 },\r\n        [INCIDENTS]: { ...initialState[INCIDENTS], orderNo: orderNo },\r\n        [SPECIAL]: { ...initialState[INCIDENTS], orderNo: orderNo },\r\n      })\r\n    }\r\n  }, [props, visible])\r\n\r\n  const onChange = (e) => {\r\n    const automatic = { ...additionalDetails[AUTOMATIC] }\r\n    const incidents = { ...additionalDetails[INCIDENTS], orderNo: \"\" }\r\n    setAdditionalDetails({\r\n      ...additionalDetails,\r\n      [AUTOMATIC]: {\r\n        remarks: automatic?.remarks,\r\n        amount: props.totalDue * 0.2,\r\n      },\r\n      [INCIDENTS]: { ...incidents, orderNo: props?.orderNo || \"\" },\r\n    })\r\n    setState(e.target.value)\r\n  }\r\n\r\n  const handleFormChange = (e, discName, fieldName) => {\r\n    const _additionalDetails = { ...additionalDetails }\r\n    const _discName = { ..._additionalDetails[discName] }\r\n    _discName[fieldName] = e.target.value\r\n    _additionalDetails[discName] = _discName\r\n    setAdditionalDetails(_additionalDetails)\r\n  }\r\n\r\n  const handlePercentage = (value) => {\r\n    const _additionalDetails = { ...additionalDetails }\r\n    const _discName = { ..._additionalDetails[PROMO] }\r\n    _discName[\"percentage\"] = value\r\n    _discName[\"amount\"] = value * 0.01 * props.totalDue\r\n    _additionalDetails[PROMO] = _discName\r\n    setAdditionalDetails(_additionalDetails)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MainButton\r\n        disabled={\r\n          Number(props.totalDue) === 0 || typeof props?.totalDue === \"undefined\"\r\n        }\r\n        label=\"Less\"\r\n        danger\r\n        type=\"default\"\r\n        onClick={() => setVisible(true)}\r\n      />\r\n      <Modal\r\n        title=\"Discount and Others\"\r\n        centered\r\n        visible={visible}\r\n        onOk={() => {\r\n          setVisible(false)\r\n          // console.log(\"additionalDetails\", additionalDetails)\r\n          props.modifiedData(additionalDetails, state)\r\n        }}\r\n        onCancel={() => setVisible(false)}\r\n        width={1000}\r\n      >\r\n        <div style={{ minHeight: \"30rem\" }}>\r\n          <Radio.Group onChange={onChange} value={state}>\r\n            <Space direction=\"horizontal\">\r\n              <Radio value={SENIOR}>SENIOR CITIZEN</Radio>\r\n              <Radio value={PWD}>PWD</Radio>\r\n              <Radio value={AUTOMATIC}>AUTOMATIC 20% OFF</Radio>\r\n              <Radio value={PROMO}>PROMO</Radio>\r\n              <Radio value={SPECIAL}>SPECIAL</Radio>\r\n              <Radio value={INCIDENTS}>INCIDENTS</Radio>\r\n              <Radio value={REFUND}>REFUND</Radio>\r\n            </Space>\r\n          </Radio.Group>\r\n          <br />\r\n          <br />\r\n          <br />\r\n\r\n          {/* SENIOR AND PWD */}\r\n          <div\r\n            style={\r\n              state === SENIOR || state === PWD\r\n                ? { display: \"grid\", justifyContent: \"center\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            {(state === SENIOR || state === PWD) &&\r\n              Object.keys(additionalDetails[state]).map((fieldName) => {\r\n                return (\r\n                  <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n                    <label>{fields[fieldName]}</label>\r\n                    <Input\r\n                      value={additionalDetails[state][fieldName]}\r\n                      type={fieldName === \"amount\" ? \"number\" : \"text\"}\r\n                      onChange={(e) => handleFormChange(e, state, fieldName)}\r\n                    />\r\n                  </div>\r\n                )\r\n              })}\r\n          </div>\r\n\r\n          {/* AUTOMATIC AND REFUND */}\r\n          <div\r\n            style={\r\n              state === AUTOMATIC || state === REFUND\r\n                ? { display: \"grid\", justifyContent: \"center\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            {(state === AUTOMATIC || state === REFUND) &&\r\n              Object.keys(additionalDetails[state]).map((fieldName) => {\r\n                return fieldName === \"remarks\" ? (\r\n                  <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n                    <label>{fields[fieldName]}</label>\r\n                    <TextArea\r\n                      value={additionalDetails[state][fieldName]}\r\n                      onChange={(e) => handleFormChange(e, state, fieldName)}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n                    <label>{fields[fieldName]}</label>\r\n                    <Input\r\n                      value={additionalDetails[state][fieldName]}\r\n                      type={fieldName === \"amount\" ? \"number\" : \"text\"}\r\n                      onChange={(e) =>\r\n                        state !== AUTOMATIC &&\r\n                        handleFormChange(e, state, fieldName)\r\n                      }\r\n                    />\r\n                  </div>\r\n                )\r\n              })}\r\n          </div>\r\n\r\n          {/* PROMO */}\r\n\r\n          <div\r\n            style={\r\n              state === PROMO\r\n                ? { display: \"grid\", justifyContent: \"center\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                width: \"25rem\",\r\n                marginBottom: \".6rem\",\r\n                display: \"flex\",\r\n                alignItems: \"flex-end\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <div style={{ flex: \"1\" }}>\r\n                <label>Percentage:</label>\r\n                <Slider\r\n                  defaultValue={additionalDetails[PROMO]?.percentage}\r\n                  onChange={(value) => handlePercentage(value)}\r\n                />\r\n              </div>\r\n              <div style={{ padding: \".4rem\" }}>\r\n                <label>{`${additionalDetails[PROMO]?.percentage}%`}</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Amount:</label>\r\n              <Input type=\"number\" value={additionalDetails[PROMO]?.amount} />\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            style={\r\n              state === INCIDENTS || state === SPECIAL\r\n                ? { display: \"grid\", justifyContent: \"center\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Order #:</label>\r\n              <Input\r\n                value={additionalDetails[state].orderNo}\r\n                onChange={(e) => handleFormChange(e, state, \"orderNo\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Client name:</label>\r\n              <Input\r\n                value={additionalDetails[state].clientName}\r\n                onChange={(e) => handleFormChange(e, state, \"clientName\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Contact #:</label>\r\n              <Input\r\n                value={additionalDetails[state].contactNo}\r\n                onChange={(e) => handleFormChange(e, state, \"contactNo\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Date and time of Order #:</label>\r\n              <Input\r\n                type=\"text\"\r\n                value={additionalDetails[state].dateAndTime}\r\n                onChange={(e) => handleFormChange(e, state, \"dateAndTime\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Brief Description:</label>\r\n              <TextArea\r\n                type=\"text\"\r\n                value={additionalDetails[state].briefDescription}\r\n                onChange={(e) => handleFormChange(e, state, \"briefDescription\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Action Taken:</label>\r\n              <TextArea\r\n                type=\"text\"\r\n                value={additionalDetails[state].actionTaken}\r\n                onChange={(e) => handleFormChange(e, state, \"actionTaken\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>On duty:</label>\r\n              <Input\r\n                type=\"text\"\r\n                value={additionalDetails[state].onDuty}\r\n                onChange={(e) => handleFormChange(e, state, \"onDuty\")}\r\n              />\r\n            </div>\r\n            <div style={{ width: \"25rem\", marginBottom: \".6rem\" }}>\r\n              <label>Amount:</label>\r\n              <Input\r\n                value={additionalDetails[state].amount}\r\n                type=\"number\"\r\n                onChange={(e) => handleFormChange(e, state, \"amount\")}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DiscountAndOthersDialog\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\OrderDetails.js",["1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398"],"import { Card, Col, DatePicker, Row, Space, Switch } from \"antd\"\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\"\r\nimport CustomDate from \"Components/Commons/CustomDate\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport {\r\n  DATE_TYPE,\r\n  DROPDOWN_TYPE,\r\n  STRING_TYPE,\r\n  TEXT_AREA_TYPE,\r\n} from \"Constants/types\"\r\nimport useGetDocumentsByFn from \"Hooks/useGetDocumentsByFn\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport DropdownsClass from \"Services/Classes/DropdownsClass\"\r\nimport CustomTextArea from \"Components/Commons/CustomTextArea\"\r\nimport {\r\n  producedDropdowns,\r\n  producedProductListOfAllCodes,\r\n} from \"Helpers/collectionData\"\r\nimport addMinusDay, { addMinutes, minusMinutes } from \"Helpers/addMinusDay\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatTime,\r\n} from \"Helpers/dateFormat\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport moment from \"moment\"\r\nimport useGetDocumentById from \"Hooks/useGetDocumentById\"\r\nimport VIPUsersClass from \"Services/Classes/vipUsersClass\"\r\n\r\nfunction OrderDetails({\r\n  channel,\r\n  modifiedData = () => {},\r\n  orderData,\r\n  tabs,\r\n  ...rest\r\n}) {\r\n  const [vip, loadVIP] = useGetDocumentById(VIPUsersClass)\r\n  const [data] = useGetDocuments(ProductsClass)\r\n  const [dropdownCollections] = useGetDocuments(DropdownsClass)\r\n  const types = {\r\n    ...SchedulersClass.TYPES,\r\n    customDate: \"customDate\",\r\n    space: \"space\",\r\n  }\r\n  const rowColumns = [SchedulersClass.DATE_START, SchedulersClass.DATE_END]\r\n\r\n  // this is for the value data States\r\n  const [dates, setDates] = useState({\r\n    [SchedulersClass.DATE_ORDER_PLACED]: new Date(),\r\n    [SchedulersClass.DATE_START]: new Date(),\r\n    [SchedulersClass.DATE_END]: addMinutes(new Date()),\r\n  })\r\n  const [dataValue, setDataValue] = useState({\r\n    [SchedulersClass.REMARKS]: \"RIDER DETAILS:\\nNAME:\\nCONTACT NUMBER:\",\r\n  })\r\n  //------------------//\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [firstColumns, setFirstColumns] = useState([\r\n    SchedulersClass.UTAK_NO,\r\n    \"space\",\r\n    SchedulersClass.CUSTOMER,\r\n    SchedulersClass.CONTACT_NUMBER,\r\n  ])\r\n  const [rowColumnsBottom, setRowColumnsBottom] = useState([])\r\n  const [enableTimeGap, setEnableTimeGap] = useState(true)\r\n  const [enableVIP, setEnableVIP] = useState(false)\r\n  const [secondColumns, setSecondColumns] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (vip) {\r\n      setEnableVIP(vip[SchedulersClass.IS_VIP])\r\n      handleChanges(SchedulersClass.IS_VIP, !enableVIP)\r\n    }\r\n  }, [vip])\r\n\r\n  useEffect(() => {\r\n    if (isTouched) {\r\n      modifiedData({ ...dates, ...dataValue })\r\n    }\r\n  }, [dates, dataValue])\r\n\r\n  useEffect(() => {\r\n    const _secondColumns = [channel, SchedulersClass.ACCOUNT_NAME]\r\n    const _rowColumnsBot = [\r\n      \"customDate\", //this the date time start and time field\r\n      SchedulersClass.STATUS,\r\n      SchedulersClass.INDICATE_REASON,\r\n      SchedulersClass.REMARKS,\r\n    ]\r\n    if (channel === SchedulersClass.ORDER_VIA_PARTNER) {\r\n      _rowColumnsBot.splice(0, 0, SchedulersClass.PARTNER_MERCHANT_ORDER_NO)\r\n    }\r\n    if (channel === SchedulersClass.ORDER_VIA_WEBSITE) {\r\n      _rowColumnsBot.splice(0, 0, SchedulersClass.ZAP_NUMBER)\r\n    }\r\n\r\n    setSecondColumns(_secondColumns)\r\n    setRowColumnsBottom(_rowColumnsBot)\r\n\r\n    // dataValue reset\r\n    const productCodes = producedProductListOfAllCodes(data)\r\n    const _orderData = { ...orderData }\r\n    for (const key of productCodes) {\r\n      delete _orderData[key]\r\n      delete _orderData[`customPrice${key}`]\r\n    }\r\n    delete _orderData[SchedulersClass.TOTAL_DUE]\r\n    let _dataValue = {\r\n      ..._orderData,\r\n    }\r\n\r\n    // order via renewed\r\n    for (const key of tabs) {\r\n      if (channel !== key) {\r\n        _dataValue[key] = null\r\n      }\r\n    }\r\n\r\n    if (Object.keys(_orderData).length > 0) {\r\n      // _dataValue = { ..._dataValue, ...orderData }\r\n\r\n      // this is for the date fields from database\r\n      const dateStart = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_START]\r\n      )\r\n      const dateEnd = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_END]\r\n      )\r\n      const dateTimePlaced = formatDateFromDatabase(\r\n        _dataValue[SchedulersClass.DATE_ORDER_PLACED]\r\n      )\r\n      setDates({\r\n        [SchedulersClass.DATE_START]: dateStart,\r\n        [SchedulersClass.DATE_END]: dateEnd,\r\n        [SchedulersClass.DATE_ORDER_PLACED]: dateTimePlaced,\r\n      })\r\n\r\n      //ramove date properties since it will be on the separate state called dates\r\n      delete _dataValue[SchedulersClass.DATE_START]\r\n      delete _dataValue[SchedulersClass.DATE_END]\r\n      delete _dataValue[SchedulersClass.DATE_ORDER_PLACED]\r\n      delete _dataValue[SchedulersClass.DATE_PAYMENT]\r\n    } else {\r\n      _dataValue[SchedulersClass.REMARKS] =\r\n        \"RIDER DETAILS:\\nNAME:\\nCONTACT NUMBER:\"\r\n    }\r\n\r\n    if (channel === SchedulersClass.ORDER_VIA_WEBSITE) {\r\n      _dataValue[SchedulersClass.ORDER_VIA_WEBSITE] = \"[ ZAP ] ZAP\"\r\n    }\r\n    setDataValue(_dataValue)\r\n\r\n    if (orderData[SchedulersClass.IS_VIP]) {\r\n      setEnableVIP(orderData[SchedulersClass.IS_VIP])\r\n    }\r\n  }, [channel, data])\r\n\r\n  const handleChanges = (fieldName, value) => {\r\n    setIsTouched(true)\r\n    console.log(\"is this field\", fieldName)\r\n    const _dataValue = { ...dataValue }\r\n    _dataValue[fieldName] = value\r\n    setDataValue(_dataValue)\r\n  }\r\n\r\n  const handleDateChanges = (fieldName, value) => {\r\n    setIsTouched(true)\r\n    const _dates = { ...dates }\r\n    _dates[fieldName] = value\r\n    if (enableTimeGap) {\r\n      if (fieldName === SchedulersClass.DATE_START) {\r\n        const datetime = addMinutes(value)\r\n        _dates[SchedulersClass.DATE_END] = datetime\r\n      }\r\n      if (fieldName === SchedulersClass.DATE_END) {\r\n        const datetime = minusMinutes(value)\r\n        _dates[SchedulersClass.DATE_START] = datetime\r\n      }\r\n    }\r\n    setDates(_dates)\r\n  }\r\n  return (\r\n    <Card\r\n      title=\"Order Details\"\r\n      extra={\r\n        <Space>\r\n          {enableVIP ? \"VIP\" : \"Regular\"}\r\n          <Switch\r\n            onChange={() => {\r\n              setEnableVIP(!enableVIP)\r\n              handleChanges(SchedulersClass.IS_VIP, !enableVIP)\r\n            }}\r\n            checked={enableVIP}\r\n          />\r\n        </Space>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\" style={{ marginBottom: \"1rem\" }}>\r\n        <Space>\r\n          <CustomTitle\r\n            typographyType=\"text\"\r\n            label=\"BRANCH: \"\r\n            type=\"secondary\"\r\n          />\r\n          <CustomTitle\r\n            typographyType=\"text\"\r\n            label={orderData[SchedulersClass.BRANCH] || rest?.branch}\r\n          />\r\n        </Space>\r\n        {orderData?.orderNo && (\r\n          <Space>\r\n            <CustomTitle\r\n              typographyType=\"text\"\r\n              label=\"ORDER #: \"\r\n              type=\"secondary\"\r\n            />\r\n            <CustomTitle\r\n              typographyType=\"text\"\r\n              label={orderData[SchedulersClass.ORDER_NO]}\r\n            />\r\n          </Space>\r\n        )}\r\n      </Space>\r\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n        <CustomTitle\r\n          typographyType=\"text\"\r\n          label={SchedulersClass.LABELS[SchedulersClass.DATE_ORDER_PLACED]}\r\n        />\r\n        <DatePicker\r\n          value={moment(\r\n            dates[SchedulersClass.DATE_ORDER_PLACED],\r\n            \"MM/DD/YYYY hh:mm\"\r\n          )}\r\n          showTime={true}\r\n          onChange={(obj) => {\r\n            if (obj) {\r\n              handleDateChanges(SchedulersClass.DATE_ORDER_PLACED, obj?._d)\r\n            }\r\n          }}\r\n          format=\"MM/DD/YYYY hh:mm\"\r\n          use12Hours\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </Space>\r\n      {/* <DateField\r\n        fieldName={SchedulersClass.DATE_ORDER_PLACED}\r\n        onChange={handleDateChanges}\r\n        value={dates[SchedulersClass.DATE_ORDER_PLACED]}\r\n        showTime={true}\r\n      /> */}\r\n      <Row gutter={[8, 10]} style={{ width: \"100%\", marginTop: \"1rem\" }}>\r\n        {firstColumns.map((key) => {\r\n          switch (types[key]) {\r\n            case DROPDOWN_TYPE:\r\n              return (\r\n                <Col xs={24} sm={12} style={{ width: \"100%\" }}>\r\n                  <SelectField\r\n                    key={key}\r\n                    fieldName={key}\r\n                    onChange={handleChanges}\r\n                    value={dataValue[key]}\r\n                    dropdowns={dropdownCollections}\r\n                  />\r\n                </Col>\r\n              )\r\n            case \"space\":\r\n              return <Col xs={24} sm={12} style={{ width: \"100%\" }}></Col>\r\n            default:\r\n              return (\r\n                <Col xs={24} sm={12} style={{ width: \"100%\" }}>\r\n                  <StringField\r\n                    key={key}\r\n                    fieldName={key}\r\n                    value={dataValue[key]}\r\n                    onChange={handleChanges}\r\n                    loadVIP={loadVIP}\r\n                  />\r\n                </Col>\r\n              )\r\n          }\r\n        })}\r\n        {secondColumns.map((key) => {\r\n          switch (types[key]) {\r\n            case DROPDOWN_TYPE:\r\n              return (\r\n                <Col xs={24} sm={12} style={{ width: \"100%\" }}>\r\n                  <SelectField\r\n                    key={key}\r\n                    fieldName={key}\r\n                    onChange={handleChanges}\r\n                    dropdowns={dropdownCollections}\r\n                    value={dataValue[key]}\r\n                  />\r\n                </Col>\r\n              )\r\n            default:\r\n              return (\r\n                <Col xs={24} sm={12} style={{ width: \"100%\" }}>\r\n                  <StringField\r\n                    key={key}\r\n                    fieldName={key}\r\n                    onChange={handleChanges}\r\n                    value={dataValue[key]}\r\n                  />\r\n                </Col>\r\n              )\r\n          }\r\n        })}\r\n      </Row>\r\n\r\n      <Space direction=\"vertical\" style={{ width: \"100%\", marginTop: \"1rem\" }}>\r\n        {rowColumnsBottom.map((key) => {\r\n          switch (types[key]) {\r\n            case TEXT_AREA_TYPE:\r\n              return (\r\n                <TextAreaField\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n\r\n            case \"customDate\":\r\n              return (\r\n                <Row gutter={[10, 12]} style={{}}>\r\n                  <Col xs={12}>\r\n                    <DateField\r\n                      fieldName={SchedulersClass.DATE_START}\r\n                      onChange={handleDateChanges}\r\n                      value={dates[SchedulersClass.DATE_START]}\r\n                      showTime={false}\r\n                    />\r\n                  </Col>\r\n                  <Col xs={12}>\r\n                    <TimeField\r\n                      fieldName={SchedulersClass.DATE_START}\r\n                      onChange={handleDateChanges}\r\n                      value={dates[SchedulersClass.DATE_START]}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              )\r\n            case DROPDOWN_TYPE:\r\n              return (\r\n                <SelectField\r\n                  key={key}\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  dropdowns={dropdownCollections}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n            default:\r\n              return (\r\n                <StringField\r\n                  key={key}\r\n                  fieldName={key}\r\n                  onChange={handleChanges}\r\n                  value={dataValue[key]}\r\n                />\r\n              )\r\n          }\r\n        })}\r\n      </Space>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst StringField = (props) => {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <CustomInput\r\n        placeholder=\"Enter here\"\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(props.fieldName, e.target.value)}\r\n        onBlur={(e) => {\r\n          if (SchedulersClass.CUSTOMER === props.fieldName) {\r\n            props.loadVIP(e.target.value)\r\n          }\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst DateField = (props) => {\r\n  const { sm } = useBreakpoint()\r\n  let format = sm\r\n    ? {\r\n        format: props.showTime ? \"MM/DD/YYYY hh:mm A\" : \"MM/DD/YYYY\",\r\n      }\r\n    : {\r\n        format: props.showTime ? \"MM/DD/YY hh:mm A\" : \"MM/DD/YYYY\",\r\n      }\r\n\r\n  let label = SchedulersClass.LABELS[props.fieldName]\r\n  if (SchedulersClass.DATE_START === props.fieldName) {\r\n    label = \"DATE\"\r\n  }\r\n\r\n  if (SchedulersClass.DATE_ORDER_PLACED === props.fieldName) {\r\n    label = \"DATE/TIME PLACED\"\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" label={label} />\r\n      <CustomDate\r\n        value={props.value}\r\n        showTime={props.showTime}\r\n        onChange={(obj) => {\r\n          if (obj) {\r\n            props.onChange(props.fieldName, obj?._d)\r\n          }\r\n        }}\r\n        {...format}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst TimeField = (props) => {\r\n  const timeList = {\r\n    \"8:00 AM - 8:30 AM\": \"08:00:00\",\r\n    \"8:30 AM - 9:00 AM\": \"08:30:00\",\r\n    \"9:00 AM - 9:30 AM\": \"09:00:00\",\r\n    \"9:30 AM - 10:00 AM\": \"09:30:00\",\r\n    \"10:00 AM - 10:30 AM\": \"10:00:00\",\r\n    \"10:30 AM - 11:00 AM\": \"10:30:00\",\r\n    \"11:00 AM - 11:30 AM\": \"11:00:00\",\r\n    \"11:30 AM - 12:00 PM\": \"11:30:00\",\r\n    \"12:00 AM - 12:30 PM\": \"12:00:00\",\r\n    \"12:30 PM - 1:00 PM\": \"12:30:00\",\r\n    \"1:00 PM - 1:30 PM\": \"13:00:00\",\r\n    \"1:30 PM - 2:00 PM\": \"13:30:00\",\r\n    \"2:00 PM - 2:30 PM\": \"14:00:00\",\r\n    \"2:30 PM - 3:00 PM\": \"14:30:00\",\r\n    \"3:00 PM - 3:30 PM\": \"15:00:00\",\r\n    \"3:30 PM - 4:00 PM\": \"15:30:00\",\r\n    \"4:00 PM - 4:30 PM\": \"16:00:00\",\r\n    \"4:30 PM - 5:00 PM\": \"16:30:00\",\r\n    \"5:00 AM - 5:30 PM\": \"17:00:00\",\r\n    \"5:30 PM - 6:00 PM\": \"17:30:00\",\r\n    \"6:00 PM - 6:30 PM\": \"18:00:00\",\r\n    \"6:30 PM - 7:00 PM\": \"18:30:00\",\r\n  }\r\n  const dateFormat = formatDateDash(props.value)\r\n  const timeSplit = props?.value.toTimeString().split(\" \")\r\n  const timeValue = timeSplit.length > 0 ? timeSplit[0] : \"8:00:00\"\r\n\r\n  let timeListValue = \"8:00 AM - 8:30 AM\"\r\n  for (const key in timeList) {\r\n    if (timeList[key] === timeValue) {\r\n      timeListValue = key\r\n      break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" label=\"TIME\" />\r\n\r\n      <AutoSelect\r\n        options={[...Object.keys(timeList).map((time) => time)]}\r\n        width=\"100%\"\r\n        value={timeListValue}\r\n        onChange={(value) =>\r\n          props.onChange(\r\n            props.fieldName,\r\n            new Date(`${dateFormat} ${timeList[value]}`)\r\n          )\r\n        }\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst SelectField = (props) => {\r\n  const dropdowns = props?.dropdowns || []\r\n  const findDropdownWithKey = dropdowns.find(\r\n    (data) => data[DropdownsClass.NAME] === props.fieldName\r\n  )\r\n  const list = findDropdownWithKey?.list || []\r\n\r\n  let label = SchedulersClass.LABELS[props.fieldName]\r\n  if (\r\n    SchedulersClass.ORDER_VIA === props.fieldName ||\r\n    SchedulersClass.ORDER_VIA_PARTNER === props.fieldName ||\r\n    SchedulersClass.ORDER_VIA_WEBSITE === props.fieldName\r\n  ) {\r\n    label = \"ORDER VIA\"\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" label={label} />\r\n      <AutoSelect\r\n        options={[...list]}\r\n        width=\"100%\"\r\n        value={props.value}\r\n        onChange={(value) => props.onChange(props.fieldName, value)}\r\n      />\r\n    </Space>\r\n  )\r\n}\r\n\r\nconst TextAreaField = (props) => {\r\n  return (\r\n    <>\r\n      <CustomTitle\r\n        typographyType=\"text\"\r\n        label={SchedulersClass.LABELS[props.fieldName]}\r\n      />\r\n      <CustomTextArea\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(props.fieldName, e.target.value)}\r\n      />\r\n    </>\r\n  )\r\n}\r\nexport default OrderDetails\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\ProductPurchased.js",["1399","1400","1401","1402","1403","1404"],"import {\r\n  Card,\r\n  Select,\r\n  Space,\r\n  Table,\r\n  Tag,\r\n  Popconfirm,\r\n  Button,\r\n  Radio,\r\n} from \"antd\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport CustomModal from \"Components/Commons/CustomModal\"\r\nimport useProductPurchased from \"./useProductPurchased\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport { InfoCircleOutlined } from \"@ant-design/icons\"\r\n\r\nfunction ProductPurchased({\r\n  modifiedData = () => {},\r\n  orderData,\r\n  orderVia = \"\",\r\n  formType,\r\n}) {\r\n  const {\r\n    products,\r\n    addProduct,\r\n    productList,\r\n    dataSource,\r\n    handleEditing,\r\n    editableId,\r\n    setEditableId,\r\n    handleEditPrice,\r\n    totalDue,\r\n    isTouched,\r\n    priceOptionsData,\r\n    priceOptionsNewProductData,\r\n    codeObjList,\r\n  } = useProductPurchased(orderData, orderVia, formType)\r\n\r\n  console.log(\"orderData\", orderData[SchedulersClass.ORDER_VIA])\r\n  console.log(\"codeObjList\", codeObjList)\r\n  useEffect(() => {\r\n    const modifiedObj = {}\r\n    for (const key in products) {\r\n      // this a resolution for the field naming error in firebase since previous data contains this field\r\n      // field that contains \"/\" is not allowed in firebase\r\n      if (\r\n        key.includes(\"CLONG - P/S - 1 PC\") ||\r\n        key.includes(\"SPORK W/ KNIFE\")\r\n      ) {\r\n        // wiil not set a key to the product list\r\n      } else {\r\n        modifiedObj[key] = 0\r\n      }\r\n    }\r\n    if (isTouched) {\r\n      if (dataSource.length > 0) {\r\n        // set default list of products\r\n        for (const obj of dataSource) {\r\n          modifiedObj[obj?.code] = obj?.qty\r\n          const customPrice = `customPrice${obj?.code}`\r\n          if (typeof obj[customPrice] !== \"undefined\") {\r\n            modifiedObj[customPrice] = obj[customPrice]\r\n          }\r\n        }\r\n        modifiedObj[SchedulersClass.TOTAL_DUE] = Number(totalDue)\r\n        modifiedObj[SchedulersClass.OTHERS] = {}\r\n        modifiedData(modifiedObj, products)\r\n      } else {\r\n        modifiedObj[SchedulersClass.TOTAL_DUE] = 0\r\n        modifiedObj[SchedulersClass.OTHERS] = {}\r\n        modifiedData(modifiedObj)\r\n      }\r\n    }\r\n    if (orderVia) {\r\n      // modifiedObj[SchedulersClass.TOTAL_DUE] = Number(totalDue)\r\n      // console.log(\"modifiedObj\", modifiedObj)\r\n      // console.log(\"dataSource\", dataSource)\r\n      // modifiedData(modifiedObj)\r\n      if (dataSource.length > 0) {\r\n        // set default list of products\r\n        for (const obj of dataSource) {\r\n          modifiedObj[obj?.code] = obj?.qty\r\n          let customPrice = `customPrice${obj?.code}`\r\n          if (typeof obj[customPrice] !== \"undefined\") {\r\n            modifiedObj[customPrice] = obj[customPrice]\r\n          }\r\n        }\r\n        modifiedObj[SchedulersClass.TOTAL_DUE] = Number(totalDue)\r\n        modifiedData(modifiedObj)\r\n      } else {\r\n        modifiedObj[SchedulersClass.TOTAL_DUE] = 0\r\n        if (isTouched) {\r\n          modifiedObj[SchedulersClass.OTHERS] = {}\r\n        }\r\n        modifiedData(modifiedObj)\r\n      }\r\n    }\r\n  }, [dataSource, isTouched, totalDue, orderVia])\r\n\r\n  const sortedProductList = productList.sort(\r\n    (a, b) => a[ProductsClass.NO] - b[ProductsClass.NO]\r\n  )\r\n\r\n  return (\r\n    <Card\r\n      title=\"Product Purchased\"\r\n      actions={[\r\n        <Due label=\"Total Due\" value={totalDue} />,\r\n        <ActionButton\r\n          productList={sortedProductList}\r\n          addProduct={addProduct}\r\n          products={products}\r\n          dataSource={dataSource}\r\n          setEditableId={setEditableId}\r\n          handleEditing={handleEditing}\r\n        />,\r\n      ]}\r\n    >\r\n      <Table\r\n        pagination={{ pageSize: 4 }}\r\n        dataSource={[...dataSource]}\r\n        columns={[\r\n          {\r\n            title: \"\",\r\n            key: \"action\",\r\n            dataIndex: \"action\",\r\n            render: (value, record) => {\r\n              const customPrice =\r\n                record[`customPrice${record?.code}`] || record.price\r\n              const oldProd = priceOptionsData.find(\r\n                (product) => product?.code === record?.code\r\n              )\r\n              const newProd = priceOptionsNewProductData.find(\r\n                (product) => product?.code === record?.code\r\n              )\r\n\r\n              return record?.editable ? (\r\n                <></>\r\n              ) : (orderVia || \"\").includes(\"FP\") ||\r\n                (orderVia || \"\").includes(\"DN\") ||\r\n                (orderVia || \"\").includes(\"DD\") ||\r\n                (orderVia || \"\").includes(\"GBF\") ||\r\n                (orderVia || \"\").includes(\"MMF\") ||\r\n                (orderVia || \"\").includes(\"ZAP\") ? (\r\n                <></>\r\n              ) : (\r\n                <Popconfirm\r\n                  placement=\"right\"\r\n                  title={\r\n                    <Radio.Group\r\n                      value={customPrice}\r\n                      onChange={(e) => {\r\n                        handleEditPrice(e, record.code)\r\n                      }}\r\n                    >\r\n                      <Radio value={newProd?.price || 0}>\r\n                        {newProd?.price || 0}\r\n                      </Radio>\r\n                      <Radio value={oldProd?.price || 0}>\r\n                        {oldProd?.price || 0}\r\n                      </Radio>\r\n                    </Radio.Group>\r\n                  }\r\n                >\r\n                  <Button\r\n                    shape=\"circle\"\r\n                    type=\"text\"\r\n                    icon={<InfoCircleOutlined />}\r\n                  />\r\n                </Popconfirm>\r\n              )\r\n            },\r\n          },\r\n          {\r\n            title: \"Code\",\r\n            dataIndex: \"code\",\r\n            key: \"code\",\r\n            width: 50,\r\n            onCell: (data) => {\r\n              return {\r\n                onClick: () => {\r\n                  setEditableId(data?.code)\r\n                },\r\n              }\r\n            },\r\n            render: (data) => {\r\n              return <span>{data}</span>\r\n            },\r\n          },\r\n          {\r\n            title: \"Price\",\r\n            dataIndex: \"price\",\r\n            key: \"price\",\r\n            align: \"right\",\r\n            width: 100,\r\n            onCell: (data) => {\r\n              return {\r\n                onClick: () => {\r\n                  setEditableId(data?.code)\r\n                },\r\n              }\r\n            },\r\n            render: (value, record) => {\r\n              // const isCustomPrice =\r\n              //   typeof record[`customPrice${record?.code}`] !== \"undefined\"\r\n              let customPrice = record[`customPrice${record?.code}`] || value\r\n              if (\r\n                (orderVia || \"\").includes(\"FP\") ||\r\n                (orderVia || \"\").includes(\"DN\") ||\r\n                (orderVia || \"\").includes(\"DD\") ||\r\n                (orderVia || \"\").includes(\"GBF\") ||\r\n                (orderVia || \"\").includes(\"MMF\")\r\n              ) {\r\n                customPrice = value\r\n                if (orderData[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n                  customPrice = record[`customPrice${record?.code}`] || value\r\n                }\r\n              }\r\n\r\n              if ((orderVia || \"\").includes(\"ZAP\")) {\r\n                customPrice = value\r\n                if (orderData[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n                  customPrice = record[`customPrice${record?.code}`] || value\r\n                }\r\n              }\r\n              return editableId === record?.code && record?.editable ? (\r\n                <CustomInput\r\n                  value={customPrice}\r\n                  onChange={handleEditPrice}\r\n                  onPressEnter={() => setEditableId(null)}\r\n                />\r\n              ) : (\r\n                <span>\r\n                  {thousandsSeparators(Number(customPrice).toFixed(2))}\r\n                </span>\r\n              )\r\n            },\r\n          },\r\n          {\r\n            title: \"Qty\",\r\n            dataIndex: \"qty\",\r\n            key: \"qty\",\r\n            width: 80,\r\n            onCell: (data) => {\r\n              return {\r\n                onClick: () => {\r\n                  setEditableId(data?.code)\r\n                },\r\n              }\r\n            },\r\n            render: (value, record) => {\r\n              return editableId === record?.code ? (\r\n                <CustomInput\r\n                  value={value}\r\n                  onChange={(e) => handleEditing(e.target.value, \"qty\")}\r\n                  onPressEnter={() => setEditableId(null)}\r\n                />\r\n              ) : (\r\n                <span>{value}</span>\r\n              )\r\n            },\r\n          },\r\n          {\r\n            title: \"Total\",\r\n            dataIndex: \"total\",\r\n            key: \"total\",\r\n            align: \"right\",\r\n            width: 100,\r\n            onCell: (data) => {\r\n              return {\r\n                onClick: () => {\r\n                  setEditableId(data?.code)\r\n                },\r\n              }\r\n            },\r\n            render: (value, record) => {\r\n              return (\r\n                <span>\r\n                  {thousandsSeparators(\r\n                    (Number(record?.price) * Number(record?.qty)).toFixed(2)\r\n                  )}\r\n                </span>\r\n              )\r\n            },\r\n          },\r\n        ]}\r\n        size=\"small\"\r\n      />\r\n    </Card>\r\n  )\r\n}\r\nconst Due = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <span style={{ position: \"absolute\", fontSize: \"10px\" }}>\r\n        {props.label}\r\n      </span>\r\n      <span style={{ position: \"absolute\", top: \"1rem\", color: \"red\" }}>\r\n        {thousandsSeparators(Number(props.value).toFixed(2))}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\n// this is the drawer popup\r\nconst ActionButton = ({\r\n  productList = [],\r\n  addProduct = () => {},\r\n  products,\r\n  dataSource = [],\r\n  handleEditing,\r\n  setEditableId,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        padding: \"0rem 1rem\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      {/* <CustomModal\r\n        title=\"Product list\"\r\n        buttonLabel=\"Add Product\"\r\n        buttonType=\"default\"\r\n        footer={false}\r\n      > */}\r\n      <CustomDrawer\r\n        buttonLabel=\"Add Product\"\r\n        size=\"medium\"\r\n        title=\"Products\"\r\n        width=\"375px\"\r\n      >\r\n        <Space\r\n          direction=\"vertical\"\r\n          wrap\r\n          style={{ width: \"100%\", justifyContent: \"center\" }}\r\n        >\r\n          {productList.map((obj, index) => {\r\n            const customCol = [\r\n              {\r\n                title: \"Code\",\r\n                dataIndex: \"code\",\r\n                render: (data) => {\r\n                  return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n                },\r\n                width: \"12rem\",\r\n              },\r\n              {\r\n                title: \"Description\",\r\n                dataIndex: \"description\",\r\n                render: (data) => {\r\n                  return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n                },\r\n                width: \"10rem\",\r\n              },\r\n              {\r\n                title: \"Price\",\r\n                dataIndex: \"price\",\r\n                render: (data) => {\r\n                  return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n                },\r\n                width: \"7rem\",\r\n                align: \"right\",\r\n              },\r\n              {\r\n                title: \"Qty\",\r\n                dataIndex: \"qty\",\r\n                render: (data, record) => {\r\n                  return (\r\n                    <CustomInput\r\n                      type=\"number\"\r\n                      style={{ fontSize: \"10px\", width: \"5rem\" }}\r\n                      value={data}\r\n                      onClick={() => {\r\n                        addProduct(record?.code, true)\r\n                        setEditableId(record?.code)\r\n                      }}\r\n                      onChange={(e) => {\r\n                        if (e.target.value === \"\") {\r\n                          addProduct(record?.code, false)\r\n                        }\r\n                        handleEditing(e.target.value, \"qty\")\r\n                      }}\r\n                    />\r\n                  )\r\n                },\r\n                width: \"7rem\",\r\n              },\r\n              {\r\n                title: \"Total\",\r\n                dataIndex: \"total\",\r\n                render: (data, record) => {\r\n                  const qty = Number(record?.qty)\r\n                  const price = Number(record?.price)\r\n                  const total = qty * price\r\n                  return (\r\n                    <span style={{ fontSize: \"10px\" }}>\r\n                      {thousandsSeparators(total.toFixed(2))}\r\n                    </span>\r\n                  )\r\n                },\r\n                align: \"right\",\r\n                width: \"7rem\",\r\n              },\r\n            ]\r\n            return (\r\n              <Space direction=\"vertical\">\r\n                <CustomTitle\r\n                  typographyType=\"text\"\r\n                  type=\"secondary\"\r\n                  label={obj[ProductsClass.GROUP_HEADER]}\r\n                />\r\n                <Table\r\n                  style={{ width: \"100%\" }}\r\n                  size=\"small\"\r\n                  pagination={false}\r\n                  showHeader={index === 0}\r\n                  columns={customCol}\r\n                  dataSource={[\r\n                    ...obj[ProductsClass.PRODUCT_LIST].map((data) => {\r\n                      const prodDetails = dataSource.find(\r\n                        (d) => d.code === data.code\r\n                      )\r\n                      if (Object.keys(prodDetails || {}).length > 0) {\r\n                        return { ...prodDetails }\r\n                      }\r\n                      return { ...data, qty: 0 }\r\n                    }),\r\n                  ]}\r\n                />\r\n                <Space wrap>\r\n                  {/* {obj[ProductsClass.PRODUCT_LIST].map(\r\n                    ({ code, description, price  }) => {\r\n                      return (\r\n                        <MainButton\r\n                          label={`${code} : ${description}`}\r\n                          type=\"default\"\r\n                          onClick={() => addProduct(code, !products[code])}\r\n                          type={products[code] ? \"primary\" : \"default\"}\r\n                        />\r\n                      )\r\n                    }\r\n                  )} */}\r\n                </Space>\r\n              </Space>\r\n            )\r\n          })}\r\n        </Space>\r\n      </CustomDrawer>\r\n      {/* </CustomModal> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductPurchased\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Upload\\useGetUploads.js",["1405"],"import { useEffect, useState } from \"react\"\r\nimport {\r\n  ref,\r\n  getStorage,\r\n  listAll,\r\n  getDownloadURL,\r\n  deleteObject,\r\n  uploadBytes,\r\n} from \"Services/firebase\"\r\nconst storage = getStorage()\r\n\r\nexport function useGetUploads(documentId) {\r\n  const [fileURLs, setFileURLs] = useState([])\r\n\r\n  useEffect(() => {\r\n    loadUploads(documentId)\r\n  }, [documentId])\r\n\r\n  const addUpload = async (data) => {\r\n    // const newFileListFilter = fileList.filter(file => file.status !== 'uploading')\r\n    // const newFileList = [...newFileListFilter]\r\n    // const docRefId = await addData({ collection: 'uploads', data })\r\n    // newFileList.push({ ...data, uploadId: docRefId })\r\n    // setFileList(newFileList)\r\n  }\r\n\r\n  const handleUpload = async (fileList = [], id = \"\") => {\r\n    if (typeof id !== \"undefined\" || id) {\r\n      for (const obj of fileList) {\r\n        if (isNaN(obj?.uid)) {\r\n          const fileRef = ref(storage, `uploads/${id}/${obj.name}`)\r\n          console.log(\"fileRef\", fileRef)\r\n          await uploadBytes(fileRef, obj?.originFileObj)\r\n        }\r\n      }\r\n    }\r\n    // console.log('file', file)\r\n    // const newFileList = [...fileList]\r\n    // newFileList.push({ name: file?.name, status: 'uploading', uid: file?.uid, percent: 50, url: '' })\r\n    // setFileList(newFileList)\r\n    // const uploadTask = storage.ref(`uploads/${documentId}/${file.name}`).put(file)\r\n    // uploadTask.on(\r\n    //   'state_changed',\r\n    //   snapshot => { },\r\n    //   error => {\r\n    //     console.log(error)\r\n    //   },\r\n    //   () => {\r\n    //     storage\r\n    //       .ref(`uploads/${documentId}`)\r\n    //       .child(file.name)\r\n    //       .getDownloadURL()\r\n    //       .then(url => {\r\n    //         if (url) {\r\n    //           const data = { name: file?.name, url, thumbUrl: url, idRef: documentId, status: 'done', uid: file?.uid }\r\n    //           addUpload(data)\r\n    //         }\r\n    //       })\r\n    //   }\r\n    // )\r\n  }\r\n  const handleRemove = (fileList = []) => {\r\n    for (const path of fileList) {\r\n      const fileRef = ref(storage, path)\r\n\r\n      deleteObject(fileRef)\r\n        .then(() => {\r\n          // File deleted successfully\r\n          console.log(\"Successfully removed file: \", path)\r\n        })\r\n        .catch((error) => {\r\n          console.log(`Removed failed ${path}: `, error)\r\n          // Uh-oh, an error occurred!\r\n        })\r\n    }\r\n  }\r\n\r\n  const loadUploads = async (id) => {\r\n    const fileRef = ref(storage, `uploads/${id}`)\r\n    listAll(fileRef)\r\n      .then(async (res) => {\r\n        res.prefixes.forEach((folderRef) => {\r\n          // All the prefixes under listRef.\r\n          // You may call listAll() recursively on them.\r\n        })\r\n        const fileList = []\r\n        for (const itemRef of res?.items) {\r\n          const { _location } = itemRef\r\n          const imageRef = ref(storage, _location?.path)\r\n          const file = await getDownloadURL(imageRef)\r\n          fileList.push({ url: file, path: _location?.path })\r\n        }\r\n        console.log(\"fileList\", fileList)\r\n        setFileURLs(fileList)\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"file list: \", error)\r\n        setFileURLs([])\r\n        // Uh-oh, an error occurred!\r\n      })\r\n  }\r\n  return { fileURLs, handleUpload, handleRemove, loadUploads }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\index.js",["1406"],"import CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport React, { useContext } from \"react\"\r\nimport { UserOutlined, LogoutOutlined } from \"@ant-design/icons\"\r\nimport { Input, message, Space, Tag, Typography } from \"antd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport AuthClass from \"Services/Classes/AuthClass\"\r\nimport { useHistory } from \"react-router\"\r\nimport useUserProfile from \"./hook\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\n\r\nfunction UserProfile() {\r\n  const history = useHistory()\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const { enablePasswordChange, setEnablePasswordChange } = useUserProfile()\r\n  return (\r\n    <CustomDrawer\r\n      type=\"primary\"\r\n      shape=\"circle\"\r\n      Icon={<UserOutlined />}\r\n      Footer={\r\n        <Space style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n          <MainButton\r\n            label=\"Logout\"\r\n            Icon={<LogoutOutlined />}\r\n            danger={true}\r\n            onClick={async () => {\r\n              const result = await AuthClass.logout()\r\n              console.log(\"logout: \", result)\r\n              if (result) {\r\n                message.info(result)\r\n                history.push(\"/\")\r\n              }\r\n            }}\r\n          />\r\n        </Space>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\" size=\"middle\" style={{ width: \"100%\" }}>\r\n        <Tag color=\"processing\">My Info</Tag>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Name\r\n          </CustomTitle>\r\n          <span>{user.name}</span>\r\n        </Space>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Email\r\n          </CustomTitle>\r\n          <span>{user._id}</span>\r\n        </Space>\r\n        <Space direction=\"vertical\" size={3}>\r\n          <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n            Branch\r\n          </CustomTitle>\r\n          <span style={{ color: \"red\", fontWeight: \"bold\" }}>\r\n            {user.branchSelected}\r\n          </span>\r\n        </Space>\r\n        <br />\r\n        <Tag color=\"processing\">Password Settings</Tag>\r\n        {!enablePasswordChange ? (\r\n          <MainButton\r\n            label=\"Change Password\"\r\n            type=\"default\"\r\n            onClick={() => setEnablePasswordChange(true)}\r\n          />\r\n        ) : (\r\n          <ChangePasswordForm\r\n            setEnablePasswordChange={setEnablePasswordChange}\r\n          />\r\n        )}\r\n      </Space>\r\n    </CustomDrawer>\r\n  )\r\n}\r\n\r\nconst ChangePasswordForm = (props) => {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n        Current Password\r\n      </CustomTitle>\r\n      <CustomInput placeholder=\"Current Password\" type=\"password\" />\r\n      <CustomTitle typographyType=\"text\" type=\"secondary\">\r\n        New Password\r\n      </CustomTitle>\r\n      <CustomInput placeholder=\"New Password\" type=\"password\" />\r\n      <Input placeholder=\"Re-type Password\" type=\"password\" />\r\n      <Space style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n        <MainButton\r\n          label=\"Cancel\"\r\n          danger\r\n          onClick={() => props.setEnablePasswordChange(false)}\r\n        />\r\n        <MainButton label=\"Save\" />\r\n      </Space>\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default UserProfile\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Upload\\index.js",["1407","1408","1409"],"import React, { useEffect, useState } from \"react\"\r\nimport { Upload, Modal } from \"antd\"\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\nimport { useGetUploads } from \"./useGetUploads\"\r\nfunction getBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.readAsDataURL(file)\r\n    reader.onload = () => resolve(reader.result)\r\n    reader.onerror = (error) => reject(error)\r\n  })\r\n}\r\nfunction UploadFiles({ id, modifiedData = () => {} }) {\r\n  const [removedPaths, setRemovedPaths] = useState([])\r\n  const { fileURLs, loadUploads } = useGetUploads()\r\n  const [state, setState] = useState({\r\n    previewVisible: false,\r\n    previewImage: \"\",\r\n    previewTitle: \"\",\r\n    fileList: [],\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (fileURLs.length > 0) {\r\n      const _fileList = []\r\n      let count = 0\r\n      for (const { url, path } of fileURLs) {\r\n        const pathSplit = path.split(\"/\")\r\n        const pathName = pathSplit[pathSplit.length - 1]\r\n        count = count - 1\r\n        _fileList.push({\r\n          uid: count,\r\n          name: pathName,\r\n          status: \"done\",\r\n          url,\r\n          path,\r\n        })\r\n      }\r\n      setState({ ...state, fileList: _fileList })\r\n    }\r\n  }, [fileURLs])\r\n\r\n  useEffect(() => {\r\n    modifiedData(state?.fileList, removedPaths)\r\n  }, [removedPaths, state])\r\n\r\n  const handleCancel = () => {\r\n    setState({ ...state, previewVisible: false })\r\n  }\r\n\r\n  const handlePreview = async (file) => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj)\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      previewImage: file.url || file.preview,\r\n      previewVisible: true,\r\n      previewTitle:\r\n        file.name || file.url.substring(file.url.lastIndexOf(\"/\") + 1),\r\n    })\r\n  }\r\n\r\n  const handleChange = ({ fileList = [] }) => {\r\n    setState({ ...state, fileList: fileList })\r\n  }\r\n\r\n  const handleRemove = (data) => {\r\n    if (!isNaN(data?.uid)) {\r\n      const _paths = [...removedPaths]\r\n      _paths.push(data?.path)\r\n      setRemovedPaths(_paths)\r\n    }\r\n  }\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  )\r\n\r\n  useEffect(() => {\r\n    loadUploads(id)\r\n  }, [id])\r\n\r\n  return (\r\n    <>\r\n      <Upload\r\n        // action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        listType=\"picture-card\"\r\n        fileList={state?.fileList}\r\n        onPreview={handlePreview}\r\n        onChange={handleChange}\r\n        onRemove={handleRemove}\r\n      >\r\n        {state?.fileList.length >= 8 ? null : uploadButton}\r\n      </Upload>\r\n      <Modal\r\n        visible={state?.previewVisible}\r\n        title={state?.previewTitle}\r\n        footer={null}\r\n        onCancel={handleCancel}\r\n      >\r\n        <img\r\n          alt=\"example\"\r\n          style={{ width: \"100%\" }}\r\n          src={state?.previewImage}\r\n        />\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UploadFiles\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\hookOrderNoCounter.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Pages\\DashboardGrillingPage.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\moduleList.js",["1410"],"// import { menuData } from \"Components/Features/Sidenav/hook\"\r\n\r\nimport menuData from \"Components/Features/Sidenav/menuData\"\r\n\r\nexport default function () {\r\n  const menuList = []\r\n  for (const obj of menuData([])) {\r\n    menuList.push(obj.title)\r\n    for (const subObj of obj.subMenu) {\r\n      menuList.push(subObj.title)\r\n    }\r\n  }\r\n  console.log(\"menuList\", menuList)\r\n  return menuList\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardTransaction\\useProductPurchased.js",["1411","1412","1413","1414","1415"],"import {\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n} from \"Helpers/collectionData\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport NewProductsClass from \"Services/Classes/NewProductsClass\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport SpecificPricesClass from \"Services/Classes/SpecificPricesClass\"\r\nimport productStaticPrices from \"./productStaticPrices\"\r\nexport default function useProductPurchased(\r\n  orderData,\r\n  orderVia = \"\",\r\n  formType\r\n) {\r\n  const [data] = useGetDocuments(ProductsClass)\r\n  const [newProductData] = useGetDocuments(NewProductsClass)\r\n  const [editableId, setEditableId] = useState(null)\r\n  const [codeObjList, setCodeObjList] = useState([])\r\n  const [productList, setProductList] = useState([])\r\n  const [products, setProducts] = useState([])\r\n  const [dataSource, setDataSource] = useState([])\r\n  const [totalDue, setTotalDue] = useState(0)\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [specificPrices, setSpecificPrices] = useState([])\r\n  const [priceOptionsData, setPricesOptionsData] = useState([])\r\n  const [priceOptionsNewProductData, setPricesOptionsNewProductData] = useState(\r\n    []\r\n  )\r\n  console.log(\"orderData\", orderData)\r\n  useEffect(() => {\r\n    if (data.length > 0 || newProductData.length > 0) {\r\n      const _data = producedProductListWithGroupAndAmounts(data)\r\n      const _newProductData =\r\n        producedProductListWithGroupAndAmounts(newProductData)\r\n      setPricesOptionsData(_data)\r\n      setPricesOptionsNewProductData(_newProductData)\r\n    }\r\n  }, [data, newProductData])\r\n  useEffect(() => {\r\n    loadSpecificPrices()\r\n  }, [])\r\n\r\n  const loadSpecificPrices = async () => {\r\n    const _specificPrices = await SpecificPricesClass.getData()\r\n    setSpecificPrices(_specificPrices)\r\n  }\r\n\r\n  // this is for active product button selected load when modified\r\n  useEffect(() => {\r\n    if (orderData) {\r\n      const sourceProductData = orderData.withFlexiblePrices\r\n        ? newProductData\r\n        : data\r\n      const productList = producedProductListOfAllCodes(sourceProductData)\r\n      const checkedProductCodes = []\r\n      for (const key of productList) {\r\n        if (typeof orderData[key] !== \"undefined\") {\r\n          if (Number(orderData[key]) > 0) {\r\n            checkedProductCodes.push(key)\r\n          }\r\n        }\r\n      }\r\n      loadProductStates(sourceProductData, checkedProductCodes)\r\n    }\r\n  }, [orderData, codeObjList])\r\n\r\n  // this is for product class loading\r\n  useEffect(() => {\r\n    produceCodeObjList(specificPrices)\r\n  }, [data, newProductData, orderVia, specificPrices])\r\n\r\n  const produceCodeObjList = async (_specificPrices) => {\r\n    if (data.length > 0 || newProductData.length > 0) {\r\n      setProductList(data)\r\n      loadProductStates(data)\r\n\r\n      const _codeObjList = []\r\n      const addFlexPrices =\r\n        formType === \"add\" ? { withFlexiblePrices: true } : {}\r\n      const _orderData = { ...orderData, ...addFlexPrices }\r\n\r\n      if (_orderData?.withFlexiblePrices && newProductData.length > 0) {\r\n        setProductList(newProductData)\r\n        loadProductStates(newProductData)\r\n        for (const { productList = [] } of newProductData) {\r\n          for (const obj of productList) {\r\n            const productObj = { ...obj }\r\n            const price = productStaticPrices(\r\n              orderVia,\r\n              obj?.code,\r\n              obj?.price,\r\n              _specificPrices\r\n            )\r\n            productObj.price = price\r\n            productObj[`customPrice${obj?.code}`] = price\r\n            if (typeof _orderData[`customPrice${obj?.code}`] !== \"undefined\") {\r\n              productObj[`customPrice${obj?.code}`] =\r\n                _orderData[`customPrice${obj?.code}`]\r\n            }\r\n\r\n            // for custom price change from ORDER_VIA to ORDER_VIA_PARTNER or ORDER_VIA_WEBSITE\r\n            if (\r\n              (orderVia || \"\").includes(\"DN\") ||\r\n              (orderVia || \"\").includes(\"DD\") ||\r\n              (orderVia || \"\").includes(\"FP\") ||\r\n              (orderVia || \"\").includes(\"ZAP\") ||\r\n              (orderVia || \"\").includes(\"GBF\") ||\r\n              (orderVia || \"\").includes(\"MMF\")\r\n            ) {\r\n              if (orderData[SchedulersClass.ORDER_VIA]) {\r\n                productObj.price = price\r\n                productObj[`customPrice${obj?.code}`] = price\r\n              } else {\r\n                if (orderData[SchedulersClass.ORDER_VIA_PARTNER]) {\r\n                  productObj.price = _orderData[`customPrice${obj?.code}`]\r\n                  productObj[`customPrice${obj?.code}`] =\r\n                    _orderData[`customPrice${obj?.code}`]\r\n                  if ((orderVia || \"\").includes(\"ZAP\")) {\r\n                    productObj.price = price\r\n                    productObj[`customPrice${obj?.code}`] = price\r\n                  }\r\n                  if (orderVia === 0) {\r\n                    productObj.price = 0\r\n                    productObj[`customPrice${obj?.code}`] = 0\r\n                  }\r\n                }\r\n                if (orderData[SchedulersClass.ORDER_VIA_WEBSITE]) {\r\n                  productObj.price = _orderData[`customPrice${obj?.code}`]\r\n                  productObj[`customPrice${obj?.code}`] =\r\n                    _orderData[`customPrice${obj?.code}`]\r\n                  if (!(orderVia || \"\").includes(\"ZAP\")) {\r\n                    productObj.price = price\r\n                    productObj[`customPrice${obj?.code}`] = price\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            _codeObjList.push({ ...productObj })\r\n          }\r\n        }\r\n        setCodeObjList(_codeObjList)\r\n      }\r\n      if (\r\n        typeof _orderData?.withFlexiblePrices === \"undefined\" &&\r\n        data.length > 0\r\n      ) {\r\n        for (const { productList = [] } of data) {\r\n          for (const obj of productList) {\r\n            const productObj = { ...obj }\r\n            productObj.price = productStaticPrices(\r\n              orderVia,\r\n              obj?.code,\r\n              obj?.price\r\n            )\r\n            _codeObjList.push(productObj)\r\n          }\r\n        }\r\n        setCodeObjList(_codeObjList)\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (codeObjList) {\r\n      const _dataSource = []\r\n      for (const code in products) {\r\n        if (products[code]) {\r\n          const _data = codeObjList.find(\r\n            (obj) => obj[ProductsClass.CODE] === code\r\n          )\r\n          const isDataExist = dataSource.find(\r\n            (obj) => obj[ProductsClass.CODE] === code\r\n          )\r\n\r\n          if (!isDataExist) {\r\n            let ifPriceEditable =\r\n              _data[ProductsClass.PRICE] === 0\r\n                ? {\r\n                    editable: true,\r\n                    [`customPrice${code}`]:\r\n                      orderData[`customPrice${code}`] || 0,\r\n                    price: orderData[`customPrice${code}`] || 0,\r\n                  }\r\n                : {}\r\n\r\n            if (\r\n              (orderVia || \"\").includes(\"DN\") ||\r\n              (orderVia || \"\").includes(\"DD\") ||\r\n              (orderVia || \"\").includes(\"FP\") ||\r\n              (orderVia || \"\").includes(\"ZAP\") ||\r\n              (orderVia || \"\").includes(\"GBF\") ||\r\n              (orderVia || \"\").includes(\"MMF\")\r\n            ) {\r\n            } else {\r\n              if (\r\n                typeof orderData[SchedulersClass.WITH_FLEXIBLE_PRICES] !==\r\n                  \"undefined\" &&\r\n                _data[ProductsClass.PRICE] !== 0\r\n              ) {\r\n                ifPriceEditable = {\r\n                  editable: false,\r\n                  [`customPrice${code}`]:\r\n                    orderData[`customPrice${code}`] || _data?.price,\r\n                  price: orderData[`customPrice${code}`] || _data?.price,\r\n                }\r\n              }\r\n\r\n              if (formType === \"add\") {\r\n                ifPriceEditable = {\r\n                  editable: _data[ProductsClass.PRICE] === 0 ? true : false,\r\n                  [`customPrice${code}`]: _data?.price,\r\n                  price: _data?.price,\r\n                }\r\n              }\r\n            }\r\n\r\n            _dataSource.push({\r\n              ..._data,\r\n              qty: orderData[code] > 0 ? orderData[code] : 1,\r\n              ...ifPriceEditable,\r\n            })\r\n          } else {\r\n            _dataSource.push({ ...isDataExist })\r\n          }\r\n        }\r\n      }\r\n      setDataSource(_dataSource)\r\n      handleTotalDue(_dataSource)\r\n    }\r\n  }, [products])\r\n\r\n  const handleTotalDue = (_dataSource) => {\r\n    //this is for total due\r\n    let _totalDue = 0\r\n    for (const obj of _dataSource) {\r\n      _totalDue = _totalDue + Number(obj?.price) * Number(obj?.qty)\r\n    }\r\n    setTotalDue(_totalDue)\r\n  }\r\n\r\n  const addProduct = (code, checked) => {\r\n    const _products = { ...products }\r\n    _products[code] = checked\r\n    setProducts(_products)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const loadProductStates = (_data, checkedProducts = []) => {\r\n    const list = producedProductListOfAllCodes(_data)\r\n    const _products = {}\r\n    for (const code of list) {\r\n      if (checkedProducts.includes(code)) {\r\n        _products[code] = true\r\n      } else {\r\n        _products[code] = false\r\n      }\r\n    }\r\n\r\n    setProducts(_products)\r\n  }\r\n\r\n  const handleEditing = (value, fieldName) => {\r\n    if (fieldName === \"qty\") {\r\n      if (isNaN(value)) return\r\n      if (Number(value) < 0) return\r\n    }\r\n    const _dataSource = [...dataSource]\r\n    const dataIndex = dataSource.findIndex((obj) => obj?.code === editableId)\r\n    const dataSourceObj = { ..._dataSource[dataIndex] }\r\n    dataSourceObj[fieldName] = Number(value)\r\n    _dataSource[dataIndex] = dataSourceObj\r\n    setDataSource(_dataSource)\r\n    handleTotalDue(_dataSource)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  const handleEditPrice = (e, optionalId = null) => {\r\n    const value = e.target.value\r\n    const code = optionalId ? optionalId : editableId\r\n    if (isNaN(value)) return\r\n    if (Number(value) < 0) return\r\n    const _dataSource = [...dataSource]\r\n    const dataIndex = dataSource.findIndex((obj) => obj?.code === code)\r\n    const dataSourceObj = { ..._dataSource[dataIndex] }\r\n    dataSourceObj[`customPrice${code}`] = Number(value)\r\n    dataSourceObj.price = Number(value)\r\n    _dataSource[dataIndex] = dataSourceObj\r\n    setDataSource(_dataSource)\r\n    handleTotalDue(_dataSource)\r\n    setIsTouched(true)\r\n  }\r\n\r\n  return {\r\n    products,\r\n    addProduct,\r\n    productList,\r\n    codeObjList,\r\n    dataSource,\r\n    handleEditing,\r\n    handleEditPrice,\r\n    editableId,\r\n    setEditableId,\r\n    totalDue,\r\n    isTouched,\r\n    priceOptionsData,\r\n    priceOptionsNewProductData,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\UserProfile\\hook.js",["1416"],"import { useEffect, useState } from \"react\"\r\n\r\nexport default function useUserProfile() {\r\n  const [enablePasswordChange, setEnablePasswordChange] = useState(false)\r\n\r\n  return { enablePasswordChange, setEnablePasswordChange }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Commons\\CustomTextArea.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\usePaginate.js",["1417","1418","1419"],"import React, { useState, useEffect, useContext } from \"react\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { arrayReplace } from \"Helpers/arrayFuntions\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\nimport { Timestamp } from \"Services/firebase\"\r\n\r\n// this is default config = { bySort: true, customSort: [\"StartTime\": \"asc\" or \"desc\"]}\r\nfunction usePaginate(ServiceClass, config) {\r\n  const { setError, setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [lastVisible, setLastVisible] = useState(null)\r\n  const [dataSource, setDataSource] = useState([])\r\n  useEffect(() => {\r\n    if (lastVisible === null && user?.branchSelected) {\r\n      const branch = user?.branchSelected\r\n      loadData({}, branch)\r\n    }\r\n  }, [lastVisible, user])\r\n  const loadData = async (data = {}, branch, refresh = false) => {\r\n    if (Object.keys(data).length > 0) {\r\n      // this is for static data changes triggered from formHandler\r\n      const _dataIndex = dataSource.findIndex(\r\n        (d) => d[ServiceClass._ID] === data[ServiceClass._ID]\r\n      )\r\n      // this is for new added data in the table\r\n      if (_dataIndex < 0) {\r\n        let newData = [...dataSource]\r\n        const updatedData = { ...data }\r\n        if (ServiceClass.COLLECTION_NAME) {\r\n          updatedData[ServiceClass.DATE_START] = Timestamp.fromDate(\r\n            data[ServiceClass.DATE_START]\r\n          )\r\n          updatedData[ServiceClass.DATE_END] = Timestamp.fromDate(\r\n            data[ServiceClass.DATE_END]\r\n          )\r\n          updatedData[ServiceClass.DATE_ORDER_PLACED] = Timestamp.fromDate(\r\n            data[ServiceClass.DATE_ORDER_PLACED]\r\n          )\r\n          newData.unshift(updatedData)\r\n        }\r\n        setDataSource(newData)\r\n        return\r\n      }\r\n      const newData = arrayReplace(dataSource, _dataIndex, {\r\n        ...dataSource[_dataIndex],\r\n        ...data,\r\n      })\r\n      setDataSource(newData)\r\n      return\r\n    }\r\n\r\n    setIsLoading(true)\r\n    if (lastVisible && refresh === false) {\r\n      const [_lastVisible, colData = []] =\r\n        await ServiceClass.getNextPaginatedData(\r\n          lastVisible,\r\n          user?.branchSelected\r\n        )\r\n      if (colData.length > 0) {\r\n        const newData = [...dataSource, ...colData]\r\n        setDataSource(newData)\r\n        setLastVisible(_lastVisible)\r\n      }\r\n      setIsLoading(false)\r\n    } else {\r\n      // this will be the first load of data\r\n      const [_lastVisible, colData] = await ServiceClass.getPaginatedData(\r\n        branch\r\n      )\r\n      setDataSource(colData)\r\n      setLastVisible(_lastVisible)\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // const modifiedData = async (id) => {\r\n  //   const dataSourceCopy = [...dataSource]\r\n  //   const dataIndex = dataSourceCopy.findIndex((row) => row._id === id)\r\n  //   const dataObj = await FirestoreCommands.getDataById(\"schedules\", id)\r\n  //   if (dataObj) {\r\n  //     dataSourceCopy[dataIndex] = { ...dataObj }\r\n  //   }\r\n  //   setDataSource(dataSourceCopy)\r\n  // }\r\n\r\n  // return { dataSource, loadData }\r\n  return [dataSource, loadData, lastVisible]\r\n}\r\n\r\nexport default usePaginate\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\vipUsersClass.js",["1420","1421","1422","1423","1424"],"import { ARRAY_OF_STRING_TYPE, BOOLEAN_TYPE } from \"Constants/types\"\r\nimport { producedBranches, producedRoles } from \"Helpers/collectionData\"\r\nimport Base from \"Services/Base\"\r\nimport BranchClass from \"./BranchClass\"\r\nimport RolesClass from \"./RolesClass\"\r\n\r\nexport default class VIPUsersClass {\r\n  static COLLECTION_NAME = \"vipUsers\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static IS_VIP = \"isVIP\"\r\n\r\n  static PROPERTIES = [this.IS_VIP]\r\n\r\n  static TYPES = {\r\n    [this.IS_VIP]: BOOLEAN_TYPE,\r\n  }\r\n\r\n  static LABELS = {\r\n    [this.IS_VIP]: \"IS VIP\",\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Hooks\\useGetDocumentsByFn.js",["1425"],"import { UnavailableContext } from \"Error/Unavailable\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\n\r\nexport default function useGetDocumentsByFn(ServiceClass) {\r\n  const { setError, setIsLoading, setLoaded } = useContext(UnavailableContext)\r\n  const [data, setData] = useState([])\r\n  const loadData = async (fieldname, value) => {\r\n    setLoaded(false)\r\n    setIsLoading(true)\r\n    try {\r\n      const _data = await ServiceClass.getDataByFieldname(fieldname, value)\r\n      setData(_data)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      setLoaded(true)\r\n    }\r\n  }\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  return [data, loadData, clearData]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\index.js",["1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463"],"import { Input, Space, Spin } from \"antd\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport {\r\n  ReloadOutlined,\r\n  FileExcelOutlined,\r\n  PrinterOutlined,\r\n} from \"@ant-design/icons\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport styled from \"styled-components\"\r\nimport CustomInput from \"Components/Commons/CustomInput\"\r\nimport useTableHandler from \"./hook\"\r\nimport classes from \"./table.module.css\"\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useLocation,\r\n  useRouteMatch,\r\n} from \"react-router\"\r\nimport URLNotFound from \"Error/URLNotFound\"\r\nimport FormHandler from \"../FormHandler\"\r\nimport FormHandlerAdd from \"../FormHandler/FormHandlerAdd\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport FilterOptions from \"../FilterOptions\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { DATE_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport CustomRangePicker from \"Components/Commons/RangePicker\"\r\nimport useRangeHandler from \"Hooks/useRangeHandler\"\r\nimport useGetDocumentsByKeyword from \"Hooks/useGetDocumentsByKeyword\"\r\nimport DropdownChannel from \"./DropdownChannel\"\r\nimport AutoSelect from \"Components/Commons/AutoSelect\"\r\nimport ExportService from \"Services/ExportService\"\r\nimport schedulerExcel, {\r\n  calculateTotalRevChannel,\r\n} from \"Helpers/schedulerExcel\"\r\nimport {\r\n  displayOrderVia,\r\n  displayPaymentProp,\r\n  displaySalesType,\r\n} from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport TransactionGroupPayment from \"../TransactionGroupPayments\"\r\nimport { produceSalesSummary } from \"./produceSalesSummary\"\r\nimport segregateAdvanceOrders, {\r\n  advanceOrders,\r\n  notAdvanceOrders,\r\n} from \"./segregateAdvanceOrders\"\r\nimport { produceSalesSummary1 } from \"./produceSalesSummary1\"\r\nimport { produceSalesSummary2 } from \"./produceSalesSummary2\"\r\nconst produceAmount = (value) => {\r\n  return thousandsSeparators(Number(value).toFixed(2))\r\n}\r\n\r\nfunction AdvanceTableHandler(props) {\r\n  const {\r\n    ServiceClass,\r\n    columns,\r\n    hideColumns,\r\n    data,\r\n    loadData,\r\n    enableAdd,\r\n    defaultAddForm, // this is true or false\r\n    enableFilter,\r\n    enableRowSelect,\r\n    isLoading,\r\n    setIsLoading,\r\n    rowSelection,\r\n    enableEdit,\r\n    handleModified,\r\n    paginateRequest,\r\n  } = useTableHandler(props)\r\n\r\n  const { path } = useRouteMatch()\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const [isFiltered, setIsFiltered] = useState(true)\r\n  const [filteredData, setFilteredData] = useState([])\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      {data.length > 0 && isLoading === false && (\r\n        <div\r\n          style={\r\n            location.pathname === path\r\n              ? { visibility: \"visible\" }\r\n              : { visibility: \"hidden\" }\r\n          }\r\n        >\r\n          <ActionButtons\r\n            enableFilter={enableFilter}\r\n            enableAdd={enableAdd}\r\n            ServiceClass={ServiceClass}\r\n            setIsLoading={setIsLoading}\r\n            isFiltered={isFiltered}\r\n            setIsFiltered={setIsFiltered}\r\n            loadData={loadData}\r\n            hideColumns={hideColumns}\r\n            setFilteredData={setFilteredData}\r\n            data={data}\r\n            filteredData={filteredData}\r\n            productData={props?.productData}\r\n          />\r\n          <CustomTable\r\n            isFiltered={isFiltered}\r\n            columns={[...columns]}\r\n            dataSource={isFiltered ? [...filteredData] : [...data]}\r\n            size=\"small\"\r\n            scroll={{ x: \"calc(375px + 50%)\", y: \"90vh\" }}\r\n            rowClassName={(data) => {\r\n              if (data?.status === \"CANCELLED\") {\r\n                return classes[`DEFAULT-${data?.status}`]\r\n              }\r\n              return classes[\"DEFAULT\"]\r\n            }}\r\n            onRow={(record) => {\r\n              return enableRowSelect\r\n                ? {\r\n                    onClick: () => {\r\n                      rowSelection(record) // this is for row clicked used by Dashboard Transactions\r\n                    },\r\n                  }\r\n                : {}\r\n            }}\r\n            pagination={{ pageSize: 15, showSizeChanger: false }}\r\n            loadData={paginateRequest ? loadData : () => {}}\r\n            paginateRequest={paginateRequest}\r\n          />\r\n        </div>\r\n      )}\r\n      <Switch>\r\n        <Route exact path={path}></Route>\r\n        {enableAdd && defaultAddForm && (\r\n          <Route exact path={`${path}/add`}>\r\n            <FormHandlerAdd\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {enableEdit && defaultAddForm && (\r\n          <Route exact path={`${path}/modified`}>\r\n            <FormHandler\r\n              ServiceClass={ServiceClass}\r\n              back={() => {\r\n                history.push(path)\r\n              }}\r\n              formSave={(data) => {\r\n                handleModified(data)\r\n              }}\r\n              hideColumns={hideColumns}\r\n            />\r\n          </Route>\r\n        )}\r\n        {defaultAddForm && (\r\n          <Route path=\"*\">\r\n            <StyledURLNotFound>\r\n              <URLNotFound />\r\n            </StyledURLNotFound>\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdvanceTableHandler\r\n\r\nconst ActionButtons = (props) => {\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const {\r\n    enableFilter,\r\n    enableAdd,\r\n    ServiceClass,\r\n    loadData,\r\n    setIsLoading,\r\n    setIsFiltered,\r\n    isFiltered,\r\n    hideColumns,\r\n    setFilteredData,\r\n    filteredData,\r\n    data,\r\n    productData,\r\n  } = props\r\n  const types = ServiceClass.TYPES\r\n  const [rangeData = [], loadRangeData, clearRangeData] =\r\n    useRangeHandler(ServiceClass)\r\n  const [documentData, loadDocumentData, clearDocumentData] =\r\n    useGetDocumentsByKeyword(ServiceClass)\r\n  const [selectedFilter, setSelectedFilter] = useState(\"\")\r\n\r\n  const [filterValue, setFilterValue] = useState(\"PP #\")\r\n  const [ppZapNumber, setPpZapNumber] = useState(\"\")\r\n  const [isLoading, setLoading] = useState(false)\r\n\r\n  // useEffect(() => {\r\n  //   setFilteredData(rangeData)\r\n  // }, [rangeData])\r\n\r\n  // useEffect(() => {\r\n  //   setFilteredData(documentData)\r\n  // }, [documentData])\r\n  // useEffect(() => {\r\n  //   clearRangeData()\r\n  //   clearDocumentData()\r\n  // }, [selectedFilter])\r\n\r\n  useEffect(() => {\r\n    if (filterValue === \"PP #\") {\r\n      handlePp(ppZapNumber)\r\n    }\r\n    if (filterValue === \"ZAP #\") {\r\n      handleZap(ppZapNumber)\r\n    }\r\n  }, [filterValue, ppZapNumber])\r\n\r\n  let delayTimer\r\n  const handleZap = (_ppZapNumber) => {\r\n    clearTimeout(delayTimer)\r\n    if (_ppZapNumber === \"\") {\r\n      setFilteredData([])\r\n      return\r\n    }\r\n    setLoading(true)\r\n    delayTimer = setTimeout(async function () {\r\n      // Do the ajax stuff\r\n      const data = await SchedulersClass.getDataByKeyword(\r\n        SchedulersClass.ZAP_NUMBER,\r\n        _ppZapNumber,\r\n        user?.branchSelected\r\n      )\r\n      setFilteredData(data)\r\n      setLoading(false)\r\n    }, 1000) // Will do the ajax stuff after 1000 ms, or 1 s\r\n  }\r\n\r\n  const handlePp = (_ppZapNumber) => {\r\n    clearTimeout(delayTimer)\r\n    if (_ppZapNumber === \"\") {\r\n      setFilteredData([])\r\n      return\r\n    }\r\n    setLoading(true)\r\n    delayTimer = setTimeout(async function () {\r\n      // Do the ajax stuff\r\n      const data = await SchedulersClass.getDataByKeyword(\r\n        SchedulersClass.PARTNER_MERCHANT_ORDER_NO,\r\n        _ppZapNumber,\r\n        user?.branchSelected\r\n      )\r\n      setFilteredData(data)\r\n      setLoading(false)\r\n    }, 1000) // Will do the ajax stuff after 1000 ms, or 1 s\r\n  }\r\n\r\n  const handleExportExcel = async (_schedules, branch) => {\r\n    const defaultSheet = await segregateAdvanceOrders(\r\n      _schedules,\r\n      productData,\r\n      branch\r\n    )\r\n    const [cashSheet, cashTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => {\r\n        const source = displayPaymentProp(\r\n          obj[SchedulersClass.SOURCE],\r\n          obj,\r\n          SchedulersClass.SOURCE\r\n        )\r\n        return source === \"Cash\"\r\n      }),\r\n      productData,\r\n      \"CASH\",\r\n      branch\r\n    )\r\n\r\n    const [rSheet, rTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"R\"),\r\n      productData,\r\n      \"R\",\r\n      branch\r\n    )\r\n\r\n    const [spwdSheet, spwdTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"SPWD\"),\r\n      productData,\r\n      \"SPWD\",\r\n      branch\r\n    )\r\n\r\n    const [ddSheet, ddTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"D/O\"),\r\n      productData,\r\n      \"DO\",\r\n      branch\r\n    )\r\n    const [wbSheet, wbTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => obj[SchedulersClass.ORDER_VIA_WEBSITE]),\r\n      productData,\r\n      \"WB\",\r\n      branch\r\n    )\r\n    const [ppSheet, ppTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displaySalesType(obj) === \"PP\"),\r\n      productData,\r\n      \"PP\",\r\n      branch\r\n    )\r\n\r\n    const [orderVia, orderViaTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => obj[SchedulersClass.ORDER_VIA]),\r\n      productData,\r\n      \"DIRECT\",\r\n      branch\r\n    )\r\n\r\n    const [ppGF, ppGFTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"GBF\"),\r\n      productData,\r\n      \"PP GBF\",\r\n      branch\r\n    )\r\n    const [ppMMF, ppMMFTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"MMF\"),\r\n      productData,\r\n      \"PP MMF\",\r\n      branch\r\n    )\r\n\r\n    const [ppDN, ppDNTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"DN\"),\r\n      productData,\r\n      \"PP DN\",\r\n      branch\r\n    )\r\n\r\n    const [ppFP, ppFPTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"FP\"),\r\n      productData,\r\n      \"PP FP\",\r\n      branch\r\n    )\r\n    const [ppZAP, ppZAPTotal] = await schedulerExcel(\r\n      _schedules.filter((obj) => displayOrderVia(obj) === \"ZAP\"),\r\n      productData,\r\n      \"PP ZAP\",\r\n      branch\r\n    )\r\n\r\n    const [orderViaWB, orderViaWBTotal] = await schedulerExcel(\r\n      _schedules.filter(\r\n        (obj) =>\r\n          obj[SchedulersClass.ORDER_VIA_WEBSITE] === \"[ ZAP ] ZAP\" ||\r\n          obj[SchedulersClass.ORDER_VIA_PARTNER] === \"[ ZAP ] ZAP\"\r\n      ),\r\n      productData,\r\n      \"WB ZAP\",\r\n      branch\r\n    )\r\n\r\n    const sumRCSheet = {}\r\n    for (const obj of _schedules) {\r\n      const formatDateFromD = formatDateFromDatabase(\r\n        obj[SchedulersClass.DATE_START]\r\n      )\r\n      const dateSheet = formatDateDash(formatDateFromD).substring(0, 5)\r\n      const sheetName = `${dateSheet} RC SUM`\r\n      if (typeof sumRCSheet[sheetName] === \"undefined\") {\r\n        sumRCSheet[sheetName] = [\r\n          [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n          [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n          [formatDateLong(formatDateFromD)],\r\n          [],\r\n          [\"REVENUE CHANNEL REPORT\"],\r\n          [\"CODE\", \"R/C\", \"TOTAL\", \"COLLECTIBLES\", \"AMOUNT PAID\"],\r\n        ]\r\n      }\r\n\r\n      const dSummary = orderViaTotal.find((row) => row.date === dateSheet)\r\n      const ppGFSummary = ppGFTotal.find((row) => row.date === dateSheet)\r\n      const ppMMFSummary = ppMMFTotal.find((row) => row.date === dateSheet)\r\n      const ppDNSummary = ppDNTotal.find((row) => row.date === dateSheet)\r\n      const ppFPSummary = ppFPTotal.find((row) => row.date === dateSheet)\r\n      const ppZAPSummary = ppZAPTotal.find((row) => row.date === dateSheet)\r\n      const wbSummary = orderViaWBTotal.find((row) => row.date === dateSheet)\r\n      if (sumRCSheet[sheetName].length === 6) {\r\n        if (dSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"DR\",\r\n            dSummary?.code,\r\n            produceAmount(dSummary?.totalDue),\r\n            produceAmount(dSummary?.collectibles),\r\n            produceAmount(dSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\"DR\", \"DIRECT\", \"0.00\", \"0.00\", \"0.00\"])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 7) {\r\n        if (ppGFSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP GBF\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppGFSummary?.totalDue),\r\n            produceAmount(ppGFSummary?.collectibles),\r\n            produceAmount(ppGFSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP GF\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 8) {\r\n        if (ppMMFSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP MMF\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppMMFSummary?.totalDue),\r\n            produceAmount(ppMMFSummary?.collectibles),\r\n            produceAmount(ppMMFSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP MMF\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 9) {\r\n        if (ppDNSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP DN\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppDNSummary?.totalDue),\r\n            produceAmount(ppDNSummary?.collectibles),\r\n            produceAmount(ppDNSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP DN\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 10) {\r\n        if (ppFPSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP FP\",\r\n            \"PARTNER MERCHANT\",\r\n            produceAmount(ppFPSummary?.totalDue),\r\n            produceAmount(ppFPSummary?.collectibles),\r\n            produceAmount(ppFPSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\r\n            \"PP FP\",\r\n            \"PARTNER MERCHANT\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n            \"0.00\",\r\n          ])\r\n        }\r\n      }\r\n      if (sumRCSheet[sheetName].length === 11) {\r\n        if (wbSummary) {\r\n          sumRCSheet[sheetName].push([\r\n            \"WB\",\r\n            wbSummary?.code,\r\n            produceAmount(wbSummary?.totalDue),\r\n            produceAmount(wbSummary?.collectibles),\r\n            produceAmount(wbSummary?.amountPaid),\r\n          ])\r\n        } else {\r\n          sumRCSheet[sheetName].push([\"WB\", \"WEBSITE\", \"0.00\", \"0.00\", \"0.00\"])\r\n        }\r\n      }\r\n\r\n      if (sumRCSheet[sheetName].length === 12) {\r\n        const defaultValueIfNull = {\r\n          totalDue: 0,\r\n          amountPaid: 0,\r\n          collectibles: 0,\r\n        }\r\n        const { totalDue, totalAmountPaid, totalCollectibles } =\r\n          calculateTotalRevChannel([\r\n            dSummary || defaultValueIfNull,\r\n            ppGFSummary || defaultValueIfNull,\r\n            ppMMFSummary || defaultValueIfNull,\r\n            ppDNSummary || defaultValueIfNull,\r\n            ppFPSummary || defaultValueIfNull,\r\n            wbSummary || defaultValueIfNull,\r\n          ])\r\n        sumRCSheet[sheetName].push([\r\n          \"TOTAL:\",\r\n          \"\",\r\n          produceAmount(totalDue),\r\n          produceAmount(totalCollectibles),\r\n          produceAmount(totalAmountPaid),\r\n        ])\r\n      }\r\n    }\r\n\r\n    const salesSummary = await produceSalesSummary1(_schedules, branch)\r\n    const salesSummary2 = await produceSalesSummary2(_schedules, branch)\r\n\r\n    ExportService.exportExcelReports({\r\n      ...defaultSheet,\r\n      ...cashSheet,\r\n      ...rSheet,\r\n      ...ppSheet,\r\n      ...ppGF,\r\n      ...ppMMF,\r\n      ...ppDN,\r\n      ...ppFP,\r\n      ...spwdSheet,\r\n      ...ddSheet,\r\n      ...wbSheet,\r\n      ...sumRCSheet,\r\n      ...salesSummary,\r\n      ...salesSummary2,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <StyledContainer enableFilter={enableFilter} wrap>\r\n      <StyledLeftContent enableFilter={enableFilter}>\r\n        <Space>\r\n          <AutoSelect\r\n            options={[\"PP #\", \"ZAP #\"]}\r\n            value={filterValue}\r\n            onChange={(value) => setFilterValue(value)}\r\n            width={150}\r\n          />\r\n          {filterValue === \"PP #\" || filterValue === \"ZAP #\" ? (\r\n            <Input\r\n              onChange={(e) => {\r\n                setPpZapNumber(e.target.value)\r\n              }}\r\n              value={ppZapNumber}\r\n              placeholder=\"Input number here...\"\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {isLoading && <Spin size=\"small\" />}\r\n          {/* <CustomRangePicker /> */}\r\n        </Space>\r\n        <Space>\r\n          {/* <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<PrinterOutlined />}\r\n          />\r\n          <MainButton\r\n            label=\"\"\r\n            type=\"default\"\r\n            shape=\"circle\"\r\n            Icon={<FileExcelOutlined />}\r\n            onClick={async () => {\r\n              if (isFiltered) {\r\n                if (selectedFilter === SchedulersClass.REVENUE_CHANNEL) {\r\n                  const defaultSheet = await schedulerExcel(\r\n                    filteredData,\r\n                    productData\r\n                  )\r\n                  ExportService.exportExcelReports(defaultSheet)\r\n                } else {\r\n                  handleExportExcel(filteredData, user?.branchSelected)\r\n                }\r\n              } else {\r\n                handleExportExcel(data, user?.branchSelected)\r\n              }\r\n            }}\r\n          /> */}\r\n        </Space>\r\n      </StyledLeftContent>\r\n      <StyledRightContent enableAdd={enableAdd}>\r\n        <MainButton\r\n          Icon={<ReloadOutlined />}\r\n          label=\"\"\r\n          type=\"default\"\r\n          shape=\"circle\"\r\n          onClick={() => {\r\n            loadData({}, user?.branchSelected, true) // refresh data if true\r\n            setIsLoading(true)\r\n          }}\r\n        />\r\n        {props?.ServiceClass.COLLECTION_NAME ===\r\n          SchedulersClass.COLLECTION_NAME && (\r\n          <TransactionGroupPayment />\r\n          // <MainButton label=\"Add Group Payment\" type=\"default\" />\r\n        )}\r\n        {props?.ServiceClass.COLLECTION_NAME ===\r\n        SchedulersClass.COLLECTION_NAME ? (\r\n          <DropdownChannel history={history} path={path} />\r\n        ) : (\r\n          <MainButton\r\n            label=\"Add\"\r\n            onClick={() => {\r\n              history.push(`${path}/add`)\r\n            }}\r\n          />\r\n        )}\r\n      </StyledRightContent>\r\n    </StyledContainer>\r\n  )\r\n}\r\n\r\nconst MobileTableView = (props) => {\r\n  return <div>Mobile view</div>\r\n}\r\n\r\nconst StyledURLNotFound = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 3rem 1fr;\r\n  grid-template-columns: 1fr;\r\n  justify-content: flex-start;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 85vh;\r\n  width: 100%;\r\n  z-index: 1000;\r\n  background-color: #eee;\r\n`\r\n\r\nconst StyledContainer = styled(Space)`\r\n  display: flex;\r\n  width: 100%;\r\n  padding-bottom: 1rem;\r\n  justify-content: ${(props) =>\r\n    props?.enableFilter ? \"space-between\" : \"flex-end\"};\r\n`\r\nconst StyledLeftContent = styled(Space)`\r\n  display: ${(props) => (props.enableFilter ? \"flex\" : \"none\")};\r\n  justify-content: flex-start;\r\n`\r\nconst StyledRightContent = styled(Space)`\r\n  display: ${(props) => (props.enableAdd ? \"flex\" : \"none\")};\r\n  justify-content: flex-end;\r\n`\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\hook.js",["1464","1465","1466","1467","1468","1469"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\segregateAdvanceOrders.js",["1470","1471"],"import { displayPaymentProp } from \"Helpers/collectionData\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport schedulerExcel from \"Helpers/schedulerExcel\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nexport default async function (schedules, productData, branch) {\r\n  let dateTobeFilter = \"\"\r\n  if (schedules.length > 0) {\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      schedules[0][SchedulersClass.DATE_START]\r\n    )\r\n    dateTobeFilter = dateFromDatabase\r\n  } else {\r\n    return {}\r\n  }\r\n\r\n  const datePlacedSched = await SchedulersClass.getDataByDate(\r\n    [dateTobeFilter, dateTobeFilter],\r\n    SchedulersClass.DATE_ORDER_PLACED,\r\n    branch\r\n  )\r\n  // const _advanceOrders = advanceOrders(datePlacedSched)\r\n  // const _notAdvanceOrders = notAdvanceOrders(schedules)\r\n  const advanceSheet = await schedulerExcel(\r\n    datePlacedSched,\r\n    productData,\r\n    \"\",\r\n    branch\r\n  )\r\n  const notAdvanceSheet = await schedulerExcel(\r\n    schedules,\r\n    productData,\r\n    \"\",\r\n    branch\r\n  )\r\n  const defaultSheet = await schedulerExcel(schedules, productData, \"\", branch)\r\n  let sheetName = \"\"\r\n  const defaultHeaderAndData = []\r\n  const defaultFooter = []\r\n\r\n  for (const key in defaultSheet) {\r\n    const arrayData = defaultSheet[key]\r\n    sheetName = key\r\n    arrayData.forEach((arrayList, index) => {\r\n      if (index >= 0 && index <= 4) {\r\n        defaultHeaderAndData.push(arrayList)\r\n      }\r\n      if (arrayList[0] === \"__\") {\r\n        defaultFooter.push(arrayList)\r\n      }\r\n    })\r\n  }\r\n\r\n  for (const key in notAdvanceSheet) {\r\n    const arrayData = notAdvanceSheet[key]\r\n    const arrayDataLength = arrayData.length\r\n    arrayData.forEach((arrayList, index) => {\r\n      if (index > 4 && index < arrayDataLength - 10) {\r\n        defaultHeaderAndData.push(arrayList)\r\n      }\r\n    })\r\n  }\r\n\r\n  for (const key in advanceSheet) {\r\n    const arrayData = advanceSheet[key]\r\n    const arrayDataLength = arrayData.length\r\n    arrayData.forEach((arrayList, index) => {\r\n      if (index > 4 && index < arrayDataLength - 10) {\r\n        defaultHeaderAndData.push(arrayList)\r\n      }\r\n    })\r\n  }\r\n  return defaultSheet\r\n  // return { [sheetName]: [...defaultHeaderAndData, ...defaultFooter] }\r\n}\r\n\r\nexport const advanceOrders = (schedules) => {\r\n  return schedules.filter((obj) => {\r\n    const date = displayPaymentProp(obj[\"date\"], obj, \"date\")\r\n    if (obj[SchedulersClass.STATUS] === \"CANCELLED\") {\r\n      return false\r\n    }\r\n    if (obj[SchedulersClass.STATUS] !== \"FULFILLED\") {\r\n      if (date !== \"undefined\") {\r\n        const dateFromD = formatDateFromDatabase(date)\r\n        const dateStartFromD = formatDateFromDatabase(\r\n          obj[SchedulersClass.DATE_START]\r\n        )\r\n        const dateNumber = new Date(dateFromD).getTime()\r\n        const dateNumberOfDateStart = new Date(dateStartFromD).getTime()\r\n\r\n        if (formatDateDash(dateFromD) === formatDateDash(dateStartFromD)) {\r\n          return false\r\n        }\r\n        return dateNumberOfDateStart <= dateNumber\r\n      }\r\n    }\r\n    return false\r\n  })\r\n}\r\nexport const notAdvanceOrders = (schedules) => {\r\n  return schedules.filter((obj) => {\r\n    const date = displayPaymentProp(obj[\"date\"], obj, \"date\")\r\n    if (obj[SchedulersClass.STATUS] === \"CANCELLED\") {\r\n      return false\r\n    }\r\n    if (obj[SchedulersClass.PARTIALS] !== \"undefined\") {\r\n      if (obj[SchedulersClass.PARTIALS].length === 0) {\r\n        return true\r\n      }\r\n    }\r\n    if (date !== \"undefined\") {\r\n      const dateFromD = formatDateFromDatabase(date)\r\n      const dateStartFromD = formatDateFromDatabase(\r\n        obj[SchedulersClass.DATE_START]\r\n      )\r\n      const dateNumber = new Date(dateFromD).getTime()\r\n      const dateNumberOfDateStart = new Date(dateStartFromD).getTime()\r\n\r\n      if (formatDateDash(dateFromD) === formatDateDash(dateStartFromD)) {\r\n        return true\r\n      }\r\n      if (dateNumberOfDateStart < dateNumber) {\r\n        if (obj[SchedulersClass.STATUS] !== \"FULFILLED\") {\r\n          return false\r\n        }\r\n        return true\r\n      }\r\n    } else {\r\n      return true\r\n    }\r\n    return false\r\n  })\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\DropdownChannel.js",["1472","1473","1474"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\produceSalesSummary2.js",["1475","1476","1477","1478","1479","1480","1481"],"import { calculateBalanceScheduler } from \"Helpers/collectionData\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Helpers/dateFormat\"\r\nimport thousandsSeparators, {\r\n  replaceThousandsSeparator,\r\n} from \"Helpers/formatNumber\"\r\nimport { amountPaid, balanceDue, paymentDetails } from \"Helpers/schedulerExcel\"\r\nimport sorting from \"Helpers/sorting\"\r\nimport sumArray, {\r\n  sumNumbers,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Helpers/sumArray\"\r\nimport DepositsClass from \"Services/Classes/DepositsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport transformedSched from \"./transformedSched\"\r\n\r\nconst dateSheetName = (string) => {\r\n  return string.substring(0, 5)\r\n  // return string\r\n}\r\n\r\nexport const produceSalesSummary2 = async (schedules, branch) => {\r\n  let dateTobeFilter = \"\"\r\n\r\n  if (schedules.length > 0) {\r\n    const dateFromDatabase = formatDateFromDatabase(\r\n      schedules[0][SchedulersClass.DATE_START]\r\n    )\r\n    dateTobeFilter = dateFromDatabase\r\n  } else {\r\n    return {}\r\n  }\r\n\r\n  // this is where the data came from (firebase)\r\n  const partials = await SchedulersClass.getDataByPartialDate(\r\n    formatDateDash(dateTobeFilter),\r\n    branch\r\n  )\r\n  const payments = await transformedSched(partials, dateTobeFilter)\r\n  //------------------------------------//\r\n\r\n  let sheet = {}\r\n  const formattedDate = formatDateDash(dateTobeFilter)\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY 2`] = [\r\n    [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n    [\"DAILY REPORT [ ORDERS SERVED ]\"],\r\n    [formatDateLong(dateTobeFilter)],\r\n    [],\r\n  ]\r\n\r\n  const [A_TRANS, A_TOTAL] = produceTRANS(\r\n    payments,\r\n    formattedDate,\r\n    \"[A] TRANSACTIONS OF DATE PAYMENT - PAID - FULFILLED\"\r\n  )\r\n\r\n  const [B_TRANS, B_TOTAL] = produceTRANS(\r\n    payments,\r\n    formattedDate,\r\n    \"[B] TRANSACTIONS OF DATE PAYMENT - PAID - NOT YET FULFILLED (ADVANCE ORDERS)\"\r\n  )\r\n\r\n  const depositList = await DepositsClass.getDataByFieldNameWithBranch(\r\n    DepositsClass.DATE_PAID_STRING,\r\n    formattedDate,\r\n    branch\r\n  )\r\n  console.log(\"summary2\", depositList)\r\n  const additionalCTrans = []\r\n  if (depositList.length > 0) {\r\n    const details = { ...depositList[0] }\r\n    console.log(\"details\", details)\r\n    const _data = {\r\n      [SchedulersClass.DATE_ORDER_PLACED]: \"\",\r\n      [SchedulersClass.DATE_START]: \"\",\r\n      [SchedulersClass.DATE_PAYMENT]: formatDateFromDatabase(\r\n        details[DepositsClass.DATE_DEPOSIT]\r\n      ),\r\n      [SchedulersClass.UTAK_NO]: \"\",\r\n      [SchedulersClass.PARTNER_MERCHANT_ORDER_NO]: \"\",\r\n      [SchedulersClass.ZAP_NUMBER]: \"\",\r\n      [SchedulersClass.MODE_PAYMENT]: \"Cash\",\r\n      [SchedulersClass.SOURCE]: \"Cash\",\r\n      [SchedulersClass.REF_NO]: \"\",\r\n      [SchedulersClass.ACCOUNT_NUMBER]: `${\r\n        details[DepositsClass.ACCOUNT_NUMBER]\r\n      } `,\r\n      [SchedulersClass.AMOUNT_PAID]: details[DepositsClass.TOTAL_DEPOSIT],\r\n      [SchedulersClass.STATUS]: \"Deposited\",\r\n    }\r\n    additionalCTrans.push(_data)\r\n  }\r\n  const [C_TRANS, C_TOTAL] = produceTRANS(\r\n    [...payments, ...additionalCTrans],\r\n    formattedDate,\r\n    \"[C] COLLECTIONS ON PREVIOUS BALANCES\"\r\n  )\r\n\r\n  const SUMMARY = produceSummary(\r\n    A_TOTAL,\r\n    B_TOTAL,\r\n    C_TOTAL,\r\n    A_TRANS,\r\n    B_TRANS,\r\n    C_TRANS\r\n  )\r\n\r\n  sheet[`${dateSheetName(formattedDate)} SALES SUMMARY 2`] = [\r\n    ...sheet[`${dateSheetName(formattedDate)} SALES SUMMARY 2`],\r\n    ...A_TRANS,\r\n    ...B_TRANS,\r\n    ...C_TRANS,\r\n    ...SUMMARY,\r\n  ]\r\n\r\n  return sheet\r\n}\r\n\r\nconst produceTRANS = (schedules, formattedDate, title = \"\") => {\r\n  const headers = [\r\n    \"DATE PLACED\",\r\n    \"SERVE DATE\",\r\n    \"UTAK #\",\r\n    \"PP#\",\r\n    \"DATE PAID\",\r\n    \"MODE\",\r\n    \"SOURCE\",\r\n    \"REF #\",\r\n    \"ACCT #\",\r\n    \"AMOUNT PAID\",\r\n  ]\r\n\r\n  const blankColumns = [...new Array(10)].map((d, i) => {\r\n    if (i === 0) return \"ORDER DETAILS \"\r\n    if (i === 4) return \"PAYMENT DETAILS \"\r\n  })\r\n\r\n  const TRANS = [[], [title], blankColumns, headers]\r\n\r\n  const amountPaidList = []\r\n\r\n  for (const originalObj of sorting(schedules, SchedulersClass.UTAK_NO)) {\r\n    let obj = { ...originalObj }\r\n    const datePlacedDateFormat = obj[SchedulersClass.DATE_ORDER_PLACED]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_ORDER_PLACED])\r\n      : \"\"\r\n    const dateServeDateFormat = obj[SchedulersClass.DATE_START]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_START])\r\n      : \"\"\r\n    const datePayment = obj[SchedulersClass.DATE_PAYMENT]\r\n      ? formatDateDash(obj[SchedulersClass.DATE_PAYMENT])\r\n      : \"\"\r\n\r\n    const dateEquality =\r\n      dateServeDateFormat === datePlacedDateFormat &&\r\n      dateServeDateFormat === datePayment &&\r\n      datePlacedDateFormat === datePayment\r\n\r\n    console.log(\r\n      `[A] TRANSACTIONS OF DATE PAYMENT - PAID - FULFILLED ${obj?.amountPaid}`,\r\n      dateEquality\r\n    )\r\n    switch (title) {\r\n      case \"[A] TRANSACTIONS OF DATE PAYMENT - PAID - FULFILLED\":\r\n        if (\r\n          obj[SchedulersClass.MODE_PAYMENT] === \"OFT\" &&\r\n          obj?.collectibles === 0 &&\r\n          datePayment === formattedDate &&\r\n          dateEquality === true\r\n        ) {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n      case \"[B] TRANSACTIONS OF DATE PAYMENT - PAID - NOT YET FULFILLED (ADVANCE ORDERS)\":\r\n        if (obj?.collectibles === 0 && dateEquality === false) {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n              obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n      default:\r\n        if (obj?.collectibles > 0 && datePayment === formattedDate) {\r\n          if (\r\n            obj[SchedulersClass.CASH_FOR_DEPOSIT] === \"\" ||\r\n            obj[SchedulersClass.CASH_FOR_DEPOSIT] === \"Paid\"\r\n          ) {\r\n            TRANS.push([\r\n              datePlacedDateFormat,\r\n              dateServeDateFormat,\r\n              obj[SchedulersClass.UTAK_NO],\r\n              obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n                obj[SchedulersClass.ZAP_NUMBER],\r\n              datePayment,\r\n              obj[SchedulersClass.MODE_PAYMENT],\r\n              obj[SchedulersClass.SOURCE],\r\n              obj[SchedulersClass.REF_NO],\r\n              obj[SchedulersClass.ACCOUNT_NUMBER],\r\n              thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n            ])\r\n            amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n          }\r\n        }\r\n\r\n        if (obj[SchedulersClass.STATUS] === \"Deposited\") {\r\n          TRANS.push([\r\n            datePlacedDateFormat,\r\n            dateServeDateFormat,\r\n            obj[SchedulersClass.UTAK_NO],\r\n            \"\",\r\n            // obj[SchedulersClass.PARTNER_MERCHANT_ORDER_NO] ||\r\n            //   obj[SchedulersClass.ZAP_NUMBER],\r\n            datePayment,\r\n            obj[SchedulersClass.MODE_PAYMENT],\r\n            obj[SchedulersClass.SOURCE],\r\n            obj[SchedulersClass.REF_NO],\r\n            obj[SchedulersClass.ACCOUNT_NUMBER],\r\n            thousandsSeparators(obj[SchedulersClass.AMOUNT_PAID].toFixed(2)),\r\n          ])\r\n          amountPaidList.push(Number(obj[SchedulersClass.AMOUNT_PAID]))\r\n        }\r\n        break\r\n    }\r\n  }\r\n\r\n  const total = sumNumbers(amountPaidList).toFixed(2)\r\n  TRANS.push([\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"Total\",\r\n    thousandsSeparators(total),\r\n  ])\r\n\r\n  return [TRANS, total]\r\n}\r\n\r\nconst produceSummary = (\r\n  A_TOTAL,\r\n  B_TOTAL,\r\n  C_TOTAL,\r\n  A_TRANS,\r\n  B_TRANS,\r\n  C_TRANS\r\n) => {\r\n  const aTotal = A_TOTAL.replace(/,/g, \"\")\r\n  const bTotal = B_TOTAL.replace(/,/g, \"\")\r\n  const cTotal = C_TOTAL.replace(/,/g, \"\")\r\n  const paymentReceivedTotal = Number(aTotal) + Number(bTotal) + Number(cTotal)\r\n  const summaryA = produceReportASummary(A_TRANS, B_TRANS, C_TRANS)\r\n  const SUMMARY = [\r\n    [],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"SUMMARY\", \"\"],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"SUMMARY OF REPORT A\",\r\n      \"\",\r\n      \"\",\r\n      \"PAYMENT RECEIVED\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"BDO / 981\",\r\n      summaryA[0],\r\n      \"\",\r\n      \"A\",\r\n      thousandsSeparators(A_TOTAL),\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"KP GCash\",\r\n      summaryA[1],\r\n      \"\",\r\n      \"B\",\r\n      thousandsSeparators(B_TOTAL),\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      summaryA[2],\r\n      \"\",\r\n      \"C\",\r\n      thousandsSeparators(C_TOTAL),\r\n      \"\",\r\n    ],\r\n    [\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"\",\r\n      \"TOTAL\",\r\n      thousandsSeparators(paymentReceivedTotal.toFixed(2)),\r\n      \"\",\r\n    ],\r\n  ]\r\n  return SUMMARY\r\n}\r\n\r\nconst produceReportASummary = (A_TRANS, B_TRANS, C_TRANS) => {\r\n  const orderList = {\r\n    BDO: [],\r\n    KP_GCASH: [],\r\n  }\r\n  console.log(\"A_TRANS\", A_TRANS)\r\n  A_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== A_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  console.log(\"B_TRANS\", B_TRANS)\r\n  B_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== B_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  C_TRANS.forEach((arrayData, index) => {\r\n    if (index > 3) {\r\n      if (index !== C_TRANS.length - 1) {\r\n        if (arrayData[8] === \"BDO / 981\") {\r\n          orderList[\"BDO\"].push(Number(replaceThousandsSeparator(arrayData[9])))\r\n        }\r\n        if (arrayData[8] === \"KP GCash\") {\r\n          orderList[\"KP_GCASH\"].push(\r\n            Number(replaceThousandsSeparator(arrayData[9]))\r\n          )\r\n        }\r\n      }\r\n    }\r\n  })\r\n  const sumOfBDO = sumNumbers(orderList[\"BDO\"])\r\n  const sumOfKP_GCASH = sumNumbers(orderList[\"KP_GCASH\"])\r\n  const sumOfTotal = sumOfBDO + sumOfKP_GCASH\r\n  return [\r\n    thousandsSeparators(sumOfBDO.toFixed(2)),\r\n    thousandsSeparators(sumOfKP_GCASH.toFixed(2)),\r\n    thousandsSeparators(sumOfTotal.toFixed(2)),\r\n  ]\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\produceSalesSummary.js",["1482","1483","1484","1485","1486","1487"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\produceSalesSummary1.js",["1488","1489","1490","1491","1492","1493","1494","1495","1496","1497"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\helpers.js",["1498"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AdvanceTableHandler\\transformedSched.js",["1499","1500"],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\DashboardScheduler\\Scheduler.js",["1501","1502","1503","1504","1505","1506","1507","1508","1509"],"import React, { useState, useEffect, useContext } from \"react\"\r\nimport { PrinterFilled, FilterFilled } from \"@ant-design/icons\"\r\nimport {\r\n  ScheduleComponent,\r\n  ViewDirective,\r\n  ViewsDirective,\r\n  Inject,\r\n  Week,\r\n  Month,\r\n  Agenda,\r\n  DragAndDrop,\r\n  Resize,\r\n  Day,\r\n  ResourcesDirective,\r\n  ResourceDirective,\r\n} from \"@syncfusion/ej2-react-schedule\"\r\nimport { DataManager, Predicate, Query } from \"@syncfusion/ej2-data\"\r\n// import db, { collection, onSnapshot, where, query } from \"Services/firebase\"\r\nimport {\r\n  collection,\r\n  getFirestore,\r\n  where,\r\n  query,\r\n  onSnapshot,\r\n} from \"firebase/firestore\"\r\nimport SchedulesClass from \"Services/Classes/SchedulesClass\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\nimport { formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport { UnavailableContext } from \"Error/Unavailable\"\r\nimport CustomTitle from \"Components/Commons/CustomTitle\"\r\nimport { Space, Tag, Table } from \"antd\"\r\nimport useGetDocuments from \"Hooks/useGetDocuments\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport {\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n} from \"Helpers/collectionData\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport MainButton from \"Components/Commons/MainButton\"\r\nimport Print from \"../Print\"\r\nimport CustomTable from \"Components/Commons/CustomTable\"\r\nimport CustomDrawer from \"Components/Commons/CustomDrawer\"\r\nimport FilteringPanel from \"Components/Features/FilteringPanel\"\r\n\r\nconst db = getFirestore()\r\nconst CellTemplate = (props) => {\r\n  const [subject, setSubject] = useState(\"\")\r\n  useEffect(() => {\r\n    console.log(\"productData\", props)\r\n    const productOrders = []\r\n    const productList = producedProductListOfAllCodes(props?.productData)\r\n    for (const value of productList) {\r\n      if (typeof props[value] !== \"undefined\") {\r\n        if (Number(props[value]) > 0) {\r\n          productOrders.push(`${value}: ${props[value]}`)\r\n        }\r\n      }\r\n    }\r\n    setSubject(productOrders.join(\", \"))\r\n  }, [props])\r\n  return <span>{props?.status === \"CANCELLED\" ? \"VOID\" : subject}</span>\r\n}\r\nfunction Scheduler({ handleNavigate, navigate }) {\r\n  const [productData, loadProductData] = useGetDocuments(ProductsClass)\r\n  const { setIsLoading } = useContext(UnavailableContext)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [eventSettings, setEventSettings] = useState({\r\n    dataSource: [],\r\n    template: (props) => {\r\n      return <CellTemplate {...props} productData={productData} />\r\n    },\r\n    allowDeleting: false,\r\n    allowEditing: false,\r\n    allowAdding: false,\r\n  })\r\n\r\n  useEffect(() => {\r\n    loadProductData()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const productList = producedProductListOfAllCodes(productData)\r\n    if (navigate.currentView === \"Day\") return\r\n    if (!user.branchSelected) return\r\n    const _startTime = new Date(navigate?.dateRange[0].setHours(0, 0, 0, 0))\r\n    const _endTime = new Date(navigate?.dateRange[1].setHours(23, 59, 59, 59))\r\n    const req = query(\r\n      collection(db, SchedulesClass.COLLECTION_NAME),\r\n      where(SchedulesClass.BRANCH, \"==\", user?.branchSelected),\r\n      where(SchedulesClass.DATE_START, \">=\", _startTime),\r\n      where(SchedulesClass.DATE_START, \"<=\", _endTime)\r\n    )\r\n    setIsLoading(true)\r\n    const unsubscribe = onSnapshot(req, (snapshot) => {\r\n      const dataSource = [...eventSettings.dataSource]\r\n      snapshot.docChanges().forEach((change) => {\r\n        if (change.type === \"added\") {\r\n          const data = change.doc.data()\r\n          const productOrders = []\r\n          for (const value of productList) {\r\n            if (typeof data[value] !== \"undefined\") {\r\n              if (Number(data[value]) > 0) {\r\n                productOrders.push(`${value}: ${data[value]}`)\r\n              }\r\n            }\r\n          }\r\n          const dateStart = formatDateFromDatabase(\r\n            data[SchedulesClass.DATE_START]\r\n          )\r\n          const dateEnd = formatDateFromDatabase(data[SchedulesClass.DATE_END])\r\n          dataSource.push({\r\n            ...data,\r\n            [SchedulesClass.DATE_START]: dateStart,\r\n            [SchedulesClass.DATE_END]: dateEnd,\r\n            [SchedulesClass.SUBJECT]: productOrders.join(\", \"),\r\n          })\r\n        }\r\n        if (change.type === \"modified\") {\r\n          console.log(\"Modified city: \", change.doc.data())\r\n        }\r\n        if (change.type === \"removed\") {\r\n          console.log(\"Removed city: \", change.doc.data())\r\n        }\r\n      })\r\n\r\n      setIsLoading(false)\r\n      setEventSettings({\r\n        ...eventSettings,\r\n        template: (props) => {\r\n          return <CellTemplate {...props} productData={productData} />\r\n        },\r\n        dataSource,\r\n      })\r\n    })\r\n    return () => {\r\n      setEventSettings({\r\n        ...eventSettings,\r\n        dataSource: [],\r\n      })\r\n      unsubscribe()\r\n    }\r\n  }, [navigate?.dateRange, user, productData])\r\n\r\n  const onEventRendered = (args) => {\r\n    const { element, data } = args\r\n    if (data[SchedulesClass.STATUS] === \"CANCELLED\") {\r\n      element.style.background = \"orange\"\r\n    } else {\r\n      element.style.background = \"transparent\"\r\n    }\r\n    element.style.color = \"#333\"\r\n  }\r\n\r\n  const HeaderTemplate = (props) => {\r\n    return (\r\n      <div\r\n        style={\r\n          props?.status === \"CANCELLED\"\r\n            ? { padding: \"1rem\" }\r\n            : { padding: \"1rem\", backgroundColor: \"#1890ff\" }\r\n        }\r\n      >\r\n        {props.status === \"CANCELLED\" ? (\r\n          <CustomTitle label=\"VOID\" typographyType=\"text\" />\r\n        ) : (\r\n          <CustomTitle label={props?.Subject} typographyType=\"text\" />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const ContentTemplate = (props) => {\r\n    const productOrders = []\r\n    const productList = producedProductListOfAllCodes(productData)\r\n    for (const value of productList) {\r\n      if (typeof props[value] !== \"undefined\") {\r\n        if (Number(props[value]) > 0) {\r\n          const productGroups =\r\n            producedProductListWithGroupAndAmounts(productData)\r\n          const productDetails = productGroups.find(\r\n            (data) => data[ProductsClass.CODE] === value\r\n          )\r\n          const price =\r\n            props[`customPrice${value}`] || productDetails[ProductsClass.PRICE]\r\n          const total = Number(price) * Number(props[value])\r\n          productOrders.push({\r\n            ...productDetails,\r\n            qty: props[value],\r\n            price,\r\n            total,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    const subTotal = sumArray(productOrders, \"total\") || 0\r\n    const _columns = [\r\n      {\r\n        title: \"Code\",\r\n        dataIndex: ProductsClass.CODE,\r\n        render: (data) => {\r\n          return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n        },\r\n      },\r\n      {\r\n        title: \"Products\",\r\n        dataIndex: ProductsClass.DESCRIPTION,\r\n        render: (data) => {\r\n          return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n        },\r\n      },\r\n      {\r\n        title: \"Qty\",\r\n        dataIndex: \"qty\",\r\n        render: (data) => {\r\n          return <span style={{ fontSize: \"10px\" }}>{data}</span>\r\n        },\r\n      },\r\n      {\r\n        title: \"Price\",\r\n        dataIndex: ProductsClass.PRICE,\r\n        align: \"right\",\r\n        render: (data) => {\r\n          return (\r\n            <span style={{ fontSize: \"10px\" }}>\r\n              {thousandsSeparators(Number(data).toFixed(2))}\r\n            </span>\r\n          )\r\n        },\r\n      },\r\n      {\r\n        title: \"Total\",\r\n        dataIndex: \"total\",\r\n        align: \"right\",\r\n        render: (data) => {\r\n          return (\r\n            <span style={{ fontSize: \"10px\" }}>\r\n              {thousandsSeparators(Number(data || 0).toFixed(2))}\r\n            </span>\r\n          )\r\n        },\r\n      },\r\n    ]\r\n    return (\r\n      <>\r\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n          <Table\r\n            columns={_columns}\r\n            dataSource={productOrders}\r\n            size=\"small\"\r\n            pagination={false}\r\n          />\r\n          <Space\r\n            style={{\r\n              justifyContent: \"space-between\",\r\n              width: \"100%\",\r\n              padding: \"0rem .5rem\",\r\n              color: \"red\",\r\n            }}\r\n          >\r\n            <span>Total</span>\r\n            <span>{thousandsSeparators(Number(subTotal).toFixed(2))}</span>\r\n          </Space>\r\n          <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n            <Print\r\n              component={\r\n                <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                  <Table\r\n                    size=\"small\"\r\n                    pagination={false}\r\n                    columns={_columns}\r\n                    dataSource={productOrders}\r\n                  />\r\n                  <Space\r\n                    style={{\r\n                      justifyContent: \"space-between\",\r\n                      width: \"100%\",\r\n                      padding: \"0rem .5rem\",\r\n                      color: \"red\",\r\n                    }}\r\n                  >\r\n                    <span>Total</span>\r\n                    <span>\r\n                      {thousandsSeparators(Number(subTotal).toFixed(2))}\r\n                    </span>\r\n                  </Space>\r\n                </Space>\r\n              }\r\n              button={<PrinterFilled fontSize=\"2.5rem\" />}\r\n            />\r\n          </div>\r\n        </Space>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const FooterTemplate = (props) => {\r\n    return <div>Footer</div>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <CustomSchedule testing=\"nevermind\" /> */}\r\n      <ScheduleComponent\r\n        startHour=\"08:00\"\r\n        endHour=\"19:00\"\r\n        eventSettings={eventSettings}\r\n        views={[\r\n          {\r\n            option: \"Day\",\r\n            startHour: \"09:00\",\r\n            endHour: \"19:00\",\r\n            timeScale: { enable: true, slotCount: 3 },\r\n          },\r\n        ]}\r\n        navigating={handleNavigate}\r\n        height=\"100vh\"\r\n        width=\"100%\"\r\n        currentView={navigate?.currentView}\r\n        selectedDate={navigate?.selectedDate}\r\n        eventRendered={onEventRendered}\r\n        quickInfoTemplates={{\r\n          header: HeaderTemplate,\r\n          content: ContentTemplate,\r\n          footer: FooterTemplate,\r\n        }}\r\n      >\r\n        <ResourcesDirective>\r\n          <ResourceDirective\r\n            field=\"CalendarId\"\r\n            title=\"Calendars\"\r\n            name=\"Calendars\"\r\n            // dataSource={this.calendarCollections}\r\n            query={new Query().where(\"CalendarId\", \"equal\", 1)}\r\n            textField=\"CalendarText\"\r\n            idField=\"CalendarId\"\r\n            colorField=\"CalendarColor\"\r\n          ></ResourceDirective>\r\n        </ResourcesDirective>\r\n        <ViewsDirective>\r\n          <ViewDirective option=\"Day\" />\r\n          <ViewDirective option=\"Week\" />\r\n          <ViewDirective option=\"Month\" />\r\n          <ViewDirective option=\"Agenda\" />\r\n        </ViewsDirective>\r\n        <Inject services={[Day, Week, Month, Agenda]} />\r\n      </ScheduleComponent>\r\n      <div style={{ position: \"fixed\", bottom: 0, right: 0, padding: \"1rem\" }}>\r\n        <CustomDrawer Icon={<FilterFilled />} shape=\"circle\" title=\"Schedules\">\r\n          <FilteringPanel />\r\n        </CustomDrawer>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Scheduler\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\index.js",["1510","1511","1512","1513","1514"],"import React, { useState } from \"react\"\r\n// import { DATE, DATE_START, DATE_END, BRANCH } from \"Constants/schedules\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport { Grid } from \"./Styled\"\r\nimport RangePicker from \"Components/Commons/RangePicker\"\r\nimport Panel from \"./Panel\"\r\nimport useSchedulerFilter from \"./Controllers/useSchedulerFilter\"\r\nimport Animate, { FadeInLeft } from \"animate-css-styled-components\"\r\nimport { FloatContainer } from \"./styles\"\r\nimport { AiFillPrinter } from \"react-icons/ai\"\r\n// import { STATUS } from \"components/SchedulerComponent/orderSlip/types\"\r\nimport SchedulesClass from \"Services/Classes/SchedulesClass\"\r\nimport ProductClass from \"Services/Classes/ProductsClass\"\r\nimport Print from \"../Print\"\r\nimport FilteringPanelDocs from \"../Print/Documents/filteringPanelDocs\"\r\nimport { Button, Card } from \"antd\"\r\n\r\nconst DATE = \"date\"\r\nconst DATE_START = SchedulesClass.DATE_START\r\nconst DATE_END = SchedulesClass.DATE_END\r\nfunction FilteringPanel({ isToggled = false }) {\r\n  const [\r\n    dataFetched,\r\n    dataFiltered,\r\n    branch,\r\n    branchDatasource,\r\n    products,\r\n    productLabels,\r\n    getDataByBranch,\r\n    getDataByDate,\r\n  ] = useSchedulerFilter(SchedulersClass)\r\n\r\n  console.log(\"printDataFetched\", dataFetched)\r\n  return (\r\n    <Grid style={{ position: \"relative\" }}>\r\n      {/* <Select\r\n        label=\"Branch\"\r\n        dataSource={branchDatasource}\r\n        value={branch}\r\n        onChange={(value) => getDataByBranch(value)}\r\n      /> */}\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"5rem\",\r\n          right: \"3rem\",\r\n          zIndex: 1000,\r\n          backgroundColor: \"white\",\r\n        }}\r\n      >\r\n        <RangePicker\r\n          label=\"Date\"\r\n          onChange={(value) => {\r\n            getDataByDate({ dates: value })\r\n          }}\r\n          style={{ width: \"100%\" }}\r\n          format=\"MM/DD/YYYY\"\r\n          // disabled={products.length > 0 ? false : true}\r\n        />\r\n      </div>\r\n      <Grid style={{ marginTop: \"3rem\" }}>\r\n        {dataFiltered.map((data, index) => {\r\n          const chips = []\r\n          for (const key in data) {\r\n            if (products.includes(key)) {\r\n              chips.push(`${productLabels[key]}: ${data[key]}`)\r\n            }\r\n          }\r\n          return (\r\n            <Animate\r\n              key={index}\r\n              Animation={[FadeInLeft]}\r\n              duration={[\"1s\"]}\r\n              delay={[`0.${1 + index}s`]}\r\n            >\r\n              <Card>\r\n                <Panel\r\n                  date={data[DATE]}\r\n                  timeStart={data[DATE_START]}\r\n                  timeEnd={data[DATE_END]}\r\n                  backgroundColor=\"transparent\"\r\n                  chips={[...chips]}\r\n                />\r\n              </Card>\r\n            </Animate>\r\n          )\r\n        })}\r\n      </Grid>\r\n      <FloatContainer display={isToggled}>\r\n        {dataFetched.length > 0 && (\r\n          <Print\r\n            component={\r\n              <FilteringPanelDocs\r\n                documentPrintInfo={{\r\n                  dataFetched: dataFetched,\r\n                  products,\r\n                  productLabels,\r\n                }}\r\n                branch={branch}\r\n              />\r\n            }\r\n            button={<AiFillPrinter fontSize=\"1.5rem\" />}\r\n          />\r\n        )}\r\n      </FloatContainer>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default FilteringPanel\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\styles.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Panel\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\Documents\\filteringPanelDocs.js",["1515","1516"],"import React, { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\n// import { CODE, DESCRIPTION, QUANTITY } from \"Restructured/Constants/products\"\r\n// import { DATE_END, DATE_START } from \"Restructured/Constants/schedules\"\r\n// import { Grid } from \"Restructured/Styles\"\r\nimport { Space } from \"antd\"\r\nimport FilteringPanelMethods from \"../../FilteringPanel/Controllers/FilteringPanelMethods\"\r\nimport PrintMethods from \"../Controllers/PrintMethods\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nfunction FilteringPanelDocs(props) {\r\n  const [documentPrintInfo, setDocumentPrintInfo] = useState({})\r\n  const [products, setProducts] = useState([])\r\n  const [productLabels, setProductLabels] = useState({})\r\n  const [summary, setSummary] = useState([])\r\n  const [printDetailsPerSched, setPrintDetailsPerSched] = useState([])\r\n  useEffect(() => {\r\n    setDocumentPrintInfo(props.documentPrintInfo)\r\n    setProducts(products)\r\n    setProductLabels(productLabels)\r\n    handlePrintDetailsPerSched(props.documentPrintInfo, props.branch)\r\n  }, [props.documentPrintInfo, props.branch])\r\n\r\n  const handlePrintDetailsPerSched = (printInfo, branch) => {\r\n    const _dataFetched = [...printInfo.dataFetched]\r\n    const args = {\r\n      branch,\r\n      dataFetched: _dataFetched,\r\n    }\r\n    console.log(\"console\", _dataFetched)\r\n    const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n    const _detailsPerSched = PrintMethods.producePrintDetailsPerSchedule({\r\n      branch,\r\n      orders: _orders,\r\n      products: printInfo?.products,\r\n      productLabels: printInfo?.productLabels,\r\n    })\r\n    const _summaryPerProduct =\r\n      PrintMethods.producePrintSummaryPerProduct(_detailsPerSched)\r\n    console.log(\"console\", _summaryPerProduct)\r\n    setSummary(_summaryPerProduct)\r\n    setPrintDetailsPerSched(_detailsPerSched)\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <span>ORDER LIST</span>\r\n      <table style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n        <tr style={{ fontWeight: 700, backgroundColor: \"#999\" }}>\r\n          <th align=\"left\">DATE</th>\r\n          <th align=\"left\">SLOT</th>\r\n          <th align=\"left\">CODE</th>\r\n          <th align=\"left\">PRODUCT</th>\r\n          <th align=\"left\">QUANTITY</th>\r\n        </tr>\r\n        {printDetailsPerSched.map((data, index) => {\r\n          return (\r\n            <tr\r\n              style={\r\n                index % 2 === 0\r\n                  ? { backgroundColor: \"white\" }\r\n                  : { backgroundColor: \"#999\" }\r\n              }\r\n            >\r\n              <td>{data.date}</td>\r\n              <td>{`${data[SchedulersClass.DATE_START]} - ${\r\n                data[SchedulersClass.DATE_END]\r\n              }`}</td>\r\n              <td>{data[\"code\"]}</td>\r\n              <td>{data[\"description\"]}</td>\r\n              <td>{data[\"quantity\"]}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n      <span>SUMMARY PER PRODUCT</span>\r\n      <table style={{ fontSize: \"8px\", width: \"30%\" }}>\r\n        <tr style={{ fontWeight: 700, backgroundColor: \"#999\" }}>\r\n          <th>CODE</th>\r\n          <th>PRODUCT</th>\r\n          <th>QUANTITY</th>\r\n        </tr>\r\n        {summary.map((data, index) => {\r\n          return (\r\n            <tr\r\n              style={\r\n                index % 2 === 0\r\n                  ? { backgroundColor: \"white\" }\r\n                  : { backgroundColor: \"#999\" }\r\n              }\r\n            >\r\n              <td>{data[\"code\"]}</td>\r\n              <td>{data[\"description\"]}</td>\r\n              <td>{data[\"quantity\"]}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n    </Space>\r\n    // <Grid padding=\"3rem\">\r\n    //   <Grid>\r\n    //     <h3>VITOS BBQ</h3>\r\n    //   </Grid>\r\n    //   <Grid>\r\n    //     <h3>ORDER LIST FORM</h3>\r\n    //   </Grid>\r\n    //   <Grid>\r\n    //     <div>DETAILS PER PRODUCT</div>\r\n    //     <table>\r\n    //       <tr>\r\n    //         <th>Date</th>\r\n    //         <th>Slot</th>\r\n    //         <th>Code</th>\r\n    //         <th>Product</th>\r\n    //         <th style={{ display: \"flex\", justifyContent: \"flex-end\" }}>Qty</th>\r\n    //       </tr>\r\n    //       {printDetailsPerSched.map((data) => {\r\n    //         return (\r\n    //           <tr>\r\n    //             <td>{data.date}</td>\r\n    //             <td>{`${data[DATE_START]} - ${data[DATE_END]}`}</td>\r\n    //             <td>{data[CODE]}</td>\r\n    //             <td>{data[DESCRIPTION]}</td>\r\n    //             <td style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n    //               {data[QUANTITY]}\r\n    //             </td>\r\n    //           </tr>\r\n    //         )\r\n    //       })}\r\n    //     </table>\r\n    //   </Grid>\r\n    //   <br />\r\n    //   <Grid>\r\n    //     <div>SUMMARY PER PRODUCT</div>\r\n    //     <table>\r\n    //       <tr>\r\n    //         <th>Code</th>\r\n    //         <th>Product</th>\r\n    //         <th style={{ display: \"flex\", justifyContent: \"flex-end\" }}>Qty</th>\r\n    //       </tr>\r\n    //       {summary.map((data) => {\r\n    //         return (\r\n    //           <tr>\r\n    //             <td>{data[CODE]}</td>\r\n    //             <td>{data[DESCRIPTION]}</td>\r\n    //             <td style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n    //               {data[QUANTITY]}\r\n    //             </td>\r\n    //           </tr>\r\n    //         )\r\n    //       })}\r\n    //     </table>\r\n    //   </Grid>\r\n    // </Grid>\r\n  )\r\n}\r\n\r\nexport default FilteringPanelDocs\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Controllers\\useSchedulerFilter.js",["1517","1518"],"import { useEffect, useState, useContext } from \"react\"\r\nimport { formatDateFromDatabase } from \"Helpers/dateFormat\"\r\n// import { selectuser } from \"containers/0.login/loginSlice\"\r\n// import { selectuser } from \"components/SchedulerComponent/user\"\r\nimport { useSelector } from \"react-redux\"\r\nimport FilteringPanelMethods from \"./FilteringPanelMethods\"\r\nimport { UnauthorizedContext } from \"Error/Unauthorized\"\r\n\r\nimport SchedulesClass from \"Services/Classes/SchedulesClass\"\r\nimport ProductClass from \"Services/Classes/ProductsClass\"\r\nfunction useSchedulerFilter() {\r\n  // const user = useSelector(selectuser)\r\n  const { user } = useContext(UnauthorizedContext)\r\n  const [branchDatasource, setBranchDatasource] = useState([])\r\n  const [dataFetched, setDataFetched] = useState([])\r\n  const [dataFiltered, setDataFiltered] = useState([])\r\n  const [products, setProducts] = useState([])\r\n  const [productLabels, setProductLabels] = useState({})\r\n  const [branch, setBranch] = useState(\"\")\r\n\r\n  // to get the branch colors from user redux store\r\n  useEffect(() => {\r\n    if (user?.branchSelected) {\r\n      setBranch(user?.branchSelected)\r\n    }\r\n  }, [user])\r\n\r\n  // to set default branch value and its dropdown list of value\r\n  // useEffect(() => {\r\n  //   if (branchDatasource.length === 0) {\r\n  //     setBranchDatasource(user.branchSelected)\r\n  //   } else {\r\n  //     setBranch(branchDatasource[0])\r\n  //   }\r\n  // }, [user, branchDatasource])\r\n\r\n  useEffect(() => {\r\n    getProducts()\r\n  }, [])\r\n\r\n  // to get the product list from database\r\n  const getProducts = async () => {\r\n    const _productList = await ProductClass.getData()\r\n    const { _products, _productLabels } =\r\n      FilteringPanelMethods.produceProductList(_productList)\r\n    setProducts(_products)\r\n    setProductLabels(_productLabels)\r\n    // db.collection(\"products\")\r\n    //   .get()\r\n    //   .then((querySnapshot) => {\r\n    //     const _dataFetched = []\r\n    //     querySnapshot.forEach((doc) => {\r\n    //       const _data = doc.data()\r\n    //       _dataFetched.push({\r\n    //         ..._data,\r\n    //       })\r\n    //     })\r\n    //     const { _products, _productLabels } =\r\n    //       FilteringPanelMethods.produceProductList(_dataFetched)\r\n    //     setProducts(_products)\r\n    //     setProductLabels(_productLabels)\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(\"Error getting documents: \", error)\r\n    //   })\r\n  }\r\n\r\n  const getDataByDate = async ({ dates }) => {\r\n    if (dates !== null /*&& branchDatasource.length > 0*/) {\r\n      const MS_PER_MINUTE = 60000\r\n      const startTime = new Date(dates[0]?._d)\r\n      const endTime = new Date(dates[1]?._d)\r\n      const _dateFrom = new Date(startTime - 30 * MS_PER_MINUTE)\r\n      const _dateTo = new Date(endTime - 30 * MS_PER_MINUTE)\r\n      const schedules = await SchedulesClass.getDataByDatePanel(\r\n        [_dateFrom, _dateTo],\r\n        SchedulesClass.DATE_START,\r\n        user.branchSelected\r\n      )\r\n\r\n      const _dataFetched = []\r\n      schedules.forEach((doc) => {\r\n        const _data = doc\r\n        const _productList = FilteringPanelMethods.produceProductListWithData({\r\n          products,\r\n          dataList: _data,\r\n        })\r\n        const _startTime = formatDateFromDatabase(_data.StartTime)\r\n        const _endTime = formatDateFromDatabase(_data.EndTime)\r\n        _dataFetched.push({\r\n          ..._productList,\r\n          [SchedulesClass.BRANCH]: _data[SchedulesClass.BRANCH],\r\n          StartTime: _startTime,\r\n          EndTime: _endTime,\r\n          [SchedulesClass.STATUS]: _data[SchedulesClass.STATUS],\r\n          _id: doc._id,\r\n        })\r\n      })\r\n      console.log(\"schedules panel\", _dataFetched)\r\n      setDataFetched(_dataFetched)\r\n      const args = {\r\n        branch: user.branchSelected,\r\n        dataFetched: [..._dataFetched],\r\n      }\r\n      const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n      setDataFiltered(_orders)\r\n      // db.collection(\"schedules\")\r\n      //   .where(\"StartTime\", \">=\", _dateFrom)\r\n      //   .where(\"StartTime\", \"<=\", _dateTo)\r\n      //   .get()\r\n      //   .then((querySnapshot) => {\r\n      //     const _dataFetched = []\r\n      //     querySnapshot.forEach((doc) => {\r\n      //       const _data = doc.data()\r\n      //       const _productList =\r\n      //         FilteringPanelMethods.produceProductListWithData({\r\n      //           products,\r\n      //           dataList: _data,\r\n      //         })\r\n      //       const _startTime = formatDateFromDatabase(_data.StartTime)\r\n      //       const _endTime = formatDateFromDatabase(_data.EndTime)\r\n      //       _dataFetched.push({\r\n      //         ..._productList,\r\n      //         [BRANCH]: _data[BRANCH],\r\n      //         StartTime: _startTime,\r\n      //         EndTime: _endTime,\r\n      //         [STATUS]: _data[STATUS],\r\n      //         _id: doc.id,\r\n      //       })\r\n      //     })\r\n      //     setDataFetched(_dataFetched)\r\n\r\n      //     const args = {\r\n      //       branch,\r\n      //       dataFetched: [..._dataFetched],\r\n      //     }\r\n      //     const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n      //     setDataFiltered(_orders)\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(\"Error getting documents: \", error)\r\n      //   })\r\n    } else {\r\n      setDataFiltered([])\r\n      setDataFetched([])\r\n    }\r\n  }\r\n\r\n  const getDataByBranch = (value) => {\r\n    setBranch(value)\r\n    if (dataFetched.length > 0) {\r\n      const args = {\r\n        branch: value,\r\n        dataFetched: [...dataFetched],\r\n      }\r\n      const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n      setDataFiltered(_orders)\r\n    }\r\n  }\r\n\r\n  return [\r\n    dataFetched,\r\n    dataFiltered,\r\n    branch,\r\n    branchDatasource,\r\n    products,\r\n    productLabels,\r\n    getDataByBranch,\r\n    getDataByDate,\r\n  ]\r\n}\r\n\r\nexport default useSchedulerFilter\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Styled\\index.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\Print\\Controllers\\PrintMethods.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Controllers\\FilteringPanelMethods.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\FilteringPanel\\Panel\\styles.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\firebase\\LogServices.js",[],"D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\LogsClass.js",["1519"],"import { ARRAY_OF_STRING_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport Base from \"Services/Base\"\r\n\r\nexport default class LogsClass {\r\n  static COLLECTION_NAME = \"logs\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.NO, \"asc\"]\r\n    )\r\n  }\r\n\r\n  static getDataByFieldName(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n  static _ID = \"_id\"\r\n  static ACTION = \"action\"\r\n  static DATE = \"date\"\r\n  static DISPLAY_NAME = \"displayName\"\r\n  static EMAIL = \"email\"\r\n\r\n  static PROPERTIES = [\r\n    this._ID,\r\n    this.ACTION,\r\n    this.DATE,\r\n    this.DISPLAY_NAME,\r\n    this.EMAIL,\r\n  ]\r\n\r\n  static LABELS = {\r\n    [this._ID]: \"Id\",\r\n    [this.ACTION]: \"Action\",\r\n    [this.DATE]: \"Date\",\r\n    [this.DISPLAY_NAME]: \"Name\",\r\n    [this.EMAIL]: \"Email\",\r\n  }\r\n  static TYPES = {\r\n    [this.BRANCH_ADDRESS]: STRING_TYPE,\r\n    [this.BRANCH_NAME]: STRING_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Services\\Classes\\ExcessPaymentsClass.js",["1520"],"import { ARRAY_OF_STRING_TYPE, NUMBER_TYPE, STRING_TYPE } from \"Constants/types\"\r\nimport Base from \"Services/Base\"\r\n\r\nexport default class ExcessPaymentsClass {\r\n  static COLLECTION_NAME = \"excessPayments\"\r\n  static getData() {\r\n    return Base.getData(this.COLLECTION_NAME)\r\n  }\r\n  static getDataById(id) {\r\n    return Base.getDataById(this.COLLECTION_NAME, id)\r\n  }\r\n\r\n  static updateDataById(id, data) {\r\n    return Base.updateDataById(this.COLLECTION_NAME, id, data)\r\n  }\r\n\r\n  static getDataBySort(customSort = []) {\r\n    return Base.getDataBySort(\r\n      this.COLLECTION_NAME,\r\n      customSort.length > 0 ? [...customSort] : [this.NO, \"asc\"]\r\n    )\r\n  }\r\n\r\n  static getDataByFieldName(fieldname, value) {\r\n    return Base.getDataByFieldname(this.COLLECTION_NAME, fieldname, value)\r\n  }\r\n\r\n  static addData(data) {\r\n    return Base.addData(this.COLLECTION_NAME, data)\r\n  }\r\n\r\n  static setData(id, data) {\r\n    return Base.setData(this.COLLECTION_NAME, id, data)\r\n  }\r\n  static _ID = \"_id\"\r\n  static AMOUNT = \"amount\"\r\n  static DATE = \"date\"\r\n  static NAME = \"name\"\r\n\r\n  static PROPERTIES = [this._ID, this.AMOUNT, this.DATE, this.NAME]\r\n\r\n  static LABELS = {\r\n    [this._ID]: \"Id\",\r\n    [this.AMOUNT]: \"Amount\",\r\n    [this.DATE]: \"Date\",\r\n    [this.NAME]: \"Name\",\r\n  }\r\n  static TYPES = {\r\n    [this._ID]: STRING_TYPE,\r\n    [this.AMOUNT]: NUMBER_TYPE,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generateReportA.js",["1521","1522"],"import { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport {\r\n  calculateDiscountScheduler,\r\n  displayOrderVia,\r\n  displaySalesType,\r\n} from \"Helpers/collectionData\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nexport default function (days = [], data = [], dateFieldname) {\r\n  const dataByDate = {}\r\n  for (const obj of data) {\r\n    const dateFromD = formatDateFromDatabase(obj[dateFieldname])\r\n    const formatDate = formatDateDash(dateFromD)\r\n    if (typeof dataByDate[formatDate] === \"undefined\") {\r\n      dataByDate[formatDate] = [\r\n        {\r\n          [SchedulersClass.OTHERS]: obj[SchedulersClass.OTHERS],\r\n          [SchedulersClass.AMOUNT_PAID]: obj[SchedulersClass.AMOUNT_PAID],\r\n          [SchedulersClass.TOTAL_DUE]: obj[SchedulersClass.TOTAL_DUE],\r\n          [SchedulersClass.ACCOUNT_NUMBER]: obj[SchedulersClass.ACCOUNT_NUMBER],\r\n          [SchedulersClass.ORDER_VIA]: obj[SchedulersClass.ORDER_VIA],\r\n          [SchedulersClass.ORDER_VIA_WEBSITE]:\r\n            obj[SchedulersClass.ORDER_VIA_WEBSITE],\r\n          [SchedulersClass.ORDER_VIA_PARTNER]:\r\n            obj[SchedulersClass.ORDER_VIA_PARTNER],\r\n          [SchedulersClass.VIA]: obj[SchedulersClass.VIA],\r\n        },\r\n      ]\r\n    } else {\r\n      dataByDate[formatDate].push({\r\n        [SchedulersClass.OTHERS]: obj[SchedulersClass.OTHERS],\r\n        [SchedulersClass.AMOUNT_PAID]: obj[SchedulersClass.AMOUNT_PAID],\r\n        [SchedulersClass.TOTAL_DUE]: obj[SchedulersClass.TOTAL_DUE],\r\n        [SchedulersClass.ACCOUNT_NUMBER]: obj[SchedulersClass.ACCOUNT_NUMBER],\r\n        [SchedulersClass.ORDER_VIA]: obj[SchedulersClass.ORDER_VIA],\r\n        [SchedulersClass.ORDER_VIA_PARTNER]:\r\n          obj[SchedulersClass.ORDER_VIA_PARTNER],\r\n        [SchedulersClass.ORDER_VIA_WEBSITE]:\r\n          obj[SchedulersClass.ORDER_VIA_WEBSITE],\r\n        [SchedulersClass.VIA]: obj[SchedulersClass.VIA],\r\n      })\r\n    }\r\n  }\r\n\r\n  const finalReport = []\r\n  let grandTotals = {\r\n    regular: 0,\r\n    spwd: 0,\r\n    zap: 0,\r\n    gf: 0,\r\n    pf: 0,\r\n    pm: 0,\r\n    ir: 0,\r\n    oth: 0,\r\n    amountDue: 0,\r\n    overPayment: 0,\r\n  }\r\n  for (const date of days) {\r\n    if (typeof dataByDate[date] !== \"undefined\") {\r\n      const {\r\n        sumOfRegular,\r\n        sumOfSpwd,\r\n        sumOfZap,\r\n        sumOfGf,\r\n        sumOfFp,\r\n        sumOfPm,\r\n        sumOfIr,\r\n        sumOfOth,\r\n        totalAmountDue,\r\n        sumOfOverPayment,\r\n      } = segragateByAccount(dataByDate[date], date)\r\n      grandTotals.regular = grandTotals.regular + sumOfRegular\r\n      grandTotals.spwd = grandTotals.spwd + sumOfSpwd\r\n      grandTotals.zap = grandTotals.zap + sumOfZap\r\n      grandTotals.gf = grandTotals.gf + sumOfGf\r\n      grandTotals.fp = grandTotals.fp + sumOfFp\r\n      grandTotals.pm = grandTotals.pm + sumOfPm\r\n      grandTotals.ir = grandTotals.ir + sumOfIr\r\n      grandTotals.oth = grandTotals.oth + sumOfOth\r\n      grandTotals.amountDue = grandTotals.amountDue + totalAmountDue\r\n      grandTotals.overPayment = grandTotals.overPayment + sumOfOverPayment\r\n\r\n      finalReport.push([\r\n        date,\r\n        thousandsSeparators(sumOfRegular.toFixed(2)),\r\n        thousandsSeparators(sumOfSpwd.toFixed(2)),\r\n        thousandsSeparators(sumOfZap.toFixed(2)),\r\n        thousandsSeparators(sumOfGf.toFixed(2)),\r\n        thousandsSeparators(sumOfFp.toFixed(2)),\r\n        thousandsSeparators(sumOfZap.toFixed(2)),\r\n        thousandsSeparators(sumOfPm.toFixed(2)),\r\n        thousandsSeparators(sumOfIr.toFixed(2)),\r\n        thousandsSeparators(sumOfOth.toFixed(2)),\r\n        thousandsSeparators(totalAmountDue.toFixed(2)),\r\n        sumOfOverPayment > 0\r\n          ? `OVER PAYMENT ${thousandsSeparators(sumOfOverPayment.toFixed(2))}`\r\n          : \"\",\r\n      ])\r\n    } else {\r\n      finalReport.push([\r\n        date,\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"\",\r\n      ])\r\n    }\r\n  }\r\n\r\n  finalReport.push([\r\n    \"\",\r\n    thousandsSeparators(grandTotals.regular.toFixed(2)),\r\n    thousandsSeparators(grandTotals.spwd.toFixed(2)),\r\n    thousandsSeparators(grandTotals.zap.toFixed(2)),\r\n    thousandsSeparators(grandTotals.zap.toFixed(2)),\r\n    thousandsSeparators(grandTotals.zap.toFixed(2)),\r\n    thousandsSeparators(grandTotals.zap.toFixed(2)),\r\n    thousandsSeparators(grandTotals.pm.toFixed(2)),\r\n    thousandsSeparators(grandTotals.ir.toFixed(2)),\r\n    thousandsSeparators(grandTotals.oth.toFixed(2)),\r\n    thousandsSeparators(grandTotals.amountDue.toFixed(2)),\r\n    // thousandsSeparators(grandTotals.overPayment.toFixed(2)),\r\n  ])\r\n\r\n  return finalReport\r\n}\r\n\r\nconst segragateByAccount = (data) => {\r\n  const regular = []\r\n  const spwd = []\r\n  const zap = []\r\n  const gf = []\r\n  const fp = []\r\n  const pm = []\r\n  const ir = []\r\n  const oth = []\r\n\r\n  for (const obj of data) {\r\n    const salesType = displaySalesType(obj)\r\n    const others = parseFloat(calculateDiscountScheduler(obj))\r\n\r\n    if (salesType === \"R\") {\r\n      regular.push({ ...obj, [SchedulersClass.SALES_TYPE]: salesType })\r\n    }\r\n    if (salesType === \"SPWD\") {\r\n      spwd.push({ ...obj, [SchedulersClass.SALES_TYPE]: salesType })\r\n    }\r\n    if (obj[SchedulersClass.VIA] === \"ZAP\") {\r\n      zap.push({ obj })\r\n    }\r\n    if (obj[SchedulersClass.VIA] === \"GF\") {\r\n      gf.push({ obj })\r\n    }\r\n    if (obj[SchedulersClass.VIA] === \"FP\") {\r\n      fp.push({ obj })\r\n    }\r\n    if (salesType === \"D/PM\") {\r\n      pm.push({ ...obj, oth: others })\r\n    }\r\n    if (salesType === \"D/IR\") {\r\n      ir.push({ ...obj, oth: others })\r\n    }\r\n    if (others > 0) {\r\n      oth.push({ ...obj, oth: others })\r\n    }\r\n  }\r\n\r\n  const sumOfRegular = sumArray(regular, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfSpwd = sumArray(spwd, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfZap = sumArray(zap, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfGf = sumArray(gf, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfFp = sumArray(fp, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfPm = sumArray(pm, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfIr = sumArray(ir, \"oth\")\r\n  const sumOfOth = sumArray(oth, \"oth\")\r\n\r\n  const totalAmountPaid =\r\n    sumOfRegular +\r\n    sumOfSpwd +\r\n    sumOfZap +\r\n    sumOfGf +\r\n    sumOfFp +\r\n    sumOfPm +\r\n    sumOfIr +\r\n    sumOfOth\r\n  const totalAmountDue = sumArray(data, SchedulersClass.TOTAL_DUE)\r\n  const overPayment = totalAmountPaid - totalAmountDue\r\n  const sumOfOverPayment = overPayment < 0 ? 0 : overPayment\r\n\r\n  return {\r\n    sumOfRegular,\r\n    sumOfSpwd,\r\n    sumOfZap,\r\n    sumOfGf,\r\n    sumOfFp,\r\n    sumOfPm,\r\n    sumOfIr,\r\n    sumOfOth,\r\n    totalAmountDue,\r\n    sumOfOverPayment,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generateReportB.js",["1523","1524","1525","1526"],"import { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport {\r\n  calculateDiscountScheduler,\r\n  displayOrderVia,\r\n  displaySalesType,\r\n} from \"Helpers/collectionData\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nexport default function (days = [], data = [], dateFieldname) {\r\n  const dataByDate = {}\r\n  for (const obj of data) {\r\n    const dateFromD = formatDateFromDatabase(obj[dateFieldname])\r\n    const formatDate = formatDateDash(dateFromD)\r\n    if (typeof dataByDate[formatDate] === \"undefined\") {\r\n      dataByDate[formatDate] = [\r\n        {\r\n          [SchedulersClass.OTHERS]: obj[SchedulersClass.OTHERS],\r\n          [SchedulersClass.AMOUNT_PAID]: obj[SchedulersClass.AMOUNT_PAID],\r\n          [SchedulersClass.TOTAL_DUE]: obj[SchedulersClass.TOTAL_DUE],\r\n          [SchedulersClass.ACCOUNT_NUMBER]: obj[SchedulersClass.ACCOUNT_NUMBER],\r\n          [SchedulersClass.ORDER_VIA]: obj[SchedulersClass.ORDER_VIA],\r\n          [SchedulersClass.ORDER_VIA_WEBSITE]:\r\n            obj[SchedulersClass.ORDER_VIA_WEBSITE],\r\n          [SchedulersClass.ORDER_VIA_PARTNER]:\r\n            obj[SchedulersClass.ORDER_VIA_PARTNER],\r\n          [SchedulersClass.VIA]: obj[SchedulersClass.VIA],\r\n        },\r\n      ]\r\n    } else {\r\n      dataByDate[formatDate].push({\r\n        [SchedulersClass.OTHERS]: obj[SchedulersClass.OTHERS],\r\n        [SchedulersClass.AMOUNT_PAID]: obj[SchedulersClass.AMOUNT_PAID],\r\n        [SchedulersClass.TOTAL_DUE]: obj[SchedulersClass.TOTAL_DUE],\r\n        [SchedulersClass.ACCOUNT_NUMBER]: obj[SchedulersClass.ACCOUNT_NUMBER],\r\n        [SchedulersClass.ORDER_VIA]: obj[SchedulersClass.ORDER_VIA],\r\n        [SchedulersClass.ORDER_VIA_PARTNER]:\r\n          obj[SchedulersClass.ORDER_VIA_PARTNER],\r\n        [SchedulersClass.ORDER_VIA_WEBSITE]:\r\n          obj[SchedulersClass.ORDER_VIA_WEBSITE],\r\n        [SchedulersClass.VIA]: obj[SchedulersClass.VIA],\r\n      })\r\n    }\r\n  }\r\n\r\n  const finalReport = []\r\n  let grandTotals = {\r\n    cash: 0,\r\n    bdo: 0,\r\n    bdo609: 0,\r\n    gcash: 0,\r\n    zap: 0,\r\n    fp: 0,\r\n    collectibles: 0,\r\n    ir: 0,\r\n    amountDue: 0,\r\n  }\r\n  for (const date of days) {\r\n    if (typeof dataByDate[date] !== \"undefined\") {\r\n      const {\r\n        sumOfBdo,\r\n        sumOfBdo609,\r\n        sumOfCash,\r\n        sumOfGCash,\r\n        sumOfZap,\r\n        sumOfCollectibles,\r\n        sumOfFP,\r\n        sumOfIr,\r\n        totalAmountDue,\r\n      } = segragateByAccount(dataByDate[date], date)\r\n      grandTotals.cash = grandTotals.cash + sumOfCash\r\n      grandTotals.bdo = grandTotals.bdo + sumOfBdo\r\n      grandTotals.bdo609 = grandTotals.bdo609 + sumOfBdo609\r\n      grandTotals.gcash = grandTotals.gcash + sumOfGCash\r\n      grandTotals.zap = grandTotals.zap + sumOfZap\r\n      grandTotals.fp = grandTotals.fp + sumOfFP\r\n      grandTotals.collectibles = grandTotals.collectibles + sumOfCollectibles\r\n      grandTotals.ir = grandTotals.ir + sumOfIr\r\n      grandTotals.amountDue = grandTotals.amountDue + totalAmountDue\r\n\r\n      finalReport.push([\r\n        date,\r\n        thousandsSeparators(sumOfCash.toFixed(2)),\r\n        thousandsSeparators(sumOfBdo.toFixed(2)),\r\n        thousandsSeparators(sumOfBdo609.toFixed(2)),\r\n        thousandsSeparators(sumOfGCash.toFixed(2)),\r\n        thousandsSeparators((0).toFixed(2)), // CC to be clarified\r\n        thousandsSeparators(sumOfZap.toFixed(2)),\r\n        thousandsSeparators((0).toFixed(2)), // FF to be clarified\r\n        thousandsSeparators(sumOfFP.toFixed(2)),\r\n        thousandsSeparators(sumOfCollectibles.toFixed(2)),\r\n        thousandsSeparators(sumOfIr.toFixed(2)),\r\n        thousandsSeparators(totalAmountDue.toFixed(2)),\r\n      ])\r\n    } else {\r\n      finalReport.push([\r\n        date,\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"0.00\",\r\n        \"\",\r\n      ])\r\n    }\r\n  }\r\n\r\n  finalReport.push([\r\n    \"\",\r\n    thousandsSeparators(grandTotals.cash.toFixed(2)),\r\n    thousandsSeparators(grandTotals.bdo.toFixed(2)),\r\n    thousandsSeparators(grandTotals.bdo609.toFixed(2)),\r\n    thousandsSeparators(grandTotals.gcash.toFixed(2)),\r\n    thousandsSeparators((0).toFixed(2)), // CC to be clarified\r\n    thousandsSeparators(grandTotals.zap.toFixed(2)),\r\n    thousandsSeparators((0).toFixed(2)), // FF to be clarifieds\r\n    thousandsSeparators(grandTotals.fp.toFixed(2)),\r\n    thousandsSeparators(grandTotals.collectibles.toFixed(2)),\r\n    thousandsSeparators(grandTotals.ir.toFixed(2)),\r\n    thousandsSeparators(grandTotals.amountDue.toFixed(2)),\r\n  ])\r\n\r\n  return finalReport\r\n}\r\n\r\nconst segragateByAccount = (data) => {\r\n  const cash = []\r\n  const bdo = []\r\n  const bdo609 = []\r\n  const gcash = []\r\n  const cc = []\r\n  const zap = []\r\n  const ff = []\r\n  const fp = []\r\n  const ir = []\r\n\r\n  for (const obj of data) {\r\n    const salesType = displaySalesType(obj)\r\n    const others = parseFloat(calculateDiscountScheduler(obj))\r\n\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"Cash\") {\r\n      cash.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"BDO / 981\") {\r\n      bdo.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"BDO / 609\") {\r\n      bdo609.push(obj)\r\n    }\r\n    if (obj[SchedulersClass.ACCOUNT_NUMBER] === \"KP GCash\") {\r\n      gcash.push(obj)\r\n    }\r\n\r\n    // CC to be clarified -------------------------------\r\n    if (obj[SchedulersClass.VIA] === \"ZAP\") {\r\n      zap.push(obj)\r\n    }\r\n\r\n    // FF to be clarified -------------------------------\r\n    if (obj[SchedulersClass.VIA] === \"FP\") {\r\n      fp.push(obj)\r\n    }\r\n    if (salesType === \"D/IR\") {\r\n      ir.push({ ...obj, oth: others })\r\n    }\r\n  }\r\n\r\n  const sumOfCash = sumArray(cash, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfBdo = sumArray(bdo, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfBdo609 = sumArray(bdo609, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfGCash = sumArray(gcash, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfZap = sumArray(zap, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfFP = sumArray(fp, SchedulersClass.AMOUNT_PAID)\r\n  const sumOfIr = sumArray(ir, \"oth\")\r\n\r\n  const totalAmountPaid =\r\n    sumOfBdo +\r\n    sumOfBdo609 +\r\n    sumOfCash +\r\n    sumOfGCash +\r\n    sumOfZap +\r\n    sumOfIr +\r\n    sumOfFP\r\n  const totalAmountDue = sumArray(data, SchedulersClass.TOTAL_DUE)\r\n  const collectibles = totalAmountDue - totalAmountPaid\r\n  const sumOfCollectibles = collectibles < 0 ? 0 : collectibles\r\n\r\n  return {\r\n    sumOfBdo,\r\n    sumOfBdo609,\r\n    sumOfCash,\r\n    sumOfGCash,\r\n    sumOfZap,\r\n    sumOfFP,\r\n    sumOfIr,\r\n    totalAmountDue,\r\n    sumOfCollectibles,\r\n  }\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generatePercentage.js",["1527","1528","1529","1530"],"import {\r\n  displayOrderVia,\r\n  getProductPurchases,\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n} from \"Helpers/collectionData\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport sorting from \"Helpers/sorting\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nexport default async function (data = [], dataWithOrderAndPartials) {\r\n  const products = await ProductsClass.getData()\r\n  const productsWithHeaders = producedProductListWithGroupAndAmounts(products)\r\n  const finalReportA = reportA(data, products, productsWithHeaders)\r\n  const finalReportB = reportB(data)\r\n  const finalReportC = reportC(dataWithOrderAndPartials)\r\n  const finalReportList = [...finalReportA, ...finalReportB, ...finalReportC]\r\n  // finalReport.push([\"C) DIRECT MODE OF PAYMENT\"])\r\n  // finalReport.push([\"MOP\", \"AMOUNT\", \"PERCENTAGE\"])\r\n  // for (const productCode in productCodeTotalQty) {\r\n  // const productCodeQty = productCodeTotalQty[productCode]\r\n  // const percentage = (productCodeQty / totalSumOfProductPurchases) * 100\r\n  // finalReport.push([productCode, productCodeQty, `${percentage.toFixed(2)}%`])\r\n  // }\r\n\r\n  return finalReportList\r\n}\r\n\r\nconst reportA = (data, products, productsWithHeaders = []) => {\r\n  const finalReport = []\r\n  const productCodeList = producedProductListOfAllCodes(products)\r\n  const productCodeTotalQty = {}\r\n  for (const obj of data) {\r\n    const productPurchases = getProductPurchases(obj, productCodeList) // the response of this function will be an object {} composed of productCodes with qty\r\n    for (const productCode in productPurchases) {\r\n      if (typeof productCodeTotalQty[productCode] === \"undefined\") {\r\n        productCodeTotalQty[productCode] = productPurchases[productCode]\r\n      } else {\r\n        productCodeTotalQty[productCode] =\r\n          productPurchases[productCode] + productCodeTotalQty[productCode]\r\n      }\r\n    }\r\n  }\r\n\r\n  let totalSumOfProductPurchases = 0\r\n  for (const productCode in productCodeTotalQty) {\r\n    if (productCodeTotalQty.hasOwnProperty(productCode)) {\r\n      totalSumOfProductPurchases += parseFloat(productCodeTotalQty[productCode])\r\n    }\r\n  }\r\n\r\n  // produce products by GroupHeader\r\n  const listWithProductHeaders = []\r\n  for (const productCode in productCodeTotalQty) {\r\n    const productCodeQty = productCodeTotalQty[productCode]\r\n    const percentage = (productCodeQty / totalSumOfProductPurchases) * 100\r\n    const productDetails = productsWithHeaders.find(\r\n      (product) => product.code === productCode\r\n    )\r\n    if (productDetails.no && productDetails.groupHeader) {\r\n      const listWithProductHeadersIndex = listWithProductHeaders.findIndex(\r\n        (product) => product.groupHeader === productDetails.groupHeader\r\n      )\r\n      if (listWithProductHeadersIndex >= 0) {\r\n        const groupDetails = {\r\n          ...listWithProductHeaders[listWithProductHeadersIndex],\r\n        }\r\n        const productListWithPercentageCopy = [\r\n          ...listWithProductHeaders[listWithProductHeadersIndex]\r\n            .productListWithPercentage,\r\n        ]\r\n        //produced List or add another value to the groupHeader\r\n        productListWithPercentageCopy.push([\r\n          productCode,\r\n          productCodeQty,\r\n          `${percentage.toFixed(2)}%`,\r\n        ])\r\n        listWithProductHeaders[listWithProductHeadersIndex] = {\r\n          ...groupDetails,\r\n          productListWithPercentage: productListWithPercentageCopy,\r\n        }\r\n      } else {\r\n        //initialize first array value according to groupHeader\r\n        listWithProductHeaders.push({\r\n          no: productDetails.no,\r\n          groupHeader: productDetails.groupHeader,\r\n          productListWithPercentage: [\r\n            [productCode, productCodeQty, `${percentage.toFixed(2)}%`],\r\n          ],\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // excel formatting of rows and columns starts here\r\n  finalReport.push([\"A) MONTHLY REPORT (ON PRODUCT TYPE)\"])\r\n  finalReport.push([\"PRODUCT TYPE\", \"QTY\", \"PERCENTAGE\"])\r\n  const sortedListWithProductHeaders = sorting(listWithProductHeaders, \"no\")\r\n  for (const groupOfProduct of sortedListWithProductHeaders) {\r\n    finalReport.push([\"\", groupOfProduct.groupHeader, \"\"])\r\n    for (const productByPercentage of groupOfProduct.productListWithPercentage) {\r\n      finalReport.push(productByPercentage)\r\n    }\r\n  }\r\n  console.log(\"finalReport\", finalReport)\r\n  finalReport.push([\"\", totalSumOfProductPurchases, \"100%\"])\r\n  finalReport.push([])\r\n  return finalReport\r\n}\r\n\r\nconst reportB = (data) => {\r\n  const finalReport = []\r\n  const orderViaTotalAmounts = {}\r\n  for (const scheduleOrder of data) {\r\n    const orderVia = displayOrderVia(scheduleOrder)\r\n    if (\r\n      orderVia !== \"\" &&\r\n      typeof scheduleOrder[SchedulersClass.TOTAL_DUE] !== \"undefined\" &&\r\n      scheduleOrder[SchedulersClass.STATUS] !== \"CANCELLED\"\r\n    ) {\r\n      if (typeof orderViaTotalAmounts[orderVia] === \"undefined\") {\r\n        if (scheduleOrder[SchedulersClass.TOTAL_DUE] > 0) {\r\n          orderViaTotalAmounts[orderVia] =\r\n            scheduleOrder[SchedulersClass.TOTAL_DUE]\r\n        }\r\n      } else {\r\n        orderViaTotalAmounts[orderVia] =\r\n          scheduleOrder[SchedulersClass.TOTAL_DUE] +\r\n          orderViaTotalAmounts[orderVia]\r\n      }\r\n    }\r\n  }\r\n\r\n  let totalSumViaOrderVia = 0\r\n  for (const orderViaCode in orderViaTotalAmounts) {\r\n    if (orderViaTotalAmounts.hasOwnProperty(orderViaCode)) {\r\n      totalSumViaOrderVia += parseFloat(orderViaTotalAmounts[orderViaCode])\r\n    }\r\n  }\r\n\r\n  finalReport.push([\"B) MONTHLY REPORT (ON CUSTOMER CHANNEL)\"])\r\n  finalReport.push([\"PRODUCT TYPE\", \"AMOUNT\", \"PERCENTAGE\"])\r\n  for (const orderViaCode in orderViaTotalAmounts) {\r\n    const orderViaCodeQty = orderViaTotalAmounts[orderViaCode]\r\n    const percentage = (orderViaCodeQty / totalSumViaOrderVia) * 100\r\n    finalReport.push([\r\n      orderViaCode,\r\n      thousandsSeparators(orderViaCodeQty.toFixed(2)),\r\n      `${percentage.toFixed(2)}%`,\r\n    ])\r\n  }\r\n  finalReport.push([\r\n    \"\",\r\n    thousandsSeparators(totalSumViaOrderVia.toFixed(2)),\r\n    \"100%\",\r\n  ])\r\n  finalReport.push([])\r\n  return finalReport\r\n}\r\n\r\nconst reportC = (data) => {\r\n  const finalReport = []\r\n  const accountNoTotalAmountsList = {}\r\n  for (const scheduleOrder of data) {\r\n    const orderVia = scheduleOrder[SchedulersClass.ORDER_VIA]\r\n    const status = scheduleOrder[SchedulersClass.STATUS]\r\n    const accountNumber = scheduleOrder[SchedulersClass.ACCOUNT_NUMBER]\r\n    const amountPaid = scheduleOrder[SchedulersClass.AMOUNT_PAID]\r\n    if (orderVia && accountNumber && status !== \"CANCELLED\") {\r\n      if (typeof accountNoTotalAmountsList[accountNumber] === \"undefined\") {\r\n        if (scheduleOrder[SchedulersClass.TOTAL_DUE] > 0) {\r\n          accountNoTotalAmountsList[accountNumber] = amountPaid\r\n        }\r\n      } else {\r\n        accountNoTotalAmountsList[accountNumber] =\r\n          amountPaid + accountNoTotalAmountsList[accountNumber]\r\n      }\r\n    }\r\n  }\r\n  let totalSumOfAccountNo = 0\r\n  for (const accountNo in accountNoTotalAmountsList) {\r\n    if (accountNoTotalAmountsList.hasOwnProperty(accountNo)) {\r\n      totalSumOfAccountNo += parseFloat(accountNoTotalAmountsList[accountNo])\r\n    }\r\n  }\r\n\r\n  finalReport.push([\"C) DIRECT ORDER BY ACCOUNT NUMBER\"])\r\n  finalReport.push([\"ACCT #\", \"AMOUNT\", \"PERCENTAGE\"])\r\n  for (const accountNo in accountNoTotalAmountsList) {\r\n    const accountNoAmount = accountNoTotalAmountsList[accountNo]\r\n    const percentage = (accountNoAmount / totalSumOfAccountNo) * 100\r\n    finalReport.push([\r\n      accountNo,\r\n      thousandsSeparators(accountNoAmount.toFixed(2)),\r\n      `${percentage.toFixed(2)}%`,\r\n    ])\r\n  }\r\n  finalReport.push([\r\n    \"\",\r\n    thousandsSeparators(totalSumOfAccountNo.toFixed(2)),\r\n    \"100%\",\r\n  ])\r\n  finalReport.push([])\r\n  return finalReport\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Helpers\\dateAging.js",["1531","1532","1533","1534","1535","1536"],"import SchedulersClass from \"Services/Classes/SchedulesClass\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"./dateFormat\"\r\n\r\nconst isWeekDay = (year, month, _day) => {\r\n  const day = new Date(year, month, _day).getDay()\r\n  return day != 0 && day != 6\r\n}\r\n\r\nexport const deductDateByNumber = (date, numberToBeDeducted) => {\r\n  const d = new Date(date)\r\n  d.setDate(d.getDate() - numberToBeDeducted)\r\n  return d\r\n}\r\n\r\nexport const getAgingDateStartFrom = (\r\n  agingLength = 30,\r\n  currentDate = new Date()\r\n) => {\r\n  let aging = 0\r\n  // let agingLengthCountIfWeekendDetected = agingLength (used this together with isWeekDay() if you don't want to include weekend on your count of aging)\r\n\r\n  let dateFrom = new Date()\r\n  while (aging < agingLength /*agingLengthCountIfWeekendDetected*/) {\r\n    const dateToBeValidated = deductDateByNumber(currentDate, aging)\r\n    const dateDay = dateToBeValidated.getDate()\r\n    const dateMonth = dateToBeValidated.getMonth()\r\n    const dateYear = dateToBeValidated.getFullYear()\r\n    dateFrom = new Date(dateYear, dateMonth, dateDay)\r\n    aging++\r\n  }\r\n  return dateFrom\r\n}\r\n","D:\\Projects\\Scheduler App\\scheduler\\src\\Components\\Features\\AnalyticsMonthlySales\\generateReportCollectibles.js",["1537","1538","1539","1540","1541","1542","1543","1544","1545"],"import {\r\n  calculateBalanceScheduler,\r\n  displayOrderVia,\r\n  getProductPurchases,\r\n  producedProductListOfAllCodes,\r\n  producedProductListWithGroupAndAmounts,\r\n} from \"Helpers/collectionData\"\r\nimport { deductDateByNumber, getAgingDateStartFrom } from \"Helpers/dateAging\"\r\nimport { formatDateDash, formatDateFromDatabase } from \"Helpers/dateFormat\"\r\nimport thousandsSeparators from \"Helpers/formatNumber\"\r\nimport sorting from \"Helpers/sorting\"\r\nimport sumArray from \"Helpers/sumArray\"\r\nimport ProductsClass from \"Services/Classes/ProductsClass\"\r\nimport SchedulersClass from \"Services/Classes/SchedulesClass\"\r\n\r\nexport default async function (branch, dates = [new Date(), new Date()]) {\r\n  const dateFromBaseInAging = getAgingDateStartFrom(120)\r\n  const schedules = await SchedulersClass.getDataByDate(\r\n    [dates[0]._d, dates[1]._d],\r\n    SchedulersClass.DATE_START,\r\n    branch\r\n  )\r\n\r\n  const dateFromForThirtyGroup = getAgingDateStartFrom(30, dates[1]._d)\r\n  const dateFromForSixtyGroup = getAgingDateStartFrom(60, dates[1]._d)\r\n  const dateFromForNinetyGroup = getAgingDateStartFrom(90, dates[1]._d)\r\n  const agingThirthy = getAgingData(schedules, dates[1]._d)\r\n  const agingSixty = getAgingData(\r\n    schedules,\r\n    deductDateByNumber(dateFromForThirtyGroup, 1)\r\n  )\r\n  const agingNinety = getAgingData(\r\n    schedules,\r\n    deductDateByNumber(dateFromForSixtyGroup, 1)\r\n  )\r\n  const agingOneHundredTwenty = getAgingData(\r\n    schedules,\r\n    deductDateByNumber(dateFromForNinetyGroup, 1)\r\n  )\r\n\r\n  const mergeAgingGroup = producedMergeAgingGroup(\r\n    agingThirthy,\r\n    agingSixty,\r\n    agingNinety,\r\n    agingOneHundredTwenty\r\n  )\r\n  const finalReportList = [\r\n    [\"0-30 days\"],\r\n    [\"31-60 days\"],\r\n    [\"61-90 days\"],\r\n    [\"91-120 days\"],\r\n    [],\r\n    [\"CUSTOMER NAME\", \"UTAK #\", \"0-30\", \"31-60\", \"61-90\", \"91-120\"],\r\n  ]\r\n\r\n  let total30 = 0\r\n  let total60 = 0\r\n  let total90 = 0\r\n  let total120 = 0\r\n  for (const customer in mergeAgingGroup) {\r\n    const { thirty, sixty, ninety, oneHundredTwenty, utakNo } = {\r\n      ...mergeAgingGroup[customer],\r\n    }\r\n    finalReportList.push([\r\n      customer,\r\n      utakNo,\r\n      thousandsSeparators(thirty.toFixed(2)),\r\n      thousandsSeparators(sixty.toFixed(2)),\r\n      thousandsSeparators(ninety.toFixed(2)),\r\n      thousandsSeparators(oneHundredTwenty.toFixed(2)),\r\n    ])\r\n    // this is for grandtotals excel export\r\n    total30 = total30 + thirty\r\n    total60 = total60 + sixty\r\n    total90 = total90 + ninety\r\n    total120 = total120 + oneHundredTwenty\r\n  }\r\n  finalReportList.push([\r\n    \"\",\r\n    \"\",\r\n    thousandsSeparators(total30.toFixed(2)),\r\n    thousandsSeparators(total60.toFixed(2)),\r\n    thousandsSeparators(total90.toFixed(2)),\r\n    thousandsSeparators(total120.toFixed(2)),\r\n  ])\r\n  return finalReportList\r\n}\r\n\r\nexport const getAgingData = (schedules = [], date, agingLength = 30) => {\r\n  let aging = 0\r\n  // let agingLengthCountIfWeekendDetected = agingLength (used this together with isWeekDay() if you don't want to include weekend on your count of aging)\r\n  const customers = {}\r\n  while (aging < agingLength /*agingLengthCountIfWeekendDetected*/) {\r\n    const dateToBeValidated = deductDateByNumber(date, aging)\r\n    const agingFormattedDate = formatDateDash(dateToBeValidated)\r\n\r\n    const dataListDetails = schedules.filter((schedule) => {\r\n      const formattedStartDateFromDatabase = formatDateFromDatabase(\r\n        schedule[SchedulersClass.DATE_START]\r\n      )\r\n      const formattedDateString = formatDateDash(formattedStartDateFromDatabase)\r\n      return formattedDateString === agingFormattedDate\r\n    })\r\n\r\n    if (dataListDetails.length > 0) {\r\n      for (const obj of dataListDetails) {\r\n        let balanceDue = calculateBalanceScheduler(obj)\r\n        if (\r\n          obj[SchedulersClass.STATUS] !== \"CANCELLED\" &&\r\n          obj[SchedulersClass.CUSTOMER] !== \"\" &&\r\n          balanceDue > 0\r\n        ) {\r\n          if (typeof customers[obj[SchedulersClass.CUSTOMER]] === \"undefined\") {\r\n            customers[obj[SchedulersClass.CUSTOMER]] = {\r\n              [SchedulersClass.UTAK_NO]: obj[SchedulersClass.UTAK_NO],\r\n              [SchedulersClass.BALANCE_DUE]: balanceDue,\r\n            }\r\n          } else {\r\n            const currentCustomerDetails = {\r\n              ...customers[obj[SchedulersClass.CUSTOMER]],\r\n            }\r\n            customers[obj[SchedulersClass.CUSTOMER]] = {\r\n              [SchedulersClass.UTAK_NO]: `${\r\n                currentCustomerDetails[SchedulersClass.UTAK_NO]\r\n              }, ${obj[SchedulersClass.UTAK_NO]}`,\r\n              [SchedulersClass.BALANCE_DUE]:\r\n                currentCustomerDetails[SchedulersClass.BALANCE_DUE] +\r\n                balanceDue,\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    aging++\r\n  }\r\n  return customers\r\n}\r\n\r\nconst producedMergeAgingGroup = (aging1, aging2, aging3, aging4) => {\r\n  const customerGroup = {}\r\n\r\n  for (const customer in aging1) {\r\n    const customerData = { ...aging1[customer] }\r\n    customerGroup[customer] = {\r\n      [SchedulersClass.UTAK_NO]: customerData[SchedulersClass.UTAK_NO],\r\n      thirty: customerData[SchedulersClass.BALANCE_DUE],\r\n      sixty: 0,\r\n      ninety: 0,\r\n      oneHundredTwenty: 0,\r\n    }\r\n  }\r\n\r\n  for (const customer in aging2) {\r\n    const customerData = { ...aging2[customer] }\r\n    if (typeof customerGroup[customer] === \"undefined\") {\r\n      customerGroup[customer] = {\r\n        [SchedulersClass.UTAK_NO]: customerData[SchedulersClass.UTAK_NO],\r\n        thirty: 0,\r\n        sixty: customerData[SchedulersClass.BALANCE_DUE],\r\n        ninety: 0,\r\n        oneHundredTwenty: 0,\r\n      }\r\n    } else {\r\n      const customerGroupCustomer = { ...customerGroup[customer] }\r\n      customerGroup[customer] = {\r\n        ...customerGroupCustomer,\r\n        [SchedulersClass.UTAK_NO]: `${\r\n          customerGroupCustomer[SchedulersClass.UTAK_NO]\r\n        }, ${customerData[SchedulersClass.UTAK_NO]}`,\r\n        sixty: customerData[SchedulersClass.BALANCE_DUE],\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const customer in aging3) {\r\n    const customerData = { ...aging3[customer] }\r\n    if (typeof customerGroup[customer] === \"undefined\") {\r\n      customerGroup[customer] = {\r\n        [SchedulersClass.UTAK_NO]: customerData[SchedulersClass.UTAK_NO],\r\n        thirty: 0,\r\n        sixty: 0,\r\n        ninety: customerData[SchedulersClass.BALANCE_DUE],\r\n        oneHundredTwenty: 0,\r\n      }\r\n    } else {\r\n      const customerGroupCustomer = { ...customerGroup[customer] }\r\n      customerGroup[customer] = {\r\n        ...customerGroupCustomer,\r\n        [SchedulersClass.UTAK_NO]: `${\r\n          customerGroupCustomer[SchedulersClass.UTAK_NO]\r\n        }, ${customerData[SchedulersClass.UTAK_NO]}`,\r\n        ninety: customerData[SchedulersClass.BALANCE_DUE],\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const customer in aging4) {\r\n    const customerData = { ...aging4[customer] }\r\n    if (typeof customerGroup[customer] === \"undefined\") {\r\n      customerGroup[customer] = {\r\n        [SchedulersClass.UTAK_NO]: customerData[SchedulersClass.UTAK_NO],\r\n        thirty: 0,\r\n        sixty: 0,\r\n        ninety: 0,\r\n        oneHundredTwenty: customerData[SchedulersClass.BALANCE_DUE],\r\n      }\r\n    } else {\r\n      const customerGroupCustomer = { ...customerGroup[customer] }\r\n      customerGroup[customer] = {\r\n        ...customerGroupCustomer,\r\n        [SchedulersClass.UTAK_NO]: `${\r\n          customerGroupCustomer[SchedulersClass.UTAK_NO]\r\n        }, ${customerData[SchedulersClass.UTAK_NO]}`,\r\n        oneHundredTwenty: customerData[SchedulersClass.BALANCE_DUE],\r\n      }\r\n    }\r\n  }\r\n\r\n  return customerGroup\r\n}\r\n",{"ruleId":"1546","replacedBy":"1547"},{"ruleId":"1548","replacedBy":"1549"},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":29,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":38},{"ruleId":"1550","severity":1,"message":"1554","line":4,"column":35,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":41},{"ruleId":"1555","severity":1,"message":"1556","line":12,"column":1,"nodeType":"1557","endLine":20,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1558","line":65,"column":7,"nodeType":"1552","messageId":"1553","endLine":65,"endColumn":16},{"ruleId":"1546","replacedBy":"1559"},{"ruleId":"1548","replacedBy":"1560"},{"ruleId":"1550","severity":1,"message":"1561","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1562","line":1,"column":34,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":39},{"ruleId":"1550","severity":1,"message":"1563","line":1,"column":41,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":44},{"ruleId":"1550","severity":1,"message":"1564","line":14,"column":3,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":25},{"ruleId":"1550","severity":1,"message":"1565","line":18,"column":20,"nodeType":"1552","messageId":"1553","endLine":18,"endColumn":33},{"ruleId":"1550","severity":1,"message":"1566","line":18,"column":35,"nodeType":"1552","messageId":"1553","endLine":18,"endColumn":45},{"ruleId":"1550","severity":1,"message":"1567","line":29,"column":8,"nodeType":"1552","messageId":"1553","endLine":29,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1568","line":21,"column":3,"nodeType":"1552","messageId":"1553","endLine":21,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1569","line":23,"column":3,"nodeType":"1552","messageId":"1553","endLine":23,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1570","line":24,"column":3,"nodeType":"1552","messageId":"1553","endLine":24,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1571","line":1,"column":15,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":20},{"ruleId":"1572","severity":1,"message":"1573","line":38,"column":23,"nodeType":"1574","endLine":38,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1575","line":3,"column":10,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1576","line":5,"column":10,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1577","line":5,"column":34,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":49},{"ruleId":"1550","severity":1,"message":"1571","line":1,"column":15,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":20},{"ruleId":"1572","severity":1,"message":"1573","line":44,"column":23,"nodeType":"1574","endLine":44,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1551","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1578","line":11,"column":10,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1579","line":11,"column":21,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":33},{"ruleId":"1550","severity":1,"message":"1580","line":81,"column":11,"nodeType":"1552","messageId":"1553","endLine":81,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":26},{"ruleId":"1581","severity":1,"message":"1582","line":60,"column":6,"nodeType":"1583","endLine":60,"endColumn":54,"suggestions":"1584"},{"ruleId":"1550","severity":1,"message":"1585","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1586","line":1,"column":18,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1587","line":1,"column":30,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1588","line":10,"column":3,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1589","line":11,"column":3,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1590","line":13,"column":3,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1591","line":23,"column":3,"nodeType":"1552","messageId":"1553","endLine":23,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1592","line":30,"column":7,"nodeType":"1552","messageId":"1553","endLine":30,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1591","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":24},{"ruleId":"1581","severity":1,"message":"1593","line":8,"column":6,"nodeType":"1583","endLine":8,"endColumn":8,"suggestions":"1594"},{"ruleId":"1550","severity":1,"message":"1571","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1586","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":27},{"ruleId":"1550","severity":1,"message":"1585","line":1,"column":29,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1595","line":1,"column":44,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":52},{"ruleId":"1550","severity":1,"message":"1596","line":1,"column":54,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":60},{"ruleId":"1550","severity":1,"message":"1551","line":3,"column":17,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1597","line":3,"column":28,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":36},{"ruleId":"1550","severity":1,"message":"1598","line":4,"column":8,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":31},{"ruleId":"1550","severity":1,"message":"1599","line":5,"column":10,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1600","line":5,"column":26,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":43},{"ruleId":"1550","severity":1,"message":"1601","line":6,"column":8,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1602","line":7,"column":8,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1603","line":16,"column":3,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1604","line":18,"column":3,"nodeType":"1552","messageId":"1553","endLine":18,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1605","line":22,"column":3,"nodeType":"1552","messageId":"1553","endLine":22,"endColumn":11},{"ruleId":"1550","severity":1,"message":"1606","line":35,"column":10,"nodeType":"1552","messageId":"1553","endLine":35,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1607","line":37,"column":8,"nodeType":"1552","messageId":"1553","endLine":37,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1568","line":23,"column":3,"nodeType":"1552","messageId":"1553","endLine":23,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1569","line":25,"column":3,"nodeType":"1552","messageId":"1553","endLine":25,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1570","line":26,"column":3,"nodeType":"1552","messageId":"1553","endLine":26,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1608","line":28,"column":10,"nodeType":"1552","messageId":"1553","endLine":28,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1585","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1586","line":1,"column":18,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1587","line":1,"column":30,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1588","line":9,"column":3,"nodeType":"1552","messageId":"1553","endLine":9,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1589","line":10,"column":3,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1590","line":12,"column":3,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1591","line":22,"column":3,"nodeType":"1552","messageId":"1553","endLine":22,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1592","line":28,"column":7,"nodeType":"1552","messageId":"1553","endLine":28,"endColumn":18},{"ruleId":"1609","severity":2,"message":"1610","line":33,"column":5,"nodeType":"1574","endLine":79,"endColumn":7},{"ruleId":"1609","severity":2,"message":"1610","line":35,"column":9,"nodeType":"1574","endLine":35,"endColumn":14},{"ruleId":"1609","severity":2,"message":"1610","line":36,"column":11,"nodeType":"1574","endLine":36,"endColumn":72},{"ruleId":"1609","severity":2,"message":"1610","line":37,"column":13,"nodeType":"1574","endLine":37,"endColumn":43},{"ruleId":"1609","severity":2,"message":"1610","line":38,"column":15,"nodeType":"1574","endLine":38,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":39,"column":15,"nodeType":"1574","endLine":39,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":40,"column":15,"nodeType":"1574","endLine":40,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":41,"column":15,"nodeType":"1574","endLine":41,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":42,"column":15,"nodeType":"1574","endLine":42,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":43,"column":15,"nodeType":"1574","endLine":43,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":44,"column":15,"nodeType":"1574","endLine":44,"endColumn":33},{"ruleId":"1609","severity":2,"message":"1610","line":45,"column":15,"nodeType":"1574","endLine":45,"endColumn":33},{"ruleId":"1609","severity":2,"message":"1610","line":49,"column":17,"nodeType":"1574","endLine":49,"endColumn":21},{"ruleId":"1609","severity":2,"message":"1610","line":50,"column":19,"nodeType":"1574","endLine":50,"endColumn":23},{"ruleId":"1609","severity":2,"message":"1610","line":51,"column":19,"nodeType":"1574","endLine":51,"endColumn":23},{"ruleId":"1609","severity":2,"message":"1610","line":52,"column":19,"nodeType":"1574","endLine":52,"endColumn":23},{"ruleId":"1609","severity":2,"message":"1610","line":53,"column":19,"nodeType":"1574","endLine":53,"endColumn":23},{"ruleId":"1609","severity":2,"message":"1610","line":54,"column":19,"nodeType":"1574","endLine":54,"endColumn":23},{"ruleId":"1609","severity":2,"message":"1610","line":55,"column":19,"nodeType":"1574","endLine":55,"endColumn":23},{"ruleId":"1609","severity":2,"message":"1610","line":56,"column":19,"nodeType":"1574","endLine":56,"endColumn":37},{"ruleId":"1609","severity":2,"message":"1610","line":57,"column":19,"nodeType":"1574","endLine":57,"endColumn":37},{"ruleId":"1609","severity":2,"message":"1610","line":61,"column":13,"nodeType":"1574","endLine":61,"endColumn":42},{"ruleId":"1609","severity":2,"message":"1610","line":62,"column":15,"nodeType":"1574","endLine":62,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":63,"column":15,"nodeType":"1574","endLine":63,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":64,"column":15,"nodeType":"1574","endLine":64,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":65,"column":15,"nodeType":"1574","endLine":65,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":66,"column":15,"nodeType":"1574","endLine":66,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":67,"column":15,"nodeType":"1574","endLine":67,"endColumn":19},{"ruleId":"1609","severity":2,"message":"1610","line":68,"column":15,"nodeType":"1574","endLine":68,"endColumn":33},{"ruleId":"1609","severity":2,"message":"1610","line":71,"column":15,"nodeType":"1574","endLine":71,"endColumn":33},{"ruleId":"1609","severity":2,"message":"1610","line":78,"column":15,"nodeType":"1574","endLine":78,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1611","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":26},{"ruleId":"1581","severity":1,"message":"1582","line":58,"column":6,"nodeType":"1583","endLine":58,"endColumn":54,"suggestions":"1612"},{"ruleId":"1609","severity":2,"message":"1610","line":240,"column":20,"nodeType":"1574","endLine":240,"endColumn":26},{"ruleId":"1609","severity":2,"message":"1610","line":276,"column":22,"nodeType":"1574","endLine":276,"endColumn":28},{"ruleId":"1609","severity":2,"message":"1610","line":278,"column":22,"nodeType":"1613","endLine":278,"endColumn":24},{"ruleId":"1609","severity":2,"message":"1610","line":298,"column":15,"nodeType":"1574","endLine":306,"endColumn":17},{"ruleId":"1609","severity":2,"message":"1610","line":308,"column":15,"nodeType":"1574","endLine":308,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1551","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1578","line":11,"column":10,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1579","line":11,"column":21,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":33},{"ruleId":"1550","severity":1,"message":"1591","line":4,"column":3,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1614","line":22,"column":17,"nodeType":"1552","messageId":"1553","endLine":22,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1614","line":47,"column":17,"nodeType":"1552","messageId":"1553","endLine":47,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1575","line":3,"column":10,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1576","line":6,"column":3,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":25},{"ruleId":"1550","severity":1,"message":"1577","line":7,"column":3,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1571","line":1,"column":15,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1615","line":3,"column":3,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1616","line":5,"column":3,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1617","line":8,"column":3,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":12},{"ruleId":"1550","severity":1,"message":"1618","line":13,"column":3,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":14},{"ruleId":"1609","severity":2,"message":"1610","line":27,"column":16,"nodeType":"1574","endLine":27,"endColumn":67},{"ruleId":"1609","severity":2,"message":"1610","line":29,"column":16,"nodeType":"1574","endLine":29,"endColumn":22},{"ruleId":"1572","severity":1,"message":"1573","line":42,"column":23,"nodeType":"1574","endLine":42,"endColumn":26},{"ruleId":"1609","severity":2,"message":"1610","line":42,"column":23,"nodeType":"1574","endLine":42,"endColumn":26},{"ruleId":"1609","severity":2,"message":"1610","line":82,"column":18,"nodeType":"1574","endLine":82,"endColumn":24},{"ruleId":"1609","severity":2,"message":"1610","line":84,"column":18,"nodeType":"1574","endLine":84,"endColumn":24},{"ruleId":"1609","severity":2,"message":"1610","line":87,"column":14,"nodeType":"1574","endLine":87,"endColumn":20},{"ruleId":"1609","severity":2,"message":"1610","line":104,"column":16,"nodeType":"1574","endLine":104,"endColumn":47},{"ruleId":"1609","severity":2,"message":"1610","line":106,"column":14,"nodeType":"1574","endLine":106,"endColumn":20},{"ruleId":"1609","severity":2,"message":"1610","line":116,"column":16,"nodeType":"1574","endLine":116,"endColumn":22},{"ruleId":"1609","severity":2,"message":"1610","line":118,"column":14,"nodeType":"1574","endLine":118,"endColumn":20},{"ruleId":"1609","severity":2,"message":"1610","line":139,"column":14,"nodeType":"1574","endLine":139,"endColumn":20},{"ruleId":"1609","severity":2,"message":"1610","line":148,"column":16,"nodeType":"1574","endLine":148,"endColumn":39},{"ruleId":"1609","severity":2,"message":"1610","line":151,"column":16,"nodeType":"1574","endLine":151,"endColumn":36},{"ruleId":"1609","severity":2,"message":"1610","line":154,"column":16,"nodeType":"1574","endLine":154,"endColumn":21},{"ruleId":"1609","severity":2,"message":"1610","line":156,"column":14,"nodeType":"1574","endLine":156,"endColumn":19},{"ruleId":"1581","severity":1,"message":"1593","line":8,"column":6,"nodeType":"1583","endLine":8,"endColumn":8,"suggestions":"1619"},{"ruleId":"1550","severity":1,"message":"1591","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1571","line":1,"column":15,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1615","line":3,"column":3,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1620","line":4,"column":3,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":11},{"ruleId":"1550","severity":1,"message":"1616","line":5,"column":3,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1617","line":8,"column":3,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":12},{"ruleId":"1550","severity":1,"message":"1618","line":13,"column":3,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":14},{"ruleId":"1609","severity":2,"message":"1610","line":34,"column":16,"nodeType":"1574","endLine":34,"endColumn":67},{"ruleId":"1609","severity":2,"message":"1610","line":36,"column":16,"nodeType":"1574","endLine":36,"endColumn":22},{"ruleId":"1572","severity":1,"message":"1573","line":49,"column":23,"nodeType":"1574","endLine":49,"endColumn":26},{"ruleId":"1609","severity":2,"message":"1610","line":49,"column":23,"nodeType":"1574","endLine":49,"endColumn":26},{"ruleId":"1609","severity":2,"message":"1610","line":115,"column":18,"nodeType":"1574","endLine":115,"endColumn":24},{"ruleId":"1609","severity":2,"message":"1610","line":117,"column":18,"nodeType":"1574","endLine":117,"endColumn":24},{"ruleId":"1609","severity":2,"message":"1610","line":120,"column":14,"nodeType":"1574","endLine":120,"endColumn":20},{"ruleId":"1609","severity":2,"message":"1610","line":137,"column":16,"nodeType":"1574","endLine":137,"endColumn":47},{"ruleId":"1609","severity":2,"message":"1610","line":139,"column":14,"nodeType":"1574","endLine":139,"endColumn":20},{"ruleId":"1609","severity":2,"message":"1610","line":149,"column":16,"nodeType":"1574","endLine":149,"endColumn":22},{"ruleId":"1609","severity":2,"message":"1610","line":151,"column":14,"nodeType":"1574","endLine":151,"endColumn":20},{"ruleId":"1609","severity":2,"message":"1610","line":172,"column":14,"nodeType":"1574","endLine":172,"endColumn":20},{"ruleId":"1609","severity":2,"message":"1610","line":218,"column":16,"nodeType":"1574","endLine":218,"endColumn":39},{"ruleId":"1609","severity":2,"message":"1610","line":221,"column":16,"nodeType":"1574","endLine":221,"endColumn":36},{"ruleId":"1609","severity":2,"message":"1610","line":224,"column":16,"nodeType":"1574","endLine":224,"endColumn":21},{"ruleId":"1609","severity":2,"message":"1610","line":226,"column":14,"nodeType":"1574","endLine":226,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1580","line":81,"column":11,"nodeType":"1552","messageId":"1553","endLine":81,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1621","line":3,"column":3,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":8},{"ruleId":"1550","severity":1,"message":"1587","line":8,"column":3,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":8},{"ruleId":"1550","severity":1,"message":"1596","line":9,"column":3,"nodeType":"1552","messageId":"1553","endLine":9,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1622","line":10,"column":3,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":7},{"ruleId":"1550","severity":1,"message":"1554","line":11,"column":3,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1623","line":12,"column":3,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":8},{"ruleId":"1550","severity":1,"message":"1624","line":19,"column":3,"nodeType":"1552","messageId":"1553","endLine":19,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1571","line":1,"column":15,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1591","line":7,"column":3,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1564","line":8,"column":3,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":25},{"ruleId":"1609","severity":2,"message":"1610","line":160,"column":22,"nodeType":"1574","endLine":160,"endColumn":28},{"ruleId":"1609","severity":2,"message":"1610","line":162,"column":22,"nodeType":"1613","endLine":162,"endColumn":24},{"ruleId":"1609","severity":2,"message":"1610","line":176,"column":20,"nodeType":"1574","endLine":176,"endColumn":26},{"ruleId":"1609","severity":2,"message":"1610","line":207,"column":24,"nodeType":"1574","endLine":207,"endColumn":29},{"ruleId":"1609","severity":2,"message":"1610","line":209,"column":22,"nodeType":"1574","endLine":209,"endColumn":27},{"ruleId":"1609","severity":2,"message":"1610","line":218,"column":22,"nodeType":"1574","endLine":218,"endColumn":27},{"ruleId":"1609","severity":2,"message":"1610","line":259,"column":17,"nodeType":"1574","endLine":259,"endColumn":54},{"ruleId":"1609","severity":2,"message":"1610","line":262,"column":22,"nodeType":"1613","endLine":262,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1571","line":1,"column":15,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1591","line":7,"column":3,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1564","line":8,"column":3,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":25},{"ruleId":"1609","severity":2,"message":"1610","line":177,"column":22,"nodeType":"1574","endLine":177,"endColumn":28},{"ruleId":"1609","severity":2,"message":"1610","line":179,"column":22,"nodeType":"1613","endLine":179,"endColumn":24},{"ruleId":"1609","severity":2,"message":"1610","line":193,"column":20,"nodeType":"1574","endLine":193,"endColumn":26},{"ruleId":"1609","severity":2,"message":"1610","line":225,"column":24,"nodeType":"1574","endLine":225,"endColumn":29},{"ruleId":"1609","severity":2,"message":"1610","line":227,"column":22,"nodeType":"1574","endLine":227,"endColumn":27},{"ruleId":"1609","severity":2,"message":"1610","line":236,"column":22,"nodeType":"1574","endLine":236,"endColumn":27},{"ruleId":"1609","severity":2,"message":"1610","line":277,"column":17,"nodeType":"1574","endLine":277,"endColumn":54},{"ruleId":"1609","severity":2,"message":"1610","line":280,"column":22,"nodeType":"1613","endLine":280,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1625","line":1,"column":8,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":25},{"ruleId":"1626","severity":1,"message":"1627","line":66,"column":9,"nodeType":"1628","messageId":"1629","endLine":66,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1630","line":10,"column":28,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":37},{"ruleId":"1631","severity":1,"message":"1632","line":24,"column":9,"nodeType":"1633","endLine":24,"endColumn":63},{"ruleId":"1550","severity":1,"message":"1634","line":3,"column":8,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1635","line":5,"column":17,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":27},{"ruleId":"1550","severity":1,"message":"1551","line":5,"column":29,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":38},{"ruleId":"1550","severity":1,"message":"1636","line":8,"column":8,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":26},{"ruleId":"1637","severity":1,"message":"1638","line":10,"column":21,"nodeType":"1639","messageId":"1629","endLine":10,"endColumn":23},{"ruleId":"1581","severity":1,"message":"1640","line":27,"column":6,"nodeType":"1583","endLine":27,"endColumn":32,"suggestions":"1641"},{"ruleId":"1581","severity":1,"message":"1642","line":27,"column":7,"nodeType":"1643","endLine":27,"endColumn":31},{"ruleId":"1550","severity":1,"message":"1551","line":4,"column":29,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":38},{"ruleId":"1550","severity":1,"message":"1597","line":4,"column":40,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":48},{"ruleId":"1644","severity":1,"message":"1645","line":28,"column":9,"nodeType":"1574","endLine":28,"endColumn":58},{"ruleId":"1644","severity":1,"message":"1645","line":53,"column":9,"nodeType":"1574","endLine":53,"endColumn":58},{"ruleId":"1550","severity":1,"message":"1646","line":69,"column":11,"nodeType":"1552","messageId":"1553","endLine":69,"endColumn":13},{"ruleId":"1550","severity":1,"message":"1647","line":12,"column":10,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":16},{"ruleId":"1581","severity":1,"message":"1648","line":20,"column":6,"nodeType":"1583","endLine":20,"endColumn":25,"suggestions":"1649"},{"ruleId":"1550","severity":1,"message":"1650","line":10,"column":3,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":12},{"ruleId":"1550","severity":1,"message":"1651","line":28,"column":8,"nodeType":"1552","messageId":"1553","endLine":28,"endColumn":31},{"ruleId":"1550","severity":1,"message":"1554","line":31,"column":10,"nodeType":"1552","messageId":"1553","endLine":31,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1652","line":31,"column":18,"nodeType":"1552","messageId":"1553","endLine":31,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1653","line":32,"column":10,"nodeType":"1552","messageId":"1553","endLine":32,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1654","line":41,"column":8,"nodeType":"1552","messageId":"1553","endLine":41,"endColumn":29},{"ruleId":"1555","severity":1,"message":"1655","line":47,"column":1,"nodeType":"1557","endLine":75,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1656","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":14},{"ruleId":"1550","severity":1,"message":"1657","line":3,"column":37,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":46},{"ruleId":"1550","severity":1,"message":"1551","line":4,"column":29,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":38},{"ruleId":"1550","severity":1,"message":"1658","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1659","line":6,"column":8,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1567","line":8,"column":8,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1571","line":9,"column":10,"nodeType":"1552","messageId":"1553","endLine":9,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1660","line":10,"column":8,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1661","line":11,"column":8,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1662","line":12,"column":8,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1663","line":16,"column":8,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1664","line":18,"column":9,"nodeType":"1552","messageId":"1553","endLine":18,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1665","line":21,"column":11,"nodeType":"1552","messageId":"1553","endLine":21,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1666","line":24,"column":10,"nodeType":"1552","messageId":"1553","endLine":24,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1667","line":24,"column":22,"nodeType":"1552","messageId":"1553","endLine":24,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1551","line":2,"column":17,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1668","line":12,"column":3,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":8},{"ruleId":"1550","severity":1,"message":"1669","line":6,"column":3,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":25},{"ruleId":"1550","severity":1,"message":"1650","line":12,"column":3,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":12},{"ruleId":"1550","severity":1,"message":"1670","line":20,"column":3,"nodeType":"1552","messageId":"1553","endLine":20,"endColumn":14},{"ruleId":"1555","severity":1,"message":"1671","line":32,"column":1,"nodeType":"1557","endLine":206,"endColumn":2},{"ruleId":"1555","severity":1,"message":"1556","line":8,"column":1,"nodeType":"1557","endLine":26,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1622","line":1,"column":42,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":46},{"ruleId":"1550","severity":1,"message":"1585","line":1,"column":54,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":60},{"ruleId":"1550","severity":1,"message":"1635","line":2,"column":38,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1672","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":27},{"ruleId":"1550","severity":1,"message":"1673","line":17,"column":10,"nodeType":"1552","messageId":"1553","endLine":17,"endColumn":31},{"ruleId":"1550","severity":1,"message":"1674","line":27,"column":10,"nodeType":"1552","messageId":"1553","endLine":27,"endColumn":18},{"ruleId":"1581","severity":1,"message":"1675","line":36,"column":6,"nodeType":"1583","endLine":36,"endColumn":19,"suggestions":"1676"},{"ruleId":"1550","severity":1,"message":"1677","line":399,"column":7,"nodeType":"1552","messageId":"1553","endLine":399,"endColumn":24},{"ruleId":"1581","severity":1,"message":"1678","line":38,"column":6,"nodeType":"1583","endLine":38,"endColumn":12,"suggestions":"1679"},{"ruleId":"1581","severity":1,"message":"1680","line":42,"column":6,"nodeType":"1583","endLine":42,"endColumn":18,"suggestions":"1681"},{"ruleId":"1550","severity":1,"message":"1682","line":183,"column":15,"nodeType":"1552","messageId":"1553","endLine":183,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1683","line":14,"column":7,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":24},{"ruleId":"1684","severity":1,"message":"1685","line":30,"column":26,"nodeType":"1574","endLine":30,"endColumn":68},{"ruleId":"1684","severity":1,"message":"1685","line":43,"column":21,"nodeType":"1574","endLine":49,"endColumn":23},{"ruleId":"1684","severity":1,"message":"1685","line":59,"column":26,"nodeType":"1574","endLine":59,"endColumn":68},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1686","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1687","line":7,"column":8,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":22},{"ruleId":"1555","severity":1,"message":"1671","line":6,"column":1,"nodeType":"1557","endLine":91,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1591","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":24},{"ruleId":"1555","severity":1,"message":"1671","line":5,"column":1,"nodeType":"1557","endLine":107,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1587","line":1,"column":30,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1554","line":1,"column":37,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":43},{"ruleId":"1550","severity":1,"message":"1565","line":20,"column":3,"nodeType":"1552","messageId":"1553","endLine":20,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1688","line":23,"column":8,"nodeType":"1552","messageId":"1553","endLine":23,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1689","line":57,"column":10,"nodeType":"1552","messageId":"1553","endLine":57,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1690","line":58,"column":10,"nodeType":"1552","messageId":"1553","endLine":58,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1691","line":59,"column":19,"nodeType":"1552","messageId":"1553","endLine":59,"endColumn":29},{"ruleId":"1581","severity":1,"message":"1593","line":62,"column":6,"nodeType":"1583","endLine":62,"endColumn":30,"suggestions":"1692"},{"ruleId":"1581","severity":1,"message":"1693","line":66,"column":6,"nodeType":"1583","endLine":66,"endColumn":16,"suggestions":"1694"},{"ruleId":"1572","severity":1,"message":"1573","line":234,"column":16,"nodeType":"1574","endLine":234,"endColumn":19},{"ruleId":"1572","severity":1,"message":"1573","line":243,"column":16,"nodeType":"1574","endLine":243,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1695","line":248,"column":9,"nodeType":"1552","messageId":"1553","endLine":248,"endColumn":23},{"ruleId":"1572","severity":1,"message":"1573","line":349,"column":30,"nodeType":"1574","endLine":349,"endColumn":33},{"ruleId":"1696","severity":1,"message":"1697","line":364,"column":34,"nodeType":"1698","messageId":"1699","endLine":364,"endColumn":36},{"ruleId":"1572","severity":1,"message":"1573","line":383,"column":30,"nodeType":"1574","endLine":383,"endColumn":33},{"ruleId":"1696","severity":1,"message":"1697","line":595,"column":37,"nodeType":"1698","messageId":"1699","endLine":595,"endColumn":39},{"ruleId":"1700","severity":1,"message":"1701","line":628,"column":1,"nodeType":"1702","messageId":"1703","endLine":729,"endColumn":2},{"ruleId":"1700","severity":1,"message":"1701","line":731,"column":1,"nodeType":"1702","messageId":"1703","endLine":748,"endColumn":2},{"ruleId":"1700","severity":1,"message":"1701","line":749,"column":1,"nodeType":"1702","messageId":"1703","endLine":783,"endColumn":2},{"ruleId":"1555","severity":1,"message":"1671","line":4,"column":1,"nodeType":"1557","endLine":15,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1704","line":5,"column":3,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1705","line":9,"column":8,"nodeType":"1552","messageId":"1553","endLine":9,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1706","line":10,"column":10,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":25},{"ruleId":"1581","severity":1,"message":"1707","line":33,"column":6,"nodeType":"1583","endLine":33,"endColumn":34,"suggestions":"1708"},{"ruleId":"1550","severity":1,"message":"1709","line":17,"column":12,"nodeType":"1552","messageId":"1553","endLine":17,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1710","line":3,"column":3,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1711","line":6,"column":14,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1576","line":8,"column":10,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1712","line":9,"column":31,"nodeType":"1552","messageId":"1553","endLine":9,"endColumn":38},{"ruleId":"1550","severity":1,"message":"1682","line":102,"column":13,"nodeType":"1552","messageId":"1553","endLine":102,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1710","line":4,"column":3,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1551","line":2,"column":17,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1597","line":2,"column":28,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":36},{"ruleId":"1550","severity":1,"message":"1713","line":1,"column":8,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":27},{"ruleId":"1555","severity":1,"message":"1671","line":3,"column":1,"nodeType":"1557","endLine":19,"endColumn":2},{"ruleId":"1696","severity":1,"message":"1714","line":49,"column":55,"nodeType":"1698","messageId":"1699","endLine":49,"endColumn":57},{"ruleId":"1550","severity":1,"message":"1710","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":30},{"ruleId":"1550","severity":1,"message":"1551","line":4,"column":29,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":38},{"ruleId":"1550","severity":1,"message":"1660","line":11,"column":8,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1715","line":25,"column":8,"nodeType":"1552","messageId":"1553","endLine":25,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1661","line":26,"column":8,"nodeType":"1552","messageId":"1553","endLine":26,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1716","line":27,"column":10,"nodeType":"1552","messageId":"1553","endLine":27,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1717","line":27,"column":21,"nodeType":"1552","messageId":"1553","endLine":27,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1718","line":28,"column":8,"nodeType":"1552","messageId":"1553","endLine":28,"endColumn":25},{"ruleId":"1550","severity":1,"message":"1719","line":29,"column":8,"nodeType":"1552","messageId":"1553","endLine":29,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1720","line":30,"column":8,"nodeType":"1552","messageId":"1553","endLine":30,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1721","line":31,"column":8,"nodeType":"1552","messageId":"1553","endLine":31,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1722","line":32,"column":8,"nodeType":"1552","messageId":"1553","endLine":32,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1723","line":151,"column":5,"nodeType":"1552","messageId":"1553","endLine":151,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1724","line":154,"column":5,"nodeType":"1552","messageId":"1553","endLine":154,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1725","line":155,"column":5,"nodeType":"1552","messageId":"1553","endLine":155,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1726","line":156,"column":5,"nodeType":"1552","messageId":"1553","endLine":156,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1727","line":157,"column":5,"nodeType":"1552","messageId":"1553","endLine":157,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1728","line":199,"column":7,"nodeType":"1552","messageId":"1553","endLine":199,"endColumn":22},{"ruleId":"1729","severity":1,"message":"1730","line":70,"column":15,"nodeType":"1731","messageId":"1732","endLine":70,"endColumn":16,"suggestions":"1733"},{"ruleId":"1729","severity":1,"message":"1730","line":70,"column":40,"nodeType":"1731","messageId":"1732","endLine":70,"endColumn":41,"suggestions":"1734"},{"ruleId":"1550","severity":1,"message":"1735","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1567","line":4,"column":8,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1736","line":7,"column":9,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1737","line":16,"column":10,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1738","line":16,"column":24,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":40},{"ruleId":"1581","severity":1,"message":"1739","line":59,"column":6,"nodeType":"1583","endLine":59,"endColumn":22,"suggestions":"1740"},{"ruleId":"1581","severity":1,"message":"1741","line":63,"column":6,"nodeType":"1583","endLine":63,"endColumn":12,"suggestions":"1742"},{"ruleId":"1581","severity":1,"message":"1593","line":78,"column":6,"nodeType":"1583","endLine":78,"endColumn":20,"suggestions":"1743"},{"ruleId":"1744","severity":1,"message":"1745","line":192,"column":5,"nodeType":"1746","messageId":"1747","endLine":240,"endColumn":6},{"ruleId":"1550","severity":1,"message":"1608","line":1,"column":28,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":34},{"ruleId":"1550","severity":1,"message":"1554","line":4,"column":17,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1661","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1748","line":13,"column":8,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1663","line":14,"column":8,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1658","line":15,"column":8,"nodeType":"1552","messageId":"1553","endLine":15,"endColumn":26},{"ruleId":"1744","severity":1,"message":"1745","line":90,"column":15,"nodeType":"1746","messageId":"1747","endLine":120,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1551","line":2,"column":17,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1749","line":3,"column":3,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1750","line":5,"column":3,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1751","line":6,"column":3,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":6},{"ruleId":"1550","severity":1,"message":"1752","line":10,"column":3,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":12},{"ruleId":"1550","severity":1,"message":"1753","line":13,"column":3,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1576","line":15,"column":10,"nodeType":"1552","messageId":"1553","endLine":15,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1591","line":15,"column":34,"nodeType":"1552","messageId":"1553","endLine":15,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1551","line":3,"column":22,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":31},{"ruleId":"1754","severity":1,"message":"1755","line":21,"column":9,"nodeType":"1756","messageId":"1757","endLine":26,"endColumn":12},{"ruleId":"1754","severity":1,"message":"1755","line":27,"column":9,"nodeType":"1756","messageId":"1757","endLine":58,"endColumn":12},{"ruleId":"1550","severity":1,"message":"1551","line":3,"column":22,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":31},{"ruleId":"1550","severity":1,"message":"1571","line":2,"column":22,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":27},{"ruleId":"1550","severity":1,"message":"1660","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1717","line":6,"column":21,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":32},{"ruleId":"1581","severity":1,"message":"1758","line":43,"column":6,"nodeType":"1583","endLine":43,"endColumn":13,"suggestions":"1759"},{"ruleId":"1550","severity":1,"message":"1608","line":1,"column":28,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":34},{"ruleId":"1550","severity":1,"message":"1554","line":4,"column":17,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1661","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1748","line":13,"column":8,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":24},{"ruleId":"1744","severity":1,"message":"1745","line":70,"column":17,"nodeType":"1746","messageId":"1747","endLine":107,"endColumn":18},{"ruleId":"1631","severity":1,"message":"1632","line":19,"column":11,"nodeType":"1633","endLine":19,"endColumn":22},{"ruleId":"1631","severity":1,"message":"1632","line":31,"column":11,"nodeType":"1633","endLine":31,"endColumn":22},{"ruleId":"1631","severity":1,"message":"1632","line":46,"column":11,"nodeType":"1633","endLine":46,"endColumn":22},{"ruleId":"1631","severity":1,"message":"1632","line":61,"column":11,"nodeType":"1633","endLine":61,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1717","line":28,"column":21,"nodeType":"1552","messageId":"1553","endLine":28,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1760","line":50,"column":10,"nodeType":"1552","messageId":"1553","endLine":50,"endColumn":29},{"ruleId":"1550","severity":1,"message":"1761","line":52,"column":3,"nodeType":"1552","messageId":"1553","endLine":52,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1762","line":53,"column":3,"nodeType":"1552","messageId":"1553","endLine":53,"endColumn":19},{"ruleId":"1581","severity":1,"message":"1763","line":211,"column":6,"nodeType":"1583","endLine":211,"endColumn":17,"suggestions":"1764"},{"ruleId":"1581","severity":1,"message":"1763","line":215,"column":6,"nodeType":"1583","endLine":215,"endColumn":20,"suggestions":"1765"},{"ruleId":"1581","severity":1,"message":"1766","line":219,"column":6,"nodeType":"1583","endLine":219,"endColumn":22,"suggestions":"1767"},{"ruleId":"1581","severity":1,"message":"1768","line":225,"column":6,"nodeType":"1583","endLine":225,"endColumn":35,"suggestions":"1769"},{"ruleId":"1550","severity":1,"message":"1770","line":248,"column":23,"nodeType":"1552","messageId":"1553","endLine":248,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1771","line":263,"column":20,"nodeType":"1552","messageId":"1553","endLine":263,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1772","line":271,"column":23,"nodeType":"1552","messageId":"1553","endLine":271,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1773","line":279,"column":21,"nodeType":"1552","messageId":"1553","endLine":279,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1774","line":286,"column":21,"nodeType":"1552","messageId":"1553","endLine":286,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1775","line":293,"column":21,"nodeType":"1552","messageId":"1553","endLine":293,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1776","line":301,"column":12,"nodeType":"1552","messageId":"1553","endLine":301,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1777","line":339,"column":12,"nodeType":"1552","messageId":"1553","endLine":339,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1778","line":347,"column":12,"nodeType":"1552","messageId":"1553","endLine":347,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1779","line":381,"column":13,"nodeType":"1552","messageId":"1553","endLine":381,"endColumn":25},{"ruleId":"1780","severity":1,"message":"1781","line":568,"column":26,"nodeType":"1583","messageId":"1782","endLine":568,"endColumn":71},{"ruleId":"1550","severity":1,"message":"1728","line":701,"column":7,"nodeType":"1552","messageId":"1553","endLine":701,"endColumn":22},{"ruleId":"1744","severity":1,"message":"1745","line":18,"column":3,"nodeType":"1746","messageId":"1747","endLine":21,"endColumn":4},{"ruleId":"1581","severity":1,"message":"1783","line":15,"column":6,"nodeType":"1583","endLine":15,"endColumn":23,"suggestions":"1784"},{"ruleId":"1581","severity":1,"message":"1693","line":19,"column":6,"nodeType":"1583","endLine":19,"endColumn":20,"suggestions":"1785"},{"ruleId":"1581","severity":1,"message":"1786","line":12,"column":6,"nodeType":"1583","endLine":12,"endColumn":27,"suggestions":"1787"},{"ruleId":"1581","severity":1,"message":"1783","line":18,"column":6,"nodeType":"1583","endLine":18,"endColumn":24,"suggestions":"1788"},{"ruleId":"1581","severity":1,"message":"1786","line":12,"column":6,"nodeType":"1583","endLine":12,"endColumn":28,"suggestions":"1789"},{"ruleId":"1581","severity":1,"message":"1783","line":18,"column":6,"nodeType":"1583","endLine":18,"endColumn":24,"suggestions":"1790"},{"ruleId":"1550","severity":1,"message":"1710","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":30},{"ruleId":"1550","severity":1,"message":"1717","line":1,"column":43,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":54},{"ruleId":"1550","severity":1,"message":"1660","line":2,"column":8,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1661","line":3,"column":8,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1737","line":5,"column":10,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":22},{"ruleId":"1581","severity":1,"message":"1786","line":21,"column":6,"nodeType":"1583","endLine":21,"endColumn":28,"suggestions":"1791"},{"ruleId":"1581","severity":1,"message":"1783","line":27,"column":6,"nodeType":"1583","endLine":27,"endColumn":24,"suggestions":"1792"},{"ruleId":"1550","severity":1,"message":"1793","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1794","line":10,"column":10,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1795","line":10,"column":22,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1796","line":10,"column":34,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1797","line":12,"column":8,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1798","line":14,"column":3,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":28},{"ruleId":"1696","severity":1,"message":"1799","line":134,"column":54,"nodeType":"1698","messageId":"1699","endLine":134,"endColumn":56},{"ruleId":"1780","severity":1,"message":"1781","line":348,"column":5,"nodeType":"1583","messageId":"1782","endLine":348,"endColumn":68},{"ruleId":"1581","severity":1,"message":"1593","line":11,"column":6,"nodeType":"1583","endLine":11,"endColumn":10,"suggestions":"1800"},{"ruleId":"1550","severity":1,"message":"1660","line":4,"column":8,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":19},{"ruleId":"1581","severity":1,"message":"1801","line":37,"column":6,"nodeType":"1583","endLine":37,"endColumn":15,"suggestions":"1802"},{"ruleId":"1631","severity":1,"message":"1632","line":139,"column":9,"nodeType":"1633","endLine":139,"endColumn":33},{"ruleId":"1581","severity":1,"message":"1593","line":12,"column":6,"nodeType":"1583","endLine":12,"endColumn":20,"suggestions":"1803"},{"ruleId":"1555","severity":1,"message":"1671","line":6,"column":1,"nodeType":"1557","endLine":88,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1804","line":56,"column":5,"nodeType":"1552","messageId":"1553","endLine":56,"endColumn":14},{"ruleId":"1550","severity":1,"message":"1793","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1794","line":10,"column":10,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1795","line":10,"column":22,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1796","line":10,"column":34,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1798","line":14,"column":3,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1805","line":38,"column":9,"nodeType":"1552","messageId":"1553","endLine":38,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1806","line":191,"column":28,"nodeType":"1552","messageId":"1553","endLine":191,"endColumn":42},{"ruleId":"1550","severity":1,"message":"1807","line":197,"column":19,"nodeType":"1552","messageId":"1553","endLine":197,"endColumn":26},{"ruleId":"1696","severity":1,"message":"1799","line":456,"column":54,"nodeType":"1698","messageId":"1699","endLine":456,"endColumn":56},{"ruleId":"1550","severity":1,"message":"1808","line":478,"column":11,"nodeType":"1552","messageId":"1553","endLine":478,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1795","line":10,"column":22,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1797","line":12,"column":8,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1798","line":14,"column":3,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1806","line":110,"column":28,"nodeType":"1552","messageId":"1553","endLine":110,"endColumn":42},{"ruleId":"1550","severity":1,"message":"1807","line":121,"column":19,"nodeType":"1552","messageId":"1553","endLine":121,"endColumn":26},{"ruleId":"1696","severity":1,"message":"1799","line":167,"column":54,"nodeType":"1698","messageId":"1699","endLine":167,"endColumn":56},{"ruleId":"1550","severity":1,"message":"1735","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1567","line":4,"column":8,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1736","line":7,"column":9,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1737","line":16,"column":10,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1738","line":16,"column":24,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":40},{"ruleId":"1581","severity":1,"message":"1739","line":59,"column":6,"nodeType":"1583","endLine":59,"endColumn":22,"suggestions":"1809"},{"ruleId":"1581","severity":1,"message":"1741","line":63,"column":6,"nodeType":"1583","endLine":63,"endColumn":12,"suggestions":"1810"},{"ruleId":"1581","severity":1,"message":"1593","line":78,"column":6,"nodeType":"1583","endLine":78,"endColumn":20,"suggestions":"1811"},{"ruleId":"1744","severity":1,"message":"1745","line":192,"column":5,"nodeType":"1746","messageId":"1747","endLine":240,"endColumn":6},{"ruleId":"1550","severity":1,"message":"1812","line":1,"column":8,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":27},{"ruleId":"1550","severity":1,"message":"1813","line":18,"column":8,"nodeType":"1552","messageId":"1553","endLine":18,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1565","line":19,"column":20,"nodeType":"1552","messageId":"1553","endLine":19,"endColumn":33},{"ruleId":"1550","severity":1,"message":"1798","line":19,"column":35,"nodeType":"1552","messageId":"1553","endLine":19,"endColumn":60},{"ruleId":"1550","severity":1,"message":"1814","line":114,"column":7,"nodeType":"1552","messageId":"1553","endLine":114,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1709","line":156,"column":9,"nodeType":"1552","messageId":"1553","endLine":156,"endColumn":13},{"ruleId":"1555","severity":1,"message":"1671","line":415,"column":1,"nodeType":"1557","endLine":763,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1815","line":457,"column":11,"nodeType":"1552","messageId":"1553","endLine":457,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1816","line":618,"column":15,"nodeType":"1552","messageId":"1553","endLine":618,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1817","line":672,"column":11,"nodeType":"1552","messageId":"1553","endLine":672,"endColumn":19},{"ruleId":"1744","severity":1,"message":"1745","line":18,"column":3,"nodeType":"1746","messageId":"1747","endLine":21,"endColumn":4},{"ruleId":"1555","severity":1,"message":"1671","line":15,"column":1,"nodeType":"1557","endLine":25,"endColumn":2},{"ruleId":"1555","severity":1,"message":"1671","line":1,"column":1,"nodeType":"1557","endLine":48,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1551","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1578","line":11,"column":10,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1579","line":11,"column":21,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":33},{"ruleId":"1550","severity":1,"message":"1571","line":1,"column":26,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":31},{"ruleId":"1550","severity":1,"message":"1551","line":2,"column":17,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1818","line":6,"column":3,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":7},{"ruleId":"1550","severity":1,"message":"1585","line":11,"column":3,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1660","line":17,"column":8,"nodeType":"1552","messageId":"1553","endLine":17,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1819","line":19,"column":8,"nodeType":"1552","messageId":"1553","endLine":19,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1820","line":28,"column":3,"nodeType":"1552","messageId":"1553","endLine":28,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1821","line":30,"column":10,"nodeType":"1552","messageId":"1553","endLine":30,"endColumn":14},{"ruleId":"1550","severity":1,"message":"1822","line":34,"column":8,"nodeType":"1552","messageId":"1553","endLine":34,"endColumn":19},{"ruleId":"1581","severity":1,"message":"1823","line":108,"column":6,"nodeType":"1583","endLine":108,"endColumn":8,"suggestions":"1824"},{"ruleId":"1581","severity":1,"message":"1825","line":112,"column":6,"nodeType":"1583","endLine":112,"endColumn":10,"suggestions":"1826"},{"ruleId":"1581","severity":1,"message":"1827","line":156,"column":6,"nodeType":"1583","endLine":156,"endColumn":13,"suggestions":"1828"},{"ruleId":"1550","severity":1,"message":"1829","line":161,"column":15,"nodeType":"1552","messageId":"1553","endLine":161,"endColumn":30},{"ruleId":"1550","severity":1,"message":"1830","line":164,"column":15,"nodeType":"1552","messageId":"1553","endLine":164,"endColumn":27},{"ruleId":"1581","severity":1,"message":"1831","line":179,"column":6,"nodeType":"1583","endLine":179,"endColumn":13,"suggestions":"1832"},{"ruleId":"1581","severity":1,"message":"1833","line":186,"column":6,"nodeType":"1583","endLine":186,"endColumn":10,"suggestions":"1834"},{"ruleId":"1581","severity":1,"message":"1835","line":246,"column":6,"nodeType":"1583","endLine":246,"endColumn":36,"suggestions":"1836"},{"ruleId":"1581","severity":1,"message":"1837","line":256,"column":6,"nodeType":"1583","endLine":256,"endColumn":21,"suggestions":"1838"},{"ruleId":"1550","severity":1,"message":"1682","line":345,"column":13,"nodeType":"1552","messageId":"1553","endLine":345,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1839","line":456,"column":9,"nodeType":"1552","messageId":"1553","endLine":456,"endColumn":25},{"ruleId":"1550","severity":1,"message":"1840","line":965,"column":7,"nodeType":"1552","messageId":"1553","endLine":965,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1841","line":993,"column":7,"nodeType":"1552","messageId":"1553","endLine":993,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1842","line":997,"column":7,"nodeType":"1552","messageId":"1553","endLine":997,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1843","line":1001,"column":7,"nodeType":"1552","messageId":"1553","endLine":1001,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1844","line":1007,"column":7,"nodeType":"1552","messageId":"1553","endLine":1007,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1597","line":1,"column":36,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":44},{"ruleId":"1550","severity":1,"message":"1845","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1635","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1846","line":4,"column":10,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1847","line":1,"column":15,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1848","line":2,"column":8,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1849","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1662","line":12,"column":8,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":23},{"ruleId":"1581","severity":1,"message":"1640","line":59,"column":6,"nodeType":"1583","endLine":59,"endColumn":26,"suggestions":"1850"},{"ruleId":"1581","severity":1,"message":"1640","line":65,"column":6,"nodeType":"1583","endLine":65,"endColumn":25,"suggestions":"1851"},{"ruleId":"1550","severity":1,"message":"1585","line":2,"column":17,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1716","line":10,"column":3,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":12},{"ruleId":"1550","severity":1,"message":"1717","line":12,"column":3,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":14},{"ruleId":"1550","severity":1,"message":"1852","line":15,"column":8,"nodeType":"1552","messageId":"1553","endLine":15,"endColumn":27},{"ruleId":"1550","severity":1,"message":"1853","line":20,"column":3,"nodeType":"1552","messageId":"1553","endLine":20,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1854","line":23,"column":8,"nodeType":"1552","messageId":"1553","endLine":23,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1855","line":27,"column":3,"nodeType":"1552","messageId":"1553","endLine":27,"endColumn":13},{"ruleId":"1550","severity":1,"message":"1856","line":49,"column":9,"nodeType":"1552","messageId":"1553","endLine":49,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1857","line":62,"column":24,"nodeType":"1552","messageId":"1553","endLine":62,"endColumn":39},{"ruleId":"1550","severity":1,"message":"1858","line":69,"column":25,"nodeType":"1552","messageId":"1553","endLine":69,"endColumn":41},{"ruleId":"1581","severity":1,"message":"1859","line":78,"column":6,"nodeType":"1583","endLine":78,"endColumn":11,"suggestions":"1860"},{"ruleId":"1581","severity":1,"message":"1861","line":84,"column":6,"nodeType":"1583","endLine":84,"endColumn":24,"suggestions":"1862"},{"ruleId":"1581","severity":1,"message":"1863","line":160,"column":6,"nodeType":"1583","endLine":160,"endColumn":21,"suggestions":"1864"},{"ruleId":"1550","severity":1,"message":"1596","line":3,"column":3,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1563","line":6,"column":3,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":6},{"ruleId":"1550","severity":1,"message":"1567","line":11,"column":8,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1597","line":12,"column":28,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":36},{"ruleId":"1550","severity":1,"message":"1705","line":13,"column":8,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":19},{"ruleId":"1581","severity":1,"message":"1865","line":104,"column":6,"nodeType":"1583","endLine":104,"endColumn":49,"suggestions":"1866"},{"ruleId":"1550","severity":1,"message":"1867","line":19,"column":9,"nodeType":"1552","messageId":"1553","endLine":19,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1868","line":4,"column":38,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":48},{"ruleId":"1581","severity":1,"message":"1869","line":41,"column":6,"nodeType":"1583","endLine":41,"endColumn":16,"suggestions":"1870"},{"ruleId":"1581","severity":1,"message":"1871","line":45,"column":6,"nodeType":"1583","endLine":45,"endColumn":27,"suggestions":"1872"},{"ruleId":"1581","severity":1,"message":"1873","line":86,"column":6,"nodeType":"1583","endLine":86,"endColumn":10,"suggestions":"1874"},{"ruleId":"1555","severity":1,"message":"1671","line":5,"column":1,"nodeType":"1557","endLine":15,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1797","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1875","line":7,"column":8,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":13},{"ruleId":"1581","severity":1,"message":"1876","line":68,"column":6,"nodeType":"1583","endLine":68,"endColumn":30,"suggestions":"1877"},{"ruleId":"1581","severity":1,"message":"1878","line":73,"column":6,"nodeType":"1583","endLine":73,"endColumn":54,"suggestions":"1879"},{"ruleId":"1581","severity":1,"message":"1880","line":234,"column":6,"nodeType":"1583","endLine":234,"endColumn":16,"suggestions":"1881"},{"ruleId":"1550","severity":1,"message":"1551","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1875","line":1,"column":8,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":13},{"ruleId":"1550","severity":1,"message":"1882","line":9,"column":11,"nodeType":"1552","messageId":"1553","endLine":9,"endColumn":19},{"ruleId":"1581","severity":1,"message":"1593","line":18,"column":6,"nodeType":"1583","endLine":18,"endColumn":25,"suggestions":"1883"},{"ruleId":"1550","severity":1,"message":"1710","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":30},{"ruleId":"1550","severity":1,"message":"1884","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1885","line":2,"column":28,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":41},{"ruleId":"1550","severity":1,"message":"1886","line":4,"column":8,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1887","line":5,"column":8,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1551","line":2,"column":22,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":31},{"ruleId":"1550","severity":1,"message":"1888","line":7,"column":3,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1889","line":8,"column":3,"nodeType":"1552","messageId":"1553","endLine":8,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1660","line":12,"column":8,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1715","line":26,"column":8,"nodeType":"1552","messageId":"1553","endLine":26,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1661","line":27,"column":8,"nodeType":"1552","messageId":"1553","endLine":27,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1716","line":28,"column":10,"nodeType":"1552","messageId":"1553","endLine":28,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1717","line":28,"column":21,"nodeType":"1552","messageId":"1553","endLine":28,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1718","line":29,"column":8,"nodeType":"1552","messageId":"1553","endLine":29,"endColumn":25},{"ruleId":"1550","severity":1,"message":"1760","line":50,"column":10,"nodeType":"1552","messageId":"1553","endLine":50,"endColumn":29},{"ruleId":"1550","severity":1,"message":"1761","line":52,"column":3,"nodeType":"1552","messageId":"1553","endLine":52,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1762","line":53,"column":3,"nodeType":"1552","messageId":"1553","endLine":53,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1724","line":188,"column":5,"nodeType":"1552","messageId":"1553","endLine":188,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1725","line":189,"column":5,"nodeType":"1552","messageId":"1553","endLine":189,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1726","line":190,"column":5,"nodeType":"1552","messageId":"1553","endLine":190,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1890","line":192,"column":5,"nodeType":"1552","messageId":"1553","endLine":192,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1891","line":193,"column":5,"nodeType":"1552","messageId":"1553","endLine":193,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1892","line":196,"column":9,"nodeType":"1552","messageId":"1553","endLine":196,"endColumn":14},{"ruleId":"1550","severity":1,"message":"1578","line":197,"column":10,"nodeType":"1552","messageId":"1553","endLine":197,"endColumn":19},{"ruleId":"1550","severity":1,"message":"1893","line":197,"column":26,"nodeType":"1552","messageId":"1553","endLine":197,"endColumn":39},{"ruleId":"1550","severity":1,"message":"1894","line":197,"column":41,"nodeType":"1552","messageId":"1553","endLine":197,"endColumn":55},{"ruleId":"1550","severity":1,"message":"1895","line":199,"column":10,"nodeType":"1552","messageId":"1553","endLine":199,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1896","line":199,"column":24,"nodeType":"1552","messageId":"1553","endLine":199,"endColumn":40},{"ruleId":"1550","severity":1,"message":"1897","line":199,"column":42,"nodeType":"1552","messageId":"1553","endLine":199,"endColumn":59},{"ruleId":"1550","severity":1,"message":"1898","line":201,"column":10,"nodeType":"1552","messageId":"1553","endLine":201,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1899","line":201,"column":26,"nodeType":"1552","messageId":"1553","endLine":201,"endColumn":43},{"ruleId":"1581","severity":1,"message":"1900","line":226,"column":6,"nodeType":"1583","endLine":226,"endColumn":32,"suggestions":"1901"},{"ruleId":"1550","severity":1,"message":"1902","line":267,"column":9,"nodeType":"1552","messageId":"1553","endLine":267,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1770","line":273,"column":23,"nodeType":"1552","messageId":"1553","endLine":273,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1771","line":287,"column":20,"nodeType":"1552","messageId":"1553","endLine":287,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1772","line":294,"column":23,"nodeType":"1552","messageId":"1553","endLine":294,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1773","line":301,"column":21,"nodeType":"1552","messageId":"1553","endLine":301,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1774","line":307,"column":21,"nodeType":"1552","messageId":"1553","endLine":307,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1775","line":313,"column":21,"nodeType":"1552","messageId":"1553","endLine":313,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1776","line":320,"column":12,"nodeType":"1552","messageId":"1553","endLine":320,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1777","line":353,"column":12,"nodeType":"1552","messageId":"1553","endLine":353,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1778","line":360,"column":12,"nodeType":"1552","messageId":"1553","endLine":360,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1779","line":394,"column":13,"nodeType":"1552","messageId":"1553","endLine":394,"endColumn":25},{"ruleId":"1550","severity":1,"message":"1728","line":631,"column":7,"nodeType":"1552","messageId":"1553","endLine":631,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1737","line":16,"column":10,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1738","line":16,"column":24,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":40},{"ruleId":"1581","severity":1,"message":"1739","line":59,"column":6,"nodeType":"1583","endLine":59,"endColumn":22,"suggestions":"1903"},{"ruleId":"1581","severity":1,"message":"1741","line":63,"column":6,"nodeType":"1583","endLine":63,"endColumn":12,"suggestions":"1904"},{"ruleId":"1581","severity":1,"message":"1593","line":78,"column":6,"nodeType":"1583","endLine":78,"endColumn":20,"suggestions":"1905"},{"ruleId":"1744","severity":1,"message":"1745","line":192,"column":5,"nodeType":"1746","messageId":"1747","endLine":240,"endColumn":6},{"ruleId":"1555","severity":1,"message":"1671","line":6,"column":1,"nodeType":"1557","endLine":75,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1804","line":43,"column":5,"nodeType":"1552","messageId":"1553","endLine":43,"endColumn":14},{"ruleId":"1550","severity":1,"message":"1735","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1567","line":4,"column":8,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1736","line":7,"column":9,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":26},{"ruleId":"1550","severity":1,"message":"1793","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1794","line":10,"column":10,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1795","line":10,"column":22,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1796","line":10,"column":34,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1797","line":12,"column":8,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1798","line":14,"column":3,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":28},{"ruleId":"1696","severity":1,"message":"1799","line":136,"column":54,"nodeType":"1698","messageId":"1699","endLine":136,"endColumn":56},{"ruleId":"1550","severity":1,"message":"1795","line":10,"column":22,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1797","line":12,"column":8,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1798","line":14,"column":3,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1806","line":110,"column":28,"nodeType":"1552","messageId":"1553","endLine":110,"endColumn":42},{"ruleId":"1550","severity":1,"message":"1807","line":121,"column":19,"nodeType":"1552","messageId":"1553","endLine":121,"endColumn":26},{"ruleId":"1696","severity":1,"message":"1799","line":167,"column":54,"nodeType":"1698","messageId":"1699","endLine":167,"endColumn":56},{"ruleId":"1550","severity":1,"message":"1793","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":35},{"ruleId":"1550","severity":1,"message":"1794","line":10,"column":10,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1795","line":10,"column":22,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1796","line":10,"column":34,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1798","line":14,"column":3,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1805","line":38,"column":9,"nodeType":"1552","messageId":"1553","endLine":38,"endColumn":17},{"ruleId":"1550","severity":1,"message":"1806","line":191,"column":28,"nodeType":"1552","messageId":"1553","endLine":191,"endColumn":42},{"ruleId":"1550","severity":1,"message":"1807","line":197,"column":19,"nodeType":"1552","messageId":"1553","endLine":197,"endColumn":26},{"ruleId":"1696","severity":1,"message":"1799","line":456,"column":54,"nodeType":"1698","messageId":"1699","endLine":456,"endColumn":56},{"ruleId":"1550","severity":1,"message":"1808","line":478,"column":11,"nodeType":"1552","messageId":"1553","endLine":478,"endColumn":23},{"ruleId":"1744","severity":1,"message":"1745","line":18,"column":3,"nodeType":"1746","messageId":"1747","endLine":21,"endColumn":4},{"ruleId":"1550","severity":1,"message":"1591","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":24},{"ruleId":"1555","severity":1,"message":"1671","line":5,"column":1,"nodeType":"1557","endLine":107,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1906","line":11,"column":3,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":14},{"ruleId":"1550","severity":1,"message":"1907","line":12,"column":3,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":9},{"ruleId":"1550","severity":1,"message":"1908","line":17,"column":10,"nodeType":"1552","messageId":"1553","endLine":17,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1909","line":17,"column":23,"nodeType":"1552","messageId":"1553","endLine":17,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1563","line":31,"column":17,"nodeType":"1552","messageId":"1553","endLine":31,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1567","line":40,"column":8,"nodeType":"1552","messageId":"1553","endLine":40,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1819","line":42,"column":8,"nodeType":"1552","messageId":"1553","endLine":42,"endColumn":19},{"ruleId":"1581","severity":1,"message":"1910","line":80,"column":6,"nodeType":"1583","endLine":80,"endColumn":8,"suggestions":"1911"},{"ruleId":"1581","severity":1,"message":"1912","line":143,"column":6,"nodeType":"1583","endLine":143,"endColumn":46,"suggestions":"1913"},{"ruleId":"1550","severity":1,"message":"1597","line":1,"column":17,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":25},{"ruleId":"1550","severity":1,"message":"1914","line":13,"column":8,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1585","line":16,"column":10,"nodeType":"1552","messageId":"1553","endLine":16,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1915","line":26,"column":5,"nodeType":"1552","messageId":"1553","endLine":26,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1916","line":29,"column":5,"nodeType":"1552","messageId":"1553","endLine":29,"endColumn":20},{"ruleId":"1550","severity":1,"message":"1917","line":12,"column":10,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":27},{"ruleId":"1581","severity":1,"message":"1918","line":22,"column":6,"nodeType":"1583","endLine":22,"endColumn":45,"suggestions":"1919"},{"ruleId":"1550","severity":1,"message":"1920","line":5,"column":10,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":21},{"ruleId":"1550","severity":1,"message":"1921","line":14,"column":28,"nodeType":"1552","messageId":"1553","endLine":14,"endColumn":47},{"ruleId":"1550","severity":1,"message":"1710","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":30},{"ruleId":"1550","severity":1,"message":"1710","line":1,"column":10,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":30},{"ruleId":"1550","severity":1,"message":"1922","line":6,"column":3,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":18},{"ruleId":"1555","severity":1,"message":"1671","line":11,"column":1,"nodeType":"1557","endLine":135,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1922","line":6,"column":3,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":18},{"ruleId":"1555","severity":1,"message":"1671","line":11,"column":1,"nodeType":"1557","endLine":130,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1923","line":137,"column":9,"nodeType":"1552","messageId":"1553","endLine":137,"endColumn":11},{"ruleId":"1550","severity":1,"message":"1924","line":139,"column":9,"nodeType":"1552","messageId":"1553","endLine":139,"endColumn":11},{"ruleId":"1550","severity":1,"message":"1591","line":7,"column":10,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1576","line":7,"column":26,"nodeType":"1552","messageId":"1553","endLine":7,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1797","line":10,"column":8,"nodeType":"1552","messageId":"1553","endLine":10,"endColumn":16},{"ruleId":"1555","severity":1,"message":"1671","line":14,"column":1,"nodeType":"1557","endLine":30,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1659","line":1,"column":8,"nodeType":"1552","messageId":"1553","endLine":1,"endColumn":23},{"ruleId":"1550","severity":1,"message":"1591","line":2,"column":10,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":24},{"ruleId":"1550","severity":1,"message":"1576","line":2,"column":26,"nodeType":"1552","messageId":"1553","endLine":2,"endColumn":48},{"ruleId":"1550","severity":1,"message":"1925","line":4,"column":7,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":16},{"ruleId":"1926","severity":1,"message":"1927","line":6,"column":14,"nodeType":"1928","messageId":"1629","endLine":6,"endColumn":16},{"ruleId":"1926","severity":1,"message":"1927","line":6,"column":26,"nodeType":"1928","messageId":"1629","endLine":6,"endColumn":28},{"ruleId":"1550","severity":1,"message":"1922","line":3,"column":3,"nodeType":"1552","messageId":"1553","endLine":3,"endColumn":18},{"ruleId":"1550","severity":1,"message":"1929","line":4,"column":3,"nodeType":"1552","messageId":"1553","endLine":4,"endColumn":22},{"ruleId":"1550","severity":1,"message":"1704","line":5,"column":3,"nodeType":"1552","messageId":"1553","endLine":5,"endColumn":32},{"ruleId":"1550","severity":1,"message":"1930","line":6,"column":3,"nodeType":"1552","messageId":"1553","endLine":6,"endColumn":41},{"ruleId":"1550","severity":1,"message":"1813","line":11,"column":8,"nodeType":"1552","messageId":"1553","endLine":11,"endColumn":15},{"ruleId":"1550","severity":1,"message":"1797","line":12,"column":8,"nodeType":"1552","messageId":"1553","endLine":12,"endColumn":16},{"ruleId":"1550","severity":1,"message":"1931","line":13,"column":8,"nodeType":"1552","messageId":"1553","endLine":13,"endColumn":21},{"ruleId":"1555","severity":1,"message":"1671","line":16,"column":1,"nodeType":"1557","endLine":87,"endColumn":2},{"ruleId":"1550","severity":1,"message":"1932","line":17,"column":9,"nodeType":"1552","messageId":"1553","endLine":17,"endColumn":28},"no-native-reassign",["1933"],"no-negated-in-lhs",["1934"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'firestore' is assigned a value but never used.",["1933"],["1934"],"'Popover' is defined but never used.","'Table' is defined but never used.","'Tag' is defined but never used.","'formatDateDashWithTime' is defined but never used.","'sumArrayDatas' is defined but never used.","'sumNumbers' is defined but never used.","'MainButton' is defined but never used.","'FadeIn' is defined but never used.","'SlideOutRight' is defined but never used.","'Wobble' is defined but never used.","'Space' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Divider' is defined but never used.","'formatDateFromDatabase' is defined but never used.","'formatDateSlash' is defined but never used.","'rangeData' is assigned a value but never used.","'setRangeData' is assigned a value but never used.","'setWithMerge' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'switchHandler'. Either include it or remove the dependency array.","ArrayExpression",["1935"],"'Button' is defined but never used.","'DatePicker' is defined but never used.","'Input' is defined but never used.","'AiFillCloseCircle' is defined but never used.","'AiFillFilter' is defined but never used.","'AiOutlineClose' is defined but never used.","'formatDateDash' is defined but never used.","'defaultDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["1936"],"'Checkbox' is defined but never used.","'Select' is defined but never used.","'useState' is defined but never used.","'useDashboardTransaction' is defined but never used.","'SearchOutlined' is defined but never used.","'ArrowLeftOutlined' is defined but never used.","'GroupPayments' is defined but never used.","'PaginateCommands' is defined but never used.","'BRANCH' is defined but never used.","'ACCOUNT_NAME' is defined but never used.","'DATE_END' is defined but never used.","'QUANTITY' is defined but never used.","'usePaginate' is defined but never used.","'useRef' is defined but never used.","react/react-in-jsx-scope","'React' must be in scope when using JSX","'useFindDataHandler' is defined but never used.",["1937"],"JSXOpeningFragment","'dateFromD' is assigned a value but never used.","'CONTACT_NUMBER' is defined but never used.","'DATE_ORDER_PLACED' is defined but never used.","'ORDER_VIA' is defined but never used.","'AMOUNT_PAID' is defined but never used.",["1938"],"'CUSTOMER' is defined but never used.","'Modal' is defined but never used.","'Card' is defined but never used.","'Alert' is defined but never used.","'PrinterFilled' is defined but never used.","'useAuthentication' is defined but never used.","no-dupe-keys","Duplicate key 'setIsLoading'.","ObjectExpression","unexpected","'isLoading' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'DashboardTransactionPage' is defined but never used.","'useContext' is defined but never used.","'RouteWithSubRoutes' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["1939"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'sm' is assigned a value but never used.","'loaded' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.",["1940"],"'INVENTORY' is defined but never used.","'DashboardStoreInventory' is defined but never used.","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","'AnalyticsMonthlySales' is defined but never used.","Assign object to a variable before exporting as module default","'Link' is defined but never used.","'useParams' is defined but never used.","'useGetDocumentById' is defined but never used.","'SchedulersClass' is defined but never used.","'CustomInput' is defined but never used.","'CustomTitle' is defined but never used.","'useGetDocuments' is defined but never used.","'useQuery' is defined but never used.","'TabPane' is assigned a value but never used.","'user' is assigned a value but never used.","'dataLoaded' is assigned a value but never used.","'setDataLoaded' is assigned a value but never used.","'limit' is defined but never used.","'DIRECT_AND_THIRD_PARTY' is defined but never used.","'TRANSACTION' is defined but never used.","Unexpected default export of anonymous function","'UnauthorizedContext' is defined but never used.","'getAgingDateStartFrom' is defined but never used.","'deposits' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'depositList' and 'loadData'. Either include them or remove the dependency array.",["1941"],"'expandedRowRender' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPayments'. Either include it or remove the dependency array.",["1942"],"React Hook useEffect has a missing dependency: 'handleDate'. Either include it or remove the dependency array.",["1943"],"'result' is assigned a value but never used.","'ORDER_VIA_WEBSITE' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'async' is defined but never used.","'migrateProduct' is defined but never used.","'checkDate' is defined but never used.","'targetAmount' is assigned a value but never used.","'isSwitch' is assigned a value but never used.","'setTargets' is assigned a value but never used.",["1944"],"React Hook useEffect has a missing dependency: 'loadDropdowns'. Either include it or remove the dependency array.",["1945"],"'getPageMargins' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'producedProductListOfAllCodes' is defined but never used.","'CustomModal' is defined but never used.","'SettingOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'loadSpecificPrices'. Either include it or remove the dependency array.",["1946"],"'date' is assigned a value but never used.","'ARRAY_OF_STRING_TYPE' is defined but never used.","'runTransaction' is defined but never used.","'orderBy' is defined but never used.","'thousandsSeparators' is defined but never used.","Array.prototype.find() expects a value to be returned at the end of arrow function.","'FilterOptions' is defined but never used.","'DATE_TYPE' is defined but never used.","'STRING_TYPE' is defined but never used.","'CustomRangePicker' is defined but never used.","'useRangeHandler' is defined but never used.","'useGetDocumentsByKeyword' is defined but never used.","'DropdownChannel' is defined but never used.","'AutoSelect' is defined but never used.","'ServiceClass' is assigned a value but never used.","'setIsFiltered' is assigned a value but never used.","'isFiltered' is assigned a value but never used.","'hideColumns' is assigned a value but never used.","'setFilteredData' is assigned a value but never used.","'MobileTableView' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["1947","1948"],["1949","1950"],"'UserOutlined' is defined but never used.","'handleButtonClick' is assigned a value but never used.","'arrayReplace' is defined but never used.","'replaceArrayData' is defined but never used.","React Hook useEffect has missing dependencies: 'exposeData' and 'handleColumns'. Either include them or remove the dependency array. If 'exposeData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1951"],"React Hook useEffect has a missing dependency: 'handleColumns'. Either include it or remove the dependency array.",["1952"],["1953"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'EditableTagGroup' is defined but never used.","'addDoc' is defined but never used.","'getDoc' is defined but never used.","'doc' is defined but never used.","'updateDoc' is defined but never used.","'setDoc' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","React Hook useEffect has a missing dependency: 'valueSelected'. Either include it or remove the dependency array. If 'valueSelected' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1954"],"'produceSalesSummary' is defined but never used.","'advanceOrders' is defined but never used.","'notAdvanceOrders' is defined but never used.","React Hook useEffect has a missing dependency: 'setFilteredData'. Either include it or remove the dependency array.",["1955"],["1956"],"React Hook useEffect has missing dependencies: 'clearDocumentData' and 'clearRangeData'. Either include them or remove the dependency array.",["1957"],"React Hook useEffect has a missing dependency: 'loadDocumentData'. Either include it or remove the dependency array.",["1958"],"'cashTotal' is assigned a value but never used.","'rTotal' is assigned a value but never used.","'spwdTotal' is assigned a value but never used.","'ddTotal' is assigned a value but never used.","'wbTotal' is assigned a value but never used.","'ppTotal' is assigned a value but never used.","'orderVia' is assigned a value but never used.","'ppZAP' is assigned a value but never used.","'orderViaWB' is assigned a value but never used.","'ppZAPSummary' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'name' and 'rest'. Either include them or remove the dependency array.",["1959"],["1960"],"React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'name', you can also switch to useReducer instead of useState and read 'name' in the reducer.",["1961"],["1962"],["1963"],["1964"],["1965"],["1966"],"'calculateBalanceScheduler' is defined but never used.","'amountPaid' is defined but never used.","'balanceDue' is defined but never used.","'paymentDetails' is defined but never used.","'sumArray' is defined but never used.","'sumArrayOfObjectsGrouping' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.",["1967"],"React Hook useEffect has a missing dependency: 'exposeData'. Either include it or remove the dependency array. If 'exposeData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1968"],["1969"],"'sheetName' is assigned a value but never used.","'partials' is assigned a value but never used.","'D_COLLECTIBLES' is assigned a value but never used.","'E_TOTAL' is assigned a value but never used.","'dateEquality' is assigned a value but never used.",["1970"],["1971"],["1972"],"'productStaticPrices' is defined but never used.","'sorting' is defined but never used.","'salesType' is assigned a value but never used.","'totalProductPrice' is assigned a value but never used.","'price' is assigned a value but never used.","'totalQty' is assigned a value but never used.","'Tabs' is defined but never used.","'CustomTable' is defined but never used.","'PlusCircleOutlined' is defined but never used.","'Flex' is defined but never used.","'URLNotFound' is defined but never used.","React Hook useEffect has a missing dependency: 'setAdvanceFilterButton'. Either include it or remove the dependency array. If 'setAdvanceFilterButton' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1973"],"React Hook useEffect has a missing dependency: 'loadLogs'. Either include it or remove the dependency array.",["1974"],"React Hook useEffect has missing dependencies: 'isDiscountReset' and 'orderData'. Either include them or remove the dependency array.",["1975"],"'_fixedDeduction' is assigned a value but never used.","'_totalAmount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'orderData'. Either include it or remove the dependency array.",["1976"],"React Hook useEffect has a missing dependency: 'loadOrderData'. Either include it or remove the dependency array.",["1977"],"React Hook useEffect has missing dependencies: 'formType', 'id', 'sched', and 'tabs'. Either include them or remove the dependency array.",["1978"],"React Hook useEffect has a missing dependency: 'sched'. Either include it or remove the dependency array. You can also do a functional update 'setSched(s => ...)' if you only need 'sched' in the 'setSched' call.",["1979"],"'handleForDeposit' is assigned a value but never used.","'ActionButton' is assigned a value but never used.","'StyledHeader' is assigned a value but never used.","'StyledFormContainer' is assigned a value but never used.","'StyledForm' is assigned a value but never used.","'StyledActionContainer' is assigned a value but never used.","'useHistory' is defined but never used.","'UnavailableContext' is defined but never used.","'message' is defined but never used.","'useBreakpoint' is defined but never used.","'CustomDrawer' is defined but never used.",["1980"],["1981"],"'useGetDocumentsByFn' is defined but never used.","'producedDropdowns' is defined but never used.","'addMinusDay' is defined but never used.","'formatTime' is defined but never used.","'rowColumns' is assigned a value but never used.","'setFirstColumns' is assigned a value but never used.","'setEnableTimeGap' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'enableVIP' and 'handleChanges'. Either include them or remove the dependency array.",["1982"],"React Hook useEffect has missing dependencies: 'isTouched' and 'modifiedData'. Either include them or remove the dependency array. If 'modifiedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1983"],"React Hook useEffect has missing dependencies: 'orderData' and 'tabs'. Either include them or remove the dependency array. If 'setEnableVIP' needs the current value of 'orderData', you can also switch to useReducer instead of useState and read 'orderData' in the reducer.",["1984"],"React Hook useEffect has missing dependencies: 'modifiedData' and 'products'. Either include them or remove the dependency array. If 'modifiedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1985"],"'addUpload' is assigned a value but never used.","'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["1986"],"React Hook useEffect has a missing dependency: 'modifiedData'. Either include it or remove the dependency array. If 'modifiedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1987"],"React Hook useEffect has a missing dependency: 'loadUploads'. Either include it or remove the dependency array.",["1988"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'data' and 'newProductData'. Either include them or remove the dependency array.",["1989"],"React Hook useEffect has a missing dependency: 'produceCodeObjList'. Either include it or remove the dependency array.",["1990"],"React Hook useEffect has missing dependencies: 'codeObjList', 'dataSource', 'formType', 'orderData', and 'orderVia'. Either include them or remove the dependency array.",["1991"],"'setError' is assigned a value but never used.",["1992"],"'producedBranches' is defined but never used.","'producedRoles' is defined but never used.","'BranchClass' is defined but never used.","'RolesClass' is defined but never used.","'FileExcelOutlined' is defined but never used.","'PrinterOutlined' is defined but never used.","'filteredData' is assigned a value but never used.","'data' is assigned a value but never used.","'types' is assigned a value but never used.","'loadRangeData' is assigned a value but never used.","'clearRangeData' is assigned a value but never used.","'documentData' is assigned a value but never used.","'loadDocumentData' is assigned a value but never used.","'clearDocumentData' is assigned a value but never used.","'selectedFilter' is assigned a value but never used.","'setSelectedFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlePp' and 'handleZap'. Either include them or remove the dependency array.",["1993"],"'handleExportExcel' is assigned a value but never used.",["1994"],["1995"],["1996"],"'DragAndDrop' is defined but never used.","'Resize' is defined but never used.","'DataManager' is defined but never used.","'Predicate' is defined but never used.","React Hook useEffect has a missing dependency: 'loadProductData'. Either include it or remove the dependency array.",["1997"],"React Hook useEffect has missing dependencies: 'eventSettings', 'navigate.currentView', and 'setIsLoading'. Either include them or remove the dependency array. You can also do a functional update 'setEventSettings(e => ...)' if you only need 'eventSettings' in the 'setEventSettings' call.",["1998"],"'ProductClass' is defined but never used.","'branchDatasource' is assigned a value but never used.","'getDataByBranch' is assigned a value but never used.","'documentPrintInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'productLabels' and 'products'. Either include them or remove the dependency array. You can also do a functional update 'setProducts(p => ...)' if you only need 'products' in the 'setProducts' call.",["1999"],"'useSelector' is defined but never used.","'setBranchDatasource' is assigned a value but never used.","'displayOrderVia' is defined but never used.","'cc' is assigned a value but never used.","'ff' is assigned a value but never used.","'isWeekDay' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'getProductPurchases' is defined but never used.","'producedProductListWithGroupAndAmounts' is defined but never used.","'ProductsClass' is defined but never used.","'dateFromBaseInAging' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"2000","fix":"2001"},{"desc":"2002","fix":"2003"},{"desc":"2000","fix":"2004"},{"desc":"2002","fix":"2005"},{"desc":"2006","fix":"2007"},{"desc":"2008","fix":"2009"},{"desc":"2010","fix":"2011"},{"desc":"2012","fix":"2013"},{"desc":"2014","fix":"2015"},{"desc":"2016","fix":"2017"},{"desc":"2018","fix":"2019"},{"desc":"2020","fix":"2021"},{"messageId":"2022","fix":"2023","desc":"2024"},{"messageId":"2025","fix":"2026","desc":"2027"},{"messageId":"2022","fix":"2028","desc":"2024"},{"messageId":"2025","fix":"2029","desc":"2027"},{"desc":"2030","fix":"2031"},{"desc":"2032","fix":"2033"},{"desc":"2034","fix":"2035"},{"desc":"2036","fix":"2037"},{"desc":"2038","fix":"2039"},{"desc":"2040","fix":"2041"},{"desc":"2042","fix":"2043"},{"desc":"2044","fix":"2045"},{"desc":"2046","fix":"2047"},{"desc":"2048","fix":"2049"},{"desc":"2050","fix":"2051"},{"desc":"2052","fix":"2053"},{"desc":"2050","fix":"2054"},{"desc":"2052","fix":"2055"},{"desc":"2050","fix":"2056"},{"desc":"2052","fix":"2057"},{"desc":"2058","fix":"2059"},{"desc":"2060","fix":"2061"},{"desc":"2062","fix":"2063"},{"desc":"2030","fix":"2064"},{"desc":"2032","fix":"2065"},{"desc":"2034","fix":"2066"},{"desc":"2067","fix":"2068"},{"desc":"2069","fix":"2070"},{"desc":"2071","fix":"2072"},{"desc":"2073","fix":"2074"},{"desc":"2075","fix":"2076"},{"desc":"2077","fix":"2078"},{"desc":"2079","fix":"2080"},{"desc":"2081","fix":"2082"},{"desc":"2083","fix":"2084"},{"desc":"2085","fix":"2086"},{"desc":"2087","fix":"2088"},{"desc":"2089","fix":"2090"},{"desc":"2091","fix":"2092"},{"desc":"2093","fix":"2094"},{"desc":"2095","fix":"2096"},{"desc":"2097","fix":"2098"},{"desc":"2099","fix":"2100"},{"desc":"2101","fix":"2102"},{"desc":"2103","fix":"2104"},{"desc":"2105","fix":"2106"},{"desc":"2107","fix":"2108"},{"desc":"2030","fix":"2109"},{"desc":"2032","fix":"2110"},{"desc":"2034","fix":"2111"},{"desc":"2112","fix":"2113"},{"desc":"2114","fix":"2115"},{"desc":"2116","fix":"2117"},"Update the dependencies array to be: [rangeHandlerFilteredData.searchData, isChecked, switchHandler]",{"range":"2118","text":"2119"},"Update the dependencies array to be: [loadData]",{"range":"2120","text":"2121"},{"range":"2122","text":"2119"},{"range":"2123","text":"2121"},"Update the dependencies array to be: [data]",{"range":"2124","text":"2125"},"Update the dependencies array to be: [error, location.pathname]",{"range":"2126","text":"2127"},"Update the dependencies array to be: [dates, depositList, loadData, user]",{"range":"2128","text":"2129"},"Update the dependencies array to be: [getPayments, user]",{"range":"2130","text":"2131"},"Update the dependencies array to be: [dataSource, handleDate]",{"range":"2132","text":"2133"},"Update the dependencies array to be: [Services, date, dateTo, loadData]",{"range":"2134","text":"2135"},"Update the dependencies array to be: [Services, loadDropdowns]",{"range":"2136","text":"2137"},"Update the dependencies array to be: [withDescriptions, orderVia, loadSpecificPrices]",{"range":"2138","text":"2139"},"removeEscape",{"range":"2140","text":"2141"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"2142","text":"2143"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"2144","text":"2141"},{"range":"2145","text":"2143"},"Update the dependencies array to be: [collectionData, exposeData, handleColumns]",{"range":"2146","text":"2147"},"Update the dependencies array to be: [data, handleColumns]",{"range":"2148","text":"2149"},"Update the dependencies array to be: [loadData, modifiedData]",{"range":"2150","text":"2151"},"Update the dependencies array to be: [value, valueSelected]",{"range":"2152","text":"2153"},"Update the dependencies array to be: [rangeData, setFilteredData]",{"range":"2154","text":"2155"},"Update the dependencies array to be: [documentData, setFilteredData]",{"range":"2156","text":"2157"},"Update the dependencies array to be: [clearDocumentData, clearRangeData, selectedFilter]",{"range":"2158","text":"2159"},"Update the dependencies array to be: [filterValue, loadDocumentData, selectedFilter]",{"range":"2160","text":"2161"},"Update the dependencies array to be: [isTouched, name, rest, tags]",{"range":"2162","text":"2163"},"Update the dependencies array to be: [ServiceClass, loadDropdowns]",{"range":"2164","text":"2165"},"Update the dependencies array to be: [name, rest.collectionData]",{"range":"2166","text":"2167"},"Update the dependencies array to be: [value, isTouched, rest, name]",{"range":"2168","text":"2169"},{"range":"2170","text":"2167"},{"range":"2171","text":"2169"},{"range":"2172","text":"2167"},{"range":"2173","text":"2169"},"Update the dependencies array to be: [id, loadData]",{"range":"2174","text":"2175"},"Update the dependencies array to be: [exposeData, newTags]",{"range":"2176","text":"2177"},"Update the dependencies array to be: [ServiceClass, loadData]",{"range":"2178","text":"2179"},{"range":"2180","text":"2147"},{"range":"2181","text":"2149"},{"range":"2182","text":"2151"},"Update the dependencies array to be: [setAdvanceFilterButton]",{"range":"2183","text":"2184"},"Update the dependencies array to be: [id, loadLogs]",{"range":"2185","text":"2186"},"Update the dependencies array to be: [isDiscountReset, orderData, sched]",{"range":"2187","text":"2188"},"Update the dependencies array to be: [orderData, sched]",{"range":"2189","text":"2190"},"Update the dependencies array to be: [id, loadOrderData]",{"range":"2191","text":"2192"},"Update the dependencies array to be: [orderData, user, productData, tabs, id, sched, formType]",{"range":"2193","text":"2194"},"Update the dependencies array to be: [channelOption, sched]",{"range":"2195","text":"2196"},"Update the dependencies array to be: [data, index, paymentList]",{"range":"2197","text":"2198"},"Update the dependencies array to be: [balanceDue, data, index]",{"range":"2199","text":"2200"},"Update the dependencies array to be: [enableVIP, handleChanges, vip]",{"range":"2201","text":"2202"},"Update the dependencies array to be: [dates, dataValue, isTouched, modifiedData]",{"range":"2203","text":"2204"},"Update the dependencies array to be: [channel, data, orderData, tabs]",{"range":"2205","text":"2206"},"Update the dependencies array to be: [dataSource, isTouched, totalDue, orderVia, products, modifiedData]",{"range":"2207","text":"2208"},"Update the dependencies array to be: [fileURLs, state]",{"range":"2209","text":"2210"},"Update the dependencies array to be: [modifiedData, removedPaths, state]",{"range":"2211","text":"2212"},"Update the dependencies array to be: [id, loadUploads]",{"range":"2213","text":"2214"},"Update the dependencies array to be: [orderData, codeObjList, newProductData, data]",{"range":"2215","text":"2216"},"Update the dependencies array to be: [data, newProductData, orderVia, produceCodeObjList, specificPrices]",{"range":"2217","text":"2218"},"Update the dependencies array to be: [codeObjList, dataSource, formType, orderData, orderVia, products]",{"range":"2219","text":"2220"},"Update the dependencies array to be: [lastVisible, loadData, user]",{"range":"2221","text":"2222"},"Update the dependencies array to be: [filterValue, handlePp, handleZap, ppZapNumber]",{"range":"2223","text":"2224"},{"range":"2225","text":"2147"},{"range":"2226","text":"2149"},{"range":"2227","text":"2151"},"Update the dependencies array to be: [loadProductData]",{"range":"2228","text":"2229"},"Update the dependencies array to be: [navigate?.dateRange, user, productData, navigate.currentView, setIsLoading, eventSettings]",{"range":"2230","text":"2231"},"Update the dependencies array to be: [props.documentPrintInfo, props.branch, products, productLabels]",{"range":"2232","text":"2233"},[2339,2387],"[rangeHandlerFilteredData.searchData, isChecked, switchHandler]",[240,242],"[loadData]",[2263,2311],[240,242],[1021,1047],"[data]",[692,711],"[error, location.pathname]",[1590,1603],"[dates, depositList, loadData, user]",[1382,1388],"[getPayments, user]",[1447,1459],"[dataSource, handleDate]",[2492,2516],"[Services, date, dateTo, loadData]",[2568,2578],"[Services, loadDropdowns]",[1232,1260],"[withDescriptions, orderVia, loadSpecificPrices]",[1777,1778],"",[1777,1777],"\\",[1802,1803],[1802,1802],[1780,1796],"[collectionData, exposeData, handleColumns]",[1852,1858],"[data, handleColumns]",[2407,2421],"[loadData, modifiedData]",[1552,1559],"[value, valueSelected]",[6602,6613],"[rangeData, setFilteredData]",[6679,6693],"[documentData, setFilteredData]",[6769,6785],"[clearDocumentData, clearRangeData, selectedFilter]",[6936,6965],"[filterValue, loadDocumentData, selectedFilter]",[503,520],"[isTouched, name, rest, tags]",[572,586],"[ServiceClass, loadDropdowns]",[411,432],"[name, rest.collectionData]",[536,554],"[value, isTouched, rest, name]",[431,453],[557,575],[969,991],[1095,1113],[367,371],"[id, loadData]",[1007,1016],"[exposeData, newTags]",[495,509],"[ServiceClass, loadData]",[1772,1788],[1844,1850],[2399,2413],[4107,4109],"[setAdvanceFilterButton]",[4156,4160],"[id, loadLogs]",[5363,5370],"[isDiscountReset, orderData, sched]",[6177,6184],"[orderData, sched]",[6309,6313],"[id, loadOrderData]",[8754,8784],"[orderData, user, productData, tabs, id, sched, formType]",[9171,9186],"[channelOption, sched]",[2017,2037],"[data, index, paymentList]",[2150,2169],"[balanceDue, data, index]",[2781,2786],"[enableVIP, handleChanges, vip]",[2894,2912],"[dates, dataValue, isTouched, modifiedData]",[5424,5439],"[channel, data, orderData, tabs]",[3366,3409],"[dataSource, isTouched, totalDue, orderVia, products, modifiedData]",[1241,1251],"[fileURLs, state]",[1331,1352],"[modifiedData, removedPaths, state]",[2277,2281],"[id, loadUploads]",[2613,2637],"[orderData, codeObjList, newProductData, data]",[2748,2796],"[data, newProductData, orderVia, produceCodeObjList, specificPrices]",[8645,8655],"[codeObjList, dataSource, formType, orderData, orderVia, products]",[806,825],"[lastVisible, loadData, user]",[6975,7001],"[filterValue, handlePp, handleZap, ppZapNumber]",[1772,1788],[1844,1850],[2399,2413],[2731,2733],"[loadProductData]",[4950,4990],"[navigate?.dateRange, user, productData, navigate.currentView, setIsLoading, eventSettings]",[1064,1103],"[props.documentPrintInfo, props.branch, products, productLabels]"]