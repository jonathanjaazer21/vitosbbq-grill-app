[
  {
    "D:\\Projects\\Scheduler App\\scheduler\\src\\index.js": "1",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\App.js": "2",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\app\\store.js": "3",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\app\\types.js": "4",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\schedulerComponentSlice.js": "5",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\sideNavSlice.js": "6",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\2.menu\\menuSlice.js": "7",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\orderSlipSlice.js": "8",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.NewLogin\\loginSlice.js": "9",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\Table\\tableSlice.js": "10",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase.js": "11",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\collectionNames.js": "12",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\2.menu\\menuData.js": "13",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\schedulerOpenedIdSlice.js": "14",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\orderNoDate.js": "15",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.NewLogin\\index.js": "16",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\2.user_masterfile\\index.js": "17",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\3.branch_mastefile\\index.js": "18",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\index.js": "19",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\4.dropdown_masterfile\\index.js": "20",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\1.grill_reservation\\index.js": "21",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\backdrop\\index.js": "22",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.login\\index.js": "23",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\6.reports\\index.js": "24",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\Dashboard\\index.js": "25",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\10.dailyReports\\index.js": "26",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\7.directAndThirdParty\\index.js": "27",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\9.incidentReports\\index.js": "28",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\5.product_masterfile\\index.js": "29",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\1.payment_transaction\\index.js": "30",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\8.inventory\\index.js": "31",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\index.js": "32",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\ExcelExporter\\index.js": "33",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\2.menu\\styles.js": "34",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\arrayFuntions.js": "35",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\styles.js": "36",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.NewLogin\\styles.js": "37",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\dataHandlers\\deleteData.js": "38",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\dataHandlers\\updateData.js": "39",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\dataHandlers\\addData.js": "40",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.login\\loginSlice.js": "41",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\dataHandlers\\getData.js": "42",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\ExcelExporter\\ExportService.js": "43",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\validateEmail.js": "44",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\dropdowns.js": "45",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\dateFormat.js": "46",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\Dashboard\\datas.js": "47",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\products\\useGetProducts.js": "48",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\index.js": "49",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\orderSlip.js": "50",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\types.js": "51",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\index.js": "52",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\calculateSubTotal.js": "53",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\getAmount.js": "54",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\formatDate.js": "55",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\types.js": "56",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\index.js": "57",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\index.js": "58",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\Table\\index.js": "59",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\index.js": "60",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\appBar\\index.js": "61",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\index.js": "62",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\products\\index.js": "63",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DailyReport\\index.js": "64",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Constants\\schedules.js": "65",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Services\\ProductServices.js": "66",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Services\\DropdownServices.js": "67",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\PaymentTransactionTable\\index.js": "68",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\index.js": "69",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\IncidentReports\\index.js": "70",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Services\\SchedulerServices.js": "71",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\index.js": "72",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\styles.js": "73",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\useGetLogs.js": "74",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Styles\\toggleableContainer.js": "75",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\useOrderViaField.js": "76",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\print\\index.js": "77",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\orderSlipConfig.js": "78",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\useReports.js": "79",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\Documents\\filteringPanelDocs.js": "80",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\Controllers\\useSchedulerFilter.js": "81",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\grillMenus.js": "82",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\styles.js": "83",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\products\\styles.js": "84",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\useDirectAndThirdParty.js": "85",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\Documents\\incidentReportDocs.js": "86",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\products\\table.js": "87",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\PaymentTransactionTable\\partnerMerchantModal.js": "88",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\PaymentTransactionTable\\PaymentTransactionPrint.js": "89",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\modal.js": "90",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\PaymentTransactionTable\\styles.js": "91",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Styles\\index.js": "92",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\paymentForm.js": "93",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\sort.js": "94",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Constants\\products.js": "95",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\index.js": "96",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\index.js": "97",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Services\\index.js": "98",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\styles.js": "99",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\types.js": "100",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\orderVia.js": "101",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\input.js": "102",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\Panel\\index.js": "103",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\useDropdownGroup.js": "104",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\Controllers\\FilteringPanelMethods.js": "105",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\getWeekOfDate.js": "106",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\0.container\\index.js": "107",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\Controllers\\PrintMethods.js": "108",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\styles.js": "109",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\print\\styles.js": "110",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\print\\print.js": "111",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\index.js": "112",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\ExcelFormatter\\ExcelFormatter.js": "113",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTable\\index.js": "114",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTableView\\index.js": "115",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\formatNumber.js": "116",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\partialModal.js": "117",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\DiscountAndOthersDialog.js": "118",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\index.js": "119",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\index.js": "120",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\LogServices.js": "121",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\_dummy.js": "122",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\calculateTotalAmountPaid.js": "123",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\calculateTotalCost.js": "124",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\useGetBranches.js": "125",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\ComponentToPrint.js": "126",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\Panel\\styles.js": "127",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\dropdownList.js": "128",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\ExcelExporter\\ItemizedExportService.js": "129",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\0.container\\styles.js": "130",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceTotalSumofItems.js": "131",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\useProductServices.js": "132",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceReports.js": "133",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\findDataHandler.js": "134",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceListOfDates.js": "135",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceProductList.js": "136",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceDataOfEachDate.js": "137",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\commonStyles\\index.js": "138",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\ExcelFormatter\\ExcelFormatter.js": "139",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\sumArray.js": "140",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\print\\ComponentToPrint.js": "141",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\viewProduct.js": "142",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTableView\\useProductTableView.js": "143",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\index.js": "144",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTableView\\ledgerView.js": "145",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\generatedNoString.js": "146",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\Documents\\receivingProductReport.js": "147",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTable\\modal.js": "148",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTable\\editModal.js": "149",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\statusField.js": "150",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\formatNumber.js": "151",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\2.menu\\index.js": "152",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Services\\ReceivingReportServices.js": "153",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\dropdowns.js": "154",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\sorting.js": "155",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\1.banner\\index.js": "156",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\produceTotalPurchases.js": "157",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\number.js": "158",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\datePicker.js": "159",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\ExcelFormatter\\ExcelConstantDataRow.js": "160",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\chips.js": "161",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\dateTimePicker.js": "162",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\textArea.js": "163",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTable\\useReceivedReport.js": "164",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\ExcelFormatter\\ExcelConstantDataRow.js": "165",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DailyReport\\dailyReportType.js": "166",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DailyReport\\servedReportType.js": "167",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\uploads\\index.js": "168",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\hook.js": "169",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\groupPaymentPrint.js": "170",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\base\\index.js": "171",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dialog\\index.js": "172",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\Select\\index.js": "173",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\1.banner\\styles.js": "174",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\RangePicker\\index.js": "175",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.login\\styles.js": "176",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\Timepicker\\index.js": "177",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\handleAutoFill.js": "178",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\uploads\\useGetUploads.js": "179",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\styles.js": "180",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\index.js": "181",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\index.js": "182",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\DropdownServicess.js": "183",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\selectComponentHandler.js": "184",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\SchedulesServicess.js": "185",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\rangeHandler.js": "186",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\PrintComponent.js": "187",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\hook.js": "188",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\PrintComponent.js": "189",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\hook.js": "190",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\LiquidChart\\index.js": "191",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\checkDate.js": "192",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\addMinusDay.js": "193",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\appBar\\UserInfoCard.js": "194",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\appBar\\appBarStyles.js": "195",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\useGetUsers.js": "196",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\styles.js": "197",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\userCard.js": "198",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\identifyDateRange.js": "199",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\formatDataSource.js": "200",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\schedulerSchema.js": "201",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\appBar\\userInfoStyles.js": "202",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\edit.js": "203",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\useHandleModal.js": "204",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\index.js": "205",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\tags\\index.js": "206",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\backdrop\\styles.js": "207",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\index.js": "208",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hook.js": "209",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\index.js": "210",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\styles.js": "211",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\dropdown.js": "212",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\dropdownGroup.js": "213",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardScheduler\\index.js": "214",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\findDataHandler.js": "215",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardScheduler\\hooks.js": "216",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\tableColumns.js": "217",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\hookOrderNoCounter.js": "218",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookExcelExporter.js": "219",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\TableSummaryCollectableContents.js": "220",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\TableDailySummaryContent.js": "221",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookPartnerOrders.js": "222",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\styles.js": "223",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookDirectOrders.js": "224",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\TablePartnerOrderContents.js": "225",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\TableDirectOrderContents.js": "226",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookSummaryOfCollectibles.js": "227",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookDailySummary.js": "228",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\tableColumnsPartner.js": "229",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\11.AnalyticsCustomer\\index.js": "230",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\index.js": "231",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\hook.js": "232",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\tableColumns.js": "233",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\PrintComponent.js": "234",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\othersTableColumns.js": "235",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\12.AnalyticsDiscounts\\index.js": "236",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\index.js": "237",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\hook.js": "238",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\PrintComponent.js": "239",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\tableColumns.js": "240",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\discountTableColumns.js": "241",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\index.js": "242",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\hook.js": "243",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\dateDeduction.js": "244",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\PaginateCommands.js": "245",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\columnWidths.js": "246",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\paginate.js": "247",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\FirestoreCommands.js": "248",
    "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\dashboardTransPrint.js": "249"
  },
  {
    "size": 927,
    "mtime": 1612880302000,
    "results": "250",
    "hashOfConfig": "251"
  },
  {
    "size": 7389,
    "mtime": 1634975417289,
    "results": "252",
    "hashOfConfig": "251"
  },
  {
    "size": 1041,
    "mtime": 1631814119444,
    "results": "253",
    "hashOfConfig": "251"
  },
  {
    "size": 401,
    "mtime": 1631814119445,
    "results": "254",
    "hashOfConfig": "251"
  },
  {
    "size": 1513,
    "mtime": 1614533720827,
    "results": "255",
    "hashOfConfig": "251"
  },
  {
    "size": 446,
    "mtime": 1613208006000,
    "results": "256",
    "hashOfConfig": "251"
  },
  {
    "size": 552,
    "mtime": 1616518542637,
    "results": "257",
    "hashOfConfig": "251"
  },
  {
    "size": 1581,
    "mtime": 1631116851264,
    "results": "258",
    "hashOfConfig": "251"
  },
  {
    "size": 1217,
    "mtime": 1631116851329,
    "results": "259",
    "hashOfConfig": "251"
  },
  {
    "size": 1640,
    "mtime": 1631116851110,
    "results": "260",
    "hashOfConfig": "251"
  },
  {
    "size": 883,
    "mtime": 1635010883219,
    "results": "261",
    "hashOfConfig": "251"
  },
  {
    "size": 208,
    "mtime": 1621195128250,
    "results": "262",
    "hashOfConfig": "251"
  },
  {
    "size": 5379,
    "mtime": 1633876033533,
    "results": "263",
    "hashOfConfig": "251"
  },
  {
    "size": 603,
    "mtime": 1631814119455,
    "results": "264",
    "hashOfConfig": "251"
  },
  {
    "size": 661,
    "mtime": 1633085214734,
    "results": "265",
    "hashOfConfig": "251"
  },
  {
    "size": 12527,
    "mtime": 1631116851328,
    "results": "266",
    "hashOfConfig": "251"
  },
  {
    "size": 1778,
    "mtime": 1616478621556,
    "results": "267",
    "hashOfConfig": "251"
  },
  {
    "size": 2422,
    "mtime": 1615718971432,
    "results": "268",
    "hashOfConfig": "251"
  },
  {
    "size": 271,
    "mtime": 1631116851388,
    "results": "269",
    "hashOfConfig": "251"
  },
  {
    "size": 1197,
    "mtime": 1617638466589,
    "results": "270",
    "hashOfConfig": "251"
  },
  {
    "size": 2414,
    "mtime": 1632986576315,
    "results": "271",
    "hashOfConfig": "251"
  },
  {
    "size": 252,
    "mtime": 1613297674000,
    "results": "272",
    "hashOfConfig": "251"
  },
  {
    "size": 2356,
    "mtime": 1631116851340,
    "results": "273",
    "hashOfConfig": "251"
  },
  {
    "size": 1313,
    "mtime": 1633396084400,
    "results": "274",
    "hashOfConfig": "251"
  },
  {
    "size": 4909,
    "mtime": 1631116851371,
    "results": "275",
    "hashOfConfig": "251"
  },
  {
    "size": 1124,
    "mtime": 1631116851352,
    "results": "276",
    "hashOfConfig": "251"
  },
  {
    "size": 1320,
    "mtime": 1631116851356,
    "results": "277",
    "hashOfConfig": "251"
  },
  {
    "size": 1411,
    "mtime": 1631116851358,
    "results": "278",
    "hashOfConfig": "251"
  },
  {
    "size": 1115,
    "mtime": 1617030202019,
    "results": "279",
    "hashOfConfig": "251"
  },
  {
    "size": 13635,
    "mtime": 1635320472944,
    "results": "280",
    "hashOfConfig": "251"
  },
  {
    "size": 1395,
    "mtime": 1631116851357,
    "results": "281",
    "hashOfConfig": "251"
  },
  {
    "size": 116,
    "mtime": 1631116850922,
    "results": "282",
    "hashOfConfig": "251"
  },
  {
    "size": 677,
    "mtime": 1631116850637,
    "results": "283",
    "hashOfConfig": "251"
  },
  {
    "size": 3525,
    "mtime": 1633876187829,
    "results": "284",
    "hashOfConfig": "251"
  },
  {
    "size": 915,
    "mtime": 1631116851028,
    "results": "285",
    "hashOfConfig": "251"
  },
  {
    "size": 501,
    "mtime": 1631116851372,
    "results": "286",
    "hashOfConfig": "251"
  },
  {
    "size": 1189,
    "mtime": 1631116851330,
    "results": "287",
    "hashOfConfig": "251"
  },
  {
    "size": 431,
    "mtime": 1616088151541,
    "results": "288",
    "hashOfConfig": "251"
  },
  {
    "size": 373,
    "mtime": 1631116851381,
    "results": "289",
    "hashOfConfig": "251"
  },
  {
    "size": 789,
    "mtime": 1616522096258,
    "results": "290",
    "hashOfConfig": "251"
  },
  {
    "size": 1083,
    "mtime": 1631116851341,
    "results": "291",
    "hashOfConfig": "251"
  },
  {
    "size": 1149,
    "mtime": 1617656213757,
    "results": "292",
    "hashOfConfig": "251"
  },
  {
    "size": 2478,
    "mtime": 1633144361854,
    "results": "293",
    "hashOfConfig": "251"
  },
  {
    "size": 301,
    "mtime": 1631116851035,
    "results": "294",
    "hashOfConfig": "251"
  },
  {
    "size": 2005,
    "mtime": 1631116851219,
    "results": "295",
    "hashOfConfig": "251"
  },
  {
    "size": 915,
    "mtime": 1631164882316,
    "results": "296",
    "hashOfConfig": "251"
  },
  {
    "size": 435935,
    "mtime": 1631116851363,
    "results": "297",
    "hashOfConfig": "251"
  },
  {
    "size": 549,
    "mtime": 1617669108648,
    "results": "298",
    "hashOfConfig": "251"
  },
  {
    "size": 2748,
    "mtime": 1631116850658,
    "results": "299",
    "hashOfConfig": "251"
  },
  {
    "size": 5848,
    "mtime": 1633144362106,
    "results": "300",
    "hashOfConfig": "251"
  },
  {
    "size": 732,
    "mtime": 1631116851109,
    "results": "301",
    "hashOfConfig": "251"
  },
  {
    "size": 2551,
    "mtime": 1631116850921,
    "results": "302",
    "hashOfConfig": "251"
  },
  {
    "size": 328,
    "mtime": 1627014515683,
    "results": "303",
    "hashOfConfig": "251"
  },
  {
    "size": 252,
    "mtime": 1615135473307,
    "results": "304",
    "hashOfConfig": "251"
  },
  {
    "size": 466,
    "mtime": 1631116851037,
    "results": "305",
    "hashOfConfig": "251"
  },
  {
    "size": 3523,
    "mtime": 1634046848688,
    "results": "306",
    "hashOfConfig": "251"
  },
  {
    "size": 61,
    "mtime": 1612795178000,
    "results": "307",
    "hashOfConfig": "251"
  },
  {
    "size": 13406,
    "mtime": 1633407095195,
    "results": "308",
    "hashOfConfig": "251"
  },
  {
    "size": 2485,
    "mtime": 1615714906435,
    "results": "309",
    "hashOfConfig": "251"
  },
  {
    "size": 1938,
    "mtime": 1617657810462,
    "results": "310",
    "hashOfConfig": "251"
  },
  {
    "size": 3485,
    "mtime": 1631116851118,
    "results": "311",
    "hashOfConfig": "251"
  },
  {
    "size": 2391,
    "mtime": 1631116850635,
    "results": "312",
    "hashOfConfig": "251"
  },
  {
    "size": 1298,
    "mtime": 1631116851179,
    "results": "313",
    "hashOfConfig": "251"
  },
  {
    "size": 3509,
    "mtime": 1631814119442,
    "results": "314",
    "hashOfConfig": "251"
  },
  {
    "size": 3553,
    "mtime": 1631116850927,
    "results": "315",
    "hashOfConfig": "251"
  },
  {
    "size": 1881,
    "mtime": 1631116850933,
    "results": "316",
    "hashOfConfig": "251"
  },
  {
    "size": 1163,
    "mtime": 1631116850929,
    "results": "317",
    "hashOfConfig": "251"
  },
  {
    "size": 11843,
    "mtime": 1635319985819,
    "results": "318",
    "hashOfConfig": "251"
  },
  {
    "size": 1519,
    "mtime": 1631116850787,
    "results": "319",
    "hashOfConfig": "251"
  },
  {
    "size": 2178,
    "mtime": 1634065747406,
    "results": "320",
    "hashOfConfig": "251"
  },
  {
    "size": 2818,
    "mtime": 1631116850943,
    "results": "321",
    "hashOfConfig": "251"
  },
  {
    "size": 11937,
    "mtime": 1635313031096,
    "results": "322",
    "hashOfConfig": "251"
  },
  {
    "size": 478,
    "mtime": 1631116850659,
    "results": "323",
    "hashOfConfig": "251"
  },
  {
    "size": 531,
    "mtime": 1632280796259,
    "results": "324",
    "hashOfConfig": "251"
  },
  {
    "size": 736,
    "mtime": 1631116850967,
    "results": "325",
    "hashOfConfig": "251"
  },
  {
    "size": 1709,
    "mtime": 1631116851265,
    "results": "326",
    "hashOfConfig": "251"
  },
  {
    "size": 10300,
    "mtime": 1633144362069,
    "results": "327",
    "hashOfConfig": "251"
  },
  {
    "size": 3895,
    "mtime": 1634058032922,
    "results": "328",
    "hashOfConfig": "251"
  },
  {
    "size": 7848,
    "mtime": 1633410494434,
    "results": "329",
    "hashOfConfig": "251"
  },
  {
    "size": 5261,
    "mtime": 1633396084391,
    "results": "330",
    "hashOfConfig": "251"
  },
  {
    "size": 4781,
    "mtime": 1631116850654,
    "results": "331",
    "hashOfConfig": "251"
  },
  {
    "size": 5681,
    "mtime": 1631814119453,
    "results": "332",
    "hashOfConfig": "251"
  },
  {
    "size": 195,
    "mtime": 1631116851267,
    "results": "333",
    "hashOfConfig": "251"
  },
  {
    "size": 350,
    "mtime": 1617042746980,
    "results": "334",
    "hashOfConfig": "251"
  },
  {
    "size": 3460,
    "mtime": 1631116850625,
    "results": "335",
    "hashOfConfig": "251"
  },
  {
    "size": 1380,
    "mtime": 1631116850851,
    "results": "336",
    "hashOfConfig": "251"
  },
  {
    "size": 3887,
    "mtime": 1631116851208,
    "results": "337",
    "hashOfConfig": "251"
  },
  {
    "size": 14017,
    "mtime": 1631116850801,
    "results": "338",
    "hashOfConfig": "251"
  },
  {
    "size": 5791,
    "mtime": 1635320053857,
    "results": "339",
    "hashOfConfig": "251"
  },
  {
    "size": 6688,
    "mtime": 1631116850731,
    "results": "340",
    "hashOfConfig": "251"
  },
  {
    "size": 1174,
    "mtime": 1631116850802,
    "results": "341",
    "hashOfConfig": "251"
  },
  {
    "size": 1576,
    "mtime": 1631116850966,
    "results": "342",
    "hashOfConfig": "251"
  },
  {
    "size": 9987,
    "mtime": 1635315163438,
    "results": "343",
    "hashOfConfig": "251"
  },
  {
    "size": 91,
    "mtime": 1617668723648,
    "results": "344",
    "hashOfConfig": "251"
  },
  {
    "size": 101,
    "mtime": 1631116850923,
    "results": "345",
    "hashOfConfig": "251"
  },
  {
    "size": 850,
    "mtime": 1631116850867,
    "results": "346",
    "hashOfConfig": "251"
  },
  {
    "size": 12044,
    "mtime": 1633407035947,
    "results": "347",
    "hashOfConfig": "251"
  },
  {
    "size": 1208,
    "mtime": 1631116850912,
    "results": "348",
    "hashOfConfig": "251"
  },
  {
    "size": 1175,
    "mtime": 1631116851108,
    "results": "349",
    "hashOfConfig": "251"
  },
  {
    "size": 581,
    "mtime": 1619003529388,
    "results": "350",
    "hashOfConfig": "251"
  },
  {
    "size": 3063,
    "mtime": 1619003529386,
    "results": "351",
    "hashOfConfig": "251"
  },
  {
    "size": 916,
    "mtime": 1619003529385,
    "results": "352",
    "hashOfConfig": "251"
  },
  {
    "size": 1218,
    "mtime": 1631116850656,
    "results": "353",
    "hashOfConfig": "251"
  },
  {
    "size": 580,
    "mtime": 1617644419221,
    "results": "354",
    "hashOfConfig": "251"
  },
  {
    "size": 2858,
    "mtime": 1631116850648,
    "results": "355",
    "hashOfConfig": "251"
  },
  {
    "size": 409,
    "mtime": 1631116851032,
    "results": "356",
    "hashOfConfig": "251"
  },
  {
    "size": 863,
    "mtime": 1633310574106,
    "results": "357",
    "hashOfConfig": "251"
  },
  {
    "size": 1658,
    "mtime": 1631116850821,
    "results": "358",
    "hashOfConfig": "251"
  },
  {
    "size": 449,
    "mtime": 1617008240264,
    "results": "359",
    "hashOfConfig": "251"
  },
  {
    "size": 1104,
    "mtime": 1617673159479,
    "results": "360",
    "hashOfConfig": "251"
  },
  {
    "size": 724,
    "mtime": 1617652970389,
    "results": "361",
    "hashOfConfig": "251"
  },
  {
    "size": 1774,
    "mtime": 1631116850708,
    "results": "362",
    "hashOfConfig": "251"
  },
  {
    "size": 17030,
    "mtime": 1633410133833,
    "results": "363",
    "hashOfConfig": "251"
  },
  {
    "size": 2099,
    "mtime": 1631116850768,
    "results": "364",
    "hashOfConfig": "251"
  },
  {
    "size": 1140,
    "mtime": 1631116850777,
    "results": "365",
    "hashOfConfig": "251"
  },
  {
    "size": 251,
    "mtime": 1619003529378,
    "results": "366",
    "hashOfConfig": "251"
  },
  {
    "size": 7248,
    "mtime": 1631116851092,
    "results": "367",
    "hashOfConfig": "251"
  },
  {
    "size": 10567,
    "mtime": 1635301829432,
    "results": "368",
    "hashOfConfig": "251"
  },
  {
    "size": 5528,
    "mtime": 1619003529383,
    "results": "369",
    "hashOfConfig": "251"
  },
  {
    "size": 155,
    "mtime": 1631116850533,
    "results": "370",
    "hashOfConfig": "251"
  },
  {
    "size": 1052,
    "mtime": 1632986576334,
    "results": "371",
    "hashOfConfig": "251"
  },
  {
    "size": 42,
    "mtime": 1631116850913,
    "results": "372",
    "hashOfConfig": "251"
  },
  {
    "size": 433,
    "mtime": 1631116850871,
    "results": "373",
    "hashOfConfig": "251"
  },
  {
    "size": 239,
    "mtime": 1631116850872,
    "results": "374",
    "hashOfConfig": "251"
  },
  {
    "size": 730,
    "mtime": 1617652753845,
    "results": "375",
    "hashOfConfig": "251"
  },
  {
    "size": 145,
    "mtime": 1631116850820,
    "results": "376",
    "hashOfConfig": "251"
  },
  {
    "size": 646,
    "mtime": 1631116850657,
    "results": "377",
    "hashOfConfig": "251"
  },
  {
    "size": 2846,
    "mtime": 1619003529382,
    "results": "378",
    "hashOfConfig": "251"
  },
  {
    "size": 636,
    "mtime": 1631116850637,
    "results": "379",
    "hashOfConfig": "251"
  },
  {
    "size": 1060,
    "mtime": 1633310574107,
    "results": "380",
    "hashOfConfig": "251"
  },
  {
    "size": 1762,
    "mtime": 1631116850602,
    "results": "381",
    "hashOfConfig": "251"
  },
  {
    "size": 1156,
    "mtime": 1631116850733,
    "results": "382",
    "hashOfConfig": "251"
  },
  {
    "size": 519,
    "mtime": 1631116850601,
    "results": "383",
    "hashOfConfig": "251"
  },
  {
    "size": 598,
    "mtime": 1632986576329,
    "results": "384",
    "hashOfConfig": "251"
  },
  {
    "size": 455,
    "mtime": 1631116850599,
    "results": "385",
    "hashOfConfig": "251"
  },
  {
    "size": 538,
    "mtime": 1631116850600,
    "results": "386",
    "hashOfConfig": "251"
  },
  {
    "size": 1623,
    "mtime": 1631116850598,
    "results": "387",
    "hashOfConfig": "251"
  },
  {
    "size": 331,
    "mtime": 1616478770713,
    "results": "388",
    "hashOfConfig": "251"
  },
  {
    "size": 639,
    "mtime": 1631116850627,
    "results": "389",
    "hashOfConfig": "251"
  },
  {
    "size": 2303,
    "mtime": 1632986576169,
    "results": "390",
    "hashOfConfig": "251"
  },
  {
    "size": 144,
    "mtime": 1614854336491,
    "results": "391",
    "hashOfConfig": "251"
  },
  {
    "size": 1053,
    "mtime": 1631116850734,
    "results": "392",
    "hashOfConfig": "251"
  },
  {
    "size": 2319,
    "mtime": 1631116850787,
    "results": "393",
    "hashOfConfig": "251"
  },
  {
    "size": 5206,
    "mtime": 1632986576253,
    "results": "394",
    "hashOfConfig": "251"
  },
  {
    "size": 2717,
    "mtime": 1631116850785,
    "results": "395",
    "hashOfConfig": "251"
  },
  {
    "size": 350,
    "mtime": 1631116851031,
    "results": "396",
    "hashOfConfig": "251"
  },
  {
    "size": 2739,
    "mtime": 1631116850866,
    "results": "397",
    "hashOfConfig": "251"
  },
  {
    "size": 3324,
    "mtime": 1631116850769,
    "results": "398",
    "hashOfConfig": "251"
  },
  {
    "size": 5660,
    "mtime": 1631116850767,
    "results": "399",
    "hashOfConfig": "251"
  },
  {
    "size": 2249,
    "mtime": 1619003529386,
    "results": "400",
    "hashOfConfig": "251"
  },
  {
    "size": 251,
    "mtime": 1631116851030,
    "results": "401",
    "hashOfConfig": "251"
  },
  {
    "size": 4104,
    "mtime": 1633876187076,
    "results": "402",
    "hashOfConfig": "251"
  },
  {
    "size": 3038,
    "mtime": 1631116850942,
    "results": "403",
    "hashOfConfig": "251"
  },
  {
    "size": 2433,
    "mtime": 1631116851064,
    "results": "404",
    "hashOfConfig": "251"
  },
  {
    "size": 209,
    "mtime": 1631116851033,
    "results": "405",
    "hashOfConfig": "251"
  },
  {
    "size": 295,
    "mtime": 1617627233600,
    "results": "406",
    "hashOfConfig": "251"
  },
  {
    "size": 358,
    "mtime": 1631116850732,
    "results": "407",
    "hashOfConfig": "251"
  },
  {
    "size": 393,
    "mtime": 1615146808683,
    "results": "408",
    "hashOfConfig": "251"
  },
  {
    "size": 356,
    "mtime": 1614528130337,
    "results": "409",
    "hashOfConfig": "251"
  },
  {
    "size": 204,
    "mtime": 1631116850626,
    "results": "410",
    "hashOfConfig": "251"
  },
  {
    "size": 595,
    "mtime": 1611677782000,
    "results": "411",
    "hashOfConfig": "251"
  },
  {
    "size": 784,
    "mtime": 1619003529381,
    "results": "412",
    "hashOfConfig": "251"
  },
  {
    "size": 751,
    "mtime": 1631116851177,
    "results": "413",
    "hashOfConfig": "251"
  },
  {
    "size": 3099,
    "mtime": 1631116850776,
    "results": "414",
    "hashOfConfig": "251"
  },
  {
    "size": 1333,
    "mtime": 1631116850869,
    "results": "415",
    "hashOfConfig": "251"
  },
  {
    "size": 20968,
    "mtime": 1634970561929,
    "results": "416",
    "hashOfConfig": "251"
  },
  {
    "size": 26706,
    "mtime": 1634972498833,
    "results": "417",
    "hashOfConfig": "251"
  },
  {
    "size": 619,
    "mtime": 1617779152923,
    "results": "418",
    "hashOfConfig": "251"
  },
  {
    "size": 10029,
    "mtime": 1634064030169,
    "results": "419",
    "hashOfConfig": "251"
  },
  {
    "size": 2585,
    "mtime": 1631116851174,
    "results": "420",
    "hashOfConfig": "251"
  },
  {
    "size": 2316,
    "mtime": 1633077080750,
    "results": "421",
    "hashOfConfig": "251"
  },
  {
    "size": 2563,
    "mtime": 1631116851173,
    "results": "422",
    "hashOfConfig": "251"
  },
  {
    "size": 566,
    "mtime": 1631116850531,
    "results": "423",
    "hashOfConfig": "251"
  },
  {
    "size": 454,
    "mtime": 1612976482000,
    "results": "424",
    "hashOfConfig": "251"
  },
  {
    "size": 626,
    "mtime": 1631116850530,
    "results": "425",
    "hashOfConfig": "251"
  },
  {
    "size": 1166,
    "mtime": 1612976302000,
    "results": "426",
    "hashOfConfig": "251"
  },
  {
    "size": 360,
    "mtime": 1631116850532,
    "results": "427",
    "hashOfConfig": "251"
  },
  {
    "size": 1836,
    "mtime": 1631116851175,
    "results": "428",
    "hashOfConfig": "251"
  },
  {
    "size": 2879,
    "mtime": 1617864538295,
    "results": "429",
    "hashOfConfig": "251"
  },
  {
    "size": 201,
    "mtime": 1631116850533,
    "results": "430",
    "hashOfConfig": "251"
  },
  {
    "size": 3406,
    "mtime": 1633311059296,
    "results": "431",
    "hashOfConfig": "251"
  },
  {
    "size": 3526,
    "mtime": 1632986576188,
    "results": "432",
    "hashOfConfig": "251"
  },
  {
    "size": 1023,
    "mtime": 1632986576332,
    "results": "433",
    "hashOfConfig": "251"
  },
  {
    "size": 502,
    "mtime": 1631116851375,
    "results": "434",
    "hashOfConfig": "251"
  },
  {
    "size": 2706,
    "mtime": 1633085214736,
    "results": "435",
    "hashOfConfig": "251"
  },
  {
    "size": 2618,
    "mtime": 1634996391616,
    "results": "436",
    "hashOfConfig": "251"
  },
  {
    "size": 5386,
    "mtime": 1631814119448,
    "results": "437",
    "hashOfConfig": "251"
  },
  {
    "size": 10169,
    "mtime": 1634064243631,
    "results": "438",
    "hashOfConfig": "251"
  },
  {
    "size": 5381,
    "mtime": 1633311356348,
    "results": "439",
    "hashOfConfig": "251"
  },
  {
    "size": 9913,
    "mtime": 1634970217780,
    "results": "440",
    "hashOfConfig": "251"
  },
  {
    "size": 622,
    "mtime": 1631116850789,
    "results": "441",
    "hashOfConfig": "251"
  },
  {
    "size": 125,
    "mtime": 1631116851029,
    "results": "442",
    "hashOfConfig": "251"
  },
  {
    "size": 276,
    "mtime": 1631116851027,
    "results": "443",
    "hashOfConfig": "251"
  },
  {
    "size": 5004,
    "mtime": 1631116851112,
    "results": "444",
    "hashOfConfig": "251"
  },
  {
    "size": 1828,
    "mtime": 1615211864907,
    "results": "445",
    "hashOfConfig": "251"
  },
  {
    "size": 918,
    "mtime": 1617657907810,
    "results": "446",
    "hashOfConfig": "251"
  },
  {
    "size": 161,
    "mtime": 1616482832147,
    "results": "447",
    "hashOfConfig": "251"
  },
  {
    "size": 3255,
    "mtime": 1617631687227,
    "results": "448",
    "hashOfConfig": "251"
  },
  {
    "size": 1038,
    "mtime": 1612983962000,
    "results": "449",
    "hashOfConfig": "251"
  },
  {
    "size": 2351,
    "mtime": 1631814119451,
    "results": "450",
    "hashOfConfig": "251"
  },
  {
    "size": 2954,
    "mtime": 1633140700356,
    "results": "451",
    "hashOfConfig": "251"
  },
  {
    "size": 376,
    "mtime": 1631116851119,
    "results": "452",
    "hashOfConfig": "251"
  },
  {
    "size": 2435,
    "mtime": 1616506020625,
    "results": "453",
    "hashOfConfig": "251"
  },
  {
    "size": 406,
    "mtime": 1617657574033,
    "results": "454",
    "hashOfConfig": "251"
  },
  {
    "size": 63,
    "mtime": 1611396980000,
    "results": "455",
    "hashOfConfig": "251"
  },
  {
    "size": 665,
    "mtime": 1616505423040,
    "results": "456",
    "hashOfConfig": "251"
  },
  {
    "size": 253,
    "mtime": 1613305496000,
    "results": "457",
    "hashOfConfig": "251"
  },
  {
    "size": 7281,
    "mtime": 1633156040924,
    "results": "458",
    "hashOfConfig": "251"
  },
  {
    "size": 3843,
    "mtime": 1633144361899,
    "results": "459",
    "hashOfConfig": "251"
  },
  {
    "size": 4186,
    "mtime": 1617644861753,
    "results": "460",
    "hashOfConfig": "251"
  },
  {
    "size": 1821,
    "mtime": 1617641725744,
    "results": "461",
    "hashOfConfig": "251"
  },
  {
    "size": 4099,
    "mtime": 1617642063111,
    "results": "462",
    "hashOfConfig": "251"
  },
  {
    "size": 1690,
    "mtime": 1617643947454,
    "results": "463",
    "hashOfConfig": "251"
  },
  {
    "size": 408,
    "mtime": 1632986576217,
    "results": "464",
    "hashOfConfig": "251"
  },
  {
    "size": 622,
    "mtime": 1632986576250,
    "results": "465",
    "hashOfConfig": "251"
  },
  {
    "size": 1781,
    "mtime": 1632986576216,
    "results": "466",
    "hashOfConfig": "251"
  },
  {
    "size": 4230,
    "mtime": 1633144362005,
    "results": "467",
    "hashOfConfig": "251"
  },
  {
    "size": 1136,
    "mtime": 1633085214734,
    "results": "468",
    "hashOfConfig": "251"
  },
  {
    "size": 11310,
    "mtime": 1633144361952,
    "results": "469",
    "hashOfConfig": "251"
  },
  {
    "size": 1123,
    "mtime": 1633144361895,
    "results": "470",
    "hashOfConfig": "251"
  },
  {
    "size": 2084,
    "mtime": 1633144361891,
    "results": "471",
    "hashOfConfig": "251"
  },
  {
    "size": 4444,
    "mtime": 1633144361963,
    "results": "472",
    "hashOfConfig": "251"
  },
  {
    "size": 109,
    "mtime": 1633144361975,
    "results": "473",
    "hashOfConfig": "251"
  },
  {
    "size": 6303,
    "mtime": 1633144361941,
    "results": "474",
    "hashOfConfig": "251"
  },
  {
    "size": 2540,
    "mtime": 1633144361894,
    "results": "475",
    "hashOfConfig": "251"
  },
  {
    "size": 2112,
    "mtime": 1633144361892,
    "results": "476",
    "hashOfConfig": "251"
  },
  {
    "size": 1804,
    "mtime": 1633144361964,
    "results": "477",
    "hashOfConfig": "251"
  },
  {
    "size": 4350,
    "mtime": 1633144361930,
    "results": "478",
    "hashOfConfig": "251"
  },
  {
    "size": 3883,
    "mtime": 1633144362053,
    "results": "479",
    "hashOfConfig": "251"
  },
  {
    "size": 1159,
    "mtime": 1633162648020,
    "results": "480",
    "hashOfConfig": "251"
  },
  {
    "size": 12064,
    "mtime": 1633434420306,
    "results": "481",
    "hashOfConfig": "251"
  },
  {
    "size": 3932,
    "mtime": 1633433495572,
    "results": "482",
    "hashOfConfig": "251"
  },
  {
    "size": 5394,
    "mtime": 1634065410059,
    "results": "483",
    "hashOfConfig": "251"
  },
  {
    "size": 4092,
    "mtime": 1633424102384,
    "results": "484",
    "hashOfConfig": "251"
  },
  {
    "size": 3786,
    "mtime": 1634065464508,
    "results": "485",
    "hashOfConfig": "251"
  },
  {
    "size": 1178,
    "mtime": 1633876303709,
    "results": "486",
    "hashOfConfig": "251"
  },
  {
    "size": 5011,
    "mtime": 1633968411211,
    "results": "487",
    "hashOfConfig": "251"
  },
  {
    "size": 3868,
    "mtime": 1633970137901,
    "results": "488",
    "hashOfConfig": "251"
  },
  {
    "size": 2199,
    "mtime": 1633966462372,
    "results": "489",
    "hashOfConfig": "251"
  },
  {
    "size": 1350,
    "mtime": 1633970187592,
    "results": "490",
    "hashOfConfig": "251"
  },
  {
    "size": 2282,
    "mtime": 1633968984402,
    "results": "491",
    "hashOfConfig": "251"
  },
  {
    "size": 16796,
    "mtime": 1635319811913,
    "results": "492",
    "hashOfConfig": "251"
  },
  {
    "size": 1296,
    "mtime": 1635008642749,
    "results": "493",
    "hashOfConfig": "251"
  },
  {
    "size": 250,
    "mtime": 1634996244945,
    "results": "494",
    "hashOfConfig": "251"
  },
  {
    "size": 2128,
    "mtime": 1635313434045,
    "results": "495",
    "hashOfConfig": "251"
  },
  {
    "size": 2508,
    "mtime": 1635147395992,
    "results": "496",
    "hashOfConfig": "251"
  },
  {
    "size": 1901,
    "mtime": 1635305961990,
    "results": "497",
    "hashOfConfig": "251"
  },
  {
    "size": 937,
    "mtime": 1635301367598,
    "results": "498",
    "hashOfConfig": "251"
  },
  {
    "size": 4295,
    "mtime": 1635322043125,
    "results": "499",
    "hashOfConfig": "251"
  },
  {
    "filePath": "500",
    "messages": "501",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  "166rgf3",
  {
    "filePath": "503",
    "messages": "504",
    "errorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "505",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "506",
    "messages": "507",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "508",
    "messages": "509",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "510",
    "messages": "511",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "512",
    "messages": "513",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "514",
    "messages": "515",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "516",
    "messages": "517",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "518",
    "messages": "519",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "520",
    "messages": "521",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "522",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "523",
    "messages": "524",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "525",
    "messages": "526",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "527",
    "messages": "528",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "529",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "530",
    "messages": "531",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "532",
    "messages": "533",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "534",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "535",
    "messages": "536",
    "errorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "537",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "538",
    "messages": "539",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "540",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "541",
    "messages": "542",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "543",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "544",
    "messages": "545",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "546",
    "messages": "547",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "548",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "549",
    "messages": "550",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "551",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "552",
    "messages": "553",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "554",
    "messages": "555",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "556",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "557",
    "messages": "558",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "559",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "560",
    "messages": "561",
    "errorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "562",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "563",
    "messages": "564",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "565",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "566",
    "messages": "567",
    "errorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "568",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "569",
    "messages": "570",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "571",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "572",
    "messages": "573",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "574",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "575",
    "messages": "576",
    "errorCount": 0,
    "warningCount": 44,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "577",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "578",
    "messages": "579",
    "errorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "580",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "581",
    "messages": "582",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "583",
    "messages": "584",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "585",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "586",
    "messages": "587",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "588",
    "messages": "589",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "590",
    "messages": "591",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "592",
    "messages": "593",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "594",
    "messages": "595",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "596",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "597",
    "messages": "598",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "599",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "600",
    "messages": "601",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "602",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "603",
    "messages": "604",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "605",
    "messages": "606",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "607",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "608",
    "messages": "609",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "610",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "611",
    "messages": "612",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "613",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "614",
    "messages": "615",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "616",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "617",
    "messages": "618",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "619",
    "messages": "620",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "621",
    "messages": "622",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "623",
    "messages": "624",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "625",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "626",
    "messages": "627",
    "errorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "628",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "629",
    "messages": "630",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "631",
    "messages": "632",
    "errorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "633",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "634",
    "messages": "635",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "636",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "637",
    "messages": "638",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "639",
    "messages": "640",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "641",
    "messages": "642",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "643",
    "messages": "644",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "645",
    "messages": "646",
    "errorCount": 0,
    "warningCount": 26,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "647",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "648",
    "messages": "649",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "650",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "651",
    "messages": "652",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "653",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "654",
    "messages": "655",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "656",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "657",
    "messages": "658",
    "errorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "659",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "660",
    "messages": "661",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "662",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "663",
    "messages": "664",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "665",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "666",
    "messages": "667",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "668",
    "messages": "669",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "670",
    "messages": "671",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "672",
    "messages": "673",
    "errorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "674",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "675",
    "messages": "676",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "677",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "678",
    "messages": "679",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "680",
    "messages": "681",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "682",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "683",
    "messages": "684",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "685",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "686",
    "messages": "687",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "688",
    "messages": "689",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "690",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "691",
    "messages": "692",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "693",
    "messages": "694",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "695",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "696",
    "messages": "697",
    "errorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "698",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "699",
    "messages": "700",
    "errorCount": 0,
    "warningCount": 39,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "701",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "702",
    "messages": "703",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "704",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "705",
    "messages": "706",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "707",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "708",
    "messages": "709",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "710",
    "messages": "711",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "712",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "713",
    "messages": "714",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "715",
    "messages": "716",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "717",
    "messages": "718",
    "errorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "719",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "720",
    "messages": "721",
    "errorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "722",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "723",
    "messages": "724",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "725",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "726",
    "messages": "727",
    "errorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "728",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "729",
    "messages": "730",
    "errorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "731",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "732",
    "messages": "733",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "734",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "735",
    "messages": "736",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "737",
    "messages": "738",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "739",
    "messages": "740",
    "errorCount": 0,
    "warningCount": 20,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "741",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "742",
    "messages": "743",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "744",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "745",
    "messages": "746",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "747",
    "messages": "748",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "749",
    "messages": "750",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "751",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "752",
    "messages": "753",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "754",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "755",
    "messages": "756",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "757",
    "messages": "758",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "759",
    "messages": "760",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "761",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "762",
    "messages": "763",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "764",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "765",
    "messages": "766",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "767",
    "messages": "768",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "769",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "770",
    "messages": "771",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "772",
    "messages": "773",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "774",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "775",
    "messages": "776",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "777",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "778",
    "messages": "779",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "780",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "781",
    "messages": "782",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "783",
    "messages": "784",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "785",
    "messages": "786",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "787",
    "messages": "788",
    "errorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "789",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "790",
    "messages": "791",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "792",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "793",
    "messages": "794",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "795",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "796",
    "messages": "797",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "798",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "799",
    "messages": "800",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "801",
    "messages": "802",
    "errorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "803",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "804",
    "messages": "805",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "806",
    "messages": "807",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "808",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "809",
    "messages": "810",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "811",
    "messages": "812",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "813",
    "messages": "814",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "815",
    "messages": "816",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "817",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "818",
    "messages": "819",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "820",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "821",
    "messages": "822",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "823",
    "messages": "824",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "825",
    "messages": "826",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "827",
    "messages": "828",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "829",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "830",
    "messages": "831",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "832",
    "messages": "833",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "834",
    "messages": "835",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "836",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "837",
    "messages": "838",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "839",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "840",
    "messages": "841",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "842",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "843",
    "messages": "844",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "845",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "846",
    "messages": "847",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "848",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "849",
    "messages": "850",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "851",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "852",
    "messages": "853",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "854",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "855",
    "messages": "856",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "857",
    "messages": "858",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "859",
    "messages": "860",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "861",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "862",
    "messages": "863",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "864",
    "messages": "865",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "866",
    "messages": "867",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "868",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "869",
    "messages": "870",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "871",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "872",
    "messages": "873",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "874",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "875",
    "messages": "876",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "877",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "878",
    "messages": "879",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "880",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "881",
    "messages": "882",
    "errorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "883",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "884",
    "messages": "885",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "886",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "887",
    "messages": "888",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "889",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "890",
    "messages": "891",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "892",
    "messages": "893",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "894",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "895",
    "messages": "896",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "897",
    "messages": "898",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "899",
    "messages": "900",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "901",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "902",
    "messages": "903",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "904",
    "messages": "905",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "906",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "907",
    "messages": "908",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "909",
    "messages": "910",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "911",
    "messages": "912",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "913",
    "messages": "914",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "915",
    "messages": "916",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "917",
    "messages": "918",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "919",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "920",
    "messages": "921",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "922",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "923",
    "messages": "924",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "925",
    "messages": "926",
    "errorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "927",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "928",
    "messages": "929",
    "errorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "930",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "931",
    "messages": "932",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "933",
    "messages": "934",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "935",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "936",
    "messages": "937",
    "errorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "938",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "939",
    "messages": "940",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "941",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "942",
    "messages": "943",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "944",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "945",
    "messages": "946",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "947",
    "messages": "948",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "949",
    "messages": "950",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "951",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "952",
    "messages": "953",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "954",
    "messages": "955",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "956",
    "messages": "957",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "958",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "959",
    "messages": "960",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "961",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "962",
    "messages": "963",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "964",
    "messages": "965",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "966",
    "messages": "967",
    "errorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "968",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "969",
    "messages": "970",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "971",
    "messages": "972",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "973"
  },
  {
    "filePath": "974",
    "messages": "975",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "976",
    "messages": "977",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "978",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "979",
    "messages": "980",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "981",
    "messages": "982",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "983",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "984",
    "messages": "985",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "986",
    "messages": "987",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "988",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "989",
    "messages": "990",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "991",
    "messages": "992",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "993",
    "messages": "994",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "995",
    "messages": "996",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "997",
    "messages": "998",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "999",
    "messages": "1000",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1001",
    "messages": "1002",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1003",
    "messages": "1004",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1005",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1006",
    "messages": "1007",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1008",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1009",
    "messages": "1010",
    "errorCount": 0,
    "warningCount": 26,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1011",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1012",
    "messages": "1013",
    "errorCount": 0,
    "warningCount": 31,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1014",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1015",
    "messages": "1016",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1017",
    "messages": "1018",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1019",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1020",
    "messages": "1021",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1022",
    "messages": "1023",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1024",
    "messages": "1025",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1026",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1027",
    "messages": "1028",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1029",
    "messages": "1030",
    "errorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1031",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1032",
    "messages": "1033",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1034",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1035",
    "messages": "1036",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1037",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1038",
    "messages": "1039",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1040",
    "messages": "1041",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1042",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1043",
    "messages": "1044",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1045",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1046",
    "messages": "1047",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1048",
    "messages": "1049",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1050",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1051",
    "messages": "1052",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1053",
    "messages": "1054",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1055",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1056",
    "messages": "1057",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1058",
    "messages": "1059",
    "errorCount": 0,
    "warningCount": 20,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1060",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1061",
    "messages": "1062",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1063",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1064",
    "messages": "1065",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1066",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1067",
    "messages": "1068",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1069",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1070",
    "messages": "1071",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1072",
    "messages": "1073",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1074",
    "messages": "1075",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1076",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1077",
    "messages": "1078",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1079",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1080",
    "messages": "1081",
    "errorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1082",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1083",
    "messages": "1084",
    "errorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1085",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1086",
    "messages": "1087",
    "errorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1088",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1089",
    "messages": "1090",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1091",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1092",
    "messages": "1093",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1094",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1095",
    "messages": "1096",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1097",
    "messages": "1098",
    "errorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1099",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1100",
    "messages": "1101",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1102",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1103",
    "messages": "1104",
    "errorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1105",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1106",
    "messages": "1107",
    "errorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1108",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1109",
    "messages": "1110",
    "errorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1111",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1112",
    "messages": "1113",
    "errorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1114",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1115",
    "messages": "1116",
    "errorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1117",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1118",
    "messages": "1119",
    "errorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1120",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1121",
    "messages": "1122",
    "errorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1123",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1124",
    "messages": "1125",
    "errorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1126",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1127",
    "messages": "1128",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1129",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1130",
    "messages": "1131",
    "errorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1132",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1133",
    "messages": "1134",
    "errorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1135",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1136",
    "messages": "1137",
    "errorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1138",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1139",
    "messages": "1140",
    "errorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1141",
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1142",
    "messages": "1143",
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "502"
  },
  {
    "filePath": "1144",
    "messages": "1145",
    "errorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "1146",
    "usedDeprecatedRules": "502"
  },
  "D:\\Projects\\Scheduler App\\scheduler\\src\\index.js",
  [],
  [
    "1147",
    "1148"
  ],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\App.js",
  [
    "1149",
    "1150",
    "1151",
    "1152",
    "1153",
    "1154",
    "1155",
    "1156",
    "1157"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport GrillReservation from \"containers/1.grill_reservation\"\r\nimport UserMasterfile from \"containers/2.user_masterfile\"\r\nimport BranchMasterfile from \"containers/3.branch_mastefile\"\r\nimport Login from \"containers/0.login\"\r\nimport { auth } from \"services/firebase\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport {\r\n  selectUserSlice,\r\n  setAccountInfo,\r\n} from \"containers/0.NewLogin/loginSlice\"\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport Backdrop from \"components/backdrop\"\r\nimport PaymentTransaction from \"containers/1.payment_transaction\"\r\nimport \"antd/dist/antd.css\"\r\nimport DropdownMasterfile from \"containers/4.dropdown_masterfile\"\r\nimport ProductMasterfile from \"containers/5.product_masterfile\"\r\nimport ReportsContainer from \"containers/6.reports\"\r\nimport { DROPDOWNS, PRODUCTS, ROLES, USERS } from \"services/collectionNames\"\r\nimport {\r\n  DROPDOWN_MASTERFILE,\r\n  PRODUCTS_MASTERFILE,\r\n  ROLES_MASTERFILE,\r\n  useSelectMenus,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport { addData, getData } from \"services\"\r\nimport adminPhoto from \"images/admin-bro.png\"\r\nimport { selectMenuSlice, setMenu } from \"components/sideNav/2.menu/menuSlice\"\r\nimport { Reports } from \"Restructured/Components/Features\"\r\nimport ExcelExporter from \"Restructured/Components/Features/ExcelExporter\"\r\nimport DirectAndThirdParty from \"containers/7.directAndThirdParty\"\r\nimport Inventory from \"containers/8.inventory\"\r\nimport IncidentReports from \"containers/9.incidentReports\"\r\nimport DailyReports from \"containers/10.dailyReports\"\r\nimport Dashboard from \"containers/Dashboard\"\r\nimport NewLogin from \"containers/0.NewLogin\"\r\nimport CustomerReports from \"containers/11.AnalyticsCustomer\"\r\nimport AnalyticsDiscounts from \"containers/12.AnalyticsDiscounts\"\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const [menu, handleMenu] = useSelectMenus()\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [unauthorizedLogin, setUnauthorizedLogin] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        console.log(\"user\", user)\r\n        // User is signed in, see docs for a list of available properties\r\n        // https://firebase.google.com/docs/reference/js/firebase.User\r\n        const uid = user.uid\r\n        const userInfo = {\r\n          displayName: user.displayName,\r\n          email: user.email,\r\n          photoURL: user.photoURL,\r\n        }\r\n        updateInfo(userInfo)\r\n        // ...\r\n      } else {\r\n        // User is signed out\r\n        // ...\r\n        setIsLoggedIn(false)\r\n        setIsLoading(false)\r\n      }\r\n    })\r\n    return () => {\r\n      unsubscribe()\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    dispatch(setMenu(menu))\r\n  }, [menu])\r\n  const updateInfo = async (userInfo) => {\r\n    const result = await getData(USERS, userInfo.email)\r\n    if (result) {\r\n      dispatch(\r\n        setAccountInfo({\r\n          ...userInfo,\r\n          displayName: result.name,\r\n          branches: result.branches,\r\n          branchSelected: result?.branchSelected,\r\n          roles: result.roles,\r\n          isEnabled: result.isEnabled,\r\n          photoURL: result.photoURL,\r\n        })\r\n      )\r\n      setIsLoggedIn(true)\r\n      setIsLoading(false)\r\n      setUnauthorizedLogin(false)\r\n      handleMenu(result.roles)\r\n    } else {\r\n      setIsLoggedIn(true)\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const Routing = () => {\r\n    const userSlice = useSelector(selectUserSlice)\r\n    return (\r\n      <>\r\n        {!userSlice.isEnabled || unauthorizedLogin ? (\r\n          <div\r\n            style={{\r\n              display: \"grid\",\r\n              position: \"fixed\",\r\n              width: \"100vw\",\r\n              backgroundColor: \"white\",\r\n              height: \"100%\",\r\n              zIndex: 1000,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <img src={adminPhoto} style={{ height: \"20rem\" }} />\r\n              <h3>UNAUTHORIZED USER</h3>\r\n              <div>Please contact your system admin for support</div>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Dashboard />\r\n            </Route>\r\n            <Route exact path=\"/dashboard\">\r\n              <Dashboard />\r\n            </Route>\r\n            <Route exact path=\"/dashboard/grillReservation\">\r\n              <GrillReservation />\r\n            </Route>\r\n            <Route exact path=\"/dashboard/paymentTransaction\">\r\n              <PaymentTransaction />\r\n            </Route>\r\n            <Route exact path=\"/dashboard/inventory\">\r\n              <Inventory />\r\n            </Route>\r\n            <Route exact path=\"/masterData/userMasterFile\">\r\n              <UserMasterfile />\r\n            </Route>\r\n            <Route exact path=\"/masterData/branchMasterFile\">\r\n              <BranchMasterfile />\r\n            </Route>\r\n            <Route exact path=\"/masterData/dropdownMasterfile\">\r\n              <DropdownMasterfile\r\n                collectionName={DROPDOWNS}\r\n                breadcrumbs={DROPDOWN_MASTERFILE}\r\n                withDropdownGroup\r\n              />\r\n            </Route>\r\n            <Route exact path=\"/masterData/rolesMasterfile\">\r\n              <DropdownMasterfile\r\n                collectionName={ROLES}\r\n                breadcrumbs={ROLES_MASTERFILE}\r\n              />\r\n            </Route>\r\n            <Route exact path=\"/masterData/productMasterfile\">\r\n              <ProductMasterfile\r\n                collectionName={PRODUCTS}\r\n                breadcrumbs={PRODUCTS_MASTERFILE}\r\n              />\r\n            </Route>\r\n            <Route exact path=\"/reports/paymentTransaction\">\r\n              <ReportsContainer />\r\n            </Route>\r\n            <Route exact path=\"/reports/directAndThirdParty\">\r\n              <DirectAndThirdParty />\r\n            </Route>\r\n            <Route exact path=\"/reports/incidentReports\">\r\n              <IncidentReports />\r\n            </Route>\r\n            <Route exact path=\"/reports/dailyReports\">\r\n              <DailyReports />\r\n            </Route>\r\n            <Route exact path=\"/reports/customerReports\">\r\n              <CustomerReports />\r\n            </Route>\r\n            <Route exact path=\"/reports/analyticsDiscounts\">\r\n              <AnalyticsDiscounts />\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <div>Invalid url</div>\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const UnAuthenticatedRouting = () => {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            {/* <Login /> */}\r\n            <NewLogin />\r\n          </Route>\r\n          <Route path=\"*\">\r\n            <div>Invalid url</div>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    )\r\n  }\r\n  const renderIfVerified = isLoggedIn ? <Routing /> : <UnAuthenticatedRouting />\r\n  return isLoading ? <Backdrop /> : renderIfVerified\r\n}\r\n\r\nexport default App\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\app\\store.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\app\\types.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\schedulerComponentSlice.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\sideNavSlice.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\2.menu\\menuSlice.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\orderSlipSlice.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.NewLogin\\loginSlice.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\Table\\tableSlice.js",
  [
    "1158",
    "1159"
  ],
  "import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { TABLE_COMPONENT } from \"app/types\"\r\nimport { replace, replaceArrayData } from \"Restructured/Utilities/arrayFuntions\"\r\n\r\nexport const TableSlice = createSlice({\r\n  name: TABLE_COMPONENT,\r\n  initialState: {\r\n    dataList: [],\r\n    headers: [],\r\n  },\r\n  reducers: {\r\n    setTable: (state, action) => {\r\n      const { payload } = action\r\n      const dataList = [...state.dataList]\r\n      for (const obj of payload.rows) {\r\n        const isExist = dataList.some(({ _id }) => _id === obj._id)\r\n        !isExist && dataList.push(obj)\r\n      }\r\n      state.headers = [...payload.headers]\r\n      state.dataList = dataList\r\n    },\r\n    updateTable: (state, action) => {\r\n      const { payload } = action\r\n      const index = state.dataList.findIndex((row) => row._id === payload.id)\r\n      // const newDataList =\r\n      //   /*replace(state.dataList, index, payload.data)*/ state.dataList.filter(\r\n      //     (row) => row._id !== payload.id\r\n      //   )\r\n      // newDataList.push(payload.data)\r\n      state.dataList[index] = payload.data\r\n    },\r\n    deleteTable: (state, action) => {\r\n      const { payload } = action\r\n      const dataList = []\r\n      for (const obj of state.dataList) {\r\n        obj._id !== payload._id && dataList.push(obj)\r\n      }\r\n      state.dataList = dataList\r\n    },\r\n    clearTable: (state) => {\r\n      state.headers = []\r\n      state.dataList = []\r\n    },\r\n  },\r\n})\r\n\r\nexport const { updateTable, setTable, clearTable, deleteTable } =\r\n  TableSlice.actions\r\nexport const selectTableSlice = (state) => state[TABLE_COMPONENT]\r\nexport default TableSlice.reducer\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\collectionNames.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\2.menu\\menuData.js",
  [
    "1160",
    "1161",
    "1162",
    "1163",
    "1164"
  ],
  "import { selectUserSlice, userSlice } from \"containers/0.login/loginSlice\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { getData } from \"services\"\r\nimport { ROLES } from \"services/collectionNames\"\r\nimport db from \"services/firebase\"\r\nimport { Clock, Pen, Settings } from \"./styles\"\r\nexport const GRILL_RESERVATION = \"Grilling Schedule\"\r\nexport const PAYMENT_TRANSACTION = \"Transactions\"\r\nexport const USER_MASTERFILE = \"User Masterfile\"\r\nexport const BRANCH_MASTERFILE = \"Branch Masterfile\"\r\nexport const DASHBOARD = \"Dashboard\"\r\nexport const MASTER_DATA = \"Settings\"\r\nexport const DROPDOWN_MASTERFILE = \"Dropdown Masterfile\"\r\nexport const ROLES_MASTERFILE = \"Roles Masterfile\"\r\nexport const PRODUCTS_MASTERFILE = \"Products Masterfile\"\r\nexport const REPORTS = \"Analytics\"\r\nexport const DIRECT_AND_THIRD_PARTY = \"Direct and 3rd Party\"\r\nexport const INVENTORY = \"Store Inventory\"\r\nexport const INCIDENT_REPORTS = \"Incident Reports\"\r\nexport const DAILY_REPORTS = \"Daily Reports\"\r\nexport const CUSTOMER_REPORTS = \"Customer Reports\"\r\nexport const DISCOUNT_OTHERS = \"Discount and Others\"\r\n\r\nexport const useSelectMenus = () => {\r\n  const [roles, setRoles] = useState([])\r\n  const [menu, setMenu] = useState([])\r\n  useEffect(() => {\r\n    loadModules()\r\n  }, [roles])\r\n\r\n  const loadModules = async () => {\r\n    let modules = []\r\n    for (const role of roles) {\r\n      const result = await getRoles(role)\r\n      modules = [...modules, ...result?.list]\r\n    }\r\n    const _menu = menuData(modules)\r\n    setMenu(_menu)\r\n  }\r\n\r\n  const handleMenu = (data) => {\r\n    setRoles(data)\r\n  }\r\n  return [menu, handleMenu]\r\n}\r\n\r\nconst getRoles = (role) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.collection(ROLES)\r\n      .where(\"name\", \"==\", role)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          if (doc.exists) {\r\n            resolve(doc.data())\r\n          } else {\r\n            console.log(\"No such document!\")\r\n          }\r\n        })\r\n      })\r\n  })\r\n}\r\n\r\nconst menuData = (modules) => {\r\n  return [\r\n    {\r\n      title: DASHBOARD,\r\n      Icon: ({ isToggled }) => <Clock isToggled={isToggled} />,\r\n      active: true,\r\n      display: modules.includes(DASHBOARD),\r\n      subMenu: [\r\n        {\r\n          title: GRILL_RESERVATION,\r\n          active: true,\r\n          path: \"/dashboard/grillReservation\",\r\n          display: modules.includes(GRILL_RESERVATION),\r\n        },\r\n        {\r\n          title: PAYMENT_TRANSACTION,\r\n          active: false,\r\n          path: \"/dashboard/paymentTransaction\",\r\n          display: modules.includes(PAYMENT_TRANSACTION),\r\n        },\r\n        {\r\n          title: INVENTORY,\r\n          active: false,\r\n          path: \"/dashboard/inventory\",\r\n          display: modules.includes(INVENTORY),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: REPORTS,\r\n      Icon: ({ isToggled }) => <Pen isToggled={isToggled} />,\r\n      active: false,\r\n      flex: 1,\r\n      display: modules.includes(REPORTS),\r\n      subMenu: [\r\n        {\r\n          title: PAYMENT_TRANSACTION,\r\n          active: false,\r\n          path: \"/reports/paymentTransaction\",\r\n          display: modules.includes(PAYMENT_TRANSACTION),\r\n        },\r\n        {\r\n          title: DIRECT_AND_THIRD_PARTY,\r\n          active: false,\r\n          path: \"/reports/directAndThirdParty\",\r\n          display: modules.includes(DIRECT_AND_THIRD_PARTY),\r\n        },\r\n        {\r\n          title: INCIDENT_REPORTS,\r\n          active: false,\r\n          path: \"/reports/incidentReports\",\r\n          display: modules.includes(INCIDENT_REPORTS),\r\n        },\r\n        {\r\n          title: DAILY_REPORTS,\r\n          active: false,\r\n          path: \"/reports/dailyReports\",\r\n          display: modules.includes(DAILY_REPORTS),\r\n        },\r\n        {\r\n          title: CUSTOMER_REPORTS,\r\n          active: false,\r\n          path: \"/reports/customerReports\",\r\n          display: modules.includes(CUSTOMER_REPORTS),\r\n        },\r\n        {\r\n          title: DISCOUNT_OTHERS,\r\n          active: false,\r\n          path: \"/reports/analyticsDiscounts\",\r\n          display: modules.includes(DISCOUNT_OTHERS),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: MASTER_DATA,\r\n      Icon: ({ isToggled }) => <Settings isToggled={isToggled} />,\r\n      active: false,\r\n      display: modules.includes(MASTER_DATA),\r\n      subMenu: [\r\n        {\r\n          title: USER_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/userMasterFile\",\r\n          display: modules.includes(USER_MASTERFILE),\r\n        },\r\n        {\r\n          title: BRANCH_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/branchMasterFile\",\r\n          display: modules.includes(BRANCH_MASTERFILE),\r\n        },\r\n        {\r\n          title: DROPDOWN_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/dropdownMasterfile\",\r\n          display: modules.includes(DROPDOWN_MASTERFILE),\r\n        },\r\n        {\r\n          title: ROLES_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/rolesMasterfile\",\r\n          display: modules.includes(ROLES_MASTERFILE),\r\n        },\r\n        {\r\n          title: PRODUCTS_MASTERFILE,\r\n          active: false,\r\n          path: \"/masterData/productMasterfile\",\r\n          display: modules.includes(PRODUCTS_MASTERFILE),\r\n        },\r\n      ],\r\n    },\r\n  ]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\schedulerOpenedIdSlice.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\orderNoDate.js",
  [
    "1165"
  ],
  "const twoDigitsYear = (date) => {\r\n  const year = date.getFullYear()\r\n  return year.toString().substr(-2)\r\n}\r\n\r\nconst twoDigitsMonth = (date) => {\r\n  const month = date.getMonth() + 1\r\n  if (month < 10) {\r\n    return `0${month}`\r\n  } else {\r\n    return month.toString()\r\n  }\r\n}\r\n\r\nconst twoDigitsDay = (date) => {\r\n  const day = date.getDate()\r\n  if (day < 10) {\r\n    return `0${day}`\r\n  } else {\r\n    return day.toString()\r\n  }\r\n}\r\n\r\nexport default function (d) {\r\n  const date = d ? new Date(d) : new Date()\r\n  const year = twoDigitsYear(date)\r\n  const month = twoDigitsMonth(date)\r\n  const day = twoDigitsDay(date)\r\n  return month + \"\" + day + \"\" + year\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.NewLogin\\index.js",
  [
    "1166",
    "1167",
    "1168",
    "1169",
    "1170",
    "1171",
    "1172",
    "1173",
    "1174",
    "1175"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport GoogleButton from \"react-google-button\"\r\nimport Animate, {\r\n  RollIn,\r\n  FadeIn,\r\n  FadeInDown,\r\n  ZoomIn,\r\n  FadeInUp,\r\n  RubberBand,\r\n} from \"animate-css-styled-components\"\r\nimport { auth, provider } from \"services/firebase\"\r\nimport {\r\n  Wrapper,\r\n  Background,\r\n  GoogleContainer,\r\n  Card,\r\n  CookedChef,\r\n  Description,\r\n  VitosLogo,\r\n} from \"./styles\"\r\nimport background from \"images/background2.jpg\"\r\nimport cookedChefLogo from \"images/cookedChef.jpg\"\r\nimport vitosLogo from \"images/vitosLogo.jpg\"\r\nimport { getData, updateData } from \"services\"\r\nimport { Button, Divider, Input, Select } from \"antd\"\r\nimport validateEmail from \"Restructured/Utilities/validateEmail\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectUserSlice } from \"./loginSlice\"\r\nimport { setBranchSelected } from \"containers/0.login/loginSlice\"\r\nimport { PuffLoader } from \"react-spinners\"\r\nconst { Option } = Select\r\n\r\nfunction NewLogin() {\r\n  const dispatch = useDispatch()\r\n  const userSlice = useSelector(selectUserSlice)\r\n  const [loading, setLoading] = useState(false)\r\n  const [credentials, setCredentials] = useState({})\r\n  const [errorMessage, setErrorMessage] = useState(\"\")\r\n  const [enableChangePass, setEnableChangePass] = useState(false)\r\n  const [branchList, setBranchList] = useState([])\r\n  const handleLogin = () => {\r\n    // auth\r\n    //   .signInWithPopup(provider)\r\n    //   .then((result) => {\r\n    //     /** @type {firebase.auth.OAuthCredential} */\r\n    //     const credential = result.credential\r\n    //     // This gives you a Google Access Token. You can use it to access the Google API.\r\n    //     var token = credential.accessToken\r\n    //     // The signed-in user info.\r\n    //     var user = result.user\r\n    //     // ...\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     // Handle Errors here.\r\n    //     var errorCode = error.code\r\n    //     var errorMessage = error.message\r\n    //     // The email of the user's account used.\r\n    //     var email = error.email\r\n    //     // The firebase.auth.AuthCredential type that was used.\r\n    //     var credential = error.credential\r\n    //     // ...\r\n    //   })\r\n\r\n    if (\r\n      credentials.password.length >= 6 &&\r\n      validateEmail(credentials.email) &&\r\n      userSlice?.branchSelected\r\n    ) {\r\n      const { email, password } = credentials\r\n      setLoading(true)\r\n      auth\r\n        .signInWithEmailAndPassword(email, password)\r\n        .then((userCred) => {\r\n          // proceed if user already existed\r\n          console.log(\"userCred\", userCred.user)\r\n          updateData({\r\n            data: { branchSelected: userSlice.branchSelected },\r\n            collection: \"users\",\r\n            id: credentials?.email,\r\n          })\r\n        })\r\n        .catch((error) => {\r\n          const errorCode = error.code\r\n          const errorMessage = error.message\r\n          if (errorCode === \"auth/user-not-found\") {\r\n            // proceed if user not found\r\n            checkEmailIfListed(email, password)\r\n          } else {\r\n            if (\r\n              errorMessage ===\r\n              \"The password is invalid or the user does not have a password.\"\r\n            ) {\r\n              setErrorMessage(\"Invalid User\")\r\n            } else {\r\n              setErrorMessage(errorMessage)\r\n            }\r\n            console.log(\"errorMessage\", errorMessage)\r\n          }\r\n          setLoading(false)\r\n        })\r\n    } else {\r\n      console.log(\"wala\")\r\n    }\r\n  }\r\n\r\n  const checkEmailIfListed = async (email, password) => {\r\n    const data = await getData(\"users\", email)\r\n    if (data?.isEnabled && password === \"123456\") {\r\n      setEnableChangePass(true)\r\n    } else {\r\n      setEnableChangePass(false)\r\n      setErrorMessage(\"Invalid User\")\r\n    }\r\n  }\r\n\r\n  const setBranchesList = async (email) => {\r\n    if (email) {\r\n      const data = await getData(\"users\", email)\r\n      if (data) {\r\n        setBranchList([...data?.branches])\r\n      } else {\r\n        setBranchList([])\r\n        dispatch(setBranchSelected(\"\"))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSignUp = () => {\r\n    if (errorMessage) {\r\n      return\r\n    }\r\n    if (credentials?.email && credentials?.newPass) {\r\n      const { email, newPass } = credentials\r\n\r\n      if (!validateEmail(email)) {\r\n        setErrorMessage(\"The email you entered is invalid\")\r\n        return\r\n      }\r\n\r\n      setLoading(true)\r\n      auth\r\n        .createUserWithEmailAndPassword(email, newPass)\r\n        .then((userCredential) => {\r\n          // Signed in\r\n          const user = userCredential.user\r\n          updateData({\r\n            data: { branchSelected: userSlice.branchSelected },\r\n            collection: \"users\",\r\n            id: credentials?.email,\r\n          })\r\n          // ...\r\n        })\r\n        .catch((error) => {\r\n          const errorCode = error.code\r\n          const errorMessage = error.message\r\n          setLoading(false)\r\n          // ..\r\n        })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setErrorMessage(\"\")\r\n      setEnableChangePass(false)\r\n      setCredentials({})\r\n      dispatch(setBranchSelected(\"\"))\r\n    }\r\n  }, [])\r\n  return (\r\n    <Wrapper>\r\n      {/* <Background src={background} /> */}\r\n      <Animate Animation={[FadeInDown]} duration={[\"1s\"]} delay={[\"0.1s\"]}>\r\n        <div style={{ display: \"flex\" }}>\r\n          <Card>\r\n            <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.8s\"]}>\r\n              <CookedChef src={cookedChefLogo} />\r\n            </Animate>\r\n            <Animate Animation={[RollIn]} duration={[\"1s\"]} delay={[\"0.5s\"]}>\r\n              <VitosLogo src={vitosLogo} />\r\n            </Animate>\r\n            {/* <Animate Animation={[FadeInUp]} duration={[\".1s\"]} delay={[\"1.2s\"]}>\r\n              <Description>USER LOGIN</Description>\r\n            </Animate> */}\r\n            <Animate\r\n              Animation={[ZoomIn, RubberBand]}\r\n              duration={[\".1s\", \"1s\"]}\r\n              delay={[\"0.8s\", \"1.5s\"]}\r\n            >\r\n              {/* <GoogleContainer>\r\n                <GoogleButton onClick={handleLogin} type=\"light\" />\r\n              </GoogleContainer> */}\r\n            </Animate>\r\n          </Card>\r\n\r\n          <Card>\r\n            <div style={{ padding: \"0rem 3rem\", position: \"relative\" }}>\r\n              <Animate\r\n                Animation={[FadeInUp]}\r\n                duration={[\".1s\"]}\r\n                delay={[\"1.2s\"]}\r\n              >\r\n                <h1 style={{ textAlign: \"center\" }}>USER LOGIN</h1>\r\n              </Animate>\r\n              <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.8s\"]}>\r\n                <Input\r\n                  placeholder=\"Email\"\r\n                  size=\"large\"\r\n                  style={{ marginBottom: \"1rem\" }}\r\n                  onChange={(e) => {\r\n                    setCredentials({\r\n                      ...credentials,\r\n                      email: e.target.value || \"\",\r\n                    })\r\n                    setBranchesList(e.target.value)\r\n                    setErrorMessage(\"\")\r\n                  }}\r\n                />\r\n                <Input\r\n                  placeholder=\"Password\"\r\n                  style={{ marginBottom: \"1rem\" }}\r\n                  type=\"password\"\r\n                  size=\"large\"\r\n                  onChange={(e) => {\r\n                    setCredentials({ ...credentials, password: e.target.value })\r\n                    setErrorMessage(\"\")\r\n                  }}\r\n                />\r\n                <Select\r\n                  style={{ width: \"100%\" }}\r\n                  size=\"large\"\r\n                  value={userSlice?.branchSelected}\r\n                  onChange={(value) => {\r\n                    dispatch(setBranchSelected(value))\r\n                  }}\r\n                >\r\n                  {branchList.map((data) => {\r\n                    return <Option value={data}>{data}</Option>\r\n                  })}\r\n                </Select>\r\n                <Divider />\r\n                {/* end boundary of email and password credentials * ----------------------------------------------------------------------------------------------->>>>/}\r\n\r\n                {/* Retype password */}\r\n                {enableChangePass && (\r\n                  <div>\r\n                    <Input\r\n                      placeholder=\"New password\"\r\n                      size=\"large\"\r\n                      style={{ marginBottom: \"1rem\" }}\r\n                      type=\"password\"\r\n                      onChange={(e) => {\r\n                        if (e.target.value.length >= 6) {\r\n                          if (e.target.value !== credentials.reType) {\r\n                            setErrorMessage(\"Password mismatch\")\r\n                          } else {\r\n                            setErrorMessage(\"\")\r\n                          }\r\n                        } else {\r\n                          setErrorMessage(\r\n                            \"Password must be at least 6 characters\"\r\n                          )\r\n                        }\r\n\r\n                        setCredentials({\r\n                          ...credentials,\r\n                          newPass: e.target.value,\r\n                        })\r\n                      }}\r\n                    />\r\n                    <Input\r\n                      placeholder=\"Re-type password\"\r\n                      type=\"password\"\r\n                      size=\"large\"\r\n                      onChange={(e) => {\r\n                        if (e.target.value !== credentials.newPass) {\r\n                          setErrorMessage(\"Password mismatch\")\r\n                        } else {\r\n                          setErrorMessage(\"\")\r\n                        }\r\n\r\n                        if (credentials?.newPass.length < 6) {\r\n                          setErrorMessage(\r\n                            \"Password must be at least 6 characters\"\r\n                          )\r\n                        }\r\n                        setCredentials({\r\n                          ...credentials,\r\n                          reType: e.target.value,\r\n                        })\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n                <Divider />\r\n                {enableChangePass === false ? (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    danger\r\n                    block\r\n                    size=\"large\"\r\n                    disabled={\r\n                      !(\r\n                        (credentials.password || 0).length >= 6 &&\r\n                        validateEmail(credentials.email) &&\r\n                        userSlice?.branchSelected\r\n                      ) || loading\r\n                    }\r\n                    onClick={handleLogin}\r\n                  >\r\n                    {loading ? <PuffLoader size={30} /> : \"LOGIN\"}\r\n                  </Button>\r\n                ) : (\r\n                  // this is for retype password buttons ------------------------------------------------------------------------------------------>>>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      width: \"100%\",\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      type=\"primary\"\r\n                      danger\r\n                      size=\"large\"\r\n                      style={{ flex: 1 }}\r\n                      onClick={handleSignUp}\r\n                      disabled={loading}\r\n                    >\r\n                      {loading ? <PuffLoader size={30} /> : \"SAVE\"}\r\n                    </Button>\r\n                    <Button\r\n                      size=\"large\"\r\n                      style={{ flex: 1 }}\r\n                      onClick={() => {\r\n                        setEnableChangePass(false)\r\n                        setErrorMessage(\"\")\r\n                      }}\r\n                    >\r\n                      CANCEL\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n                {/* end of retype password boundary */}\r\n              </Animate>\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  textAlign: \"center\",\r\n                  width: \"100%\",\r\n                  left: 0,\r\n                  color: \"red\",\r\n                }}\r\n              >\r\n                {errorMessage}\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      </Animate>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default NewLogin\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\2.user_masterfile\\index.js",
  [
    "1176",
    "1177",
    "1178",
    "1179",
    "1180"
  ],
  "import React, { useEffect, useState } from 'react'\r\nimport ScheduleComponent from 'components/SchedulerComponent'\r\nimport AppBar from 'components/appBar'\r\nimport { Wrapper, Container, RightContent } from '../styles'\r\nimport Sidenav from 'components/sideNav'\r\nimport Animate, { FadeIn } from 'animate-css-styled-components'\r\nimport { useDispatch } from 'react-redux'\r\nimport { navigateTo } from 'components/sideNav/sideNavSlice'\r\nimport {\r\n  MASTER_DATA,\r\n  USER_MASTERFILE\r\n} from 'components/sideNav/2.menu/menuData'\r\nimport Table, { toolbarOptions, editSettings } from 'components/Table'\r\nimport { clearTable, setTable } from 'components/Table/tableSlice'\r\nimport Users from 'components/users'\r\n\r\nfunction UserMasterfile () {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const rows = []\r\n    const headers = [\r\n      {\r\n        field: 'email',\r\n        headerText: 'Email'\r\n      },\r\n      {\r\n        field: 'username',\r\n        headerText: 'Username'\r\n      },\r\n      {\r\n        field: 'role',\r\n        headerText: 'Role'\r\n      },\r\n      {\r\n        field: 'branch',\r\n        headerText: 'Branch'\r\n      }\r\n    ]\r\n    dispatch(navigateTo([MASTER_DATA, USER_MASTERFILE]))\r\n    dispatch(setTable({ headers, rows }))\r\n    return () => {\r\n      dispatch(clearTable())\r\n    }\r\n  }, [])\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={['1s']} delay={['0.2s']}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <Users />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default UserMasterfile\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\3.branch_mastefile\\index.js",
  [
    "1181"
  ],
  "import React, { useEffect, useState } from 'react'\r\nimport AppBar from 'components/appBar'\r\nimport { Wrapper, Container, RightContent } from '../styles'\r\nimport Sidenav from 'components/sideNav'\r\nimport Animate, { FadeIn } from 'animate-css-styled-components'\r\nimport { useDispatch } from 'react-redux'\r\nimport { navigateTo } from 'components/sideNav/sideNavSlice'\r\nimport {\r\n  MASTER_DATA,\r\n  BRANCH_MASTERFILE\r\n} from 'components/sideNav/2.menu/menuData'\r\nimport Table, { toolbarOptions, editSettings } from 'components/Table'\r\nimport { clearTable, setTable, deleteTable } from 'components/Table/tableSlice'\r\nimport db from 'services/firebase'\r\nimport { BRANCHES } from 'services/collectionNames'\r\n\r\nfunction BranchMasterfile() {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([MASTER_DATA, BRANCH_MASTERFILE]))\r\n    const unsubscribe = db.collection(BRANCHES).onSnapshot(function (snapshot) {\r\n      const rows = []\r\n      const headers = [\r\n        {\r\n          field: 'branchName',\r\n          headerText: 'Branch name'\r\n        },\r\n        {\r\n          field: 'branchAddress',\r\n          headerText: 'Branch Address'\r\n        },\r\n        {\r\n          field: 'color',\r\n          headerText: 'Color'\r\n        }\r\n      ]\r\n      for (const obj of snapshot.docChanges()) {\r\n        if (obj.type === 'modified') {\r\n          // const data = obj.doc.data()\r\n        } else if (obj.type === 'added') {\r\n          const data = obj.doc.data()\r\n          rows.push({ ...data, _id: obj.doc.id })\r\n        } else if (obj.type === 'removed') {\r\n          dispatch(deleteTable({ _id: obj.doc.id }))\r\n        } else {\r\n          console.log('nothing', obj.type)\r\n        }\r\n      }\r\n      if (rows.length > 0) {\r\n        dispatch(setTable({ rows, headers }))\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      unsubscribe()\r\n      dispatch(clearTable())\r\n    }\r\n  }, [])\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={['1s']} delay={['0.2s']}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <Table toolbar={toolbarOptions} editSettings={editSettings} />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default BranchMasterfile\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\4.dropdown_masterfile\\index.js",
  [
    "1182",
    "1183"
  ],
  "import React, { useState, useEffect } from 'react'\r\nimport AppBar from 'components/appBar'\r\nimport { Wrapper, Container, RightContent } from '../styles'\r\nimport Sidenav from 'components/sideNav'\r\nimport Animate, { FadeIn } from 'animate-css-styled-components'\r\nimport { useDispatch } from 'react-redux'\r\nimport { navigateTo } from 'components/sideNav/sideNavSlice'\r\nimport {\r\n  MASTER_DATA\r\n} from 'components/sideNav/2.menu/menuData'\r\nimport Dropdowns from 'components/dropdowns'\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([MASTER_DATA, props?.breadcrumbs]))\r\n  }, [props?.breadcrumbs])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={['1s']} delay={['0.2s']}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <Dropdowns collectionName={props?.collectionName} withDropdownGroup={props.withDropdownGroup} />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\1.grill_reservation\\index.js",
  [
    "1184",
    "1185",
    "1186"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport ScheduleComponent from \"components/SchedulerComponent\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport {\r\n  GRILL_RESERVATION,\r\n  DASHBOARD,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport Backdrop from \"components/backdrop\"\r\nimport {\r\n  ToggleBody,\r\n  ToggleButton,\r\n  ToggleContainer,\r\n} from \"Restructured/Styles/toggleableContainer\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport { FilteringPanel } from \"Restructured/Components/Features\"\r\nimport DashboardScheduler from \"components/features/DashboardScheduler\"\r\n\r\nfunction GrillReservation() {\r\n  const dispatch = useDispatch()\r\n  const [isToggled, setIsToggled] = useState(true)\r\n  const [toggle, setToggle] = useState(true)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([DASHBOARD, GRILL_RESERVATION]))\r\n  }, [])\r\n\r\n  return (\r\n    <Wrapper>\r\n      {loading && <Backdrop />}\r\n      <Container>\r\n        <Sidenav\r\n          isToggled={toggle}\r\n          navigateTo={[DASHBOARD, GRILL_RESERVATION]}\r\n        />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            {/* <ScheduleComponent setLoading={setLoading} /> */}\r\n            <DashboardScheduler />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n\r\n      <ToggleContainer isToggled={isToggled}>\r\n        <Grid\r\n          columns={2}\r\n          responsive={false}\r\n          customSizes={[\"375px\", \"1fr\"]}\r\n          height=\"100%\"\r\n          alignItems=\"center\"\r\n        >\r\n          <ToggleBody>\r\n            {/* this isToggled is used to hide print button when the sidenav filter of schedules is toggled left*/}\r\n            <FilteringPanel isToggled={isToggled} />\r\n          </ToggleBody>\r\n          <ToggleButton onClick={() => setIsToggled(!isToggled)}>\r\n            {isToggled ? \"Open\" : \"Close\"}\r\n          </ToggleButton>\r\n        </Grid>\r\n      </ToggleContainer>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default GrillReservation\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\backdrop\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.login\\index.js",
  [
    "1187",
    "1188",
    "1189",
    "1190",
    "1191",
    "1192",
    "1193",
    "1194"
  ],
  "import React from \"react\"\r\nimport GoogleButton from \"react-google-button\"\r\nimport Animate, {\r\n  RollIn,\r\n  FadeIn,\r\n  FadeInDown,\r\n  ZoomIn,\r\n  FadeInUp,\r\n  RubberBand,\r\n} from \"animate-css-styled-components\"\r\nimport { auth, provider } from \"services/firebase\"\r\nimport {\r\n  Wrapper,\r\n  Background,\r\n  GoogleContainer,\r\n  Card,\r\n  CookedChef,\r\n  Description,\r\n  VitosLogo,\r\n} from \"./styles\"\r\nimport background from \"images/background2.jpg\"\r\nimport cookedChefLogo from \"images/cookedChef.jpg\"\r\nimport vitosLogo from \"images/vitosLogo.jpg\"\r\n\r\nfunction Login() {\r\n  const handleLogin = () => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        /** @type {firebase.auth.OAuthCredential} */\r\n        const credential = result.credential\r\n\r\n        // This gives you a Google Access Token. You can use it to access the Google API.\r\n        var token = credential.accessToken\r\n        // The signed-in user info.\r\n        var user = result.user\r\n        // ...\r\n      })\r\n      .catch((error) => {\r\n        // Handle Errors here.\r\n        var errorCode = error.code\r\n        var errorMessage = error.message\r\n        // The email of the user's account used.\r\n        var email = error.email\r\n        // The firebase.auth.AuthCredential type that was used.\r\n        var credential = error.credential\r\n        // ...\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Background src={background} /> */}\r\n      <Animate Animation={[FadeInDown]} duration={[\"1s\"]} delay={[\"0.1s\"]}>\r\n        <Card>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.8s\"]}>\r\n            <CookedChef src={cookedChefLogo} />\r\n          </Animate>\r\n          <Animate Animation={[RollIn]} duration={[\"1s\"]} delay={[\"0.5s\"]}>\r\n            <VitosLogo src={vitosLogo} />\r\n          </Animate>\r\n          <Animate Animation={[FadeInUp]} duration={[\".1s\"]} delay={[\"1.2s\"]}>\r\n            <Description>USER LOGIN</Description>\r\n          </Animate>\r\n          <Animate\r\n            Animation={[ZoomIn, RubberBand]}\r\n            duration={[\".1s\", \"1s\"]}\r\n            delay={[\"0.8s\", \"1.5s\"]}\r\n          >\r\n            <GoogleContainer>\r\n              <GoogleButton onClick={handleLogin} type=\"light\" />\r\n            </GoogleContainer>\r\n          </Animate>\r\n        </Card>\r\n      </Animate>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Login\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\6.reports\\index.js",
  [
    "1195",
    "1196",
    "1197",
    "1198",
    "1199"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport {\r\n  MASTER_DATA,\r\n  PAYMENT_TRANSACTION,\r\n  REPORTS,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport { Products } from \"components/products\"\r\nimport AnalyticsTransaction from \"components/features/AnalyticsTransaction\"\r\nimport { Reports } from \"Restructured/Components/Features\"\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([REPORTS, PAYMENT_TRANSACTION]))\r\n  }, [])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <Reports />\r\n            {/* <AnalyticsTransaction /> */}\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\Dashboard\\index.js",
  [
    "1200",
    "1201",
    "1202",
    "1203",
    "1204",
    "1205",
    "1206",
    "1207",
    "1208",
    "1209",
    "1210",
    "1211",
    "1212",
    "1213",
    "1214",
    "1215",
    "1216",
    "1217",
    "1218"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport ScheduleComponent from \"components/SchedulerComponent\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport {\r\n  GRILL_RESERVATION,\r\n  DASHBOARD,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport Backdrop from \"components/backdrop\"\r\nimport {\r\n  ToggleBody,\r\n  ToggleButton,\r\n  ToggleContainer,\r\n} from \"Restructured/Styles/toggleableContainer\"\r\nimport { Flex, Grid } from \"Restructured/Styles\"\r\nimport { FilteringPanel } from \"Restructured/Components/Features\"\r\nimport { Button } from \"antd\"\r\nimport ScheduleServices from \"Restructured/Services/SchedulerServices\"\r\nimport ProductServices from \"Restructured/Services/ProductServices\"\r\nimport DropdownServices from \"Restructured/Services/DropdownServices\"\r\nimport datas from \"./datas\"\r\nimport { Progress } from \"@ant-design/charts\"\r\nimport { addData } from \"services\"\r\nimport {\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { DATE_PAYMENT } from \"components/PaymentDetails/types\"\r\nimport { formatDateFromDatabase } from \"Restructured/Utilities/dateFormat\"\r\nconst dataProduced = datas()\r\nfunction Dashboard() {\r\n  const dispatch = useDispatch()\r\n  const [isToggled, setIsToggled] = useState(true)\r\n  const [toggle, setToggle] = useState(true)\r\n  const [loading, setLoading] = useState(false)\r\n  const [percent, setPercent] = useState(100)\r\n  const [success, setSuccess] = useState(0)\r\n  const [errorList, setErrorList] = useState([])\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([DASHBOARD]))\r\n  }, [])\r\n\r\n  const handleScheduler = async () => {\r\n    const data = await DropdownServices.getDropdownList()\r\n    console.log(\"data\", JSON.stringify(data))\r\n  }\r\n\r\n  const handleImport = async () => {\r\n    const renewedData = []\r\n    let count = 1\r\n    let error = []\r\n    for (const obj of dataProduced.schedules) {\r\n      const startD = formatDateFromDatabase(obj[DATE_START])\r\n      const endD = formatDateFromDatabase(obj[DATE_END])\r\n      const ordD = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n      const datePaid =\r\n        typeof obj[DATE_PAYMENT] === \"undefined\"\r\n          ? null\r\n          : formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n      // renewedData.push({\r\n      //   ...obj,\r\n      //   [DATE_END]: startD,\r\n      //   [DATE_START]: endD,\r\n      //   [DATE_ORDER_PLACED]: ordD,\r\n      //   [DATE_PAYMENT]: datePaid,\r\n      // })\r\n\r\n      const renewedObj = {\r\n        ...obj,\r\n        [DATE_END]: startD,\r\n        [DATE_START]: endD,\r\n        [DATE_ORDER_PLACED]: ordD,\r\n        [DATE_PAYMENT]: datePaid,\r\n      }\r\n      if (!renewedObj[DATE_PAYMENT]) {\r\n        delete renewedObj[DATE_PAYMENT]\r\n      }\r\n      const result = await addData({\r\n        data: { ...renewedObj },\r\n        collection: \"schedules\",\r\n      })\r\n\r\n      if (result) {\r\n        setSuccess(count)\r\n        calculatePercent(count)\r\n        count = count + 1\r\n      } else {\r\n        count = count + 1\r\n        error.push({ ...obj })\r\n      }\r\n    }\r\n    setErrorList(error)\r\n    console.log(\"error List\", error)\r\n  }\r\n\r\n  const calculatePercent = (count) => {\r\n    const data = (count / 267) * 100\r\n    setPercent(data.toFixed(0))\r\n  }\r\n\r\n  // console.log(\"success\", success)\r\n  // console.log(\"errors\", errorList)\r\n  // console.log(\"percent\", percent)\r\n  return (\r\n    <Wrapper>\r\n      {loading && <Backdrop />}\r\n      <Container>\r\n        <Sidenav\r\n          isToggled={toggle}\r\n          navigateTo={[DASHBOARD, GRILL_RESERVATION]}\r\n        />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <Grid height=\"90vh\" alignItems=\"center\">\r\n              <Flex justifyContent=\"center\">\r\n                {/* <Button onClick={handleScheduler}>Exclude</Button>\r\n                <Button onClick={handleImport}>Import</Button> */}\r\n                <p style={{ fontSize: \"2rem\" }}>Welcome to Vitos BBQ</p>\r\n              </Flex>\r\n              {/* <div>\r\n                <span>{dataProduced.schedules.length}</span>{\" \"}\r\n                <div style={{ height: \"10px\", width: \"500px\" }}>\r\n                  <Progress percent={percent} />\r\n                </div>\r\n                <br />\r\n                <span>{dataProduced.dropdowns.length}</span>\r\n                <br />\r\n                <span>{dataProduced.products.length}</span>\r\n                <br />\r\n              </div> */}\r\n            </Grid>\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\10.dailyReports\\index.js",
  [
    "1219",
    "1220"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport { DAILY_REPORTS, REPORTS } from \"components/sideNav/2.menu/menuData\"\r\nimport DailyReports from \"Restructured/Components/Features/DailyReport\"\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([REPORTS, DAILY_REPORTS]))\r\n  }, [])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <DailyReports />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\7.directAndThirdParty\\index.js",
  [
    "1221",
    "1222",
    "1223",
    "1224",
    "1225",
    "1226"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport {\r\n  DIRECT_AND_THIRD_PARTY,\r\n  MASTER_DATA,\r\n  PAYMENT_TRANSACTION,\r\n  REPORTS,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport { Products } from \"components/products\"\r\nimport { Reports } from \"Restructured/Components/Features\"\r\nimport DirectAndThirdParty from \"Restructured/Components/Features/DirectAndThirdParty\"\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([REPORTS, DIRECT_AND_THIRD_PARTY]))\r\n  }, [])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <DirectAndThirdParty />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\9.incidentReports\\index.js",
  [
    "1227",
    "1228",
    "1229",
    "1230",
    "1231",
    "1232",
    "1233",
    "1234"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport {\r\n  DIRECT_AND_THIRD_PARTY,\r\n  INCIDENT_REPORTS,\r\n  MASTER_DATA,\r\n  PAYMENT_TRANSACTION,\r\n  REPORTS,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport { Products } from \"components/products\"\r\nimport { Reports } from \"Restructured/Components/Features\"\r\nimport DirectAndThirdParty from \"Restructured/Components/Features/DirectAndThirdParty\"\r\nimport IncidentReports from \"Restructured/Components/Features/IncidentReports\"\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([REPORTS, INCIDENT_REPORTS]))\r\n  }, [])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <IncidentReports />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\5.product_masterfile\\index.js",
  [
    "1235",
    "1236"
  ],
  "import React, { useState, useEffect } from 'react'\r\nimport AppBar from 'components/appBar'\r\nimport { Wrapper, Container, RightContent } from '../styles'\r\nimport Sidenav from 'components/sideNav'\r\nimport Animate, { FadeIn } from 'animate-css-styled-components'\r\nimport { useDispatch } from 'react-redux'\r\nimport { navigateTo } from 'components/sideNav/sideNavSlice'\r\nimport {\r\n  MASTER_DATA\r\n} from 'components/sideNav/2.menu/menuData'\r\nimport { Products } from 'components/products'\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([MASTER_DATA, props?.breadcrumbs]))\r\n  }, [props?.breadcrumbs])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={['1s']} delay={['0.2s']}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <Products />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\1.payment_transaction\\index.js",
  [
    "1237",
    "1238",
    "1239",
    "1240",
    "1241",
    "1242",
    "1243",
    "1244",
    "1245",
    "1246",
    "1247",
    "1248",
    "1249",
    "1250",
    "1251",
    "1252",
    "1253",
    "1254",
    "1255",
    "1256",
    "1257",
    "1258",
    "1259",
    "1260",
    "1261",
    "1262",
    "1263",
    "1264",
    "1265",
    "1266",
    "1267",
    "1268",
    "1269",
    "1270",
    "1271",
    "1272",
    "1273",
    "1274",
    "1275",
    "1276",
    "1277",
    "1278",
    "1279",
    "1280"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport ScheduleComponent from \"components/SchedulerComponent\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport {\r\n  DASHBOARD,\r\n  PAYMENT_TRANSACTION,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport Table from \"components/Table\"\r\nimport { clearTable, setTable, updateTable } from \"components/Table/tableSlice\"\r\nimport db from \"services/firebase\"\r\nimport {\r\n  ACCOUNT_NAME,\r\n  BRANCH,\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  LABELS,\r\n  MENU_GROUP_HEADERS,\r\n  ORDER_NO,\r\n  UTAK_NO,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport { SCHEDULES } from \"services/collectionNames\"\r\nimport { normalizeHour } from \"components/print\"\r\nimport { formatDate } from \"commonFunctions/formatDate\"\r\nimport PaymentDetails from \"components/PaymentDetails\"\r\nimport getAmount from \"commonFunctions/getAmount\"\r\nimport calculateSubTotal from \"commonFunctions/calculateSubTotal\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  OTHERS_DEDUCTION,\r\n  PAYMENT_LABELS,\r\n  SOURCE,\r\n} from \"components/PaymentDetails/types\"\r\nimport { menu } from \"components/SchedulerComponent/orderSlip/orderSlip\"\r\nimport { useGetProducts } from \"components/products/useGetProducts\"\r\nimport { useGetDropdowns } from \"components/SchedulerComponent/dropdowns\"\r\nimport PaymentTransactionTable from \"Restructured/Components/Features/PaymentTransactionTable\"\r\nimport { formatTime } from \"Restructured/Utilities/dateFormat\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { formatDateFromDatabase } from \"Restructured/Utilities/dateFormat\"\r\nimport PaymentTrans from \"components/features/DashboardTransaction\"\r\nimport usePaginate from \"hooks/paginate\"\r\nimport useDashboardTransaction from \"components/features/DashboardTransaction/hook\"\r\nimport { identity } from \"lodash\"\r\nimport GroupPayments from \"components/features/TransactionGroupPayments\"\r\nimport { Select, Space, DatePicker, Checkbox, Button } from \"antd\"\r\nimport { SearchOutlined, ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport DashboardTransPrint from \"components/features/DashboardTransaction/dashboardTransPrint\"\r\nconst { RangePicker } = DatePicker\r\nconst { Option } = Select\r\n// const formatDateFromDatabase = (date) => {\r\n//   return new Date(date.seconds * 1000 + date.nanoseconds / 1000000)\r\n// }\r\n\r\nconst filterDropdowns = [\r\n  \"DATE\",\r\n  \"PARTNER MERCHANT ORDER #\",\r\n  \"ORDER #\",\r\n  \"CUSTOMER NAME\",\r\n  \"MODE PAYMENT\",\r\n  \"SOURCE\",\r\n  \"ACCOUNT NUMBER\",\r\n]\r\nfunction UserMasterfile() {\r\n  const [{ rangeProps, searchButtonProps }, schedules] =\r\n    useDashboardTransaction()\r\n  // const dropdowns = useGetDropdowns()\r\n  // const userComponentSlice = useSelector(selectUserSlice)\r\n  // const dispatch = useDispatch()\r\n  // const [products] = useGetProducts()\r\n  const [columnWidth, setColumnWidth] = useState(\"\")\r\n  const [toggle, setToggle] = useState(true)\r\n  const [openId, setOpenId] = useState(\"\")\r\n  const { dataSource, loadData, modifiedData } = usePaginate()\r\n  const [isChecked, setIsChecked] = useState(false)\r\n  const [filterDropdown, setFilterDropdown] = useState(\"DATE\")\r\n\r\n  useEffect(() => {\r\n    setTimeout(function () {\r\n      setColumnWidth(\"500\")\r\n      setColumnWidth(\"1600\")\r\n    }, 2000)\r\n  }, [])\r\n\r\n  const sortSettings = {\r\n    columns: [{ field: DATE_START, direction: \"Descending\" }],\r\n  }\r\n\r\n  const handleOpenId = async (id) => {\r\n    if (id) {\r\n      setOpenId(\"\")\r\n      await modifiedData(id)\r\n    } else {\r\n      setOpenId(\"\")\r\n    }\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                width: \"100%\",\r\n                padding: \"1rem\",\r\n              }}\r\n            >\r\n              <div style={{ flex: 1 }}>\r\n                <Checkbox\r\n                  checked={isChecked}\r\n                  onClick={() => setIsChecked(!isChecked)}\r\n                >\r\n                  Allow Filter\r\n                </Checkbox>\r\n                <DashboardTransPrint dataList={schedules.searchData} />\r\n              </div>\r\n              {\r\n                <Space wrap>\r\n                  {isChecked && (\r\n                    <Select\r\n                      value={filterDropdown}\r\n                      style={{ width: 120 }}\r\n                      onChange={setFilterDropdown}\r\n                    >\r\n                      {filterDropdowns.map((option) => (\r\n                        <Option value={option}>{option}</Option>\r\n                      ))}\r\n                    </Select>\r\n                  )}\r\n                  {isChecked && (\r\n                    <>\r\n                      <RangePicker {...rangeProps} />\r\n                      <Button\r\n                        {...searchButtonProps}\r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        icon={<SearchOutlined />}\r\n                      />\r\n                    </>\r\n                  )}\r\n\r\n                  <GroupPayments />\r\n                </Space>\r\n              }\r\n            </div>\r\n            {/* <Table\r\n              toolbar={[\"Search\"]}\r\n\r\n              height=\"100%\"\r\n              width={columnWidth}\r\n              sortSettings={sortSettings}\r\n            /> */}\r\n            {/* <PaymentTransactionTable\r\n              rowSelected={(row) => setOpenId(row._id)}\r\n            /> */}\r\n            <PaymentTrans\r\n              rowSelected={(row) => {\r\n                if (row?.status === \"CANCELLED\") {\r\n                  return\r\n                }\r\n                setOpenId(row._id)\r\n              }}\r\n              dataSource={() => {\r\n                if (isChecked) {\r\n                  if (filterDropdown === \"DATE\") {\r\n                    return schedules?.searchData\r\n                  } else {\r\n                    return []\r\n                  }\r\n                } else {\r\n                  return dataSource\r\n                }\r\n              }}\r\n              loadData={!isChecked ? loadData : () => {}}\r\n            />\r\n            {openId && (\r\n              <div\r\n                style={{\r\n                  position: \"fixed\",\r\n                  top: \"4.3rem\",\r\n                  width: \"calc(100% - 250px)\",\r\n                  height: \"100%\",\r\n                  overflow: \"auto\",\r\n                  zIndex: 2000,\r\n                }}\r\n              >\r\n                <PaymentDetails id={openId} handleBack={handleOpenId} />\r\n              </div>\r\n            )}\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default UserMasterfile\r\n\r\n// const widths = {\r\n//   [BRANCH]: \"120\",\r\n//   [ORDER_NO]: \"200\",\r\n//   [DATE_ORDER_PLACED]: \"200\",\r\n//   [ACCOUNT_NAME]: \"150\",\r\n//   [CUSTOMER]: \"200\",\r\n//   [CONTACT_NUMBER]: \"150\",\r\n//   [DATE_START]: \"200\",\r\n//   [DATE_END]: \"200\",\r\n//   [DATE_PAYMENT]: \"200\",\r\n//   [MODE_PAYMENT]: \"200\",\r\n//   [SOURCE]: \"200\",\r\n//   [ACCOUNT_NUMBER]: \"200\",\r\n//   [AMOUNT_PAID]: \"200\",\r\n//   totalAmountPaid: \"200\",\r\n//   [OTHERS_DEDUCTION]: \"200\",\r\n// }\r\n// useEffect(() => {\r\n//   dispatch(navigateTo([DASHBOARD, PAYMENT_TRANSACTION]))\r\n//   const unsubscribe = db\r\n//     .collection(SCHEDULES)\r\n//     .orderBy(\"StartTime\", \"desc\")\r\n//     .onSnapshot(function (snapshot) {\r\n//       const rows = []\r\n//       const headers = [\r\n//         ...[\r\n//           DATE_ORDER_PLACED,\r\n//           DATE_START,\r\n//           ORDER_NO,\r\n//           UTAK_NO,\r\n//           CUSTOMER,\r\n//           CONTACT_NUMBER,\r\n//         ].map((fieldName) => {\r\n//           return {\r\n//             field: fieldName,\r\n//             headerText: LABELS[fieldName],\r\n//             width: widths[fieldName],\r\n//           }\r\n//         }),\r\n//         {\r\n//           field: \"totalQty\",\r\n//           headerText: \"Total Qty\",\r\n//         },\r\n//         {\r\n//           field: \"totalDue\",\r\n//           headerText: \"Total Amount\",\r\n//         },\r\n//         ...[\r\n//           DATE_PAYMENT,\r\n//           MODE_PAYMENT,\r\n//           SOURCE,\r\n//           ACCOUNT_NUMBER,\r\n//           \"totalAmountPaid\",\r\n//           OTHERS_DEDUCTION,\r\n//         ].map((fieldName) => {\r\n//           return {\r\n//             field: fieldName,\r\n//             headerText: PAYMENT_LABELS[fieldName],\r\n//             width: widths[fieldName],\r\n//           }\r\n//         }),\r\n//       ]\r\n\r\n//       for (const obj of snapshot.docChanges()) {\r\n//         if (obj.type === \"modified\") {\r\n//           const data = obj.doc.data()\r\n//           const dateOrderPlaced = formatDateFromDatabase(\r\n//             data[DATE_ORDER_PLACED]\r\n//           )\r\n//           const dateStart = formatDateFromDatabase(data[DATE_START])\r\n//           const dateEnd = formatDateFromDatabase(data[DATE_END])\r\n//           const datePayment =\r\n//             typeof data[DATE_PAYMENT] !== \"undefined\"\r\n//               ? formatDateFromDatabase(data[DATE_PAYMENT])\r\n//               : \"\"\r\n//           const amountPaid =\r\n//             typeof data[AMOUNT_PAID] !== \"undefined\"\r\n//               ? parseInt(data[AMOUNT_PAID])\r\n//               : 0\r\n//           // to add others (Senior Citizen, etc...) payment to total amount paid\r\n//           let others = 0\r\n//           let lessValue = 0\r\n//           for (const key in data.others) {\r\n//             console.log(\"key\", key)\r\n//             others = parseInt(data.others[key]) + others\r\n//             lessValue = data?.others[key]\r\n//           }\r\n//           const totals = {}\r\n//           for (const obj of products) {\r\n//             for (const product of obj.productList) {\r\n//               totals[product?.code] = {\r\n//                 qty: data[product?.code],\r\n//                 price: product?.price,\r\n//               }\r\n//             }\r\n//           }\r\n//           const result = calculateSubTotal(totals)\r\n//           const newData = {\r\n//             ...data,\r\n//             _id: obj.doc.id,\r\n//             [DATE_ORDER_PLACED]: formatDate(dateOrderPlaced),\r\n//             [DATE_START]: formatDate(dateStart) + \" \" + formatTime(dateStart),\r\n//             [DATE_END]: normalizeHour(dateEnd),\r\n//             [DATE_PAYMENT]: datePayment !== \"\" ? formatDate(datePayment) : \"\",\r\n//             totalAmountPaid: amountPaid,\r\n//             totalQty: result?.qty,\r\n//             totalAmount: result?.subTotal,\r\n//             [OTHERS_DEDUCTION]: lessValue,\r\n//           }\r\n//           dispatch(updateTable({ data: newData, id: obj.doc.id }))\r\n//         } else if (obj.type === \"added\") {\r\n//           const data = obj.doc.data()\r\n//           const dateOrderPlaced = formatDateFromDatabase(\r\n//             data[DATE_ORDER_PLACED]\r\n//           )\r\n//           const dateStart = formatDateFromDatabase(data[DATE_START])\r\n//           const dateEnd = formatDateFromDatabase(data[DATE_END])\r\n//           const datePayment =\r\n//             typeof data[DATE_PAYMENT] !== \"undefined\"\r\n//               ? formatDateFromDatabase(data[DATE_PAYMENT])\r\n//               : \"\"\r\n//           const amountPaid =\r\n//             typeof data[AMOUNT_PAID] !== \"undefined\"\r\n//               ? parseInt(data[AMOUNT_PAID])\r\n//               : 0\r\n//           // to add others (Senior Citizen, etc...) payment to total amount paid\r\n//           let others = 0\r\n//           let lessValue = 0\r\n//           for (const key in data.others) {\r\n//             others = parseInt(data.others[key]) + others\r\n//             lessValue = data.others[key]\r\n//           }\r\n\r\n//           const totals = {}\r\n//           for (const obj of products) {\r\n//             for (const product of obj.productList) {\r\n//               totals[product?.code] = {\r\n//                 qty: data[product?.code],\r\n//                 price: product?.price,\r\n//               }\r\n//             }\r\n//           }\r\n//           const result = calculateSubTotal(totals)\r\n//           if (userComponentSlice.branches.includes(data[BRANCH])) {\r\n//             rows.push({\r\n//               ...data,\r\n//               _id: obj.doc.id,\r\n//               [DATE_ORDER_PLACED]: formatDate(dateOrderPlaced),\r\n//               [DATE_START]:\r\n//                 formatDate(dateStart) + \" \" + formatTime(dateStart),\r\n//               [DATE_END]: normalizeHour(dateEnd),\r\n//               [DATE_PAYMENT]:\r\n//                 datePayment !== \"\" ? formatDate(datePayment) : \"\",\r\n//               totalAmountPaid: amountPaid,\r\n//               totalQty: result?.qty,\r\n//               totalAmount: result?.subTotal,\r\n//               [OTHERS_DEDUCTION]: lessValue,\r\n//             })\r\n//           }\r\n//         } else if (obj.type === \"removed\") {\r\n//           // dispatch(deleteTable({ _id: obj.doc.id }))\r\n//         } else {\r\n//           console.log(\"nothing\", obj.type)\r\n//         }\r\n//       }\r\n//       if (rows.length > 0) {\r\n//         dispatch(setTable({ rows, headers }))\r\n//         console.log(\"payment data\", rows)\r\n//       }\r\n//     })\r\n\r\n//   return () => {\r\n//     unsubscribe()\r\n//     dispatch(clearTable())\r\n//   }\r\n// }, [products])\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\8.inventory\\index.js",
  [
    "1281",
    "1282",
    "1283",
    "1284",
    "1285",
    "1286",
    "1287",
    "1288",
    "1289"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport {\r\n  DIRECT_AND_THIRD_PARTY,\r\n  MASTER_DATA,\r\n  PAYMENT_TRANSACTION,\r\n  REPORTS,\r\n  INVENTORY,\r\n  DASHBOARD,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport { Products } from \"components/products\"\r\nimport { Reports } from \"Restructured/Components/Features\"\r\nimport DirectAndThirdParty from \"Restructured/Components/Features/DirectAndThirdParty\"\r\nimport Inventory from \"Restructured/Components/Features/Inventory\"\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([DASHBOARD, INVENTORY]))\r\n  }, [])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <Inventory />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\ExcelExporter\\index.js",
  [
    "1290"
  ],
  "import react from \"react\"\r\nimport ExportService from \"./ExportService\"\r\nconst filePath = \"./excel-from-js.xlsx\"\r\nfunction ExcelExporter() {\r\n  const users = [\r\n    {\r\n      id: 0,\r\n      name: \"da\",\r\n      age: 23,\r\n      Sdf: \"d\",\r\n    },\r\n    {\r\n      id: 0,\r\n      name: \"da\",\r\n      age: 25,\r\n      Sdf: \"d\",\r\n    },\r\n  ]\r\n\r\n  const workSheetColumnNames = [\"ID\", \"Name\", \"Age\", \"Sdf\"]\r\n  const workSheetName = \"Users\"\r\n  const handleClick = () => {\r\n    ExportService.exportUsersToExcel(\r\n      users,\r\n      workSheetColumnNames,\r\n      workSheetName,\r\n      filePath\r\n    )\r\n  }\r\n\r\n  return <button onClick={handleClick}>Clck</button>\r\n}\r\n\r\nexport default ExcelExporter\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\2.menu\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\arrayFuntions.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.NewLogin\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\dataHandlers\\deleteData.js",
  [
    "1291"
  ],
  "import db from '../firebase'\r\n\r\nexport default function ({ id, collection }) {\r\n  return new Promise((resolve, reject) => {\r\n    db.collection(collection)\r\n      .doc(id)\r\n      .delete()\r\n      .then(data => {\r\n        console.log('Document successfully deleted!')\r\n        resolve('success')\r\n      })\r\n      .catch(error => {\r\n        console.error('Error removing document: ', error)\r\n        reject(error)\r\n      })\r\n  })\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\dataHandlers\\updateData.js",
  [
    "1292",
    "1293"
  ],
  "import db from \"../firebase\"\r\n\r\nexport default function ({ data, collection, id }) {\r\n  const ref = db.collection(collection).doc(id)\r\n  const setWithMerge = ref.set(\r\n    {\r\n      ...data,\r\n    },\r\n    { merge: true }\r\n  )\r\n}\r\n\r\nexport const update = ({ data, collection, id }) => {\r\n  const ref = db.collection(collection).doc(id)\r\n  ref.update({\r\n    ...data,\r\n  })\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\dataHandlers\\addData.js",
  [
    "1294"
  ],
  "import db from '../firebase'\r\n\r\nexport default function ({ data, collection, id = null }) {\r\n  if (!id) {\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(collection).add({ ...data })\r\n        .then((docRef) => {\r\n          resolve(docRef.id)\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error adding document: ', error)\r\n          reject(error)\r\n        })\r\n    })\r\n  } else {\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(collection).doc(id).set({ ...data })\r\n        .then(() => {\r\n          resolve('success')\r\n          console.log('Document successfully written!')\r\n        })\r\n        .catch((error) => {\r\n          reject(error)\r\n          console.error('Error writing document: ', error)\r\n        })\r\n    })\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.login\\loginSlice.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\dataHandlers\\getData.js",
  [
    "1295"
  ],
  "import db from '../firebase'\r\nexport default function (collectionName, document = null) {\r\n  if (!document) {\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(collectionName).get().then((querySnapshot) => {\r\n        const data = []\r\n        querySnapshot.forEach((doc) => {\r\n          if (doc.exists) {\r\n            data.push({ ...doc.data(), _id: doc.id })\r\n          } else {\r\n            console.log('No such document!')\r\n            resolve(null)\r\n          }\r\n        })\r\n        resolve(data)\r\n      }).catch((error) => {\r\n        reject([])\r\n        console.log('Error getting document:', error)\r\n      })\r\n    })\r\n  } else {\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(collectionName).doc(document).get()\r\n        .then((doc) => {\r\n          if (doc.exists) {\r\n            const data = doc.data()\r\n            resolve(data)\r\n          } else {\r\n            console.log('No such document!d')\r\n            resolve(null)\r\n          }\r\n          resolve(null)\r\n        }).catch((error) => {\r\n          reject(error)\r\n          console.log('Error getting document:', error)\r\n        })\r\n    })\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\ExcelExporter\\ExportService.js",
  [
    "1296"
  ],
  "import fs from \"fs\"\r\nimport XLSX from \"xlsx\"\r\nimport path from \"path\"\r\nexport default class ExportService {\r\n  static saveToWorkbookDates(workBook, data, name) {\r\n    const merge = [\r\n      { s: { r: 0, c: 0 }, e: { r: 0, c: 14 } },\r\n      { s: { r: 1, c: 0 }, e: { r: 1, c: 14 } },\r\n      { s: { r: 2, c: 0 }, e: { r: 2, c: 14 } },\r\n      { s: { r: 5, c: 0 }, e: { r: 5, c: 6 } },\r\n      { s: { r: 5, c: 7 }, e: { r: 5, c: 14 } },\r\n    ]\r\n    const workSheet = XLSX.utils.aoa_to_sheet(data)\r\n\r\n    if (!workSheet[\"!merges\"]) workSheet[\"!merges\"] = []\r\n    for (const mergeObj of merge) {\r\n      workSheet[\"!merges\"].push(mergeObj)\r\n    }\r\n\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, name)\r\n  }\r\n\r\n  static saveToWorkbookDSummary(workBook, data, name) {\r\n    const merge = [\r\n      { s: { r: 0, c: 0 }, e: { r: 0, c: 1 } },\r\n      { s: { r: 1, c: 0 }, e: { r: 1, c: 1 } },\r\n      { s: { r: 2, c: 0 }, e: { r: 2, c: 1 } },\r\n    ]\r\n    const workSheet = XLSX.utils.aoa_to_sheet(data)\r\n\r\n    if (!workSheet[\"!merges\"]) workSheet[\"!merges\"] = []\r\n    for (const mergeObj of merge) {\r\n      workSheet[\"!merges\"].push(mergeObj)\r\n    }\r\n\r\n    XLSX.utils.book_append_sheet(\r\n      workBook,\r\n      workSheet,\r\n      // `DSUMMARY 1 - ${data.length - 8}`\r\n      `DSUMMARY 1 - ${data.length - 6}`\r\n    )\r\n  }\r\n\r\n  static saveToWorkbookSource(workBook, data, name) {\r\n    const merge = [\r\n      { s: { r: 0, c: 0 }, e: { r: 0, c: 1 } },\r\n      { s: { r: 1, c: 0 }, e: { r: 1, c: 1 } },\r\n      { s: { r: 2, c: 0 }, e: { r: 2, c: 1 } },\r\n    ]\r\n    const workSheet = XLSX.utils.aoa_to_sheet(data)\r\n\r\n    if (!workSheet[\"!merges\"]) workSheet[\"!merges\"] = []\r\n    for (const mergeObj of merge) {\r\n      workSheet[\"!merges\"].push(mergeObj)\r\n    }\r\n\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, name)\r\n  }\r\n\r\n  static exportExcelReports(sheets, additionalParams) {\r\n    const workBook = XLSX.utils.book_new()\r\n    for (const key in sheets) {\r\n      switch (key) {\r\n        case \"dSummary\":\r\n          this.saveToWorkbookDSummary(workBook, [...sheets[key]], key)\r\n          break\r\n        default:\r\n          console.log(\"additional\", additionalParams)\r\n          if (additionalParams[0].includes(key)) {\r\n            this.saveToWorkbookSource(workBook, [...sheets[key]], key)\r\n          } else {\r\n            this.saveToWorkbookDates(workBook, [...sheets[key]], key)\r\n          }\r\n      }\r\n    }\r\n\r\n    XLSX.writeFile(workBook, path.resolve(\"./excel-report.xlsx\"))\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\validateEmail.js",
  [
    "1297",
    "1298"
  ],
  "export default function validateEmail(email) {\r\n  if (!email) return false\r\n  const res =\r\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n  return res.test(String(email).toLowerCase())\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\dropdowns.js",
  [
    "1299",
    "1300"
  ],
  "import { useState, useEffect } from \"react\"\r\nimport {\r\n  BRANCH,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n  PAYMENT_MODE,\r\n  STATUS,\r\n} from \"./orderSlip/types\"\r\nimport db from \"services/firebase\"\r\nimport { getData } from \"services\"\r\nimport { BRANCHES } from \"services/collectionNames\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\n\r\nconst getWhereData = (name) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.collection(\"dropdowns\")\r\n      .where(\"name\", \"==\", name)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          if (doc.exists) {\r\n            const data = doc.data()\r\n            resolve(data.list)\r\n          } else {\r\n            resolve([])\r\n          }\r\n        })\r\n        resolve([])\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error getting document:\", error)\r\n        reject(error)\r\n      })\r\n  })\r\n}\r\n\r\nconst getBranch = async () => {\r\n  const data = []\r\n  const result = await getData(BRANCHES)\r\n  for (const obj of result) {\r\n    data.push(obj?.branchName)\r\n  }\r\n  return data\r\n}\r\n\r\nexport function useGetDropdowns() {\r\n  const userSlice = useSelector(selectUserSlice)\r\n  const [dropdowns, setDropdowns] = useState({\r\n    [STATUS]: [],\r\n    [PAYMENT_MODE]: [],\r\n    [ORDER_VIA]: [],\r\n    [BRANCH]: [],\r\n    [ORDER_VIA_PARTNER]: [],\r\n  })\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [])\r\n\r\n  const loadDropdowns = async () => {\r\n    const status = await getWhereData(STATUS)\r\n    const orderVia = await getWhereData(ORDER_VIA)\r\n    const paymentMode = await getWhereData(PAYMENT_MODE)\r\n    const orderViaPartner = await getWhereData(ORDER_VIA_PARTNER)\r\n    const branch = userSlice.branches\r\n    setDropdowns({\r\n      ...dropdowns,\r\n      [STATUS]: status,\r\n      [ORDER_VIA]: [\"\", ...orderVia],\r\n      [PAYMENT_MODE]: paymentMode,\r\n      [BRANCH]: branch,\r\n      [ORDER_VIA_PARTNER]: [\"\", ...orderViaPartner],\r\n    })\r\n  }\r\n  return dropdowns\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\dateFormat.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\Dashboard\\datas.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\products\\useGetProducts.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\index.js",
  [
    "1301",
    "1302",
    "1303"
  ],
  "import React, { useState } from \"react\"\r\nimport {\r\n  DATE,\r\n  DATE_START,\r\n  DATE_END,\r\n  BRANCH,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport {\r\n  Timepicker,\r\n  RangePicker,\r\n  Select,\r\n} from \"Restructured/Components/Commons\"\r\nimport Panel from \"./Panel\"\r\nimport useSchedulerFilter from \"./Controllers/useSchedulerFilter\"\r\nimport Animate, { FadeInLeft } from \"animate-css-styled-components\"\r\nimport Print from \"../Print\"\r\nimport FilteringPanelDocs from \"../Print/Documents/filteringPanelDocs\"\r\nimport { FloatContainer } from \"./styles\"\r\nimport { AiFillPrinter } from \"react-icons/ai\"\r\nimport { STATUS } from \"components/SchedulerComponent/orderSlip/types\"\r\n\r\nfunction FilteringPanel({ isToggled }) {\r\n  const [\r\n    dataFetched,\r\n    dataFiltered,\r\n    branch,\r\n    branchColors,\r\n    branchDatasource,\r\n    products,\r\n    productLabels,\r\n    getDataByBranch,\r\n    getDataByDate,\r\n  ] = useSchedulerFilter()\r\n\r\n  console.log(\"printDataFetched\", dataFetched)\r\n  return (\r\n    <Grid>\r\n      <Select\r\n        label=\"Branch\"\r\n        dataSource={branchDatasource}\r\n        value={branch}\r\n        onChange={(value) => getDataByBranch(value)}\r\n      />\r\n      <RangePicker\r\n        label=\"Date\"\r\n        onChange={(value) => {\r\n          getDataByDate({ dates: value })\r\n        }}\r\n        disabled={products.length > 0 ? false : true}\r\n      />\r\n      <Grid>\r\n        {dataFiltered.map((data, index) => {\r\n          const chips = []\r\n          for (const key in data) {\r\n            if (products.includes(key)) {\r\n              chips.push(`${productLabels[key]}: ${data[key]}`)\r\n            }\r\n          }\r\n          return (\r\n            <Animate\r\n              key={index}\r\n              Animation={[FadeInLeft]}\r\n              duration={[\"1s\"]}\r\n              delay={[`0.${1 + index}s`]}\r\n            >\r\n              <Panel\r\n                date={data[DATE]}\r\n                timeStart={data[DATE_START]}\r\n                timeEnd={data[DATE_END]}\r\n                backgroundColor={branchColors[data[BRANCH]]}\r\n                chips={[...chips]}\r\n              />\r\n            </Animate>\r\n          )\r\n        })}\r\n      </Grid>\r\n      <FloatContainer display={isToggled}>\r\n        {dataFetched.length > 0 && branch && (\r\n          <Print\r\n            component={\r\n              <FilteringPanelDocs\r\n                documentPrintInfo={{\r\n                  dataFetched: dataFetched,\r\n                  products,\r\n                  productLabels,\r\n                }}\r\n                branch={branch}\r\n              />\r\n            }\r\n            button={<AiFillPrinter fontSize=\"1.5rem\" />}\r\n          />\r\n        )}\r\n      </FloatContainer>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default FilteringPanel\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\orderSlip.js",
  [
    "1304",
    "1305",
    "1306",
    "1307",
    "1308",
    "1309",
    "1310",
    "1311",
    "1312",
    "1313",
    "1314",
    "1315"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport fields from \"components/fields\"\r\nimport orderSlipConfig from \"./orderSlipConfig\"\r\nimport classes from \"./orderSlip.module.css\"\r\nimport GrillMenus from \"./grillMenus\"\r\nimport { Table } from \"antd\"\r\nimport { TextBoxComponent } from \"@syncfusion/ej2-react-inputs\"\r\n\r\nimport {\r\n  LABELS,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  PARTNER_MERCHANT_ORDER_NO,\r\n  REMARKS,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { setOrderNo, clearOrderNos, setOrderViaField } from \"./orderSlipSlice\"\r\nimport { selectSchedulerComponentSlice } from \"../schedulerComponentSlice\"\r\nimport orderNoDate from \"./orderNoDate\"\r\nimport { useGetDropdowns } from \"../dropdowns\"\r\nimport { DROP_DOWN_LIST, INPUT, ORDER_VIA_TYPE } from \"components/fields/types\"\r\nimport { useGetDropdownGroup } from \"components/dropdowns/useDropdownGroup\"\r\nimport { useOrderViaField } from \"./useOrderViaField\"\r\nimport Input from \"components/fields/input\"\r\nimport OrderVia from \"components/fields/orderVia\"\r\nimport { Button } from \"antd\"\r\nimport { DownCircleOutlined, UpCircleOutlined } from \"@ant-design/icons\"\r\nimport useGetLogs from \"./useGetLogs\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n  formatTime,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport useOrderNoCounter from \"./hookOrderNoCounter\"\r\n\r\nfunction OrderSlip(props) {\r\n  const [handleCount] = useOrderNoCounter()\r\n  const dispatch = useDispatch()\r\n  const [logs] = useGetLogs()\r\n  const selectSchedulerComponent = useSelector(selectSchedulerComponentSlice)\r\n  const dropdowns = useGetDropdowns()\r\n  // this is for orderVia and Partner Merchant field\r\n  const [isDisplayedDirect, isDisplayedPartner, handleOrderVia] =\r\n    useOrderViaField()\r\n  // const [groupDropdowns] = useGetDropdownGroup('orderVia')\r\n  const [toggleModified, setToggleModified] = useState(false)\r\n  const { dataSource } = selectSchedulerComponent\r\n  useEffect(() => {\r\n    countLibis()\r\n    countRonac()\r\n  }, [dataSource, props])\r\n  const countLibis = () => {\r\n    const filteredLibis = dataSource.filter((data) =>\r\n      data[ORDER_NO].includes(`LB001-${orderNoDate()}-685`)\r\n    )\r\n    let latestNumber = 0\r\n    for (const obj of filteredLibis) {\r\n      const splitedObj = obj[ORDER_NO].split(\"-685\")\r\n      if (latestNumber < parseInt(splitedObj[1])) {\r\n        latestNumber = parseInt(splitedObj[1])\r\n      }\r\n    }\r\n    dispatch(setOrderNo({ branch: \"Libis\", value: parseInt(latestNumber) + 1 }))\r\n  }\r\n\r\n  const countRonac = () => {\r\n    const filteredRonac = dataSource.filter((data) =>\r\n      data[ORDER_NO].includes(`RSJ002-${orderNoDate()}-685`)\r\n    )\r\n    let latestNumber = 0\r\n    for (const obj of filteredRonac) {\r\n      const splitedObj = obj[ORDER_NO].split(\"-685\")\r\n      if (latestNumber < parseInt(splitedObj[1])) {\r\n        latestNumber = parseInt(splitedObj[1])\r\n      }\r\n    }\r\n    dispatch(setOrderNo({ branch: \"Ronac\", value: parseInt(latestNumber) + 1 }))\r\n  }\r\n\r\n  const testFunc = async () => {\r\n    const data = await handleCount(\"Ronac\")\r\n    console.log(\"d\", data)\r\n  }\r\n  return props !== undefined ? (\r\n    <div className={classes.container}>\r\n      {orderSlipConfig.map((customProps) => {\r\n        const dataSource =\r\n          typeof dropdowns[customProps.name] === \"undefined\"\r\n            ? []\r\n            : dropdowns[customProps.name]\r\n        if (customProps.type === DROP_DOWN_LIST) {\r\n          customProps.value = props[customProps?.name]\r\n          if (customProps.name === ORDER_VIA) {\r\n            customProps.enabled = isDisplayedDirect\r\n            customProps.onChange = (e) => {\r\n              handleOrderVia(e, customProps)\r\n            }\r\n          }\r\n        }\r\n        if (customProps.type === ORDER_VIA_TYPE) {\r\n          customProps.value = props[customProps?.name]\r\n          customProps.enabled = isDisplayedPartner\r\n          customProps.onChange = (e) => {\r\n            handleOrderVia(e, customProps)\r\n          }\r\n        }\r\n\r\n        return fields[customProps.type]({\r\n          ...props,\r\n          ...customProps,\r\n          dataSource,\r\n        })\r\n      })}\r\n      <GrillMenus {...props} />\r\n      <div style={{ width: \"100%\", position: \"relative\" }}>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: 1000,\r\n            right: 0,\r\n            marginTop: \"-2rem\",\r\n          }}\r\n        >\r\n          {!toggleModified ? (\r\n            <Button\r\n              onClick={() => setToggleModified(true)}\r\n              icon={<DownCircleOutlined />}\r\n              shape=\"circle\"\r\n            />\r\n          ) : (\r\n            <Button\r\n              onClick={() => setToggleModified(false)}\r\n              icon={<UpCircleOutlined />}\r\n              shape=\"circle\"\r\n            />\r\n          )}\r\n        </div>\r\n        <br />\r\n        <br />\r\n        {toggleModified ? (\r\n          <Table\r\n            dataSource={logs.data.map((data) => {\r\n              const date = formatDateFromDatabase(data.date)\r\n              return {\r\n                displayName: data.email,\r\n                action: data.action,\r\n                date: formatDateSlash(date),\r\n                time: formatTime(date),\r\n              }\r\n            })}\r\n            pagination={false}\r\n            size=\"small\"\r\n            columns={[\r\n              {\r\n                title: \"Modified by\",\r\n                dataIndex: \"displayName\",\r\n                key: \"displayName\",\r\n              },\r\n              { title: \"Action\", dataIndex: \"action\", key: \"action\" },\r\n              { title: \"Date\", dataIndex: \"date\", key: \"date\" },\r\n              { title: \"Time\", dataIndex: \"time\", key: \"time\" },\r\n            ]}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default OrderSlip\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\types.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\index.js",
  [
    "1316",
    "1317",
    "1318",
    "1319",
    "1320",
    "1321",
    "1322",
    "1323",
    "1324",
    "1325",
    "1326",
    "1327",
    "1328",
    "1329",
    "1330",
    "1331",
    "1332",
    "1333",
    "1334"
  ],
  "import { Button, Space, Table, Tag } from \"antd\"\r\nimport { Paper } from \"components/PaymentDetails/styles\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { RangePicker, Select } from \"Restructured/Components/Commons\"\r\nimport { CODE, QUANTITY } from \"Restructured/Constants/products\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  LABELS,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { Flex, Grid, Item } from \"Restructured/Styles\"\r\nimport Controllers from \"./Controllers\"\r\nimport useReports from \"./Controllers/useReports\"\r\nimport Services from \"./Services\"\r\n\r\nfunction Reports() {\r\n  const [\r\n    dropdowns,\r\n    reports,\r\n    sourceSummary,\r\n    branch,\r\n    setBranch,\r\n    dateFromTo,\r\n    setDateFromTo,\r\n    handleExport,\r\n  ] = useReports()\r\n\r\n  return (\r\n    <Grid alignItems=\"center\">\r\n      <Flex justifyContent=\"flex-end\">\r\n        <Item width=\"calc(100% - 750px)\">\r\n          <Button type=\"primary\" danger onClick={handleExport}>\r\n            Export as Excel\r\n          </Button>\r\n        </Item>\r\n        <Item>\r\n          <Select\r\n            label=\"Branch\"\r\n            dataSource={[...dropdowns]}\r\n            value={branch}\r\n            onChange={(value) => {\r\n              setBranch(value)\r\n            }}\r\n          />\r\n        </Item>\r\n        <Item>\r\n          <RangePicker\r\n            showTime={false}\r\n            format=\"MM/DD/YYYY\"\r\n            label=\"Date\"\r\n            value={dateFromTo}\r\n            onChange={(value) => {\r\n              setDateFromTo(value)\r\n            }}\r\n          />\r\n        </Item>\r\n        <Item width=\"100%\">\r\n          {reports.map((data) => {\r\n            const dataSource = data?.data\r\n            return (\r\n              <div key={data.header} style={{ padding: \"1rem\" }}>\r\n                <Paper>\r\n                  <h3>{data.header}</h3>\r\n                  <Table columns={data?.columns} dataSource={dataSource} />\r\n                </Paper>\r\n                <Flex justifyContent=\"flex-end\">\r\n                  <Item>\r\n                    <Table\r\n                      columns={sourceSummary[data?.header]?.columns}\r\n                      dataSource={sourceSummary[data?.header]?.data}\r\n                    />\r\n                  </Item>\r\n                </Flex>\r\n              </div>\r\n            )\r\n          })}\r\n        </Item>\r\n      </Flex>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Reports\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\calculateSubTotal.js",
  [
    "1335"
  ],
  "export default (totals) => {\r\n  const newTotals = { ...totals }\r\n  let qty = 0\r\n  let price = 0\r\n  for (const key in newTotals) {\r\n    const totalPrice = parseInt(totals[key].price) * parseInt(totals[key].qty)\r\n    qty += parseInt(totals[key].qty)\r\n    price += totalPrice\r\n  }\r\n  return { qty, subTotal: price.toFixed(2) }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\getAmount.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\formatDate.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\types.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\index.js",
  [
    "1336",
    "1337",
    "1338",
    "1339",
    "1340",
    "1341",
    "1342",
    "1343",
    "1344",
    "1345",
    "1346",
    "1347",
    "1348",
    "1349",
    "1350",
    "1351",
    "1352",
    "1353",
    "1354",
    "1355",
    "1356",
    "1357",
    "1358",
    "1359",
    "1360",
    "1361"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  ScheduleComponent,\r\n  ViewDirective,\r\n  ViewsDirective,\r\n  Inject,\r\n  Week,\r\n  Month,\r\n  Agenda,\r\n  DragAndDrop,\r\n  Resize,\r\n  Day,\r\n} from \"@syncfusion/ej2-react-schedule\"\r\nimport OrderSlip from \"components/SchedulerComponent/orderSlip\"\r\nimport {\r\n  selectSchedulerComponentSlice,\r\n  updateSchedules,\r\n  setSchedules,\r\n  clearSchedules,\r\n  setBranchColors,\r\n  removeSchedule,\r\n} from \"./schedulerComponentSlice\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport schedulerSchema from \"./schedulerSchema\"\r\nimport { addData, updateData, deleteData } from \"services\"\r\nimport { BRANCHES, SCHEDULES } from \"services/collectionNames\"\r\nimport formatDataSource from \"./formatDataSource\"\r\nimport db from \"services/firebase\"\r\nimport {\r\n  BC,\r\n  BC_HALF,\r\n  BRANCH,\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  EIGHT,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  PARTNER_MERCHANT_ORDER_NO,\r\n  TWELVE,\r\n  _ID,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport { DROPDOWN_DATAS } from \"components/SchedulerComponent/orderSlip/orderSlipConfig\"\r\nimport identifyDateRange, { getDaysInMonthUTC } from \"./identifyDateRange\"\r\nimport Backdrop from \"components/backdrop\"\r\nimport { selectOrderComponentSlice } from \"components/SchedulerComponent/orderSlip/orderSlipSlice\"\r\n\r\nimport \"./app.component.css\"\r\nimport { useGetDropdowns } from \"./dropdowns\"\r\nimport { selectUserSlice } from \"containers/0.NewLogin/loginSlice\"\r\nimport { CustomButton } from \"./styles\"\r\nimport getWeekOfDate from \"Restructured/Utilities/getWeekOfDate\"\r\nimport {\r\n  selectSchedulerOpenedIdSlice,\r\n  setId,\r\n  clearId,\r\n} from \"./orderSlip/schedulerOpenedIdSlice\"\r\nimport useOrderNoCounter from \"./orderSlip/hookOrderNoCounter\"\r\nimport { ORDER_VIA_PARTNER } from \"Restructured/Constants/schedules\"\r\n\r\nfunction SchedulerComponent({ setLoading, navigate, handleNavigate }) {\r\n  const [handleCount] = useOrderNoCounter()\r\n  const dropdowns = useGetDropdowns()\r\n  const dispatch = useDispatch()\r\n  const userComponentSlice = useSelector(selectUserSlice)\r\n  const schedulerOpenedIdSlice = useSelector(selectSchedulerOpenedIdSlice)\r\n  const selectOrderSlice = useSelector(selectOrderComponentSlice)\r\n  const schedulerComponentSlice = useSelector(selectSchedulerComponentSlice)\r\n  const [dataSource, setDataSource] = useState([])\r\n  const [branchSelection, setBranchSelection] = useState(null)\r\n  const [eventSettings, setEventSettings] = useState({\r\n    dataSource: [],\r\n    allowDeleting: false,\r\n  })\r\n  const [orderSlipData, setOrderSlipData] = useState({})\r\n\r\n  // const filterByBranch = (branch) => {\r\n  //   if (branch) {\r\n  //     setBranchSelection(branch)\r\n  //     const dataSourceFilter = [\r\n  //       ...dataSource.filter((data) => data.branch === branch),\r\n  //     ]\r\n  //     setEventSettings({ ...eventSettings, dataSource: dataSourceFilter })\r\n  //   } else {\r\n  //     setBranchSelection(null)\r\n  //     setEventSettings({ ...eventSettings, dataSource: dataSource })\r\n  //   }\r\n  // }\r\n\r\n  const [stop, setStop] = useState(false)\r\n  useEffect(() => {\r\n    if (userComponentSlice?.roles.includes(\"Admin\")) {\r\n      if (stop === false) {\r\n        setEventSettings({\r\n          ...eventSettings,\r\n          dataSource: dataSource,\r\n          allowDeleting: true,\r\n        })\r\n      }\r\n    }\r\n    if (dataSource.length > 0) {\r\n      setStop(true)\r\n    }\r\n  }, [userComponentSlice, dataSource])\r\n\r\n  useEffect(() => {\r\n    setEventSettings({\r\n      ...eventSettings,\r\n      dataSource: [...formatDataSource(schedulerComponentSlice.dataSource)],\r\n    })\r\n  }, [schedulerComponentSlice.dataSource])\r\n\r\n  useEffect(() => {\r\n    if (navigate.currentView === \"Day\") return\r\n    const _startTime = new Date(navigate?.dateRange[0].setHours(0, 0, 0, 0))\r\n    const _endTime = new Date(navigate?.dateRange[1].setHours(23, 59, 59, 59))\r\n    const unsubscribe = db\r\n      .collection(SCHEDULES)\r\n      .where(\"StartTime\", \">=\", _startTime)\r\n      .where(\"StartTime\", \"<=\", _endTime)\r\n      // .orderBy(\"StartTime\", \"asc\")\r\n      .onSnapshot(function (snapshot) {\r\n        const schedules = []\r\n        for (const obj of snapshot.docChanges()) {\r\n          if (obj.type === \"modified\") {\r\n            const data = obj.doc.data()\r\n            const id = obj.doc.id\r\n            const newData = {\r\n              ...data,\r\n              Subject: data.customer,\r\n            }\r\n            addData({\r\n              data: {\r\n                displayName: userComponentSlice.displayName,\r\n                email: userComponentSlice.email,\r\n                action: \"Modified\",\r\n                date: new Date(),\r\n                _id: id,\r\n              },\r\n              collection: \"logs\",\r\n            })\r\n            dispatch(updateSchedules(newData))\r\n          } else if (obj.type === \"added\") {\r\n            const data = obj.doc.data()\r\n            const newData = {\r\n              ...data,\r\n              Subject: data.customer,\r\n              [_ID]: obj.doc.id,\r\n            }\r\n            schedules.push(newData)\r\n            // dispatch(setSchedules(newData))\r\n          } else if (obj.type === \"removed\") {\r\n            const _id = obj.doc.id\r\n            dispatch(removeSchedule({ _id: _id }))\r\n          } else {\r\n            console.log(\"nothing\", obj.type)\r\n          }\r\n        }\r\n        if (schedules.length > 0) {\r\n          const branch =\r\n            userComponentSlice.branches.length > 0\r\n              ? userComponentSlice.branches[0]\r\n              : \"\"\r\n          const branchSchedules = schedules.filter(\r\n            (row) => row[BRANCH] === branch\r\n          )\r\n          dispatch(setSchedules(branchSchedules))\r\n        }\r\n        setLoading(false)\r\n      })\r\n    return () => {\r\n      unsubscribe()\r\n      dispatch(clearSchedules())\r\n    }\r\n  }, [navigate?.dateRange])\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection(BRANCHES).onSnapshot(function (snapshot) {\r\n      for (const obj of snapshot.docChanges()) {\r\n        if (obj.type === \"modified\") {\r\n          const data = obj.doc.data()\r\n          dispatch(\r\n            setBranchColors({ branch: data.branchName, color: data.color })\r\n          )\r\n        } else if (obj.type === \"added\") {\r\n          const data = obj.doc.data()\r\n          dispatch(\r\n            setBranchColors({ branch: data.branchName, color: data.color })\r\n          )\r\n        } else {\r\n          console.log(\"nothing\")\r\n        }\r\n      }\r\n    })\r\n    return () => {\r\n      unsubscribe()\r\n    }\r\n  }, [])\r\n\r\n  const onActionBegin = async (args) => {\r\n    console.log(\"type\", args)\r\n    if (args.requestType === \"eventChange\") {\r\n      const data = {\r\n        ...args.data,\r\n        totalDue: selectOrderSlice?.totalAmountPaid,\r\n      }\r\n      data.Subject = data[CUSTOMER]\r\n      data.Guid = null\r\n      data.amountPaid =\r\n        data?.status === \"CANCELLED\"\r\n          ? \"0.00\"\r\n          : typeof data?.amountPaid !== \"undefined\"\r\n          ? data?.amountPaid\r\n          : \"0.00\"\r\n\r\n      data.partials =\r\n        data?.status === \"CANCELLED\"\r\n          ? []\r\n          : data?.partials\r\n          ? [...data?.partials]\r\n          : []\r\n      const dataToBeSend = schedulerSchema(data)\r\n      delete dataToBeSend.RecurrenceRule\r\n      updateData({\r\n        data: { ...dataToBeSend },\r\n        collection: SCHEDULES,\r\n        id: args.data[_ID],\r\n      })\r\n    } else if (args.requestType === \"eventCreate\") {\r\n      const data = args.addedRecords[0]\r\n      data.Subject = data[CUSTOMER]\r\n\r\n      if (userComponentSlice.branches.length === 0) return\r\n      const orderNo = await handleCount(userComponentSlice.branches[0])\r\n      if (orderNo) {\r\n        const dataToBeSend = schedulerSchema({\r\n          ...data,\r\n          [ORDER_NO]: orderNo,\r\n          totalDue: selectOrderSlice?.totalAmountPaid,\r\n        })\r\n        delete dataToBeSend.RecurrenceRule\r\n        const result = addData({\r\n          data: dataToBeSend,\r\n          collection: SCHEDULES,\r\n          id: null,\r\n        })\r\n        result.then((id) => {\r\n          addData({\r\n            data: {\r\n              displayName: userComponentSlice.displayName,\r\n              email: userComponentSlice.email,\r\n              action: \"Created\",\r\n              date: new Date(),\r\n              _id: id,\r\n            },\r\n            collection: \"logs\",\r\n          })\r\n        })\r\n      }\r\n    } else if (args.requestType === \"eventRemove\") {\r\n      const { deletedRecords } = args\r\n      deleteData({ id: deletedRecords[0]._id, collection: SCHEDULES })\r\n    } else {\r\n      console.log(\"other action is triggered\")\r\n    }\r\n  }\r\n\r\n  const onNavigation = (args) => {\r\n    // console.log(\"navigating\", args)\r\n    // if (args.currentDate) {\r\n    //   console.log(getWeekOfDate(args.currentDate))\r\n    // }\r\n    // console.log(args.currentDate)\r\n    // console.log('monthList', monthList)\r\n    // const monthDays = getDaysInMonthUTC(args.currentDate)\r\n    // if (!monthList.includes(args.currentDate)) {\r\n    //   console.log('wala')\r\n    //   setMonthList([...monthDays])\r\n    // } else {\r\n    //   console.log('meron')\r\n    // }\r\n  }\r\n\r\n  const { branchColors } = schedulerComponentSlice\r\n  const onEventRendered = (args, branchDropdown) => {\r\n    const { element, data } = args\r\n    // element.style.background = branchColors[data[BRANCH]]\r\n    if (data?.status) {\r\n      if (data?.status === \"PENDING PAYMENT\") {\r\n        if (data[ORDER_VIA]) {\r\n          element.style.background = \"yellow\"\r\n          element.style.color = \"#666\"\r\n        }\r\n        if (data[ORDER_VIA_PARTNER]) {\r\n          element.style.background = \"pink\"\r\n          element.style.color = \"#333\"\r\n        }\r\n      }\r\n      if (data?.status === \"FULFILLED\") {\r\n        element.style.background = \"transparent\"\r\n        element.style.color = \"#333\"\r\n      }\r\n\r\n      if (data?.status === \"CONFIRMED\") {\r\n        element.style.background = \"lightblue\"\r\n        element.style.color = \"black\"\r\n      }\r\n\r\n      if (data?.status === \"CANCELLED\") {\r\n        element.style.background = \"orange\"\r\n        element.style.color = \"#333\"\r\n      }\r\n    } else {\r\n      element.style.background = \"transparent\"\r\n      element.style.color = \"#333\"\r\n    }\r\n\r\n    if (!branchDropdown.includes(data[BRANCH])) {\r\n      element.hidden = true\r\n    }\r\n  }\r\n\r\n  const onPopUpOpen = (args) => {\r\n    // setLoading(true)\r\n    const { data } = args\r\n    dispatch(setId(data._id))\r\n    setOrderSlipData(data)\r\n    if (args.type === \"QuickInfo\") {\r\n      args.cancel = true\r\n    }\r\n    const header = args.element.querySelector(\".e-title-text\")\r\n    const partnerMerchant = args.element.querySelector(\r\n      `#${PARTNER_MERCHANT_ORDER_NO}`\r\n    )\r\n    const orderVia = args.element.querySelector(\"#orderVia_hidden\")\r\n    if (header) {\r\n      if (data?.orderNo) {\r\n        header.innerHTML = \"Update Order\"\r\n      } else {\r\n        header.innerHTML = \"New Order\"\r\n      }\r\n    }\r\n    if (args.type === \"Editor\") {\r\n      const textArea = args.element.querySelector(\"#remarks\")\r\n      if (textArea.value === \"\") {\r\n        textArea.value = \"RIDER DETAILS: \\nNAME:\\nCONTACT NUMBER:\"\r\n      }\r\n      const branch = args.element.querySelector(\"#branch\")\r\n      setTimeout(() => {\r\n        if (typeof userComponentSlice.branches[0] !== \"undefined\") {\r\n          branch.value = userComponentSlice.branches[0]\r\n        }\r\n      }, 1500)\r\n\r\n      // args.element.onkeyup = (e) => {\r\n      //   if (!orderVia.value?.includes('Partner Merchant')) {\r\n      //     partnerMerchant.value = ''\r\n      //   }\r\n      // }\r\n    } else {\r\n    }\r\n  }\r\n\r\n  const onPopUpClose = () => {\r\n    dispatch(clearId())\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {dropdowns[BRANCH].length > 0 && (\r\n        <ScheduleComponent\r\n          startHour=\"08:00\"\r\n          endHour=\"19:00\"\r\n          editorTemplate={OrderSlip}\r\n          eventSettings={eventSettings}\r\n          views={[\r\n            {\r\n              option: \"Day\",\r\n              startHour: \"09:00\",\r\n              endHour: \"19:00\",\r\n              timeScale: { enable: true, slotCount: 3 },\r\n            },\r\n          ]}\r\n          actionBegin={onActionBegin}\r\n          navigating={handleNavigate}\r\n          eventRendered={(args) => onEventRendered(args, dropdowns[BRANCH])}\r\n          popupOpen={onPopUpOpen}\r\n          popupClose={onPopUpClose}\r\n          height=\"92vh\"\r\n          width=\"100%\"\r\n          currentView={navigate?.currentView}\r\n          selectedDate={navigate?.selectedDate}\r\n        >\r\n          <ViewsDirective>\r\n            <ViewDirective option=\"Day\" />\r\n            <ViewDirective option=\"Week\" />\r\n            <ViewDirective option=\"Month\" />\r\n            <ViewDirective option=\"Agenda\" />\r\n          </ViewsDirective>\r\n          <Inject services={[Day, Week, Month, Agenda]} />\r\n        </ScheduleComponent>\r\n      )}\r\n      {/* <div\r\n        style={{ position: \"fixed\", top: 1, right: \"3rem\", padding: \"1rem\" }}\r\n      >\r\n        {userComponentSlice?.branches.map((data) => (\r\n          <CustomButton\r\n            onClick={() => filterByBranch(data)}\r\n            backgroundColor={branchSelection === data ? \"#e3165b\" : \"white\"}\r\n          >\r\n            {data}\r\n          </CustomButton>\r\n        ))}\r\n        <CustomButton\r\n          onClick={() => filterByBranch(null)}\r\n          backgroundColor={branchSelection === null ? \"#e3165b\" : \"white\"}\r\n        >\r\n          All\r\n        </CustomButton>\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SchedulerComponent\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\Table\\index.js",
  [
    "1362",
    "1363",
    "1364",
    "1365",
    "1366"
  ],
  "import * as React from 'react'\r\nimport {\r\n  GridComponent,\r\n  ColumnsDirective,\r\n  ColumnDirective,\r\n  Resize,\r\n  Sort,\r\n  ContextMenu,\r\n  Filter,\r\n  Page,\r\n  ExcelExport,\r\n  Group,\r\n  PdfExport,\r\n  Edit,\r\n  Inject,\r\n  Search,\r\n  Toolbar\r\n} from '@syncfusion/ej2-react-grids'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectTableSlice } from './tableSlice'\r\nimport { addData, deleteData, updateData } from 'services'\r\nimport { BRANCHES } from 'services/collectionNames'\r\nconst Table = (props) => {\r\n  const tableSlice = useSelector(selectTableSlice)\r\n  const contextMenuItems = [\r\n    'AutoFit',\r\n    'AutoFitAll',\r\n    'SortAscending',\r\n    'SortDescending',\r\n    'Copy',\r\n    'Edit',\r\n    'Delete',\r\n    'Save',\r\n    'Cancel',\r\n    'PdfExport',\r\n    'ExcelExport',\r\n    'CsvExport',\r\n    'FirstPage',\r\n    'PrevPage',\r\n    'LastPage',\r\n    'NextPage'\r\n  ]\r\n\r\n  const onActionBegin = e => {\r\n    const { requestType, data } = e\r\n    const dataCopy = { ...data }\r\n    delete dataCopy._id\r\n    if (requestType === 'save') {\r\n      updateData({\r\n        data: dataCopy,\r\n        id: data._id,\r\n        collection: BRANCHES\r\n      })\r\n    }\r\n    if (requestType === 'delete') {\r\n      deleteData({\r\n        id: data[0]?._id,\r\n        collection: BRANCHES\r\n      })\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className='control-pane'>\r\n        <div className='control-section'>\r\n          <GridComponent\r\n            id='gridcomp'\r\n            dataSource={tableSlice.dataList}\r\n            allowPaging\r\n            allowSorting\r\n            allowFiltering\r\n            allowGrouping\r\n            allowExcelExport\r\n            allowPdfExport\r\n            contextMenuItems={contextMenuItems}\r\n            actionBegin={onActionBegin}\r\n            {...props}\r\n          >\r\n            <ColumnsDirective>\r\n              {tableSlice.headers.map(data => {\r\n                return (\r\n                  <ColumnDirective\r\n                    key={data.field}\r\n                    {...data}\r\n                  />\r\n                )\r\n              })}\r\n            </ColumnsDirective>\r\n            <Inject services={[Page, Toolbar, Edit, Sort, Filter, Group, ExcelExport]} />\r\n          </GridComponent>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport const toolbarOptions = ['Add', 'Edit', 'Delete', 'Update', 'Cancel', 'Search']\r\nexport const editSettings = {\r\n  allowEditing: true,\r\n  allowAdding: true,\r\n  allowDeleting: true,\r\n  newRowPosition: 'Top'\r\n}\r\nexport default Table\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\index.js",
  [
    "1367",
    "1368"
  ],
  "import { Button } from 'antd'\r\nimport { useHandleModal } from 'commonFunctions/useHandleModal'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Wrapper } from './styles'\r\nimport { useGetUsers } from './useGetUsers'\r\nimport UserCard from './userCard'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport fields from 'components/fields'\r\nimport Input from 'components/fields/input'\r\nimport { INPUT } from 'components/fields/types'\r\n\r\nexport default function Users(props) {\r\n  const [users, handleSave, handleAdd] = useGetUsers()\r\n  const [isModalVisible, showModal, handleOk, handleCancel] = useHandleModal()\r\n  const [values, setValues] = useState({})\r\n\r\n  const handleModalOk = () => {\r\n    handleAdd({ ...values })\r\n    setValues({ name: '', email: '' })\r\n    handleOk()\r\n  }\r\n  return (\r\n    <div>\r\n      <Wrapper>\r\n        <Button type='primary' danger onClick={showModal}>\r\n          Add\r\n        </Button>\r\n        <Modal title={props.name} visible={isModalVisible} onOk={handleModalOk} onCancel={handleCancel}>\r\n          {fields[INPUT]({ onChange: (e) => setValues({ ...values, email: e.target.value }), value: values.email, label: 'Email' })}\r\n          {fields[INPUT]({ onChange: (e) => setValues({ ...values, name: e.target.value }), value: values.name, label: 'Name' })}\r\n        </Modal>\r\n      </Wrapper>\r\n      <Wrapper>\r\n        {Object.keys(users).map(id => {\r\n          const data = { ...users[id] }\r\n          return (\r\n            <UserCard\r\n              key={data._id}\r\n              name={data.name}\r\n              email={data?._id}\r\n              roles={data?.roles}\r\n              photoURL={data?.photoURL}\r\n              branches={[...data?.branches]}\r\n              handleSave={({ roles, branches }) => {\r\n                handleSave(roles, branches, data._id)\r\n              }}\r\n              isEnabled={data?.isEnabled}\r\n            />\r\n          )\r\n        })}\r\n      </Wrapper>\r\n    </div>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\appBar\\index.js",
  [
    "1369",
    "1370"
  ],
  "import React, { useState } from \"react\"\r\nimport { AiOutlineMenuFold, AiOutlineMenuUnfold } from \"react-icons/ai\"\r\nimport { IoMdClose } from \"react-icons/io\"\r\nimport {\r\n  Item,\r\n  Wrapper,\r\n  Menu,\r\n  Link,\r\n  ItemMobileView,\r\n  User,\r\n  UserProfileLink,\r\n} from \"./appBarStyles\"\r\nimport { auth } from \"services/firebase\"\r\nimport {\r\n  selectUserSlice,\r\n  clearAccountInfo,\r\n} from \"containers/0.login/loginSlice\"\r\nimport UserInfoCard from \"./UserInfoCard\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectSideNav } from \"components/sideNav/sideNavSlice\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { update } from \"services\"\r\n\r\nfunction AppBar({ isToggled, toggle }) {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const sideNavSlice = useSelector(selectSideNav)\r\n  const user = useSelector(selectUserSlice)\r\n  const [viewProfile, setViewProfile] = useState(false)\r\n  const handleLogout = () => {\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        dispatch(clearAccountInfo())\r\n        history.push(\"/\")\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n  return (\r\n    <>\r\n      <Wrapper isToggled={isToggled}>\r\n        <Link onClick={toggle} isToggled={isToggled}>\r\n          {isToggled ? (\r\n            <AiOutlineMenuFold size={25} />\r\n          ) : (\r\n            <AiOutlineMenuUnfold size={25} />\r\n          )}\r\n        </Link>\r\n        <Menu>\r\n          <Item isToggled={isToggled}>Home</Item>\r\n          <Item isToggled={isToggled}>/</Item>\r\n          <Item isToggled={isToggled}>{sideNavSlice.selectedMenu[0]}</Item>\r\n          <Item isToggled={isToggled}>/</Item>\r\n          <Item isToggled={isToggled} isActive>\r\n            {sideNavSlice.selectedMenu[1]}\r\n          </Item>\r\n          <ItemMobileView>{sideNavSlice.selectedMenu[1]}</ItemMobileView>\r\n        </Menu>\r\n        <div style={{ position: \"relative\" }}>\r\n          <UserProfileLink\r\n            onClick={(e) => {\r\n              setViewProfile(true)\r\n            }}\r\n          >\r\n            <User />\r\n          </UserProfileLink>\r\n          {/* <div\r\n          style={{\r\n            padding: \"2rem\",\r\n            display: viewProfile ? \"block\" : \"none\",\r\n            zIndex: \"999\",\r\n            position: \"absolute\",\r\n            backgroundColor: \"white\",\r\n            right: 0,\r\n            top: 0,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\",\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={() => setViewProfile(false)}\r\n          >\r\n            <IoMdClose />\r\n          </div>\r\n          <img src={user.photoURL} />\r\n          <h4>{user.displayName}</h4>\r\n          <span>{user.email}</span>\r\n          <button\r\n            onClick={(e) => {\r\n              e.preventDefault()\r\n              handleLogout()\r\n              // history.push(\"/\")\r\n            }}\r\n          >\r\n            Logout\r\n          </button>\r\n        </div> */}\r\n        </div>\r\n      </Wrapper>\r\n      {viewProfile && (\r\n        <UserInfoCard\r\n          close={() => setViewProfile(false)}\r\n          name={user.displayName}\r\n          email={user.email}\r\n          branch={user.branches.length > 0 ? user.branches[0] : \"None\"}\r\n          logout={(e) => {\r\n            e.preventDefault()\r\n            handleLogout()\r\n            // history.push(\"/\")\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AppBar\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\index.js",
  [
    "1371",
    "1372",
    "1373",
    "1374",
    "1375",
    "1376",
    "1377",
    "1378",
    "1379",
    "1380",
    "1381",
    "1382",
    "1383"
  ],
  "import { Button, Space, Table, Tag } from \"antd\"\r\nimport { Paper } from \"components/PaymentDetails/styles\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { RangePicker, Select } from \"Restructured/Components/Commons\"\r\nimport { CODE, QUANTITY } from \"Restructured/Constants/products\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  LABELS,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { Flex, Grid, Item } from \"Restructured/Styles\"\r\nimport useDirectAndThirdParty from \"./Controllers/useDirectAndThirdParty\"\r\n\r\nfunction DirectAndThirdParty() {\r\n  const [\r\n    tableColumns,\r\n    dropdowns,\r\n    reports,\r\n    sourceSummary,\r\n    branch,\r\n    setBranch,\r\n    dateFromTo,\r\n    setDateFromTo,\r\n    handleExport,\r\n  ] = useDirectAndThirdParty()\r\n\r\n  return (\r\n    <Grid alignItems=\"center\">\r\n      <Flex justifyContent=\"flex-end\">\r\n        <Item width=\"calc(100% - 750px)\">\r\n          <Button type=\"primary\" danger onClick={handleExport}>\r\n            Export as Excel\r\n          </Button>\r\n        </Item>\r\n        <Item>\r\n          <Select\r\n            label=\"Branch\"\r\n            dataSource={[...dropdowns]}\r\n            value={branch}\r\n            onChange={(value) => {\r\n              setBranch(value)\r\n            }}\r\n          />\r\n        </Item>\r\n        <Item>\r\n          <RangePicker\r\n            showTime={false}\r\n            format=\"MM/DD/YYYY\"\r\n            label=\"Date\"\r\n            value={dateFromTo}\r\n            onChange={(value) => {\r\n              setDateFromTo(value)\r\n            }}\r\n          />\r\n        </Item>\r\n        <Item width=\"100%\">\r\n          {reports.map((data) => {\r\n            const date = Object.keys(data)[0]\r\n            const dateData = { ...data[date] }\r\n            return (\r\n              <div key={data.header} style={{ padding: \"1rem\" }}>\r\n                <h3>{date}</h3>\r\n                {Object.keys(dateData).map((orderVia) => {\r\n                  const dataSource = [...dateData[orderVia]]\r\n                  return (\r\n                    <Paper>\r\n                      <h3>{orderVia}</h3>\r\n                      <Table columns={tableColumns} dataSource={dataSource} />\r\n                    </Paper>\r\n                  )\r\n                })}\r\n              </div>\r\n            )\r\n          })}\r\n        </Item>\r\n      </Flex>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default DirectAndThirdParty\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\products\\index.js",
  [
    "1384",
    "1385",
    "1386",
    "1387"
  ],
  "import { Panel, Wrapper, Footer } from \"./styles\"\r\nimport React, { useEffect } from \"react\"\r\nimport { useGetProducts } from \"./useGetProducts\"\r\nimport { Container } from \"commonStyles\"\r\nimport { Button } from \"antd\"\r\nimport Table, { toolbarOptions, editSettings } from \"./table\"\r\n\r\nexport function Products(props) {\r\n  const [products, handleChange] = useGetProducts()\r\n  const columns = [\r\n    {\r\n      headerText: \"Code\",\r\n      field: \"code\",\r\n      isPrimaryKey: true,\r\n    },\r\n    {\r\n      headerText: \"Description\",\r\n      field: \"description\",\r\n    },\r\n    {\r\n      headerText: \"Price\",\r\n      field: \"price\",\r\n    },\r\n  ]\r\n  return (\r\n    <Wrapper>\r\n      {products.map((data) => {\r\n        if (typeof data.productList === \"undefined\") {\r\n          data.productList = []\r\n        }\r\n        return (\r\n          <Panel key={data.groupHeader}>\r\n            <Container>\r\n              <div>{data.groupHeader}</div>\r\n              <br />\r\n              <Table\r\n                id={data._id}\r\n                productList={data.productList}\r\n                columns={columns}\r\n                toolbar={toolbarOptions}\r\n                editSettings={editSettings}\r\n              />\r\n              <br />\r\n            </Container>\r\n          </Panel>\r\n        )\r\n      })}\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DailyReport\\index.js",
  [
    "1388",
    "1389",
    "1390",
    "1391",
    "1392"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport DailyReportType from \"./dailyReportType\"\r\nimport { ORDER_VIA, ORDER_VIA_PARTNER } from \"Restructured/Constants/schedules\"\r\nimport ScheduleServices from \"Restructured/Services/SchedulerServices\"\r\nimport { Flex, Grid, Item } from \"Restructured/Styles\"\r\nimport { Card } from \"antd\"\r\nimport SalesImage from \"images/sales.jpg\"\r\nimport ServedReportType from \"./servedReportType\"\r\nimport ReportDirectSales from \"components/features/AnalyticsReportDirectSales\"\r\nimport ReportThirdPartySales from \"components/features/AnalyticsReportThirdPartySales\"\r\n\r\nconst { Meta } = Card\r\n\r\nfunction DailyReports() {\r\n  const [clickedReport, setClickedReport] = useState(null)\r\n  return (\r\n    <div>\r\n      {clickedReport === null && (\r\n        <>\r\n          <Grid padding=\"1rem\">\r\n            <h1>DAILY SALES REPORT</h1>\r\n          </Grid>\r\n          <Grid padding=\"1rem\" height=\"70vh\" alignItems=\"center\">\r\n            <Flex justifyContent=\"center\">\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={<img alt=\"sales-image\" src={SalesImage} />}\r\n                  onClick={() => {\r\n                    setClickedReport(\"DIRECT\")\r\n                  }}\r\n                >\r\n                  <Meta title=\"DIRECT ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={\r\n                    <img\r\n                      alt=\"sales-image\"\r\n                      src={SalesImage}\r\n                      onClick={() => {\r\n                        setClickedReport(\"THIRD PARTY\")\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Meta title=\"THIRD PARTY ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n              <Item>\r\n                <Card\r\n                  hoverable\r\n                  style={{ width: 240 }}\r\n                  cover={<img alt=\"sales-image\" src={SalesImage} />}\r\n                  onClick={() => {\r\n                    setClickedReport(\"SERVED\")\r\n                  }}\r\n                >\r\n                  <Meta title=\"SERVED ORDER\" description=\"Sales Report\" />\r\n                </Card>\r\n              </Item>\r\n            </Flex>\r\n          </Grid>\r\n        </>\r\n      )}\r\n\r\n      {clickedReport === \"DIRECT\" && (\r\n        <ReportDirectSales back={() => setClickedReport(null)} />\r\n        // <DailyReportType\r\n        //   Services={ScheduleServices}\r\n        //   filterBasis={ORDER_VIA}\r\n        //   title=\"DAILY SALES DIRECT ORDERS\"\r\n        //   back={() => setClickedReport(null)}\r\n        // />\r\n      )}\r\n\r\n      {clickedReport === \"THIRD PARTY\" && (\r\n        <ReportThirdPartySales back={() => setClickedReport(null)} />\r\n        // <DailyReportType\r\n        //   Services={ScheduleServices}\r\n        //   filterBasis={ORDER_VIA}\r\n        //   title=\"DAILY SALES DIRECT ORDERS\"\r\n        //   back={() => setClickedReport(null)}\r\n        // />\r\n      )}\r\n\r\n      {clickedReport === \"SERVED\" && (\r\n        <ServedReportType\r\n          Services={ScheduleServices}\r\n          filterBasis={[ORDER_VIA, ORDER_VIA_PARTNER]}\r\n          title=\"DAILY SALES SERVED ORDERS\"\r\n          back={() => setClickedReport(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DailyReports\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Constants\\schedules.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Services\\ProductServices.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Services\\DropdownServices.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\PaymentTransactionTable\\index.js",
  [
    "1393",
    "1394",
    "1395",
    "1396",
    "1397",
    "1398",
    "1399",
    "1400",
    "1401",
    "1402",
    "1403"
  ],
  "import * as React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectTableSlice } from \"components/Table/tableSlice\"\r\nimport { addData, deleteData, updateData } from \"services\"\r\nimport { BRANCHES } from \"services/collectionNames\"\r\nimport { Flex, Grid } from \"Restructured/Styles\"\r\nimport { CheckboxGroup, StyledTable, VerticalAutoScroll } from \"./styles\"\r\nimport { Select, Table, Tag } from \"antd\"\r\nimport { Input } from \"antd\"\r\nimport PartnerMerchantModal from \"./partnerMerchantModal\"\r\nimport { Option } from \"antd/lib/mentions\"\r\nimport {\r\n  BRANCH,\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  PARTNER_MERCHANT_ORDER_NO,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  OTHERS_DEDUCTION,\r\n  SOURCE,\r\n} from \"components/PaymentDetails/types\"\r\nimport { QUANTITY } from \"Restructured/Constants/products\"\r\nimport PaymentTransactionPrint from \"./PaymentTransactionPrint\"\r\nimport GroupPayments from \"components/features/TransactionGroupPayments\"\r\nconst { Search } = Input\r\n\r\nconst plainOptions = [\r\n  \"NO STATUS\",\r\n  \"CONFIRMED\",\r\n  \"PENDING PAYMENT\",\r\n  \"PAID\",\r\n  \"REVISED / RESCHEDULED\",\r\n  \"CANCELLED\",\r\n  \"FULFILLED\",\r\n  \"INCIDENTS\",\r\n]\r\n\r\nconst columnRender = (value, record, checkValues, obj) => {\r\n  let _value = value\r\n  const { status, orderVia, orderViaPartner } = record\r\n  const others = record?.others\r\n  let style = { color: \"#555\" }\r\n  if (status === \"PAID\" && checkValues.includes(status)) {\r\n    style.backgroundColor = \"transparent\"\r\n    style.color = \"black\"\r\n  } else if (status === \"PENDING PAYMENT\" && checkValues.includes(status)) {\r\n    if (orderVia) {\r\n      style.backgroundColor = \"yellow\"\r\n      style.color = \"black\"\r\n    }\r\n    if (orderViaPartner) {\r\n      style.backgroundColor = \"pink\"\r\n      style.color = \"#333\"\r\n    }\r\n  } else if (status === \"CONFIRMED\" && checkValues.includes(status)) {\r\n    style.backgroundColor = \"lightblue\"\r\n    style.color = \"black\"\r\n  } else if (status === \"CANCELLED\" && checkValues.includes(status)) {\r\n    style.backgroundColor = \"orange\"\r\n    style.color = \"black\"\r\n  } else if (status === \"FULFILLED\" && checkValues.includes(status)) {\r\n    style.backgroundColor = \"transparent\"\r\n    style.color = \"black\"\r\n  } else {\r\n    style.backgroundColor = \"transparent\"\r\n    style.color = \"black\"\r\n  }\r\n\r\n  if (obj?.field === \"totalAmountPaid\" || obj?.field === \"othersDeduction\") {\r\n    _value = Number(value).toFixed(2)\r\n  }\r\n  if (typeof others !== \"undefined\") {\r\n    if (others?.Incidents && checkValues.includes(\"INCIDENTS\")) {\r\n      style.backgroundColor = \"#444\"\r\n      style.color = \"white\"\r\n    }\r\n  }\r\n  return <Tag style={style}>{_value}</Tag>\r\n}\r\nconst PaymentTransactionTable = (props) => {\r\n  const tableSlice = useSelector(selectTableSlice)\r\n  const [checkboxValues, setCheckboxValues] = React.useState([...plainOptions])\r\n  const [dataSource, setDataSource] = React.useState([])\r\n  const [dataList, setDataList] = React.useState([]) // this is for payment transaction filter\r\n  const [isFilteredClicked, setIsFilteredClicked] = React.useState(false)\r\n  const [columns, setColumns] = React.useState([])\r\n  const [searchDropdown, setSearchDropdown] = React.useState(\r\n    \"partnerMerchantOrderNo\"\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    loadData(checkboxValues)\r\n  }, [tableSlice])\r\n\r\n  const onChange = (checkedValues) => {\r\n    loadData(checkedValues)\r\n    setCheckboxValues(checkedValues)\r\n  }\r\n\r\n  const productColumnWidths = (key, headerText = \"\") => {\r\n    if (key === DATE_START) {\r\n      return [\r\n        \"10rem\",\r\n        <>\r\n          <span>ORDER</span>\r\n          <br />\r\n          <span>DATE/TIME:</span>\r\n        </>,\r\n      ]\r\n    }\r\n    if (key === DATE_ORDER_PLACED) {\r\n      return [\r\n        \"10rem\",\r\n        <>\r\n          <span>DATE/TIME</span>\r\n          <br />\r\n          <span>PLACED:</span>\r\n        </>,\r\n      ]\r\n    }\r\n    if (key === ORDER_NO) {\r\n      return [\r\n        \"10rem\",\r\n        <>\r\n          <span>ORDER</span>\r\n          <br />\r\n          <span>#:</span>\r\n        </>,\r\n      ]\r\n    }\r\n    if (key === CUSTOMER) {\r\n      return [\"10rem\", \"CUSTOMER:\"]\r\n    }\r\n    if (key === CONTACT_NUMBER) {\r\n      return [\r\n        \"5rem\",\r\n        <>\r\n          <span>CONTACT</span>\r\n          <br />\r\n          <span>#:</span>\r\n        </>,\r\n      ]\r\n    }\r\n    if (key === \"totalQty\") {\r\n      return [\"5rem\", \"QTY:\"]\r\n    }\r\n    if (key === \"totalDue\") {\r\n      return [\"6rem\", \"AMT:\"]\r\n    }\r\n    if (key === DATE_PAYMENT) {\r\n      return [\r\n        \"6rem\",\r\n        <>\r\n          <span>DATE</span>\r\n          <br />\r\n          <span>PAID:</span>\r\n        </>,\r\n      ]\r\n    }\r\n    if (key === MODE_PAYMENT) {\r\n      return [\"5rem\", \"MOP:\"]\r\n    }\r\n    if (key === SOURCE) {\r\n      return [\"5rem\", headerText.toUpperCase() + \":\"]\r\n    }\r\n    if (key === ACCOUNT_NUMBER) {\r\n      return [\r\n        \"7rem\",\r\n        <>\r\n          <span>RECEIVING</span>\r\n          <br />\r\n          <span>ACCT:</span>\r\n        </>,\r\n      ]\r\n    }\r\n    if (key === \"totalAmountPaid\") {\r\n      return [\r\n        \"6rem\",\r\n        <>\r\n          <span>PAID</span>\r\n          <br />\r\n          <span>AMT:</span>\r\n        </>,\r\n      ]\r\n    }\r\n    if (key === OTHERS_DEDUCTION) {\r\n      return [\"6rem\", \"OTHERS/ DEDUCTIONS:\"]\r\n    }\r\n    return [\"8rem\", headerText.toUpperCase() + \":\"]\r\n  }\r\n\r\n  const loadData = (checkValues, searchValue) => {\r\n    const _columns = []\r\n\r\n    if (searchValue) {\r\n      _columns.push({\r\n        title: \"Partner Merchant\".toUpperCase(),\r\n        key: \"orderViaPartner\",\r\n        dataIndex: \"orderViaPartner\",\r\n        width: \"15rem\",\r\n        fixed: \"left\",\r\n        render: (value, record) => {\r\n          return columnRender(value, record, checkValues, {\r\n            field: \"orderViaPartner\",\r\n          })\r\n        },\r\n      })\r\n      _columns.push({\r\n        title: \"Partner Merchant Order #\".toUpperCase(),\r\n        key: \"partnerMerchantOrderNo\",\r\n        dataIndex: \"partnerMerchantOrderNo\",\r\n        width: \"15rem\",\r\n        fixed: \"left\",\r\n        render: (value, record) => {\r\n          return columnRender(value, record, checkValues, {\r\n            field: \"partnerMerchantOrderNo\",\r\n          })\r\n        },\r\n      })\r\n    }\r\n\r\n    for (const obj of tableSlice?.headers) {\r\n      _columns.push({\r\n        title: productColumnWidths(obj?.field, obj?.headerText)[1],\r\n        key: obj?.field,\r\n        dataIndex: obj?.field,\r\n        align: \"center\",\r\n        width: productColumnWidths(obj?.field)[0],\r\n        // fixed: obj?.field === \"StartTime\" ? \"left\" : \"none\",\r\n        render: (value, record) => {\r\n          return columnRender(value, record, checkValues, obj)\r\n        },\r\n      })\r\n    }\r\n\r\n    // filtered dataList or all data\r\n    const _dataList = []\r\n    for (const obj of tableSlice?.dataList) {\r\n      if (obj?.partnerMerchantOrderNo.includes(searchValue)) {\r\n        _dataList.push(obj)\r\n      }\r\n    }\r\n    if (searchValue) {\r\n      setColumns(_columns)\r\n      setDataSource(_dataList)\r\n    } else {\r\n      setColumns(_columns)\r\n      setDataSource(tableSlice?.dataList)\r\n    }\r\n  }\r\n\r\n  const onSearch = (value) => {\r\n    loadData(checkboxValues, value.toUpperCase())\r\n  }\r\n\r\n  const search = (value) => {\r\n    const _dataList = []\r\n    if (searchDropdown === BRANCH) {\r\n      for (const obj of tableSlice?.dataList) {\r\n        if (obj[BRANCH].includes(value)) {\r\n          _dataList.push(obj)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (searchDropdown === ORDER_NO) {\r\n      for (const obj of tableSlice?.dataList) {\r\n        if (obj[ORDER_NO].includes(value)) {\r\n          _dataList.push(obj)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (searchDropdown === CUSTOMER) {\r\n      for (const obj of tableSlice?.dataList) {\r\n        if (obj[CUSTOMER].includes(value)) {\r\n          _dataList.push(obj)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (searchDropdown === MODE_PAYMENT) {\r\n      for (const obj of tableSlice?.dataList) {\r\n        if (typeof obj[MODE_PAYMENT] !== \"undefined\") {\r\n          if (obj[MODE_PAYMENT].includes(value)) {\r\n            _dataList.push(obj)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (searchDropdown === SOURCE) {\r\n      for (const obj of tableSlice?.dataList) {\r\n        if (typeof obj[SOURCE] !== \"undefined\") {\r\n          if (obj[SOURCE].includes(value)) {\r\n            _dataList.push(obj)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (searchDropdown === ACCOUNT_NUMBER) {\r\n      for (const obj of tableSlice?.dataList) {\r\n        if (typeof obj[ACCOUNT_NUMBER] !== \"undefined\") {\r\n          if (obj[ACCOUNT_NUMBER].includes(value)) {\r\n            _dataList.push(obj)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setDataSource(_dataList)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Grid padding=\"1rem\">\r\n          <Flex>\r\n            <div style={{ flex: 1 }}>\r\n              <PaymentTransactionPrint\r\n                dataList={dataList}\r\n                setDataList={setDataList}\r\n                setIsFilteredClicked={setIsFilteredClicked}\r\n                isFilteredClicked={isFilteredClicked}\r\n              />\r\n              {/* <CheckboxGroup\r\n                options={plainOptions}\r\n                value={checkboxValues}\r\n                onChange={onChange}\r\n                styles={{ color: \"red\" }}\r\n              /> */}\r\n            </div>\r\n            <div style={{ backgroundColor: \"red\" }}>\r\n              <Select\r\n                value={searchDropdown}\r\n                style={{ minWidth: \"17rem\", width: \"1rem\" }}\r\n                onChange={(value) => {\r\n                  setSearchDropdown(value)\r\n                  loadData(checkboxValues)\r\n                }}\r\n              >\r\n                {[\r\n                  {\r\n                    title: \"PARTNER MERCHANT ORDER #\",\r\n                    key: PARTNER_MERCHANT_ORDER_NO,\r\n                  },\r\n                  { title: \"ORDER #\", key: ORDER_NO },\r\n                  { title: \"CUSTOMER NAME\", key: CUSTOMER },\r\n                  { title: \"MODE PAYMENT\", key: MODE_PAYMENT },\r\n                  { title: \"SOURCE\", key: SOURCE },\r\n                  { title: \"ACCOUNT NUMBER\", key: ACCOUNT_NUMBER },\r\n                ].map((row) => {\r\n                  return <Option value={row.key}>{row.title}</Option>\r\n                })}\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <Search\r\n                placeholder=\"Partner Merch Order #\"\r\n                onChange={(e) => {\r\n                  if (e.target.value === \"\") {\r\n                    loadData(checkboxValues)\r\n                  }\r\n                }}\r\n                onSearch={(value) => {\r\n                  if (searchDropdown === PARTNER_MERCHANT_ORDER_NO) {\r\n                    onSearch(value)\r\n                  } else {\r\n                    search(value)\r\n                  }\r\n                }}\r\n                style={{ width: 200 }}\r\n              />\r\n            </div>\r\n            <div>\r\n              {/* <PartnerMerchantModal columns={columns} /> */}\r\n              <GroupPayments />\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n        <Grid padding=\"1rem\">\r\n          <VerticalAutoScroll>\r\n            <StyledTable\r\n              pagination={{\r\n                size: \"small\",\r\n                defaultPageSize: 20,\r\n              }}\r\n              onRow={(record) => {\r\n                return {\r\n                  onDoubleClick: (event) => {\r\n                    props.rowSelected(record)\r\n                  },\r\n                }\r\n              }}\r\n              size=\"small\"\r\n              dataSource={isFilteredClicked ? dataList : dataSource}\r\n              columns={columns}\r\n              scroll={{ y: 690 }}\r\n            />\r\n          </VerticalAutoScroll>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\nexport default PaymentTransactionTable\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\index.js",
  [
    "1404"
  ],
  "import React, { useState } from \"react\"\r\nimport { Tabs, Button } from \"antd\"\r\nimport { AppleOutlined, AndroidOutlined } from \"@ant-design/icons\"\r\nimport ProductCards from \"./ProductCards\"\r\nimport ReceivingModal from \"./ProductCards/modal\"\r\nimport ProductTable from \"./ProductTable\"\r\nimport ProductTableView from \"./ProductTableView\"\r\nconst { TabPane } = Tabs\r\n\r\nfunction Inventory() {\r\n  const [modalState, setModalState] = useState(false)\r\n  const operations = <ReceivingModal setModalState={setModalState} />\r\n  return (\r\n    <div style={{ padding: \"1rem\" }}>\r\n      <Tabs defaultActiveKey=\"1\" tabBarExtraContent={operations}>\r\n        <TabPane\r\n          tab={\r\n            <span>\r\n              <AppleOutlined />\r\n              Products Table View\r\n            </span>\r\n          }\r\n          key=\"1\"\r\n        >\r\n          <ProductTableView />\r\n        </TabPane>\r\n        <TabPane\r\n          tab={\r\n            <span>\r\n              <AppleOutlined />\r\n              Products Tile View\r\n            </span>\r\n          }\r\n          key=\"2\"\r\n        >\r\n          <ProductCards />\r\n        </TabPane>\r\n        <TabPane\r\n          tab={\r\n            <span>\r\n              <AndroidOutlined />\r\n              Receiving Report\r\n            </span>\r\n          }\r\n          key=\"3\"\r\n        >\r\n          {modalState === false ? (\r\n            <ProductTable modalState={modalState} />\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Inventory\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\IncidentReports\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Services\\SchedulerServices.js",
  [
    "1405"
  ],
  "import db from \"services/firebase\"\r\n\r\nexport default class ScheduleServices {\r\n  constructor() {}\r\n  static async getSchedules() {\r\n    return new Promise((res, rej) => {\r\n      db.collection(\"schedules\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            _dataFetched.push({\r\n              ..._data,\r\n            })\r\n          })\r\n          res(_dataFetched)\r\n        })\r\n        .catch((error) => {\r\n          rej(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    })\r\n  }\r\n\r\n  static async getSchedulesByIncidents() {\r\n    return new Promise((res, rej) => {\r\n      db.collection(\"schedules\")\r\n        .where(\"others.Incidents\", \"!=\", \"\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            _dataFetched.push({\r\n              ..._data,\r\n            })\r\n          })\r\n          res(_dataFetched)\r\n        })\r\n        .catch((error) => {\r\n          rej(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    })\r\n  }\r\n\r\n  static async getSchedulesByCode(code) {\r\n    // if (!code) return []\r\n    return new Promise((res, rej) => {\r\n      db.collection(\"schedules\")\r\n        .where(code, \"!=\", \"0\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            console.log(\"As\", doc)\r\n            _dataFetched.push({\r\n              ..._data,\r\n            })\r\n          })\r\n          console.log(\"Datafetched\", _dataFetched)\r\n          res(_dataFetched)\r\n        })\r\n        .catch((error) => {\r\n          rej(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    })\r\n  }\r\n\r\n  async getSchedulesByDate(dates, field = \"StartTime\") {\r\n    return new Promise((resolve, reject) => {\r\n      const startTime = new Date(dates[0].setHours(0, 0, 0, 0))\r\n      const endTime = new Date(dates[1].setHours(23, 59, 59, 59))\r\n      db.collection(\"schedules\")\r\n        .where(field, \">=\", startTime)\r\n        .where(field, \"<=\", endTime)\r\n        .orderBy(field, \"desc\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            _dataFetched.push({ ..._data, _id: doc.id })\r\n          })\r\n          resolve(_dataFetched)\r\n        })\r\n        .catch((error) => {\r\n          reject(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    }).catch((error) => {\r\n      console.log(\"code error\", error)\r\n    })\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\index.js",
  [
    "1406",
    "1407",
    "1408",
    "1409",
    "1410",
    "1411",
    "1412",
    "1413"
  ],
  "import {\r\n  ACCOUNT_NAME,\r\n  BRANCH,\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  INDICATE_REASON,\r\n  LABELS,\r\n  MENU_GROUP_HEADERS,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n  STATUS,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { SCHEDULES } from \"services/collectionNames\"\r\nimport db from \"services/firebase\"\r\nimport {\r\n  Wrapper,\r\n  Container,\r\n  Panel,\r\n  Paper,\r\n  Body,\r\n  Description,\r\n  Label,\r\n  Label2,\r\n  Actions,\r\n} from \"./styles\"\r\nimport { formatDate, normalizeHour } from \"components/print\"\r\nimport { menu } from \"components/SchedulerComponent/orderSlip/orderSlip\"\r\nimport { BiArrowBack } from \"react-icons/bi\"\r\nimport calculateSubTotal from \"commonFunctions/calculateSubTotal\"\r\nimport getAmount from \"commonFunctions/getAmount\"\r\nimport { Paymentform } from \"./paymentForm\"\r\nimport orderSlipConfig from \"components/SchedulerComponent/orderSlip/orderSlipConfig\"\r\nimport { DESCRIPTION } from \"components/fields/types\"\r\nimport { useGetProducts } from \"components/products/useGetProducts\"\r\nimport formatNumber from \"commonFunctions/formatNumber\"\r\nimport { Flex, Grid } from \"Restructured/Styles\"\r\nimport { PARTNER_MERCHANT_ORDER_NO } from \"Restructured/Constants/schedules\"\r\n\r\nconst formatDateFromFirebase = (date) => {\r\n  return new Date(date.seconds * 1000 + date.nanoseconds / 1000000)\r\n}\r\nexport default function PaymentDetails(props) {\r\n  const [products] = useGetProducts()\r\n  const [data, setData] = useState({})\r\n  const [totals, setTotals] = useState([])\r\n  const [subTotal, setSubTotal] = useState(0)\r\n  const [qty, setQty] = useState(0)\r\n  useEffect(() => {\r\n    loadData(props?.id)\r\n  }, [props?.id, products])\r\n\r\n  const loadData = (id) => {\r\n    db.collection(SCHEDULES)\r\n      .doc(id)\r\n      .get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          const firebaseData = doc.data()\r\n          setData({ ...firebaseData })\r\n          const _totals = {}\r\n          for (const obj of products) {\r\n            for (const product of obj.productList) {\r\n              if (typeof firebaseData[product.code] !== \"undefined\") {\r\n                if (product?.price > 0) {\r\n                  _totals[product?.code] = {\r\n                    qty: firebaseData[product?.code],\r\n                    price: product?.price,\r\n                    description: product?.description,\r\n                  }\r\n                } else {\r\n                  _totals[product?.code] = {\r\n                    qty: firebaseData[product?.code],\r\n                    price: parseInt(\r\n                      firebaseData[`customPrice${product?.code}`]\r\n                    ),\r\n                    description: product?.description,\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          setTotals({\r\n            ..._totals,\r\n          })\r\n          const result = calculateSubTotal(_totals)\r\n          setQty(result?.qty)\r\n          setSubTotal(result?.subTotal)\r\n        } else {\r\n          console.log(\"No such document!\")\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error getting document:\", error)\r\n      })\r\n  }\r\n\r\n  const checkData = (field) => {\r\n    let fieldData = \"\"\r\n    if (typeof data[field] !== \"undefined\") {\r\n      if (field === DATE_ORDER_PLACED) {\r\n        fieldData = formatDate(formatDateFromFirebase(data[field]))\r\n      } else if (field === DATE_START) {\r\n        fieldData = normalizeHour(formatDateFromFirebase(data[field]))\r\n      } else if (field === DATE_END) {\r\n        fieldData = normalizeHour(formatDateFromFirebase(data[field]))\r\n      } else if (field === ORDER_VIA) {\r\n        fieldData = data[field] ? data[field] : data[ORDER_VIA_PARTNER]\r\n      } else {\r\n        fieldData = data[field]\r\n      }\r\n    }\r\n    return fieldData\r\n  }\r\n\r\n  const checkLabels = (field) => {\r\n    let fieldData = LABELS[field]\r\n    if (field === ORDER_VIA) {\r\n      fieldData = data[field] ? LABELS[field] : LABELS[ORDER_VIA_PARTNER]\r\n    }\r\n    return fieldData\r\n  }\r\n  console.log(\"data\", data)\r\n  const backgroundColors = {\r\n    FULFILLED: \"#ccccff\",\r\n    PAID: \"#ffffcc\",\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <Actions>\r\n        <Grid>\r\n          <Flex>\r\n            <button\r\n              onClick={() => {\r\n                props.handleBack()\r\n              }}\r\n              style={{\r\n                border: \"none\",\r\n                backgroundColor: \"transparent\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <BiArrowBack size={20} />\r\n            </button>\r\n            <div style={{ marginTop: \"-.3rem\", marginLeft: \"1rem\" }}>\r\n              {`Partner Merchant Order No: ${data[PARTNER_MERCHANT_ORDER_NO]}`}\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n      </Actions>\r\n      {/* // #ffffcc */}\r\n      <Container backgroundColor={backgroundColors[data[STATUS]]}>\r\n        <Panel>\r\n          <Paper>\r\n            <h3>Order Details</h3>\r\n            <div>\r\n              {data &&\r\n                [\r\n                  [ORDER_NO, BRANCH],\r\n                  [CUSTOMER, CONTACT_NUMBER],\r\n                  [DATE_ORDER_PLACED, ORDER_VIA],\r\n                  [DATE_START, DATE_END],\r\n                ].map((fieldName, index) => {\r\n                  return (\r\n                    <Body key={index}>\r\n                      <Description>\r\n                        <Label>{checkLabels(fieldName[0])}</Label>\r\n                        <div>{checkData(fieldName[0])}</div>\r\n                      </Description>\r\n                      <Description>\r\n                        <Label2>{checkLabels(fieldName[1])}</Label2>\r\n                        <div>{checkData(fieldName[1])}</div>\r\n                      </Description>\r\n                    </Body>\r\n                  )\r\n                })}\r\n            </div>\r\n            <div>\r\n              <table style={{ width: \"100%\" }}>\r\n                <tr\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-start\",\r\n                    width: \"100%\",\r\n                    backgroundColor: \"pink\",\r\n                    padding: \".5rem .5rem\",\r\n                  }}\r\n                >\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-start\",\r\n                    }}\r\n                  >\r\n                    Code\r\n                  </th>\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-start\",\r\n                    }}\r\n                  >\r\n                    Product\r\n                  </th>\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    Price\r\n                  </th>\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    Qty\r\n                  </th>\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    Amount\r\n                  </th>\r\n                </tr>\r\n                {Object.keys(totals).map((total, index) => {\r\n                  return totals[total]?.qty > 0 ? (\r\n                    <tr\r\n                      key={index}\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"flex-start\",\r\n                        width: \"100%\",\r\n                        padding: \".5rem .5rem\",\r\n                      }}\r\n                    >\r\n                      <td style={{ flex: \"1\" }}>{total}</td>\r\n                      <td style={{ flex: \"1\" }}>\r\n                        {totals[total]?.description}\r\n                      </td>\r\n                      <td\r\n                        style={{\r\n                          flex: \"1\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"flex-end\",\r\n                        }}\r\n                      >\r\n                        {formatNumber(totals[total]?.price.toFixed(2))}\r\n                      </td>\r\n                      <td\r\n                        style={{\r\n                          flex: \"1\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"flex-end\",\r\n                        }}\r\n                      >\r\n                        {totals[total]?.qty}\r\n                      </td>\r\n                      <td\r\n                        style={{\r\n                          flex: \"1\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"flex-end\",\r\n                        }}\r\n                      >\r\n                        {formatNumber(\r\n                          (\r\n                            parseInt(totals[total]?.qty) *\r\n                            parseInt(totals[total]?.price)\r\n                          ).toFixed(2)\r\n                        )}\r\n                      </td>\r\n                    </tr>\r\n                  ) : null\r\n                })}\r\n              </table>\r\n              <table style={{ width: \"100%\" }}>\r\n                <tr\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-start\",\r\n                    width: \"100%\",\r\n                    borderTop: \"1px solid #eee\",\r\n                    padding: \".5rem .5rem\",\r\n                  }}\r\n                >\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-start\",\r\n                    }}\r\n                  >\r\n                    Total\r\n                  </th>\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                    }}\r\n                  />\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                    }}\r\n                  />\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    {qty}\r\n                  </th>\r\n                  <th\r\n                    style={{\r\n                      flex: \"1\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    {formatNumber(subTotal)}\r\n                  </th>\r\n                </tr>\r\n              </table>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n            </div>\r\n          </Paper>\r\n        </Panel>\r\n        <Panel>\r\n          <Paper>\r\n            <h3>Payment Details</h3>\r\n            <div>\r\n              <Paymentform\r\n                id={props?.id}\r\n                subTotal={subTotal}\r\n                onBack={() => props.handleBack(props?.id)}\r\n              />\r\n              <br />\r\n              <br />\r\n              <br />\r\n            </div>\r\n          </Paper>\r\n        </Panel>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\useGetLogs.js",
  [
    "1414"
  ],
  "import useFindDataHandler from \"hooks/findDataHandler\"\r\nimport { useSelector } from \"react-redux\"\r\nimport LogServices from \"services/firebase/LogServices\"\r\nimport { selectSchedulerOpenedIdSlice } from \"./schedulerOpenedIdSlice\"\r\n\r\nexport default function () {\r\n  const schedulerOpenedIdSlice = useSelector(selectSchedulerOpenedIdSlice)\r\n  const [logs] = useFindDataHandler(\r\n    new LogServices({\r\n      _fieldName: \"_id\",\r\n      _fieldValue: schedulerOpenedIdSlice.id,\r\n      _orderBy: \"date\",\r\n    })\r\n  )\r\n\r\n  return [logs]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Styles\\toggleableContainer.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\useOrderViaField.js",
  [
    "1415"
  ],
  "import { useState, useEffect } from \"react\"\r\nimport { ORDER_VIA, ORDER_VIA_PARTNER } from \"./types\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectOrderComponentSlice, setOrderViaField } from \"./orderSlipSlice\"\r\n\r\nexport function useOrderViaField() {\r\n  const dispatch = useDispatch()\r\n  const [isDisplayedDirect, setIsDisplayedDirect] = useState(true)\r\n  const [isDisplayedPartner, setIsDisplayedPartner] = useState(true)\r\n  const orderComponentSlice = useSelector(selectOrderComponentSlice)\r\n\r\n  useEffect(() => {\r\n    loadDisplayedSetting()\r\n  }, [orderComponentSlice.orderViaField])\r\n\r\n  const loadDisplayedSetting = () => {\r\n    if (orderComponentSlice.orderViaField) {\r\n      if (orderComponentSlice.orderViaField.includes(\"Partner Merchant\")) {\r\n        setIsDisplayedDirect(false)\r\n        setIsDisplayedPartner(true)\r\n      } else {\r\n        setIsDisplayedDirect(true)\r\n        setIsDisplayedPartner(false)\r\n      }\r\n    } else {\r\n      setIsDisplayedDirect(true)\r\n      setIsDisplayedPartner(true)\r\n    }\r\n  }\r\n\r\n  const handleOrderVia = (e, props) => {\r\n    if (e) {\r\n      console.log(\"testOrdervia\", e)\r\n      if (props.name === ORDER_VIA) {\r\n        if (e.value === null || e.value === \"\") {\r\n          dispatch(setOrderViaField(e.value))\r\n        } else {\r\n          dispatch(setOrderViaField(`Direct ${e.value}`))\r\n        }\r\n      }\r\n      if (props.name === ORDER_VIA_PARTNER) {\r\n        if (e.value === null || e.value === \"\") {\r\n          dispatch(setOrderViaField(e.value))\r\n        } else {\r\n          dispatch(setOrderViaField(`Partner Merchant ${e.value}`))\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [isDisplayedDirect, isDisplayedPartner, handleOrderVia]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\print\\index.js",
  [
    "1416",
    "1417",
    "1418",
    "1419",
    "1420",
    "1421",
    "1422",
    "1423",
    "1424"
  ],
  "import {\r\n  ACCOUNT_NAME,\r\n  BRANCH,\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  DELIVERY_DATE,\r\n  INDICATE_REASON,\r\n  LABELS,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n  PARTNER_MERCHANT_ORDER_NO,\r\n  STATUS,\r\n  TIME_SLOT,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport Print from \"./print\"\r\nimport {\r\n  Container,\r\n  Header,\r\n  Body,\r\n  Footer,\r\n  Description,\r\n  Label,\r\n  Label2,\r\n  HeaderContent,\r\n} from \"./styles\"\r\nimport cookedChefLogo from \"images/cookedChef.jpg\"\r\nimport vitosLogo from \"images/vitosLogo.jpg\"\r\nimport { useState } from \"react\"\r\nimport { useGetBranches } from \"commonFunctions/useGetBranches\"\r\nimport formatNumber from \"commonFunctions/formatNumber\"\r\nimport { Space, Divider } from \"antd\"\r\n\r\nexport const formatDate = (date) => {\r\n  if (date) {\r\n    const dateSplit = date.toString().split(\" \")\r\n    return `${dateSplit[1]} ${dateSplit[2]}, ${dateSplit[3]} ${dateSplit[0]}`\r\n  } else {\r\n    return date\r\n  }\r\n}\r\n\r\nexport const normalizeHour = (date) => {\r\n  if (date) {\r\n    const dateSplit = date.toString().split(\" \")\r\n    const newDate = `${dateSplit[1]} ${dateSplit[2]}, ${dateSplit[3]}`\r\n    const dateArray = dateSplit[4].split(\":\")\r\n    if (dateArray[0] > 12) {\r\n      const hour = dateArray[0] - 12\r\n      return `${newDate} ${hour}:${dateArray[1]} PM`\r\n    } else {\r\n      if (parseInt(dateArray[0]) === 12) {\r\n        return `${newDate} ${dateArray[0]}:${dateArray[1]} PM`\r\n      } else {\r\n        return `${newDate} ${dateArray[0]}:${dateArray[1]} AM`\r\n      }\r\n    }\r\n  } else {\r\n    return date\r\n  }\r\n}\r\n\r\nconst PrintDocument = ({\r\n  orderSlipConfig = [],\r\n  data,\r\n  menu,\r\n  totals,\r\n  qty,\r\n  subTotal,\r\n  productList,\r\n}) => {\r\n  const branch = useGetBranches(data[BRANCH])\r\n  const checkData = (field) => {\r\n    let fieldData = \"\"\r\n    if (field === DATE_ORDER_PLACED) {\r\n      fieldData = formatDate(data[field])\r\n    } else if (field === DATE_START) {\r\n      fieldData = formatDate(data[field])\r\n    } else if (field === DATE_END) {\r\n      fieldData = normalizeHour(data[field])\r\n    } else if (field === TIME_SLOT) {\r\n      if (data[DATE_START] || data[DATE_END]) {\r\n        const start = normalizeHour(data[DATE_START]).split(\" \")\r\n        const end = normalizeHour(data[DATE_END]).split(\" \")\r\n        fieldData = `${start[3]} ${start[4]} - ${end[3]} ${end[4]}`\r\n      }\r\n    } else if (field === BRANCH) {\r\n      if (data[ORDER_NO]) {\r\n        const splittedOrderNo = data[ORDER_NO].split(\"-\")\r\n        fieldData = `${splittedOrderNo[0]}-${data[field].toUpperCase()} ${\r\n          branch.branchAddress\r\n        }`\r\n      }\r\n    } else if (field === ORDER_VIA) {\r\n      if (data[field]) {\r\n        fieldData = data[field]\r\n      } else {\r\n        fieldData = data[ORDER_VIA_PARTNER]\r\n      }\r\n    } else if (field === PARTNER_MERCHANT_ORDER_NO) {\r\n      return data[ORDER_VIA_PARTNER] ? data[field] : \"\"\r\n    } else {\r\n      fieldData = data[field]\r\n    }\r\n    return fieldData\r\n  }\r\n\r\n  const changedLabel = (field) => {\r\n    if (field === DATE_ORDER_PLACED) {\r\n      return \"Date placed\"\r\n    }\r\n    if (field === DATE_START) {\r\n      return \"Delivery Date/Time\"\r\n    }\r\n    if (field === PARTNER_MERCHANT_ORDER_NO) {\r\n      return data[ORDER_VIA] ? \"\" : LABELS[field]\r\n    }\r\n    if (field === ORDER_VIA) {\r\n      return data[ORDER_VIA] ? LABELS[field] : LABELS[ORDER_VIA_PARTNER]\r\n    }\r\n    return LABELS[field]\r\n  }\r\n  return (\r\n    <Container>\r\n      <img\r\n        src={cookedChefLogo}\r\n        height={500}\r\n        style={{ position: \"absolute\", zIndex: \"-999\", opacity: \"0.1\" }}\r\n      />\r\n      <Header>\r\n        <img src={vitosLogo} height={100} style={{ borderRadius: \"50%\" }} />\r\n        <HeaderContent>\r\n          <h2 style={{ marginLeft: \"1rem\" }}>VITO'S BBQ</h2>\r\n          <h2 style={{ marginLeft: \"1rem\" }}>ORDER FORM</h2>\r\n        </HeaderContent>\r\n      </Header>\r\n      <HeaderContent>\r\n        <h3>ORDER DETAILS</h3>\r\n      </HeaderContent>\r\n      {[\r\n        [ORDER_NO, BRANCH],\r\n        [PARTNER_MERCHANT_ORDER_NO, null],\r\n        [CUSTOMER, DATE_ORDER_PLACED],\r\n        [CONTACT_NUMBER, DATE_START],\r\n        [TIME_SLOT, null],\r\n        [ORDER_VIA, ACCOUNT_NAME],\r\n      ].map((fieldName, index) => {\r\n        return (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              display: \"flex\",\r\n              width: \"90vw\",\r\n              justifyContent: \"space-evenly\",\r\n            }}\r\n          >\r\n            <Body>\r\n              <Description>\r\n                <Label>{changedLabel(fieldName[0])}: </Label>\r\n                <div style={{ marginLeft: \".5rem\" }}>\r\n                  {checkData(fieldName[0])}\r\n                </div>\r\n              </Description>\r\n            </Body>\r\n            <Body>\r\n              <Description>\r\n                <Label>{changedLabel(fieldName[1])}:</Label>\r\n                <div style={{ marginLeft: \".5rem\" }}>\r\n                  {checkData(fieldName[1])}\r\n                </div>\r\n              </Description>\r\n            </Body>\r\n          </div>\r\n        )\r\n      })}\r\n      <Footer>\r\n        <table style={{ width: \"100%\", fontSize: \"10px\" }}>\r\n          <tr\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-start\",\r\n              width: \"100%\",\r\n              backgroundColor: \"pink\",\r\n              padding: \".5rem .5rem\",\r\n            }}\r\n          >\r\n            <th\r\n              style={{\r\n                flex: \"1\",\r\n                display: \"flex\",\r\n                justifyContent: \"flex-start\",\r\n              }}\r\n            >\r\n              Code\r\n            </th>\r\n            <th\r\n              style={{\r\n                flex: \"1\",\r\n                display: \"flex\",\r\n                justifyContent: \"flex-start\",\r\n              }}\r\n            >\r\n              Product\r\n            </th>\r\n            <th\r\n              style={{ flex: \"1\", display: \"flex\", justifyContent: \"flex-end\" }}\r\n            >\r\n              Price\r\n            </th>\r\n            <th\r\n              style={{ flex: \"1\", display: \"flex\", justifyContent: \"flex-end\" }}\r\n            >\r\n              Qty\r\n            </th>\r\n            <th\r\n              style={{ flex: \"1\", display: \"flex\", justifyContent: \"flex-end\" }}\r\n            >\r\n              Amount\r\n            </th>\r\n          </tr>\r\n          {Object.keys(totals).map((productName, index) => {\r\n            const product = totals[productName]\r\n            const qty = product[0]\r\n            const price = product[1]\r\n            const description = product[2]\r\n            return qty > 0 ? (\r\n              <tr\r\n                key={index}\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-start\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                <td style={{ flex: \"1\" }}>{productName}</td>\r\n                <td style={{ flex: \"1\" }}>{description}</td>\r\n                <td\r\n                  style={{\r\n                    flex: \"1\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-end\",\r\n                  }}\r\n                >\r\n                  {formatNumber(price.toFixed(2))}\r\n                </td>\r\n                <td\r\n                  style={{\r\n                    flex: \"1\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-end\",\r\n                  }}\r\n                >\r\n                  {qty}\r\n                </td>\r\n                <td\r\n                  style={{\r\n                    flex: \"1\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-end\",\r\n                  }}\r\n                >\r\n                  {formatNumber((parseInt(qty) * parseInt(price)).toFixed(2))}\r\n                </td>\r\n              </tr>\r\n            ) : null\r\n          })}\r\n        </table>\r\n        <table style={{ width: \"100%\" }}>\r\n          <tr\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-start\",\r\n              width: \"100%\",\r\n              borderTop: \"1px solid #eee\",\r\n            }}\r\n          >\r\n            <th\r\n              style={{\r\n                flex: \"1\",\r\n                display: \"flex\",\r\n                justifyContent: \"flex-start\",\r\n              }}\r\n            >\r\n              Total\r\n            </th>\r\n            <th\r\n              style={{\r\n                flex: \"1\",\r\n                display: \"flex\",\r\n                justifyContent: \"flex-start\",\r\n              }}\r\n            />\r\n            <th\r\n              style={{ flex: \"1\", display: \"flex\", justifyContent: \"flex-end\" }}\r\n            />\r\n            <th\r\n              style={{ flex: \"1\", display: \"flex\", justifyContent: \"flex-end\" }}\r\n            >\r\n              {formatNumber(subTotal.toFixed(2))}\r\n            </th>\r\n          </tr>\r\n        </table>\r\n      </Footer>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"flex-start\",\r\n          backgroundColor: \"pink\",\r\n          width: \"90vw\",\r\n        }}\r\n      >\r\n        <Label>Remarks</Label>\r\n        <div>\r\n          <textarea\r\n            value={data?.remarks}\r\n            style={{ width: \"100%\", border: \"none\", height: \"5rem\" }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Space\r\n        direction=\"vertical\"\r\n        style={{\r\n          width: \"100%\",\r\n          padding: \"0rem 2.9rem\",\r\n        }}\r\n      >\r\n        <span>\r\n          <i>You may pay your bill to:</i>\r\n        </span>\r\n        <div style={{ paddingTop: \".1rem\" }}></div>\r\n        <span>Bank Name: BDO</span>\r\n        <span>Bank Account #: 00143-0033-981</span>\r\n        <span>Account Name: Karlene Therese T. Pelayo</span>\r\n        <div style={{ paddingTop: \".1rem\" }}></div>\r\n        <span>GCash #: 0917-880-2000</span>\r\n        <span>GCash Name: Karlene Therese T. Pelayo</span>\r\n      </Space>\r\n    </Container>\r\n  )\r\n}\r\nexport default (props) => {\r\n  const [triggeredClicked, setTriggeredClicked] = useState(false)\r\n  // const printDocument = triggeredClicked ? <PrintDocument {...props} /> : <div />\r\n  return (\r\n    <Print\r\n      component={<PrintDocument {...props} />}\r\n      button=\"Print\"\r\n      triggeredClicked={() => setTriggeredClicked(true)}\r\n    />\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\orderSlipConfig.js",
  [
    "1425",
    "1426",
    "1427",
    "1428",
    "1429",
    "1430",
    "1431",
    "1432",
    "1433",
    "1434",
    "1435",
    "1436",
    "1437",
    "1438",
    "1439",
    "1440",
    "1441",
    "1442",
    "1443",
    "1444",
    "1445",
    "1446",
    "1447",
    "1448",
    "1449",
    "1450",
    "1451",
    "1452",
    "1453",
    "1454",
    "1455",
    "1456",
    "1457",
    "1458",
    "1459",
    "1460",
    "1461",
    "1462",
    "1463"
  ],
  "import {\r\n  BLANK_FIELD,\r\n  DATE_TIME_PICKER,\r\n  DESCRIPTION,\r\n  DROP_DOWN_LIST,\r\n  HEADER_FIELD,\r\n  HIDDEN,\r\n  INPUT,\r\n  ORDER_VIA_TYPE,\r\n  STATUS_REASON,\r\n  TEXT_AREA,\r\n} from \"components/fields/types\"\r\nimport {\r\n  ACCOUNT_NAME,\r\n  ATCHARA,\r\n  BAO,\r\n  BASTING_SAUCE,\r\n  BC,\r\n  BCJ_1,\r\n  BCJ_2,\r\n  BCJ_4,\r\n  BC_2,\r\n  BC_4,\r\n  BC_HALF,\r\n  BC_SAUCE,\r\n  BRANCH,\r\n  CHILI_OIL,\r\n  CH_12,\r\n  CH_8,\r\n  CH_8_PS,\r\n  CL_12,\r\n  CL_8,\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  DELIVERY_DATE,\r\n  EIGHT,\r\n  FBC_4,\r\n  FCH_12,\r\n  FCH_8,\r\n  ID,\r\n  INDICATE_REASON,\r\n  JV_1,\r\n  JV_2,\r\n  JV_4,\r\n  LABELS,\r\n  MENU_GROUP_HEADERS,\r\n  M_A,\r\n  M_B,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n  PARTNER_MERCHANT_ORDER_NO,\r\n  PAYMENT_MODE,\r\n  PRT,\r\n  REMARKS,\r\n  REPAER,\r\n  SPICED_VINEGAR,\r\n  STATUS,\r\n  TIME_SLOT,\r\n  TOTAL,\r\n  TWELVE,\r\n  UTAK_NO,\r\n  _ID,\r\n} from \"./types\"\r\n\r\nexport const DROPDOWN_DATAS = {\r\n  [BRANCH]: [\"Libis\", \"Ronac\"],\r\n  [ORDER_VIA]: [\r\n    \"INSTAGRAM DM\",\r\n    \"FB MESSENGER\",\r\n    \"VIBER 770\",\r\n    \"VIBER 809\",\r\n    \"WHATSAPP 770\",\r\n    \"WHATSAPP 809\",\r\n    \"TEXT 770\",\r\n    \"TEXT 809\",\r\n  ],\r\n  [PAYMENT_MODE]: [\r\n    \"CASH\",\r\n    \"BDO / 98\",\r\n    \"KP / GCASH\",\r\n    \"ZAP\",\r\n    \"GRAB FOOD\",\r\n    \"DINGDONG PH\",\r\n    \"METROMART FOOD\",\r\n  ],\r\n  [STATUS]: [\r\n    \"CONFIRMED\",\r\n    \"PAID\",\r\n    \"SERVED\",\r\n    \"REVISED / RESCHEDULED\",\r\n    \"CANCELLED\",\r\n  ],\r\n}\r\nexport default [\r\n  // {\r\n  //   name: BLANK_FIELD,\r\n  //   type: BLANK_FIELD,\r\n  //   isInlineBlock: true,\r\n  // },\r\n  {\r\n    name: DATE_ORDER_PLACED,\r\n    type: DATE_TIME_PICKER,\r\n    label: LABELS[DATE_ORDER_PLACED],\r\n    default: \"StartTime\",\r\n    isInlineBlock: true,\r\n  },\r\n  {\r\n    name: ORDER_NO,\r\n    type: INPUT,\r\n    label: LABELS[ORDER_NO],\r\n    isInlineBlock: true,\r\n    disabled: true,\r\n    placeholder: \"Auto generate after save\",\r\n  },\r\n  {\r\n    name: BRANCH,\r\n    type: DROP_DOWN_LIST,\r\n    label: LABELS[BRANCH],\r\n    isInlineBlock: true,\r\n  },\r\n  {\r\n    name: UTAK_NO,\r\n    type: INPUT,\r\n    label: LABELS[UTAK_NO],\r\n    isInlineBlock: true,\r\n  },\r\n  {\r\n    name: CUSTOMER,\r\n    type: INPUT,\r\n    label: LABELS[CUSTOMER],\r\n    isInlineBlock: true,\r\n  },\r\n  // {\r\n  //   name: DELIVERY_DATE,\r\n  //   type: DATE_TIME_PICKER,\r\n  //   label: LABELS[DELIVERY_DATE],\r\n  //   default: 'StartTime',\r\n  //   isInlineBlock: true\r\n  // },\r\n  {\r\n    name: CONTACT_NUMBER,\r\n    type: INPUT,\r\n    label: LABELS[CONTACT_NUMBER],\r\n    isInlineBlock: true,\r\n  },\r\n  {\r\n    name: ORDER_VIA,\r\n    type: DROP_DOWN_LIST,\r\n    label: LABELS[ORDER_VIA],\r\n    isInlineBlock: true,\r\n  },\r\n  {\r\n    name: ACCOUNT_NAME,\r\n    type: INPUT,\r\n    label: LABELS[ACCOUNT_NAME],\r\n    isInlineBlock: true,\r\n  },\r\n  // {\r\n  //   name: PARTNER_MERCHANT_ORDER_NO,\r\n  //   type: INPUT,\r\n  //   label: LABELS[PARTNER_MERCHANT_ORDER_NO],\r\n  //   isInlineBlock: true\r\n  // },\r\n  {\r\n    name: ORDER_VIA_PARTNER,\r\n    type: ORDER_VIA_TYPE,\r\n  },\r\n  {\r\n    name: HEADER_FIELD,\r\n    type: HEADER_FIELD,\r\n    label: LABELS[TIME_SLOT],\r\n  },\r\n  {\r\n    name: DATE_START,\r\n    type: DATE_TIME_PICKER,\r\n    label: LABELS[DATE_START],\r\n    default: \"StartTime\",\r\n    isInlineBlock: true,\r\n    disabled: true,\r\n  },\r\n  {\r\n    name: DATE_END,\r\n    type: DATE_TIME_PICKER,\r\n    label: LABELS[DATE_END],\r\n    default: \"EndTime\",\r\n    isInlineBlock: true,\r\n    disabled: true,\r\n  },\r\n  {\r\n    name: REMARKS,\r\n    type: TEXT_AREA,\r\n    label: LABELS[REMARKS],\r\n  },\r\n  {\r\n    name: STATUS_REASON,\r\n    type: STATUS_REASON,\r\n  },\r\n  // {\r\n  //   name: STATUS,\r\n  //   type: DROP_DOWN_LIST,\r\n  //   label: LABELS[STATUS],\r\n  //   isInlineBlock: true,\r\n  // },\r\n  // {\r\n  //   name: INDICATE_REASON,\r\n  //   type: INPUT,\r\n  //   label: LABELS[INDICATE_REASON],\r\n  //   isInlineBlock: true,\r\n  // },\r\n  // this is important do not remove\r\n  {\r\n    name: _ID,\r\n    type: HIDDEN,\r\n    label: \"\",\r\n    isInline: true,\r\n  },\r\n]\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\useReports.js",
  [
    "1464",
    "1465",
    "1466",
    "1467"
  ],
  "import { Tag } from \"antd\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { CODE, QUANTITY } from \"Restructured/Constants/products\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport DropdownServices from \"Restructured/Services/DropdownServices\"\r\nimport ProductServices from \"Restructured/Services/ProductServices\"\r\nimport sumArray, {\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport ExportService from \"../../ExcelExporter/ExportService\"\r\nimport Services from \"../Services\"\r\nimport ExcelFormatter from \"./ExcelFormatter/ExcelFormatter\"\r\nimport Controllers from \"./index\"\r\n\r\nfunction useReports() {\r\n  const dateNow = new Date()\r\n  const dateFrom = new Date(dateNow.setDate(dateNow.getDate() - 10))\r\n  const from = moment(dateFrom, \"MM/DD/YYYY\")\r\n  const to = moment(new Date(), \"MM/DD/YYYY\")\r\n  const defaultRange = [from, to]\r\n  const userComponentSlice = useSelector(selectUserSlice)\r\n  const [branch, setBranch] = useState(\"\")\r\n  const [dateFromTo, setDateFromTo] = useState(defaultRange)\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [reports, setReports] = useState([])\r\n  const [sourceSummary, setSourceSummary] = useState({})\r\n\r\n  useEffect(() => {\r\n    setDropdowns(userComponentSlice.branches)\r\n    if (userComponentSlice.branches.length > 0) {\r\n      setBranch(userComponentSlice.branches[0])\r\n    }\r\n  }, [userComponentSlice.branches])\r\n\r\n  const tableColumns = [\r\n    {\r\n      title: \"DATE PLACED\",\r\n      dataIndex: DATE_ORDER_PLACED,\r\n      key: DATE_ORDER_PLACED,\r\n      render: (text) => <a>{text}</a>,\r\n    },\r\n    // {\r\n    //   title: \"ORDER #\",\r\n    //   dataIndex: ORDER_NO,\r\n    //   key: ORDER_NO,\r\n    // },\r\n    {\r\n      title: \"NAME\",\r\n      dataIndex: CUSTOMER,\r\n      key: CUSTOMER,\r\n    },\r\n    {\r\n      title: \"CONTACT #\",\r\n      dataIndex: CONTACT_NUMBER,\r\n      key: CONTACT_NUMBER,\r\n    },\r\n    {\r\n      title: \"VIA\",\r\n      dataIndex: ORDER_VIA,\r\n      key: ORDER_VIA,\r\n    },\r\n    {\r\n      title: \"TIME\",\r\n      dataIndex: DATE_START,\r\n      key: DATE_START,\r\n    },\r\n    // {\r\n    //   title: \"CODE\",\r\n    //   dataIndex: CODE,\r\n    //   key: CODE,\r\n    // },\r\n    // {\r\n    //   title: \"QUANTITY\",\r\n    //   dataIndex: QUANTITY,\r\n    //   key: QUANTITY,\r\n    // },\r\n    {\r\n      title: \"DATE PAYMENT\",\r\n      dataIndex: DATE_PAYMENT,\r\n      key: DATE_PAYMENT,\r\n    },\r\n    {\r\n      title: \"MODE\",\r\n      dataIndex: MODE_PAYMENT,\r\n      key: MODE_PAYMENT,\r\n    },\r\n    {\r\n      title: \"SOURCE\",\r\n      dataIndex: SOURCE,\r\n      key: SOURCE,\r\n    },\r\n    {\r\n      title: \"REF #\",\r\n      dataIndex: REF_NO,\r\n      key: REF_NO,\r\n    },\r\n    {\r\n      title: \"ACCT #\",\r\n      dataIndex: ACCOUNT_NUMBER,\r\n      key: ACCOUNT_NUMBER,\r\n    },\r\n    {\r\n      title: \"TOTAL AMOUNT\",\r\n      dataIndex: \"amount\",\r\n      key: \"amount\",\r\n      align: \"right\",\r\n    },\r\n    {\r\n      title: \"AMOUNT PAID\",\r\n      dataIndex: \"amountPaid\",\r\n      key: \"amountPaid\",\r\n      align: \"right\",\r\n    },\r\n    {\r\n      title: \"OTHERS/DEDUCTION\",\r\n      dataIndex: \"less\",\r\n      key: \"less\",\r\n      align: \"right\",\r\n      render: (tags) => (\r\n        <>\r\n          {typeof tags !== \"undefined\" ? (\r\n            Object.keys(tags).map((tag) => {\r\n              return <Tag key={tag}>{`${tag}: ${tags[tag]}`}</Tag>\r\n            })\r\n          ) : (\r\n            <Tag></Tag>\r\n          )}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: \"STATUS\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      render: (value) => {\r\n        if (value === \"PAID\") {\r\n          return <Tag color=\"green\">{value}</Tag>\r\n        }\r\n        if (value === \"--\") {\r\n          return <Tag>{value}</Tag>\r\n        }\r\n        return <Tag color=\"red\">{value}</Tag>\r\n      },\r\n      align: \"right\",\r\n    },\r\n  ]\r\n\r\n  const getReports = async (reports) => {\r\n    if (!reports) reports = await Services.getSchedules(branch, dateFromTo)\r\n    const products = await ProductServices.getProducts()\r\n    const tableData = await Controllers.produceScheduleReports(\r\n      reports,\r\n      products\r\n    )\r\n    const _reports = []\r\n    const _excelReport = []\r\n    for (const key in tableData) {\r\n      if (key === \"DIRECT\") {\r\n        _reports.push({\r\n          header: key,\r\n          columns: [...tableColumns],\r\n          data: tableData[key],\r\n        })\r\n        _excelReport.push({\r\n          [key]: ExcelFormatter.groupDataByDateStart(tableData[key]),\r\n        })\r\n      } else {\r\n        _reports.push({\r\n          header: key,\r\n          columns: [...tableColumns.filter(({ title }) => title !== \"VIA\")],\r\n          data: tableData[key],\r\n        })\r\n        _excelReport.push({\r\n          [key]: ExcelFormatter.groupDataByDateStart(tableData[key]),\r\n        })\r\n      }\r\n    }\r\n    setReports(_reports)\r\n    return _excelReport\r\n  }\r\n\r\n  const getSourceSummary = async (reports) => {\r\n    if (!reports) reports = await Services.getSchedules(branch, dateFromTo)\r\n    const sourceSummary = await Controllers.produceSourceSummary(reports)\r\n    const _reports = {}\r\n    const returnedSourceSummary = {}\r\n    for (const key in sourceSummary) {\r\n      const _sourceSummary = [...sourceSummary[key]]\r\n      _sourceSummary.push({\r\n        [SOURCE]: \"Total\",\r\n        [AMOUNT_PAID]: sumArray(sourceSummary[key], AMOUNT_PAID).toFixed(2),\r\n      })\r\n\r\n      const groupedSourceSummary = sumArrayOfObjectsGrouping(\r\n        _sourceSummary,\r\n        SOURCE,\r\n        AMOUNT_PAID\r\n      )\r\n      _reports[key] = {\r\n        columns: [\r\n          {\r\n            title: \"From\",\r\n            dataIndex: SOURCE,\r\n            key: SOURCE,\r\n            align: \"right\",\r\n          },\r\n          {\r\n            title: \"Amount Paid\",\r\n            dataIndex: AMOUNT_PAID,\r\n            key: AMOUNT_PAID,\r\n            align: \"right\",\r\n          },\r\n        ],\r\n        data: groupedSourceSummary,\r\n      }\r\n      setSourceSummary(_reports)\r\n\r\n      // this is use in excel formatter\r\n      returnedSourceSummary[key] = {\r\n        columns: [\r\n          {\r\n            title: \"From\",\r\n            dataIndex: SOURCE,\r\n            key: SOURCE,\r\n            align: \"right\",\r\n          },\r\n          {\r\n            title: \"Amount Paid\",\r\n            dataIndex: AMOUNT_PAID,\r\n            key: AMOUNT_PAID,\r\n            align: \"right\",\r\n          },\r\n        ],\r\n        data: _sourceSummary,\r\n      }\r\n    }\r\n\r\n    return returnedSourceSummary\r\n  }\r\n\r\n  const handleExport = async () => {\r\n    const sourceDropdowns = await DropdownServices.getDropdowns(SOURCE)\r\n    const data = await Services.getSchedules(branch, dateFromTo)\r\n    if (data.length === 0) {\r\n      alert(\"No data to be exported\")\r\n      return\r\n    }\r\n    const sourceSummary = await getSourceSummary(data)\r\n    const excelReport = await getReports(data)\r\n    const transformedExcelReport = ExcelFormatter.transformGroupByDate(\r\n      excelReport,\r\n      data,\r\n      sourceSummary,\r\n      branch\r\n    )\r\n    const dataSummary = ExcelFormatter.dataSummary(data, branch)\r\n    const orderViaSummary = ExcelFormatter.orderViaSummary(\r\n      data,\r\n      sourceDropdowns.list,\r\n      dateFromTo,\r\n      branch\r\n    )\r\n    ExportService.exportExcelReports(\r\n      {\r\n        ...transformedExcelReport,\r\n        ...dataSummary,\r\n        ...orderViaSummary,\r\n      },\r\n      [sourceDropdowns.list]\r\n    )\r\n  }\r\n\r\n  return [\r\n    dropdowns,\r\n    reports,\r\n    sourceSummary,\r\n    branch,\r\n    setBranch,\r\n    dateFromTo,\r\n    setDateFromTo,\r\n    handleExport,\r\n  ]\r\n}\r\n\r\nexport default useReports\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\Documents\\filteringPanelDocs.js",
  [
    "1468",
    "1469",
    "1470"
  ],
  "import React, { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport { CODE, DESCRIPTION, QUANTITY } from \"Restructured/Constants/products\"\r\nimport { DATE_END, DATE_START } from \"Restructured/Constants/schedules\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport { Space } from \"antd\"\r\nimport FilteringPanelMethods from \"../../FilteringPanel/Controllers/FilteringPanelMethods\"\r\nimport PrintMethods from \"../Controllers/PrintMethods\"\r\n\r\nfunction FilteringPanelDocs(props) {\r\n  const [documentPrintInfo, setDocumentPrintInfo] = useState({})\r\n  const [products, setProducts] = useState([])\r\n  const [productLabels, setProductLabels] = useState({})\r\n  const [summary, setSummary] = useState([])\r\n  const [printDetailsPerSched, setPrintDetailsPerSched] = useState([])\r\n  useEffect(() => {\r\n    setDocumentPrintInfo(props.documentPrintInfo)\r\n    setProducts(products)\r\n    setProductLabels(productLabels)\r\n    handlePrintDetailsPerSched(props.documentPrintInfo, props.branch)\r\n  }, [props.documentPrintInfo, props.branch])\r\n\r\n  const handlePrintDetailsPerSched = (printInfo, branch) => {\r\n    const _dataFetched = [...printInfo.dataFetched]\r\n    const args = {\r\n      branch,\r\n      dataFetched: _dataFetched,\r\n    }\r\n    console.log(\"console\", _dataFetched)\r\n    const _orders = FilteringPanelMethods.produceOrders({ ...args })\r\n    const _detailsPerSched = PrintMethods.producePrintDetailsPerSchedule({\r\n      branch,\r\n      orders: _orders,\r\n      products: printInfo?.products,\r\n      productLabels: printInfo?.productLabels,\r\n    })\r\n    const _summaryPerProduct =\r\n      PrintMethods.producePrintSummaryPerProduct(_detailsPerSched)\r\n    console.log(\"console\", _summaryPerProduct)\r\n    setSummary(_summaryPerProduct)\r\n    setPrintDetailsPerSched(_detailsPerSched)\r\n  }\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <span>ORDER LIST</span>\r\n      <table style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n        <tr style={{ fontWeight: 700, backgroundColor: \"#999\" }}>\r\n          <th>DATE</th>\r\n          <th>SLOT</th>\r\n          <th>CODE</th>\r\n          <th>PRODUCT</th>\r\n          <th>QUANTITY</th>\r\n        </tr>\r\n        {printDetailsPerSched.map((data, index) => {\r\n          return (\r\n            <tr\r\n              style={\r\n                index % 2 === 0\r\n                  ? { backgroundColor: \"white\" }\r\n                  : { backgroundColor: \"#999\" }\r\n              }\r\n            >\r\n              <td>{data.date}</td>\r\n              <td>{`${data[DATE_START]} - ${data[DATE_END]}`}</td>\r\n              <td>{data[CODE]}</td>\r\n              <td>{data[DESCRIPTION]}</td>\r\n              <td>{data[QUANTITY]}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n      <span>SUMMARY PER PRODUCT</span>\r\n      <table style={{ fontSize: \"8px\", width: \"30%\" }}>\r\n        <tr style={{ fontWeight: 700, backgroundColor: \"#999\" }}>\r\n          <th>CODE</th>\r\n          <th>PRODUCT</th>\r\n          <th>QUANTITY</th>\r\n        </tr>\r\n        {summary.map((data, index) => {\r\n          return (\r\n            <tr\r\n              style={\r\n                index % 2 === 0\r\n                  ? { backgroundColor: \"white\" }\r\n                  : { backgroundColor: \"#999\" }\r\n              }\r\n            >\r\n              <td>{data[CODE]}</td>\r\n              <td>{data[DESCRIPTION]}</td>\r\n              <td>{data[QUANTITY]}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </table>\r\n    </Space>\r\n    // <Grid padding=\"3rem\">\r\n    //   <Grid>\r\n    //     <h3>VITOS BBQ</h3>\r\n    //   </Grid>\r\n    //   <Grid>\r\n    //     <h3>ORDER LIST FORM</h3>\r\n    //   </Grid>\r\n    //   <Grid>\r\n    //     <div>DETAILS PER PRODUCT</div>\r\n    //     <table>\r\n    //       <tr>\r\n    //         <th>Date</th>\r\n    //         <th>Slot</th>\r\n    //         <th>Code</th>\r\n    //         <th>Product</th>\r\n    //         <th style={{ display: \"flex\", justifyContent: \"flex-end\" }}>Qty</th>\r\n    //       </tr>\r\n    //       {printDetailsPerSched.map((data) => {\r\n    //         return (\r\n    //           <tr>\r\n    //             <td>{data.date}</td>\r\n    //             <td>{`${data[DATE_START]} - ${data[DATE_END]}`}</td>\r\n    //             <td>{data[CODE]}</td>\r\n    //             <td>{data[DESCRIPTION]}</td>\r\n    //             <td style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n    //               {data[QUANTITY]}\r\n    //             </td>\r\n    //           </tr>\r\n    //         )\r\n    //       })}\r\n    //     </table>\r\n    //   </Grid>\r\n    //   <br />\r\n    //   <Grid>\r\n    //     <div>SUMMARY PER PRODUCT</div>\r\n    //     <table>\r\n    //       <tr>\r\n    //         <th>Code</th>\r\n    //         <th>Product</th>\r\n    //         <th style={{ display: \"flex\", justifyContent: \"flex-end\" }}>Qty</th>\r\n    //       </tr>\r\n    //       {summary.map((data) => {\r\n    //         return (\r\n    //           <tr>\r\n    //             <td>{data[CODE]}</td>\r\n    //             <td>{data[DESCRIPTION]}</td>\r\n    //             <td style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n    //               {data[QUANTITY]}\r\n    //             </td>\r\n    //           </tr>\r\n    //         )\r\n    //       })}\r\n    //     </table>\r\n    //   </Grid>\r\n    // </Grid>\r\n  )\r\n}\r\n\r\nexport default FilteringPanelDocs\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\Controllers\\useSchedulerFilter.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\grillMenus.js",
  [
    "1471",
    "1472",
    "1473"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport { Item, Wrapper, Container } from \"./styles\"\r\nimport Input from \"components/fields/input\"\r\nimport { getData } from \"services\"\r\nimport { PRODUCTS } from \"services/collectionNames\"\r\nimport formatNumber from \"commonFunctions/formatNumber\"\r\n\r\nimport Print from \"components/print\"\r\nimport sort from \"commonFunctions/sort\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { setAmountPaid } from \"./orderSlipSlice\"\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div style={{ padding: \".3rem\" }}>\r\n      <Container>\r\n        <Item>Code</Item>\r\n        <Item>Product</Item>\r\n        <Item right>Price</Item>\r\n        <Item right>Qty</Item>\r\n        <Item right>Total</Item>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Product = ({\r\n  groupHeader,\r\n  productList,\r\n  productData,\r\n  setProductData,\r\n  handleCustomPrice,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div style={{ padding: \".3rem\", color: \"red\" }}>{groupHeader}</div>\r\n      {productList.map((data) => {\r\n        const retainedPrice = [...productData[data?.code]]\r\n        const total =\r\n          parseInt(productData[data?.code][0]) * parseInt(retainedPrice[1])\r\n        return (\r\n          <Container key={data?.code}>\r\n            <Item>{data?.code}</Item>\r\n            <Item>{data?.description}</Item>\r\n            <Item right>\r\n              {data?.price === 0 ? (\r\n                <div style={{ marginTop: \"-.3rem\", paddingLeft: \"2rem\" }}>\r\n                  <Input\r\n                    isNumber\r\n                    name={`customPrice${data?.code}`}\r\n                    onChange={(e) => {\r\n                      handleCustomPrice(e, data?.code)\r\n                    }}\r\n                    value={productData && productData[data?.code][1]}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                formatNumber(data?.price.toFixed(2))\r\n              )}\r\n            </Item>\r\n            <Item right>\r\n              <div style={{ marginTop: \"-.3rem\", paddingLeft: \"2rem\" }}>\r\n                <Input\r\n                  isNumber\r\n                  name={data?.code}\r\n                  onChange={(e) => {\r\n                    setProductData(e, data?.code)\r\n                  }}\r\n                  value={productData && productData[data?.code][0]}\r\n                />\r\n              </div>\r\n            </Item>\r\n            <Item right>{formatNumber(total.toFixed(2))}</Item>\r\n          </Container>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Footer = ({ total }) => {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(setAmountPaid(total.toFixed(2)))\r\n  }, [total])\r\n  return (\r\n    <Container>\r\n      <Item>Total</Item>\r\n      <Item right>{formatNumber(total.toFixed(2))}</Item>\r\n    </Container>\r\n  )\r\n}\r\nexport default function (props) {\r\n  const [productList, setProductList] = useState([])\r\n  const [productData, setProductData] = useState({})\r\n\r\n  const handleChange = (e, code) => {\r\n    const retainedData = [...productData[code]]\r\n    if (e.target.value === \"\") {\r\n      setProductData({ ...productData, [code]: [\"0\", retainedData[1]] })\r\n    } else {\r\n      setProductData({\r\n        ...productData,\r\n        [code]: [e.target.value, retainedData[1]],\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleCustomPrice = (e, code) => {\r\n    const retainedData = [...productData[code]]\r\n    const convertedPrice = parseInt(e.target.value)\r\n    if (!isNaN(convertedPrice)) {\r\n      setProductData({\r\n        ...productData,\r\n        [code]: [retainedData[0], convertedPrice],\r\n      })\r\n    } else {\r\n      setProductData({\r\n        ...productData,\r\n        [code]: [retainedData[0], convertedPrice],\r\n      })\r\n    }\r\n  }\r\n\r\n  const calculateSubTotal = (productDataList) => {\r\n    let subTotal = 0\r\n\r\n    for (const array in productDataList) {\r\n      subTotal +=\r\n        parseInt(productDataList[array][1]) *\r\n        parseInt(productDataList[array][0])\r\n    }\r\n    return subTotal\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadProducts()\r\n  }, [])\r\n\r\n  const loadProducts = async () => {\r\n    const productData = {}\r\n    const result = await getData(PRODUCTS)\r\n    for (const obj of result) {\r\n      for (const product of obj.productList) {\r\n        if (product?.price > 0) {\r\n          productData[product.code] = props[product.code]\r\n            ? [\r\n                parseInt(props[product.code]),\r\n                product?.price,\r\n                product?.description,\r\n              ]\r\n            : [0, product?.price, product?.description]\r\n        } else {\r\n          productData[product.code] = props[product.code]\r\n            ? [\r\n                parseInt(props[product.code]),\r\n                parseInt(props[`customPrice${product.code}`]) || 0,\r\n                product?.description,\r\n              ]\r\n            : [\r\n                0,\r\n                parseInt(props[`customPrice${product.code}`]) || 0,\r\n                product?.description,\r\n              ]\r\n        }\r\n      }\r\n    }\r\n    setProductData(productData)\r\n    setProductList(sort(result, \"no\"))\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Header />\r\n      {productList.map((data) => (\r\n        <Product\r\n          key={data?.groupHeader}\r\n          groupHeader={data?.groupHeader}\r\n          productList={data?.productList}\r\n          productData={productData}\r\n          setProductData={handleChange}\r\n          handleCustomPrice={handleCustomPrice}\r\n        />\r\n      ))}\r\n      <Footer total={calculateSubTotal(productData)} />\r\n      <br />\r\n      <br />\r\n      <Print\r\n        data={props}\r\n        totals={productData}\r\n        subTotal={calculateSubTotal(productData)}\r\n        productList={productList}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\products\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\useDirectAndThirdParty.js",
  [
    "1474",
    "1475",
    "1476",
    "1477",
    "1478",
    "1479",
    "1480",
    "1481",
    "1482",
    "1483",
    "1484",
    "1485",
    "1486",
    "1487",
    "1488",
    "1489",
    "1490"
  ],
  "import { Tag } from \"antd\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { CODE, DESCRIPTION, QUANTITY } from \"Restructured/Constants/products\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport ProductServices from \"Restructured/Services/ProductServices\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport Services from \"../../Reports/Services\"\r\nimport ExcelFormatter from \"../ExcelFormatter/ExcelFormatter\"\r\nimport produceDataOfEachDate from \"./produceDataOfEachDate\"\r\nimport produceListOfDates from \"./produceListOfDates\"\r\nimport produceProductList from \"./produceProductList\"\r\nimport produceReports from \"./produceReports\"\r\nimport produceTotalSumofItems from \"./produceTotalSumofItems\"\r\nimport ItemizedExportService from \"../../ExcelExporter/ItemizedExportService\"\r\n\r\nfunction useReports() {\r\n  const dateNow = new Date()\r\n  const dateFrom = new Date(dateNow.setDate(dateNow.getDate() - 10))\r\n  const from = moment(dateFrom, \"MM/DD/YYYY\")\r\n  const to = moment(new Date(), \"MM/DD/YYYY\")\r\n  const defaultRange = [from, to]\r\n  const userComponentSlice = useSelector(selectUserSlice)\r\n  const [branch, setBranch] = useState(\"\")\r\n  const [dateFromTo, setDateFromTo] = useState(defaultRange)\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [reports, setReports] = useState([])\r\n  const [sourceSummary, setSourceSummary] = useState({})\r\n\r\n  useEffect(() => {\r\n    setDropdowns(userComponentSlice.branches)\r\n    if (userComponentSlice.branches.length > 0) {\r\n      setBranch(userComponentSlice.branches[0])\r\n    }\r\n  }, [userComponentSlice.branches])\r\n\r\n  const tableColumns = [\r\n    {\r\n      title: \"CODE\",\r\n      dataIndex: CODE,\r\n      key: CODE,\r\n    },\r\n    {\r\n      title: \"DESCRIPTION\",\r\n      dataIndex: DESCRIPTION,\r\n      key: CODE,\r\n    },\r\n    {\r\n      title: \"QUANTITY\",\r\n      dataIndex: QUANTITY,\r\n      key: QUANTITY,\r\n    },\r\n    {\r\n      title: \"PRICE\",\r\n      dataIndex: \"price\",\r\n      key: \"price\",\r\n      align: \"right\",\r\n    },\r\n    {\r\n      title: \"TOTAL AMOUNT\",\r\n      dataIndex: \"total\",\r\n      key: \"total\",\r\n      align: \"right\",\r\n    },\r\n  ]\r\n\r\n  const handleExport = async () => {\r\n    const schedules = await Services.getSchedules(branch, dateFromTo)\r\n    const { productList, productPrice, productDescripton } =\r\n      await produceProductList()\r\n    const listOfDateFiltered = produceListOfDates(schedules)\r\n    const dataOfEachDate = produceDataOfEachDate(\r\n      listOfDateFiltered,\r\n      schedules,\r\n      productList\r\n    )\r\n    const totalSumofItems = produceTotalSumofItems(\r\n      dataOfEachDate,\r\n      productPrice,\r\n      productDescripton\r\n    )\r\n    const reports = produceReports(totalSumofItems)\r\n    const sheets = ExcelFormatter.produceObjectsToArray(reports)\r\n    ItemizedExportService.exportExcelReports(sheets)\r\n\r\n    setReports(reports)\r\n  }\r\n\r\n  return [\r\n    tableColumns,\r\n    dropdowns,\r\n    reports,\r\n    sourceSummary,\r\n    branch,\r\n    setBranch,\r\n    dateFromTo,\r\n    setDateFromTo,\r\n    handleExport,\r\n  ]\r\n}\r\n\r\nexport default useReports\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\Documents\\incidentReportDocs.js",
  [
    "1491",
    "1492",
    "1493",
    "1494",
    "1495",
    "1496",
    "1497",
    "1498",
    "1499"
  ],
  "import React, { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport { CODE, DESCRIPTION, QUANTITY } from \"Restructured/Constants/products\"\r\nimport { DATE_END, DATE_START } from \"Restructured/Constants/schedules\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport FilteringPanelMethods from \"../../FilteringPanel/Controllers/FilteringPanelMethods\"\r\nimport PrintMethods from \"../Controllers/PrintMethods\"\r\n\r\nfunction IncidentReportDocs({ incidents }) {\r\n  useEffect(() => {}, [])\r\n\r\n  return (\r\n    <Grid padding=\"3rem\">\r\n      <Grid>\r\n        <h3>VITOS BBQ</h3>\r\n      </Grid>\r\n      <Grid>\r\n        <h3>Incident Reports</h3>\r\n      </Grid>\r\n      <Grid>\r\n        <br />\r\n        <table>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Order #</th>\r\n            <th>Client name</th>\r\n            <th>Contact no</th>\r\n            <th>On duty</th>\r\n          </tr>\r\n          {incidents.map((data) => {\r\n            return (\r\n              <tr>\r\n                <th>{data?.date}</th>\r\n                <td>{data?.orderNo}</td>\r\n                <td>{data?.clientName}</td>\r\n                <td>{data?.contactNo}</td>\r\n                <td>{data?.onDuty}</td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </table>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default IncidentReportDocs\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\products\\table.js",
  [
    "1500",
    "1501",
    "1502",
    "1503",
    "1504",
    "1505",
    "1506",
    "1507"
  ],
  "import * as React from \"react\"\r\nimport {\r\n  GridComponent,\r\n  ColumnsDirective,\r\n  ColumnDirective,\r\n  Resize,\r\n  Sort,\r\n  ContextMenu,\r\n  Page,\r\n  ExcelExport,\r\n  Group,\r\n  PdfExport,\r\n  Edit,\r\n  Inject,\r\n  Search,\r\n  Toolbar,\r\n} from \"@syncfusion/ej2-react-grids\"\r\nimport { addData, deleteData, updateData } from \"services\"\r\nimport { PRODUCTS } from \"services/collectionNames\"\r\nconst Table = (props) => {\r\n  const [productList, setProductList] = React.useState([])\r\n  const contextMenuItems = [\r\n    \"AutoFit\",\r\n    \"AutoFitAll\",\r\n    \"SortAscending\",\r\n    \"SortDescending\",\r\n    \"Copy\",\r\n    \"Edit\",\r\n    \"Delete\",\r\n    \"Save\",\r\n    \"Cancel\",\r\n    \"PdfExport\",\r\n    \"ExcelExport\",\r\n    \"CsvExport\",\r\n    \"FirstPage\",\r\n    \"PrevPage\",\r\n    \"LastPage\",\r\n    \"NextPage\",\r\n  ]\r\n\r\n  React.useEffect(() => {\r\n    setProductList(props.productList)\r\n  }, [props])\r\n  const onActionBegin = (e) => {\r\n    const { requestType, data, action } = e\r\n    if (requestType === \"save\") {\r\n      if (action === \"add\") {\r\n        const dataCopy = { ...data }\r\n        let productList = [...props.productList]\r\n        if (\r\n          props.productList.some((product) => product?.code === dataCopy?.code)\r\n        ) {\r\n          productList = productList.filter(\r\n            (prod) => prod?.code !== dataCopy?.code\r\n          )\r\n        }\r\n        const productListConvertedPriceToNumber = productList.map((product) => {\r\n          return {\r\n            ...product,\r\n            price: parseInt(product.price),\r\n          }\r\n        })\r\n        setProductList(productList)\r\n        const updatedProductList = [\r\n          ...productListConvertedPriceToNumber,\r\n          {\r\n            ...data,\r\n            description: data.description || \"EMPTY\",\r\n            price: parseInt(data.price) || 0,\r\n          },\r\n        ]\r\n        updateData({\r\n          data: { productList: updatedProductList },\r\n          id: props.id,\r\n          collection: PRODUCTS,\r\n        })\r\n      }\r\n      if (action === \"edit\") {\r\n        console.log(\"props\", data)\r\n        const dataCopy = { ...data }\r\n        const productList = props.productList.filter(\r\n          (product) => product.code !== dataCopy.code\r\n        )\r\n        productList.push({ ...data })\r\n        console.log(\"projectList\", productList)\r\n        setProductList(productList)\r\n        updateData({\r\n          data: { productList },\r\n          id: props.id,\r\n          collection: PRODUCTS,\r\n        })\r\n      }\r\n    }\r\n    if (requestType === \"delete\") {\r\n      const dataCopy = { ...data }\r\n      const productList = [\r\n        ...props.productList.filter(\r\n          (product) => product.code !== dataCopy[0].code\r\n        ),\r\n      ] // dataCopy[0] has zero since the response is an array\r\n      setProductList(productList)\r\n      updateData({\r\n        data: { productList },\r\n        id: props.id,\r\n        collection: PRODUCTS,\r\n      })\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"control-pane\">\r\n        <div className=\"control-section\">\r\n          <GridComponent\r\n            id=\"gridcomp\"\r\n            dataSource={productList}\r\n            allowPaging\r\n            allowSorting\r\n            allowExcelExport\r\n            allowPdfExport\r\n            contextMenuItems={contextMenuItems}\r\n            actionBegin={onActionBegin}\r\n            {...props}\r\n          >\r\n            <ColumnsDirective>\r\n              {props.columns.map((data) => {\r\n                return <ColumnDirective key={data.field} {...data} />\r\n              })}\r\n            </ColumnsDirective>\r\n            <Inject services={[Page, Toolbar, Edit, Sort]} />\r\n          </GridComponent>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport const toolbarOptions = [\"Add\", \"Edit\", \"Delete\", \"Update\", \"Cancel\"]\r\nexport const editSettings = {\r\n  allowEditing: true,\r\n  allowAdding: true,\r\n  allowDeleting: true,\r\n  newRowPosition: \"Top\",\r\n}\r\nexport default Table\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\PaymentTransactionTable\\partnerMerchantModal.js",
  [
    "1508",
    "1509",
    "1510",
    "1511",
    "1512",
    "1513",
    "1514",
    "1515",
    "1516",
    "1517"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport { Modal, Button, Select, Input, DatePicker, Table } from \"antd\"\r\nimport { Flex, Grid } from \"Restructured/Styles\"\r\nimport { RangePicker } from \"Restructured/Components/Commons\"\r\nimport db from \"services/firebase\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { StyledTable, VerticalAutoScroll } from \"./styles\"\r\nimport Checkbox from \"antd/lib/checkbox/Checkbox\"\r\nimport { selectTableSlice } from \"components/Table/tableSlice\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport { update, updateData } from \"services\"\r\nimport Print from \"../Print\"\r\nimport { AiFillPrinter } from \"react-icons/ai\"\r\nconst { Search } = Input\r\n\r\nconst PartnerMerchantModal = ({ columns }) => {\r\n  const tableSlice = useSelector(selectTableSlice)\r\n  const userSlice = useSelector(selectUserSlice)\r\n  const [visible, setVisible] = useState(false)\r\n  const [dates, setDates] = useState([])\r\n  const [branch, setBranch] = useState(\"Ronac\")\r\n  const [dataFetched, setDataFetched] = useState([])\r\n  const [dataFiltered, setDataFiltered] = useState([])\r\n  const [branchDatasource, setBranchDatasource] = useState([])\r\n  const [checkedIds, setCheckedIds] = useState([])\r\n  const [refNo, setRefNo] = useState(\"\")\r\n  const [datePaid, setDatePaid] = useState(new Date())\r\n  const [newColumns, setNewColumns] = useState([])\r\n\r\n  const checkedChange = (e, id, record) => {\r\n    // this is to retain the data saved from database once unchecked\r\n    const _totalAmountSaved = dataFiltered.find((data) => data._id == id)\r\n      ?.datePayment\r\n      ? record.totalAmountPaid\r\n      : 0\r\n\r\n    if (record?.totalDue) {\r\n      const withPercent = Number(record?.totalDue) * 0.05\r\n\r\n      const totalAmountPaid = Number(record?.totalDue) - (withPercent + 10)\r\n\r\n      const updatedData = {\r\n        modePayment: \"Zap\",\r\n        source: \"Zap\",\r\n        accountNumber: \"BDO / 609\",\r\n        totalAmountPaid: totalAmountPaid,\r\n      }\r\n      const _dataIndex = dataFiltered.findIndex((dataRow) => dataRow._id === id)\r\n      const _dataRow = { ...dataFiltered[_dataIndex], ...updatedData }\r\n      const _dataFiltered = [...dataFiltered]\r\n      if (e.target.checked) {\r\n        const _checkedIds = [...checkedIds]\r\n        _checkedIds.push(id)\r\n        setCheckedIds(_checkedIds)\r\n        _dataFiltered[_dataIndex] = _dataRow\r\n      } else {\r\n        const _checkedIds = [...checkedIds]\r\n        const checkedIdsIndex = _checkedIds.indexOf(id)\r\n        _checkedIds.splice(checkedIdsIndex, 1)\r\n\r\n        setCheckedIds(_checkedIds)\r\n        _dataFiltered[_dataIndex] = {\r\n          ..._dataRow,\r\n          datePayment: \"\",\r\n          refNo: \"\",\r\n          modePayment: \"\",\r\n          source: \"\",\r\n          accountNumber: \"\",\r\n          totalAmountPaid: _totalAmountSaved,\r\n        }\r\n      }\r\n      console.log(refNo, datePaid)\r\n      setDataFiltered(_dataFiltered)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const _newColumns = [\r\n      {\r\n        title: \"\",\r\n        key: \"_id\",\r\n        dataIndex: \"_id\",\r\n        width: \"3rem\",\r\n        fixed: \"left\",\r\n        render: (id, record) => {\r\n          return (\r\n            <div style={{ backgroundColor: \"pink\" }}>\r\n              <Checkbox\r\n                checked={record.datePayment || checkedIds.includes(id)}\r\n                onChange={(e) => {\r\n                  if (!record?.datePayment || checkedIds.includes(id)) {\r\n                    checkedChange(e, id, record)\r\n                  }\r\n                }}\r\n              ></Checkbox>\r\n            </div>\r\n          )\r\n        },\r\n      },\r\n    ]\r\n\r\n    if (_newColumns.length === 1) {\r\n      for (const obj of columns) {\r\n        console.log(\"key\", obj.key)\r\n        if (\r\n          obj.key === \"StartTime\" ||\r\n          obj.key === \"branch\" ||\r\n          obj.key === \"orderNo\" ||\r\n          obj.key === \"customer\" ||\r\n          obj.key === \"contactNo\" ||\r\n          obj.key === \"totalDue\" ||\r\n          obj.key === \"totalAmountPaid\" ||\r\n          obj.key === \"totalQty\"\r\n        ) {\r\n          if (obj.key === \"StartTime\") {\r\n            _newColumns.push({\r\n              title: \"Partner Merch Order #\".toUpperCase(),\r\n              key: \"partnerMerchantOrderNo\",\r\n              dataIndex: \"partnerMerchantOrderNo\",\r\n              width: \"10rem\",\r\n              fixed: \"left\",\r\n            })\r\n          }\r\n          console.log(\"newColumns\", _newColumns)\r\n          _newColumns.push({\r\n            ...obj,\r\n            render:\r\n              obj.key === \"totalAmountPaid\"\r\n                ? (data, record) => {\r\n                    console.log(\"triggered\", data)\r\n                    return data === \"0\" || data === \"0.00\" || data === 0 ? (\r\n                      <div\r\n                        style={{\r\n                          color: \"red\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"flex-end\",\r\n                        }}\r\n                      >\r\n                        <p>{data.toFixed(2)}</p>\r\n                      </div>\r\n                    ) : (\r\n                      <Input\r\n                        type=\"number\"\r\n                        value={data}\r\n                        onChange={(e) => {\r\n                          // find index of dataFiltered\r\n                          const _dataIndex = dataFiltered.findIndex(\r\n                            (row) => row._id === record._id\r\n                          )\r\n                          // copy of dataFiltered\r\n                          const _dataFiltered = [...dataFiltered]\r\n                          // set new object to datafiltered index\r\n                          _dataFiltered[_dataIndex] = {\r\n                            ...record,\r\n                            totalAmountPaid: e.target.value,\r\n                          }\r\n                          // set new dataFiltered\r\n                          setDataFiltered(_dataFiltered)\r\n                          // push this id check to list of checkedIds to be included to submission update\r\n                          const _checkIds = [...checkedIds]\r\n                          !_checkIds.includes(record._id) &&\r\n                            _checkIds.push(record._id)\r\n                          setCheckedIds(_checkIds)\r\n                        }}\r\n                      />\r\n                    )\r\n                  }\r\n                : obj.render,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    setNewColumns(_newColumns)\r\n  }, [columns, dataFiltered, visible])\r\n\r\n  useEffect(() => {\r\n    if (!visible) {\r\n      setDataFiltered([])\r\n      setDataFetched([])\r\n      setDates([])\r\n      setRefNo(\"\")\r\n      setDatePaid(\"\")\r\n      setNewColumns([])\r\n      setCheckedIds([])\r\n    }\r\n  }, [visible])\r\n\r\n  const getDataByDate = ({ dates, orderViaPartner }) => {\r\n    if (!dates) return\r\n    if (dates.length > 0) {\r\n      const MS_PER_MINUTE = 60000\r\n      const startTime = new Date(dates[0]?._d)\r\n      const endTime = new Date(dates[1]?._d)\r\n      const _dateFrom = new Date(startTime - 30 * MS_PER_MINUTE)\r\n      const _dateTo = new Date(endTime - 30 * MS_PER_MINUTE)\r\n      db.collection(\"schedules\")\r\n        .where(\"StartTime\", \">=\", _dateFrom)\r\n        .where(\"StartTime\", \"<=\", _dateTo)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            const _startTime = formatDateFromDatabase(_data.StartTime)\r\n            const _endTime = formatDateFromDatabase(_data.EndTime)\r\n            const _dateOrderedPlaced = formatDateFromDatabase(\r\n              _data.dateOrderPlaced\r\n            )\r\n            const _getAmountPaidQtyAndTotal = tableSlice?.dataList.find(\r\n              (rowData) => rowData._id === doc.id\r\n            )\r\n            _dataFetched.push({\r\n              ..._data,\r\n              _id: doc.id,\r\n              StartTime: formatDateDash(_startTime),\r\n              EndTime: formatDateDash(_endTime),\r\n              dateOrderPlaced: formatDateDash(_dateOrderedPlaced),\r\n              totalDue: _getAmountPaidQtyAndTotal?.totalAmount,\r\n              totalQty: _getAmountPaidQtyAndTotal?.totalQty,\r\n              totalAmountPaid: _getAmountPaidQtyAndTotal?.totalAmountPaid,\r\n            })\r\n          })\r\n          setDataFetched(_dataFetched)\r\n\r\n          const args = {\r\n            branch,\r\n            dataFetched: [..._dataFetched],\r\n          }\r\n          const _orders = args?.dataFetched.filter(\r\n            (data) =>\r\n              data.orderViaPartner &&\r\n              data.orderViaPartner.includes(orderViaPartner.toUpperCase())\r\n          )\r\n          console.log(\"_orders\", orderViaPartner)\r\n          console.log(\"_orders\", _orders)\r\n          setDataFiltered(_orders)\r\n        })\r\n    }\r\n  }\r\n\r\n  // const getDataByBranch = (value) => {\r\n  //   setBranch(value)\r\n  //   if (dataFetched.length > 0) {\r\n  //     const args = {\r\n  //       branch: value,\r\n  //       dataFetched: [...dataFetched],\r\n  //     }\r\n  //     const _orders = args?.dataFetched.filter(\r\n  //       (data) => data.branch === args.value\r\n  //     )\r\n  //     setDataFiltered(_orders)\r\n  //   }\r\n  // }\r\n\r\n  const handleSubmit = () => {\r\n    for (const obj of dataFiltered) {\r\n      const dataToBeSend = {\r\n        datePayment: datePaid,\r\n        modePayment: obj.modePayment,\r\n        source: obj.source,\r\n        accountNumber: obj.accountNumber,\r\n        amountPaid: obj.totalAmountPaid,\r\n        datePayment: datePaid,\r\n        refNo: refNo,\r\n      }\r\n      if (checkedIds.includes(obj._id)) {\r\n        updateData({ data: dataToBeSend, collection: \"schedules\", id: obj._id })\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Button type=\"primary\" onClick={() => setVisible(true)} danger>\r\n        Add Group Payment\r\n      </Button>\r\n      <Modal\r\n        title=\"Add Group Payment\"\r\n        centered\r\n        visible={visible}\r\n        onOk={() => {\r\n          if (checkedIds.length > 0) {\r\n            if (datePaid && refNo) {\r\n              handleSubmit()\r\n              setVisible(false)\r\n            } else {\r\n              alert(\"Please provide a Ref number and Payment date\")\r\n            }\r\n          }\r\n        }}\r\n        onCancel={() => setVisible(false)}\r\n        width={2000}\r\n      >\r\n        <Grid>\r\n          {/* <Select\r\n            label=\"Branch\"\r\n            dataSource={branchDatasource}\r\n            value={branch}\r\n            onChange={(value) => getDataByBranch(value)}\r\n          /> */}\r\n\r\n          <Flex>\r\n            <RangePicker\r\n              showTime={false}\r\n              label=\"Date\"\r\n              value={dates}\r\n              format=\"MM/DD/YYYY\"\r\n              onChange={(value) => {\r\n                setDates(value)\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                marginLeft: \"1rem\",\r\n              }}\r\n            >\r\n              <label>Partner Merchant</label>\r\n              <Search\r\n                placeholder=\"Partner Merch Order #\"\r\n                onSearch={(value) => {\r\n                  getDataByDate({ dates: dates, orderViaPartner: value })\r\n                }}\r\n                style={{ width: 200 }}\r\n              />\r\n            </div>\r\n          </Flex>\r\n          <br />\r\n          <Flex>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <label>Ref No:</label>\r\n              <Input\r\n                value={refNo}\r\n                onChange={(e) => {\r\n                  setRefNo(e.target.value)\r\n                }}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                marginLeft: \"1rem\",\r\n              }}\r\n            >\r\n              <label>Date Payment:</label>\r\n              <DatePicker\r\n                onChange={(e, dateString) => {\r\n                  setDatePaid(new Date(dateString))\r\n                }}\r\n              />\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n        <Grid padding=\"1rem\">\r\n          <VerticalAutoScroll>\r\n            <StyledTable\r\n              size=\"medium\"\r\n              dataSource={dataFiltered}\r\n              columns={newColumns}\r\n              scroll={{ x: 1500, y: 1500 }}\r\n            />\r\n          </VerticalAutoScroll>\r\n        </Grid>\r\n        <Grid>\r\n          <Flex padding=\"1rem\">\r\n            <div style={{ flex: 1 }}>{`Records: ${dataFiltered.length}`}</div>\r\n            <div>{`Grand Total: ${sumArray(\r\n              dataFiltered,\r\n              \"totalAmountPaid\"\r\n            ).toFixed(2)}`}</div>\r\n          </Flex>\r\n        </Grid>\r\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n          <Print\r\n            component={\r\n              <div>\r\n                <Grid padding=\"1rem 2rem\">\r\n                  <h3>ZAP</h3>\r\n                  <div style={{ marginLeft: \"-2rem\" }}>\r\n                    <Table\r\n                      size=\"small\"\r\n                      pagination={false}\r\n                      dataSource={dataFiltered}\r\n                      columns={newColumns.map((data) => {\r\n                        if (data.key === \"_id\") {\r\n                          return {}\r\n                        } else {\r\n                          return data\r\n                        }\r\n                      })}\r\n                    />\r\n                  </div>\r\n                </Grid>\r\n              </div>\r\n            }\r\n            button={<AiFillPrinter fontSize=\"2.5rem\" />}\r\n          />\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PartnerMerchantModal\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\PaymentTransactionTable\\PaymentTransactionPrint.js",
  [
    "1518",
    "1519",
    "1520",
    "1521",
    "1522",
    "1523",
    "1524",
    "1525",
    "1526"
  ],
  "import { Button, DatePicker, Input } from \"antd\"\r\nimport moment from \"moment\"\r\nimport React, { useState } from \"react\"\r\nimport Services from \"Restructured/Services/SchedulerServices\"\r\nimport {\r\n  AiFillCloseCircle,\r\n  AiFillFilter,\r\n  AiFillPrinter,\r\n  AiOutlineClose,\r\n} from \"react-icons/ai\"\r\nimport Print from \"../Print\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { RangePicker } from \"Restructured/Components/Commons\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n  formatTime,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  OTHERS_DEDUCTION,\r\n  SOURCE,\r\n} from \"components/PaymentDetails/types\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectTableSlice } from \"components/Table/tableSlice\"\r\nimport { QUANTITY } from \"Restructured/Constants/products\"\r\nimport sumArray, { sumArrayDatas } from \"Restructured/Utilities/sumArray\"\r\n\r\nconst defaultDate = moment(new Date(), \"MM/DD/YYYY\")\r\nfunction PaymentTransactionPrint({\r\n  dataList,\r\n  setDataList,\r\n  setIsFilteredClicked,\r\n  isFilteredClicked,\r\n}) {\r\n  const tableComponentSlice = useSelector(selectTableSlice)\r\n  const [dates, setDates] = useState([defaultDate, defaultDate])\r\n\r\n  const loadData = async () => {\r\n    if (dates) {\r\n      const Service = new Services()\r\n      const data = await Service.getSchedulesByDate(\r\n        [dates[0]._d, dates[1]._d],\r\n        DATE_ORDER_PLACED\r\n      )\r\n      let newData = []\r\n      for (const obj of data) {\r\n        const foundObj = tableComponentSlice.dataList.find(\r\n          (field) => field._id === obj._id\r\n        )\r\n        const dateOrderPlaced = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n        const dateStart = formatDateFromDatabase(obj[DATE_START])\r\n        delete obj[DATE_END]\r\n        delete obj[DATE_PAYMENT]\r\n        if (foundObj) {\r\n          newData.push({\r\n            ...foundObj,\r\n            // [DATE_ORDER_PLACED]: formatDateSlash(dateOrderPlaced),\r\n            // [DATE_START]: `${formatDateSlash(dateStart)} ${formatTime(\r\n            //   dateStart\r\n            // )}`,\r\n          })\r\n        }\r\n      }\r\n      setDataList(newData)\r\n      setIsFilteredClicked(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", paddingLeft: \"3rem\" }}>\r\n      <RangePicker\r\n        format=\"MM/DD/YYYY\"\r\n        showTime={false}\r\n        value={dates}\r\n        onChange={(date) => setDates(date)}\r\n      />\r\n      {dataList.length > 0 ? (\r\n        <Print\r\n          component={\r\n            <div>\r\n              <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n                <tr style={{ width: \"100%\" }}>\r\n                  <th>DATE/TIME PLACED</th>\r\n                  <th>ORDER DATE/TIME</th>\r\n                  <th>ORDER #</th>\r\n                  <th>CUSTOMER</th>\r\n                  <th>CONTACT #</th>\r\n                  <th>QTY</th>\r\n                  <th align=\"right\">AMT</th>\r\n                  <th>DATE PAID</th>\r\n                  <th>MOP</th>\r\n                  <th>SOURCE</th>\r\n                  <th>RECEIVING ACCT</th>\r\n                  <th align=\"right\">PAID AMT</th>\r\n                  <th align=\"right\">OTHERS/DEDUCTIONS</th>\r\n                </tr>\r\n                {dataList.map((data, index) => {\r\n                  return (\r\n                    <tr\r\n                      style={\r\n                        (index + 1) % 2 === 0\r\n                          ? { backgroundColor: \"white\" }\r\n                          : { backgroundColor: \"#999\" }\r\n                      }\r\n                    >\r\n                      <td>{data[DATE_ORDER_PLACED]}</td>\r\n                      <td>{data[DATE_START]}</td>\r\n                      <td>{data[ORDER_NO]}</td>\r\n                      <td>{data[CUSTOMER]}</td>\r\n                      <td>{data[CONTACT_NUMBER]}</td>\r\n                      <td>{data[\"totalQty\"]}</td>\r\n                      <td align=\"right\">{data[\"totalDue\"]}</td>\r\n                      <td>{data[DATE_PAYMENT]}</td>\r\n                      <td>{data[MODE_PAYMENT]}</td>\r\n                      <td>{data[SOURCE]}</td>\r\n                      <td>{data[ACCOUNT_NUMBER]}</td>\r\n                      <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                      <td align=\"right\">{data[OTHERS_DEDUCTION]}</td>\r\n                    </tr>\r\n                  )\r\n                })}\r\n                <tr style={{ color: \"red\" }}>\r\n                  <td>Total</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td>{sumArray(dataList, \"totalQty\")}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td align=\"right\">\r\n                    {sumArray(dataList, AMOUNT_PAID).toFixed(2)}\r\n                  </td>\r\n                  <td align=\"right\">\r\n                    {sumArray(dataList, OTHERS_DEDUCTION).toFixed(2)}\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n          }\r\n          button={<AiFillPrinter fontSize=\"1rem\" />}\r\n        />\r\n      ) : (\r\n        <Button\r\n          shape=\"circle\"\r\n          icon={<AiFillFilter />}\r\n          size=\"large\"\r\n          onClick={() => loadData()}\r\n        />\r\n      )}\r\n      {isFilteredClicked > 0 && (\r\n        <Button\r\n          shape=\"circle\"\r\n          icon={<AiOutlineClose />}\r\n          size=\"large\"\r\n          onClick={() => {\r\n            setIsFilteredClicked(false)\r\n            setDataList([])\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PaymentTransactionPrint\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\modal.js",
  [
    "1527",
    "1528"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport { Modal, Button, Input, Divider, Select } from \"antd\"\r\nimport useProductServices from \"./useProductServices\"\r\nimport { addData } from \"services\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { Option } from \"antd/lib/mentions\"\r\nimport { formatDateDash } from \"Restructured/Utilities/dateFormat\"\r\nimport ReceivingReportServices from \"Restructured/Services/ReceivingReportServices\"\r\nimport generatedNoString from \"Restructured/Utilities/generatedNoString\"\r\n\r\nconst produceStateProperty = (productList) => {\r\n  const list = { invoiceNo: \"\", deliveryNo: \"\", purchaseOrderNo: \"\" }\r\n  for (const obj of productList) {\r\n    for (const obj2 of obj.productList) {\r\n      list[obj2?.code] = \"0\"\r\n    }\r\n  }\r\n  return list\r\n}\r\nconst ReceivingModal = (props) => {\r\n  const userComponentSlice = useSelector(selectUserSlice)\r\n  const { productList } = useProductServices()\r\n  const [importObj, setImportObj] = useState({})\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const handleSubmit = async () => {\r\n    console.log(\"imp\", importObj)\r\n    const date = formatDateDash(new Date())\r\n    const dateString = date.split(\"-\").join(\"\")\r\n    const verifyGeneratedObj =\r\n      await ReceivingReportServices.getRRByGeneratedNoObj(importObj.branch)\r\n    const _generatedNoString = generatedNoString(verifyGeneratedObj.length)\r\n    const dataToBeSend = {\r\n      ...importObj,\r\n      rrNo: `${importObj.branch.toUpperCase()}-${_generatedNoString}-${dateString}`,\r\n      receivedBy: {\r\n        displayName: userComponentSlice?.displayName,\r\n        email: userComponentSlice?.email,\r\n        roles: userComponentSlice?.roles,\r\n      },\r\n      date: new Date(),\r\n    }\r\n    const result = addData({\r\n      data: dataToBeSend,\r\n      collection: \"receivingReports\",\r\n      id: null,\r\n    })\r\n    setVisible(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const date = formatDateDash(new Date())\r\n    const dateString = date.split(\"-\").join(\"\")\r\n    if (visible === false) {\r\n      setImportObj({\r\n        ...produceStateProperty(productList),\r\n        branch: \"Libis\",\r\n        dateString: dateString,\r\n      })\r\n    }\r\n    if (visible) {\r\n      props.setModalState(true)\r\n    }\r\n  }, [visible, productList])\r\n  return (\r\n    <>\r\n      <Button type=\"danger\" onClick={() => setVisible(true)}>\r\n        Create Receiving Report\r\n      </Button>\r\n      <Modal\r\n        title=\"Create Receiving Report\"\r\n        centered\r\n        visible={visible}\r\n        onOk={() => {\r\n          handleSubmit()\r\n          props.setModalState(false)\r\n        }}\r\n        onCancel={() => {\r\n          setVisible(false)\r\n          props.setModalState(false)\r\n        }}\r\n        width={1000}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"flex-start\",\r\n            flexFlow: \"row wrap\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              padding: \"1rem\",\r\n              marginBottom: \"1rem\",\r\n              maxWidth: \"15rem\",\r\n            }}\r\n          >\r\n            <label>Branch</label>\r\n            <Select\r\n              style={{ width: \"13rem\" }}\r\n              value={importObj.branch}\r\n              onChange={(value) => {\r\n                console.log(\"e\", value)\r\n                setImportObj({\r\n                  ...importObj,\r\n                  branch: value,\r\n                })\r\n              }}\r\n            >\r\n              <Option value=\"Libis\">Libis</Option>\r\n              <Option value=\"Ronac\">Ronac</Option>\r\n            </Select>\r\n          </div>\r\n          <div\r\n            style={{ padding: \"1rem\", marginBottom: \"1rem\", maxWidth: \"15rem\" }}\r\n          >\r\n            <label>Invoice No</label>\r\n            <Input\r\n              name=\"invoiceNo\"\r\n              onChange={(e) =>\r\n                setImportObj({ ...importObj, invoiceNo: e.target.value })\r\n              }\r\n              value={importObj[\"invoiceNo\"]}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{ padding: \"1rem\", marginBottom: \"1rem\", maxWidth: \"15rem\" }}\r\n          >\r\n            <label>Delivery No</label>\r\n            <Input\r\n              name=\"deliveryNo\"\r\n              onChange={(e) =>\r\n                setImportObj({ ...importObj, deliveryNo: e.target.value })\r\n              }\r\n              value={importObj[\"deliveryNo\"]}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{ padding: \"1rem\", marginBottom: \"1rem\", maxWidth: \"15rem\" }}\r\n          >\r\n            <label>Purchase Order No</label>\r\n            <Input\r\n              name=\"purchaseOrderNo\"\r\n              onChange={(e) =>\r\n                setImportObj({ ...importObj, purchaseOrderNo: e.target.value })\r\n              }\r\n              value={importObj[\"purchaseOrderNo\"]}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          {productList.map((product) => {\r\n            return (\r\n              <div>\r\n                <h3>{product?.groupHeader}</h3>\r\n                <Divider />\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexFlow: \"row wrap\",\r\n                    justifyContent: \"flex-end\",\r\n                    alignItems: \"flex-end\",\r\n                  }}\r\n                >\r\n                  {product?.productList.map((data) => {\r\n                    return (\r\n                      <div\r\n                        style={{\r\n                          padding: \"1rem\",\r\n                          marginBottom: \"1rem\",\r\n                          maxWidth: \"15rem\",\r\n                        }}\r\n                      >\r\n                        <label>{`${data?.description} (${data?.code})`}</label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"purchaseOrderNo\"\r\n                          onChange={(e) => {\r\n                            setImportObj({\r\n                              ...importObj,\r\n                              [data?.code]: e.target.value,\r\n                            })\r\n                          }}\r\n                          value={importObj[data?.code]}\r\n                        />\r\n                      </div>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReceivingModal\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\PaymentTransactionTable\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Styles\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\paymentForm.js",
  [
    "1529",
    "1530",
    "1531",
    "1532",
    "1533",
    "1534",
    "1535",
    "1536",
    "1537",
    "1538",
    "1539",
    "1540",
    "1541",
    "1542",
    "1543",
    "1544",
    "1545",
    "1546",
    "1547",
    "1548"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport fields from \"components/fields\"\r\nimport Input from \"components/fields/input\"\r\nimport {\r\n  DATE_PICKER,\r\n  DROP_DOWN_LIST,\r\n  INPUT,\r\n  NUMBER,\r\n} from \"components/fields/types\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  PAYMENT_LABELS,\r\n  REF_NO,\r\n  SOURCE,\r\n  TOTAL_DUE,\r\n} from \"./types\"\r\nimport { Container, Wrapper } from \"./styles\"\r\nimport CustomDialog from \"components/dialog\"\r\nimport { AiOutlineMinus } from \"react-icons/ai\"\r\nimport { Button } from \"antd\"\r\nimport { SCHEDULES } from \"services/collectionNames\"\r\nimport { updateData, update } from \"services\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectTableSlice } from \"components/Table/tableSlice\"\r\nimport { useGetDropdowns } from \"components/PaymentDetails/dropdowns\"\r\nimport { Uploads } from \"components/uploads\"\r\nimport formatNumber from \"commonFunctions/formatNumber\"\r\nimport DiscountAndOthersDialog from \"./DiscountAndOthersDialog\"\r\nimport PartialPayments from \"./partialModal\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport FirestoreCommands from \"services/firebase/FirestoreCommands\"\r\n\r\nexport function Paymentform(props) {\r\n  const tableSlice = useSelector(selectTableSlice)\r\n  const [others, setOthers] = useState({ \"Senior Citizen\": 0 })\r\n  const [formFields, setFormFields] = useState({})\r\n  const [orderNo, setOrderNo] = useState(\"\")\r\n  const [balance, setBalance] = useState(props?.subTotal)\r\n  const dropdowns = useGetDropdowns()\r\n  useEffect(() => {\r\n    setBalance(parseInt(props?.subTotal))\r\n    if (props?.id) {\r\n      loadData()\r\n    }\r\n  }, [props?.subTotal, props?.id, dropdowns])\r\n\r\n  const loadData = async () => {\r\n    const newFormFields = {}\r\n    const newOthers = {}\r\n    const { dataList } = tableSlice\r\n    // const data = dataList.find((row) => row._id === props?.id)\r\n    const data = await FirestoreCommands.getDataById(\"schedules\", props?.id)\r\n    if (data?.partials) {\r\n      newFormFields.partials = data?.partials.map((partial) => {\r\n        return {\r\n          ...partial,\r\n          date: formatDateFromDatabase(partial.date),\r\n        }\r\n      })\r\n    }\r\n    // this is only for dropdowns\r\n    for (const obj of dropdowns) {\r\n      newFormFields[obj?.name] =\r\n        typeof data[obj?.name] !== \"undefined\" ? data[obj?.name] : \"\"\r\n    }\r\n\r\n    if (data?.datePayment) {\r\n      const dateFromD = formatDateFromDatabase(data[DATE_PAYMENT])\r\n      newFormFields[DATE_PAYMENT] = new Date(formatDateDash(dateFromD))\r\n    }\r\n\r\n    for (const key in data.others) {\r\n      newOthers[key] = data.others[key]\r\n    }\r\n\r\n    // to set a default value in the field of amount paid\r\n    if (\r\n      newFormFields[AMOUNT_PAID] === \"0\" ||\r\n      newFormFields[AMOUNT_PAID] === \"\"\r\n    ) {\r\n      newFormFields[AMOUNT_PAID] = props.subTotal\r\n    }\r\n    newFormFields[TOTAL_DUE] = props.subTotal\r\n    newFormFields[\"discountAdditionalDetails\"] = {\r\n      ...data[\"discountAdditionalDetails\"],\r\n    }\r\n\r\n    setOrderNo(data?.orderNo)\r\n    setOthers(newOthers)\r\n    setFormFields(newFormFields)\r\n    calculateBalance(props.subTotal)\r\n  }\r\n  console.log(\"formFields\", others)\r\n  console.log(\"subTotal\", props.subTotal)\r\n  useEffect(() => {\r\n    calculateBalance(formFields[AMOUNT_PAID], others)\r\n  }, [others, formFields[AMOUNT_PAID]])\r\n\r\n  const calculateBalance = (amountPaid = 0, less) => {\r\n    // console.log(props.subTotal)\r\n    // const amountPaid = formFields[AMOUNT_PAID]\r\n    // const paid = isNaN(amountPaid)\r\n    //   ? 0\r\n    //   : amountPaid === ''\r\n    //     ? 0\r\n    //     : parseInt(amountPaid)\r\n    // let newBalance = parseInt(props?.subTotal) - paid\r\n    // for (const key in others) {\r\n    //   const value = others[key]\r\n    //   console.log(key, value)\r\n    //   const discount = isNaN(value) ? 0 : value === '' ? 0 : parseInt(value)\r\n    //   newBalance = newBalance - discount\r\n    // }\r\n    // setBalance(newBalance)\r\n    // let _newBalance = parseInt(props.subTotal) || 0\r\n    // for (const key in others) {\r\n    //   _newBalance = _newBalance - others[key]\r\n    // }\r\n    // _newBalance = _newBalance - parseInt(amountPaid)\r\n    // setBalance(_newBalance)\r\n\r\n    let _newBalance = 0\r\n    for (const key in less) {\r\n      _newBalance = Number(less[key])\r\n    }\r\n    const totalBalance =\r\n      Number(props?.subTotal) - Number(amountPaid) - _newBalance\r\n    setBalance(totalBalance)\r\n  }\r\n\r\n  const handleOthers = (data) => {\r\n    const newOthers = {}\r\n    for (const key in data) {\r\n      newOthers[data[key]] = 0\r\n    }\r\n    setOthers(newOthers)\r\n  }\r\n\r\n  const handleChange = (e, fieldName) => {\r\n    setOthers({ ...others, [fieldName]: e.target.value })\r\n  }\r\n\r\n  const handleChangeFormFields = (e, fieldName, type) => {\r\n    const value = type === DROP_DOWN_LIST ? e.value : e.target.value\r\n    setFormFields({ ...formFields, [fieldName]: value })\r\n  }\r\n\r\n  const handleRemove = (fieldName) => {\r\n    const newOthers = { ...others }\r\n    delete newOthers[fieldName]\r\n    setOthers(newOthers)\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const d = new Date(formFields[DATE_PAYMENT])\r\n    if (Object.prototype.toString.call(d) === \"[object Date]\") {\r\n      // it is a date\r\n      if (isNaN(d.getTime())) {\r\n        // d.valueOf() could also work\r\n        alert(\"Date is invalid\")\r\n        // date is not valid\r\n        return\r\n      } else {\r\n        // date is valid\r\n      }\r\n    } else {\r\n      // not a date\r\n    }\r\n\r\n    const data = {\r\n      ...formFields,\r\n      [DATE_PAYMENT]: new Date(formFields[DATE_PAYMENT]),\r\n      others: { ...others },\r\n    }\r\n\r\n    const result = await FirestoreCommands.updateDataById(\r\n      \"schedules\",\r\n      props?.id,\r\n      data\r\n    )\r\n    props.onBack()\r\n  }\r\n\r\n  const handleDiscountAdditionalDetails = (data, discName) => {\r\n    const _formFields = { ...formFields }\r\n    _formFields[\"discountAdditionalDetails\"] = { ...data }\r\n    _formFields.amountPaid = (\r\n      Number(_formFields[TOTAL_DUE]) - Number(data[discName]?.amount)\r\n    ).toFixed(2)\r\n    setFormFields(_formFields)\r\n    setOthers({ [discName]: data[discName]?.amount })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Wrapper>\r\n        <Container>\r\n          {dropdowns.map((customProps) => {\r\n            return fields[customProps?.type]({\r\n              ...customProps,\r\n              // this value is applied only for dropdowns field\r\n              value: formFields[customProps?.name],\r\n              onChange: (e) => {\r\n                if (customProps?.name === TOTAL_DUE) {\r\n                } else {\r\n                  if (customProps?.name === AMOUNT_PAID) {\r\n                    const { partials = [] } = formFields\r\n                    if (partials.length === 0) {\r\n                      handleChangeFormFields(\r\n                        e,\r\n                        customProps?.name,\r\n                        customProps.type\r\n                      )\r\n                    }\r\n                  } else {\r\n                    handleChangeFormFields(\r\n                      e,\r\n                      customProps?.name,\r\n                      customProps.type\r\n                    )\r\n                  }\r\n                }\r\n              },\r\n            })\r\n          })}\r\n        </Container>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            padding: \"0rem 1rem\",\r\n          }}\r\n        >\r\n          <Uploads id={props?.id} />\r\n          <PartialPayments\r\n            formFields={formFields}\r\n            setFormFields={setFormFields}\r\n            dropdowns={dropdowns}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"center\",\r\n            padding: \"1rem 0rem\",\r\n          }}\r\n        >\r\n          <div style={{ flex: \"1\" }}>Others</div>\r\n          <div>\r\n            {/* <CustomDialog\r\n              label=\"Less\"\r\n              others={others}\r\n              setOthers={handleOthers}\r\n            /> */}\r\n            <DiscountAndOthersDialog\r\n              totalDue={formFields[TOTAL_DUE]}\r\n              setDiscountAdditionalDetails={handleDiscountAdditionalDetails}\r\n              formFields={formFields}\r\n              others={others}\r\n              orderNo={orderNo}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {Object.keys(others).map((fieldName, index) => {\r\n          return (\r\n            <Container key={index}>\r\n              {fields[NUMBER]({\r\n                name: fieldName,\r\n                label: fieldName,\r\n                value: others[fieldName],\r\n                // onChange: (e) => handleChange(e, fieldName),\r\n              })}\r\n\r\n              <div\r\n                style={{\r\n                  flex: \".2\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-end\",\r\n                  width: \"100%\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <Button\r\n                  type=\"secondary\"\r\n                  shape=\"circle\"\r\n                  icon={\r\n                    <AiOutlineMinus onClick={() => handleRemove(fieldName)} />\r\n                  }\r\n                  // disabled={fieldName === \"Amount Paid\"}\r\n                />\r\n              </div>\r\n            </Container>\r\n          )\r\n        })}\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"center\",\r\n            padding: \"1rem 0rem\",\r\n          }}\r\n        >\r\n          <div style={{ flex: \"1\" }}>Balance</div>\r\n          <div>{formatNumber(balance.toFixed(2))}</div>\r\n        </div>\r\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n          <Button type=\"primary\" danger onClick={handleSubmit}>\r\n            {\" \"}\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </Wrapper>\r\n    </>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\sort.js",
  [
    "1549"
  ],
  "export default (array, field) => {\r\n  return array.sort((a, b) => a[field] - b[field])\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Constants\\products.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\index.js",
  [
    "1550",
    "1551",
    "1552",
    "1553",
    "1554",
    "1555",
    "1556",
    "1557"
  ],
  "import {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nimport {\r\n  DATE_END,\r\n  DATE_START,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport {\r\n  BRANCH,\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n  SOURCE,\r\n  STATUS,\r\n} from \"Restructured/Constants/schedules\"\r\nimport ProductServices from \"Restructured/Services/ProductServices\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatTime,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport FilteringPanelMethods from \"../../FilteringPanel/Controllers/FilteringPanelMethods\"\r\nimport formatNumber from \"Restructured/Utilities/formatNumber\"\r\nimport Services from \"../Services\"\r\nimport dummy from \"../_dummy\"\r\nimport { CODE, QUANTITY } from \"Restructured/Constants/products\"\r\nimport calculateTotalAmountPaid from \"./calculateTotalAmountPaid\"\r\nimport calculateTotalCost from \"./calculateTotalCost\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport { selectUserSlice } from \"containers/0.NewLogin/loginSlice\"\r\n\r\nexport default class Controllers {\r\n  static async produceScheduleReports(_reports, products) {\r\n    const { _products, _productGroupHeaderAndPrice, _productGroupHeader } =\r\n      ProductServices.produceProductList(products)\r\n\r\n    const tableData = {\r\n      DIRECT: [],\r\n    }\r\n    for (const _data of _reports) {\r\n      const _startTime = formatDateFromDatabase(_data[DATE_START])\r\n      const _endTime = formatDateFromDatabase(_data[DATE_END])\r\n      const _datePlaced = formatDateFromDatabase(_data[DATE_ORDER_PLACED])\r\n      const _datePayment =\r\n        typeof _data[DATE_PAYMENT] !== \"undefined\"\r\n          ? formatDateFromDatabase(_data[DATE_PAYMENT])\r\n          : \"\"\r\n      const productObj = FilteringPanelMethods.produceProductListWithData({\r\n        products: _products,\r\n        dataList: _data,\r\n      })\r\n\r\n      const amountPaid = parseInt(_data[AMOUNT_PAID])\r\n      // const amountPaid = calculateTotalAmountPaid(\r\n      //   _data[AMOUNT_PAID],\r\n      //   _data?.others\r\n      // )\r\n      const totalCost = calculateTotalCost(\r\n        productObj,\r\n        _productGroupHeaderAndPrice\r\n      )\r\n\r\n      const _productsLength = Object.keys(productObj).length\r\n      let _productCounts = 1\r\n      if (_data[SOURCE]) {\r\n        for (const key in productObj) {\r\n          const orderVia = _data[ORDER_VIA]\r\n          const orderViaPartner = _data[ORDER_VIA_PARTNER]\r\n          const _price =\r\n            typeof _data[`customPrice${key}`] === \"undefined\"\r\n              ? _productGroupHeaderAndPrice[key]?.price\r\n              : parseInt(_data[`customPrice${key}`])\r\n          if (orderVia) {\r\n            if (_productCounts === 1) {\r\n              tableData.DIRECT.push({\r\n                ..._data,\r\n                [CODE]: key,\r\n                [ORDER_NO]: _data[ORDER_NO],\r\n                [QUANTITY]: productObj[key],\r\n                [CUSTOMER]: _data[CUSTOMER],\r\n                [SOURCE]: _data[SOURCE] ? _data[SOURCE] : \"\",\r\n                [BRANCH]: _data[BRANCH],\r\n                [DATE_START]: formatTime(_startTime),\r\n                startDate: formatDateDash(_startTime),\r\n                [DATE_ORDER_PLACED]: formatDateDash(_datePlaced),\r\n                [REF_NO]: _data[REF_NO],\r\n                [ACCOUNT_NUMBER]: _data[ACCOUNT_NUMBER],\r\n                [MODE_PAYMENT]: _data[MODE_PAYMENT],\r\n                [DATE_PAYMENT]: _datePayment\r\n                  ? formatDateDash(_datePayment)\r\n                  : \"\",\r\n                [ORDER_VIA]: _data[ORDER_VIA],\r\n                [CONTACT_NUMBER]: _data[CONTACT_NUMBER],\r\n                status:\r\n                  _productsLength === 1\r\n                    ? amountPaid < totalCost\r\n                      ? _data[STATUS]\r\n                      : \"PAID\"\r\n                    : \"--\",\r\n                amount: (_price * productObj[key]).toFixed(2),\r\n                less: _productsLength === 1 ? _data?.others : {},\r\n                amountPaid:\r\n                  _productsLength === 1 ? amountPaid.toFixed(2) : \"--\",\r\n              })\r\n            } else {\r\n              if (_productCounts === _productsLength) {\r\n                tableData.DIRECT.push({\r\n                  ..._data,\r\n                  [CODE]: key,\r\n                  [ORDER_NO]: _data[ORDER_NO],\r\n                  [QUANTITY]: productObj[key],\r\n                  [CUSTOMER]: \"--\",\r\n                  [SOURCE]: \"--\",\r\n                  [BRANCH]: \"--\",\r\n                  [DATE_START]: \"--\",\r\n                  startDate: formatDateDash(_startTime),\r\n                  [DATE_ORDER_PLACED]: \"--\",\r\n                  [REF_NO]: \"--\",\r\n                  [ACCOUNT_NUMBER]: \"--\",\r\n                  [MODE_PAYMENT]: \"--\",\r\n                  [DATE_PAYMENT]: \"--\",\r\n                  [ORDER_VIA]: \"--\",\r\n                  [CONTACT_NUMBER]: \"--\",\r\n                  status: amountPaid < totalCost ? _data[STATUS] : \"PAID\",\r\n                  amount: (_price * productObj[key]).toFixed(2),\r\n                  amountPaid: amountPaid.toFixed(2),\r\n                  less: _data?.others,\r\n                })\r\n              } else {\r\n                tableData.DIRECT.push({\r\n                  ..._data,\r\n                  [CODE]: key,\r\n                  [ORDER_NO]: _data[ORDER_NO],\r\n                  [QUANTITY]: productObj[key],\r\n                  [CUSTOMER]: \"--\",\r\n                  [SOURCE]: \"--\",\r\n                  [BRANCH]: \"--\",\r\n                  [DATE_START]: \"--\",\r\n                  startDate: formatDateDash(_startTime),\r\n                  [DATE_ORDER_PLACED]: \"--\",\r\n                  [REF_NO]: \"--\",\r\n                  [ACCOUNT_NUMBER]: \"--\",\r\n                  [MODE_PAYMENT]: \"--\",\r\n                  [DATE_PAYMENT]: \"--\",\r\n                  [ORDER_VIA]: \"--\",\r\n                  [CONTACT_NUMBER]: \"--\",\r\n                  status: \"--\",\r\n                  amount: (_price * productObj[key]).toFixed(2),\r\n                  amountPaid: \"--\",\r\n                  less: {},\r\n                })\r\n              }\r\n            }\r\n          } else {\r\n            console.log(\"PARTNER\", _productsLength)\r\n            if (orderViaPartner) {\r\n              const viaType = `PARTNER MERCHANT ${orderViaPartner}`\r\n              if (_productCounts === 1) {\r\n                if (typeof tableData[viaType] === \"undefined\") {\r\n                  tableData[viaType] = []\r\n                }\r\n                tableData[viaType].push({\r\n                  ..._data,\r\n                  [CODE]: key,\r\n                  [ORDER_NO]: _data[ORDER_NO],\r\n                  [QUANTITY]: productObj[key],\r\n                  [CUSTOMER]: _data[CUSTOMER],\r\n                  [SOURCE]: _data[SOURCE] ? _data[SOURCE] : \"\",\r\n                  [BRANCH]: _data[BRANCH],\r\n                  [DATE_START]: formatTime(_startTime),\r\n                  startDate: formatDateDash(_startTime),\r\n                  [DATE_ORDER_PLACED]: formatDateDash(_datePlaced),\r\n                  [REF_NO]: _data[REF_NO],\r\n                  [ACCOUNT_NUMBER]: _data[ACCOUNT_NUMBER],\r\n                  [MODE_PAYMENT]: _data[MODE_PAYMENT],\r\n                  [DATE_PAYMENT]: _datePayment\r\n                    ? formatDateDash(_datePayment)\r\n                    : \"\",\r\n                  [ORDER_VIA]: _data[ORDER_VIA],\r\n                  [CONTACT_NUMBER]: _data[CONTACT_NUMBER],\r\n                  status:\r\n                    _productsLength === 1\r\n                      ? amountPaid < totalCost\r\n                        ? _data[STATUS]\r\n                        : \"PAID\"\r\n                      : \"--\",\r\n                  amount: (_price * productObj[key]).toFixed(2),\r\n                  less: _productsLength === 1 ? _data?.others : {},\r\n                  amountPaid:\r\n                    _productsLength === 1 ? amountPaid.toFixed(2) : \"--\",\r\n                })\r\n              } else {\r\n                if (_productCounts === _productsLength) {\r\n                  tableData[viaType].push({\r\n                    ..._data,\r\n                    [CODE]: key,\r\n                    [ORDER_NO]: _data[ORDER_NO],\r\n                    [QUANTITY]: productObj[key],\r\n                    [CUSTOMER]: \"--\",\r\n                    [SOURCE]: \"--\",\r\n                    [BRANCH]: \"--\",\r\n                    [DATE_START]: \"--\",\r\n                    startDate: formatDateDash(_startTime),\r\n                    [DATE_ORDER_PLACED]: \"--\",\r\n                    [REF_NO]: \"--\",\r\n                    [ACCOUNT_NUMBER]: \"--\",\r\n                    [MODE_PAYMENT]: \"--\",\r\n                    [DATE_PAYMENT]: \"--\",\r\n                    [ORDER_VIA]: \"--\",\r\n                    [CONTACT_NUMBER]: \"--\",\r\n                    status: amountPaid < totalCost ? _data[STATUS] : \"PAID\",\r\n                    amount: (_price * productObj[key]).toFixed(2),\r\n                    amountPaid: amountPaid.toFixed(2),\r\n                    less: _data?.others,\r\n                  })\r\n                } else {\r\n                  tableData[viaType].push({\r\n                    ..._data,\r\n                    [CODE]: key,\r\n                    [ORDER_NO]: _data[ORDER_NO],\r\n                    [QUANTITY]: productObj[key],\r\n                    [CUSTOMER]: \"--\",\r\n                    [SOURCE]: \"--\",\r\n                    [BRANCH]: \"--\",\r\n                    [DATE_START]: \"--\",\r\n                    startDate: formatDateDash(_startTime),\r\n                    [DATE_ORDER_PLACED]: \"--\",\r\n                    [REF_NO]: \"--\",\r\n                    [ACCOUNT_NUMBER]: \"--\",\r\n                    [MODE_PAYMENT]: \"--\",\r\n                    [DATE_PAYMENT]: \"--\",\r\n                    [ORDER_VIA]: \"--\",\r\n                    [CONTACT_NUMBER]: \"--\",\r\n                    status: \"--\",\r\n                    amount: (_price * productObj[key]).toFixed(2),\r\n                    amountPaid: \"--\",\r\n                    less: {},\r\n                  })\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (_productCounts !== _productsLength) {\r\n            _productCounts = _productCounts + 1\r\n          } else {\r\n            _productCounts = 1\r\n          }\r\n        }\r\n      }\r\n    }\r\n    console.log(\"tableData\", tableData)\r\n    return tableData\r\n  }\r\n\r\n  static async produceSourceSummary(_reports) {\r\n    const sourceSummary = {\r\n      DIRECT: [],\r\n    }\r\n    for (const _data of _reports) {\r\n      const orderVia = _data[ORDER_VIA]\r\n      const orderViaPartner = _data[ORDER_VIA_PARTNER]\r\n      const datePlaced = formatDateFromDatabase(_data[DATE_START])\r\n      const amountPaid = parseInt(_data[AMOUNT_PAID])\r\n      // const amountPaid = calculateTotalAmountPaid(\r\n      //   _data[AMOUNT_PAID],\r\n      //   _data?.others\r\n      // )\r\n\r\n      if (orderVia) {\r\n        if (_data[SOURCE]) {\r\n          // const _finalSum = parseInt(_totalSumOfDirect) + parseInt(amountPaid)\r\n          sourceSummary.DIRECT.push({\r\n            [SOURCE]: _data[SOURCE],\r\n            [AMOUNT_PAID]: amountPaid.toFixed(2),\r\n            [DATE_START]: formatDateDash(datePlaced),\r\n          })\r\n        }\r\n      } else {\r\n        if (orderViaPartner !== null || orderViaPartner !== \"\") {\r\n          const viaType = `PARTNER MERCHANT ${orderViaPartner}`\r\n          if (typeof sourceSummary[viaType] === \"undefined\") {\r\n            if (_data[SOURCE]) {\r\n              console.log(_data[SOURCE], amountPaid)\r\n              sourceSummary[viaType] = [\r\n                {\r\n                  [SOURCE]: _data[SOURCE],\r\n                  [AMOUNT_PAID]: amountPaid.toFixed(2),\r\n                  [DATE_START]: formatDateDash(datePlaced),\r\n                },\r\n              ]\r\n            }\r\n          } else {\r\n            console.log(_data[SOURCE], amountPaid)\r\n            if (_data[SOURCE]) {\r\n              sourceSummary[viaType].push({\r\n                [SOURCE]: _data[SOURCE],\r\n                [AMOUNT_PAID]: amountPaid.toFixed(2),\r\n                [DATE_START]: formatDateDash(datePlaced),\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return sourceSummary\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Services\\index.js",
  [
    "1558"
  ],
  "import { BRANCH, DATE_ORDER_PLACED } from \"Restructured/Constants/schedules\"\r\nimport db from \"services/firebase\"\r\nexport default class Services {\r\n  static async getSchedules(branch, dateFromTo) {\r\n    if (dateFromTo === null) return []\r\n    const startTime = new Date(dateFromTo[0]?._d.setHours(0, 0, 0, 0))\r\n    const endTime = new Date(dateFromTo[1]?._d.setHours(23, 59, 59, 59))\r\n    // const endTime = new Date(\r\n    //   dateFromTo[1]?._d.setDate(dateFromTo[1]?._d.getDate())\r\n    // )\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(\"schedules\")\r\n        .where(\"StartTime\", \">=\", startTime)\r\n        .where(\"StartTime\", \"<=\", endTime)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            _dataFetched.push({ ..._data, _id: doc.id })\r\n          })\r\n          const filterByBranch = _dataFetched.filter(\r\n            (data) => data[BRANCH] === branch\r\n          )\r\n          resolve(filterByBranch)\r\n        })\r\n        .catch((error) => {\r\n          reject(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    })\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\types.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\orderVia.js",
  [
    "1559",
    "1560",
    "1561",
    "1562"
  ],
  "// this function component is a special case\r\n\r\nimport React, { useState, useEffect } from \"react\"\r\nimport Input from \"./input\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  LABELS,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n  PARTNER_MERCHANT_ORDER_NO,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport DropdownList from \"./dropdownList\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectOrderComponentSlice } from \"components/SchedulerComponent/orderSlip/orderSlipSlice\"\r\n\r\nconst Container = styled.div`\r\n  display: ${(props) => (props.isDisplayed ? \"flex\" : \"flex\")};\r\n  justify-content: flex-start;\r\n  width: 100%;\r\n  position: relative;\r\n`\r\nconst Left = styled.div`\r\n  width: 50%;\r\n\r\n  label {\r\n    color: #888;\r\n  }\r\n`\r\n\r\nconst Right = styled.div`\r\n  width: 50%;\r\n  position: absolute;\r\n  right: -0.9rem;\r\n\r\n  label {\r\n    color: #888;\r\n  }\r\n`\r\n\r\nfunction OrderVia(props) {\r\n  const orderComponentSlice = useSelector(selectOrderComponentSlice)\r\n  const [isPartnerMerchant, setPartnerMerchant] = useState(false)\r\n  const [newProps, setNewProps] = useState(props)\r\n  const [secondFieldValue, setSecondFieldValue] = useState(\"\")\r\n  const [isDisplayed, setIsDisplayed] = useState(false)\r\n  // const [dataSource, setDataSource] = useState([])\r\n  useEffect(() => {\r\n    setNewProps(props)\r\n    // reStructureDataSource()\r\n    setSecondFieldValue(props[PARTNER_MERCHANT_ORDER_NO])\r\n  }, [props])\r\n\r\n  // const reStructureDataSource = () => {\r\n  //   const newDataSource =\r\n  //     props?.label === LABELS[ORDER_VIA]\r\n  //       ? props.dataSource.filter((data) => data.Category === 'Direct')\r\n  //       : props.dataSource.filter(\r\n  //         (data) => data.Category === 'Partner Merchant'\r\n  //       )\r\n\r\n  //   setDataSource(newDataSource)\r\n  // }\r\n\r\n  useEffect(() => {\r\n    loadDisplayedSetting()\r\n  }, [orderComponentSlice.orderViaField])\r\n\r\n  const loadDisplayedSetting = () => {\r\n    if (orderComponentSlice.orderViaField) {\r\n      if (orderComponentSlice.orderViaField.includes(\"Direct\")) {\r\n        setIsDisplayed(false)\r\n      } else if (\r\n        orderComponentSlice.orderViaField.includes(\"Partner Merchant\")\r\n      ) {\r\n        setIsDisplayed(true)\r\n      } else {\r\n        setIsDisplayed(true)\r\n      }\r\n    } else {\r\n      setIsDisplayed(true)\r\n    }\r\n  }\r\n  return (\r\n    <Container>\r\n      <Left>\r\n        <label>{LABELS[ORDER_VIA_PARTNER]}</label>\r\n        <DropdownList\r\n          {...newProps}\r\n          enabled={props?.enabled}\r\n          value={newProps[ORDER_VIA_PARTNER]}\r\n          name={ORDER_VIA_PARTNER}\r\n          id={ORDER_VIA_PARTNER}\r\n          change={props?.onChange}\r\n        />\r\n      </Left>\r\n      <Right>\r\n        <label>{LABELS[PARTNER_MERCHANT_ORDER_NO]}</label>\r\n        <Input\r\n          {...newProps}\r\n          name={PARTNER_MERCHANT_ORDER_NO}\r\n          disabled={!isDisplayed}\r\n          value={secondFieldValue}\r\n          onChange={(e) => {\r\n            setSecondFieldValue(e.target.value)\r\n          }}\r\n        />\r\n      </Right>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default OrderVia\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\input.js",
  [
    "1563",
    "1564"
  ],
  "import { PARTNER_MERCHANT_ORDER_NO } from 'components/SchedulerComponent/orderSlip/types'\r\nimport React from 'react'\r\nimport classes from './index.module.css'\r\nimport styled from 'styled-components'\r\n\r\nconst OutlinedContainer = styled.div`\r\n  border: 1px solid grey;\r\n  margin-top: 0.5rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  box-sizing: content-box;\r\n  position: relative;\r\n`\r\nconst Input = React.forwardRef((props, ref) => {\r\n  return (\r\n    <OutlinedContainer>\r\n      <input\r\n        id={props.name}\r\n        className='e-field e-input'\r\n        type={props.isNumber ? 'number' : 'text'}\r\n        name={props.name}\r\n        value={props.value}\r\n        style={{ width: '100%' }}\r\n        onChange={props?.onChange}\r\n        disabled={props?.disabled}\r\n        placeholder={props?.placeholder}\r\n        onBlur={props?.onBlur}\r\n      />\r\n    </OutlinedContainer>\r\n  )\r\n})\r\n\r\nexport default Input\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\Panel\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\useDropdownGroup.js",
  [
    "1565"
  ],
  "import { useEffect, useState } from 'react'\r\nimport { addData, getData } from 'services'\r\n\r\nexport function useGetDropdownGroup(dropdownName) {\r\n  const [groupDropdowns, setGroupDropdowns] = useState([])\r\n  useEffect(() => {\r\n    loadGroupDropdown()\r\n  }, [])\r\n\r\n  const loadGroupDropdown = async () => {\r\n    const result = await getData('groupDropdowns')\r\n    setGroupDropdowns([...result])\r\n  }\r\n\r\n  const saveGroupDropdowns = async (list) => {\r\n    const result = await addData({ data: [], collection: dropdownName })\r\n  }\r\n\r\n  return [groupDropdowns, saveGroupDropdowns]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\Controllers\\FilteringPanelMethods.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\getWeekOfDate.js",
  [
    "1566"
  ],
  "import { formatDateDash } from \"./dateFormat\"\r\n\r\nexport default function (date) {\r\n  const day = date.getDay()\r\n  const formattedDate = formatDateDash(date)\r\n  const dateFrom = new Date(formattedDate)\r\n  const dateTo = new Date(formattedDate)\r\n\r\n  dateFrom.setDate(dateFrom.getDate() - day)\r\n\r\n  const dateToBeAdd = 6 - day\r\n  dateTo.setDate(dateTo.getDate() + dateToBeAdd)\r\n\r\n  return [dateFrom, dateTo]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\0.container\\index.js",
  [
    "1567",
    "1568",
    "1569",
    "1570",
    "1571"
  ],
  "import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport Banner from \"../1.banner\"\r\nimport Menu from \"../2.menu\"\r\nimport { GRILL_RESERVATION } from \"../2.menu/menuData\"\r\n// import FilteringPanel from \"../3.filteringPanel/filteringPanel\"\r\nimport { FilteringPanel } from \"Restructured/Components/Features\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport { selectSideNav } from \"../sideNavSlice\"\r\nimport { Sidenav, Header, Body, Footer, SideNavView } from \"./styles\"\r\n\r\nfunction SideNav({ isToggled }) {\r\n  const { selectedMenu } = useSelector(selectSideNav)\r\n  return (\r\n    <>\r\n      <Sidenav isToggled={isToggled}>\r\n        <Header>\r\n          <Banner />\r\n        </Header>\r\n        <Body>\r\n          <Menu isToggled={isToggled} />\r\n        </Body>\r\n        <Footer> </Footer>\r\n      </Sidenav>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideNav\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\Controllers\\PrintMethods.js",
  [
    "1572"
  ],
  "import sort from \"Restructured/Utilities/sorting\"\r\nimport { CODE, DESCRIPTION, QUANTITY } from \"Restructured/Constants/products\"\r\nimport { BRANCH, DATE_END, DATE_START } from \"Restructured/Constants/schedules\"\r\n\r\nexport default class PrintMethods {\r\n  //produce filtering panels array of data\r\n  static producePrintDetailsPerSchedule = ({\r\n    orders,\r\n    products,\r\n    productLabels,\r\n    branch,\r\n  }) => {\r\n    const _data = []\r\n\r\n    for (const obj of orders) {\r\n      if (obj[BRANCH] === branch) {\r\n        for (const key in obj) {\r\n          if (products.includes(key)) {\r\n            _data.push({\r\n              date: obj?.date,\r\n              [DATE_START]: obj[DATE_START],\r\n              [DATE_END]: obj[DATE_END],\r\n              [DESCRIPTION]: productLabels[key],\r\n              [CODE]: key,\r\n              [QUANTITY]: obj[key],\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _data //sort(_data, CODE)\r\n  }\r\n\r\n  static producePrintSummaryPerProduct = (dataList) => {\r\n    const _newData = []\r\n    const conditions = (_obj, obj) => {\r\n      return _obj[CODE] === obj[CODE]\r\n    }\r\n\r\n    for (const obj of dataList) {\r\n      const _newDataExist = _newData.some((_obj) => conditions(_obj, obj))\r\n      if (!_newDataExist) {\r\n        _newData.push(obj)\r\n      } else {\r\n        const _data = _newData.find((_obj) => conditions(_obj, obj))\r\n        const _dataIndex = _newData.findIndex((_obj) => conditions(_obj, obj))\r\n        let _modifiedData = { ..._data }\r\n        _modifiedData[QUANTITY] = _data[QUANTITY] + obj[QUANTITY]\r\n        _newData.splice(_dataIndex, 1, _modifiedData)\r\n      }\r\n    }\r\n    return _newData\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\print\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\print\\print.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\index.js",
  [
    "1573",
    "1574",
    "1575",
    "1576",
    "1577",
    "1578"
  ],
  "import { Col, Divider, Row, Card, Button } from \"antd\"\r\nimport React, { useState } from \"react\"\r\nimport { useEffect } from \"react/cjs/react.development\"\r\nimport ProductServices from \"Restructured/Services/ProductServices\"\r\nimport { Flex, Grid } from \"Restructured/Styles\"\r\nimport useProductServices from \"./useProductServices\"\r\nimport ViewProduct from \"./viewProduct\"\r\n\r\nfunction ProductCards() {\r\n  const { productList } = useProductServices()\r\n  const Header = ({ code, description }) => {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <b>{code}</b>\r\n          <br />\r\n          <small>{description}</small>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div style={{ padding: \"1rem\", backgroundColor: \"#eee\" }}>\r\n      {productList.map((product) => (\r\n        <Grid>\r\n          <Divider orientation=\"left\">{product.groupHeader}</Divider>\r\n          <Grid columns={3}>\r\n            {product.productList.map((list) => {\r\n              return (\r\n                <Flex>\r\n                  <div\r\n                    className=\"site-card-border-less-wrapper\"\r\n                    style={{ marginBottom: \"1rem\" }}\r\n                  >\r\n                    <Card\r\n                      title={\r\n                        <Header\r\n                          code={list?.code}\r\n                          description={list?.description}\r\n                        />\r\n                      }\r\n                      bordered={false}\r\n                      style={{ width: 300 }}\r\n                    >\r\n                      <ViewProduct code={list?.code} />\r\n                    </Card>\r\n                  </div>\r\n                </Flex>\r\n              )\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductCards\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\ExcelFormatter\\ExcelFormatter.js",
  [
    "1579",
    "1580",
    "1581",
    "1582",
    "1583",
    "1584",
    "1585",
    "1586"
  ],
  "import {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n  SOURCE,\r\n} from \"components/PaymentDetails/types\"\r\nimport { CODE, QUANTITY } from \"Restructured/Constants/products\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { replace } from \"Restructured/Utilities/arrayFuntions\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray, {\r\n  sumArrayDatas,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport calculateTotalAmountPaid from \"../calculateTotalAmountPaid\"\r\nimport {\r\n  tableGroups,\r\n  tableHeadersTotal,\r\n  tableHeaders,\r\n  sourceHeaders,\r\n  sourceData,\r\n  lessData,\r\n} from \"./ExcelConstantDataRow\"\r\n\r\nexport default class ExcelFormatter {\r\n  static producedObjectToArray(obj) {\r\n    let less = \"\"\r\n    for (const key in obj?.less) {\r\n      less = parseInt(obj?.less[key])\r\n    }\r\n    return [\r\n      obj[DATE_ORDER_PLACED] || \"\",\r\n      obj[CUSTOMER] || \"\",\r\n      obj[CONTACT_NUMBER] || \"\",\r\n      obj[ORDER_VIA] || \"\",\r\n      obj[DATE_START] || \"\",\r\n      obj[CODE] || \"\",\r\n      obj[QUANTITY] || \"\",\r\n      obj[DATE_PAYMENT] || \"\",\r\n      obj[MODE_PAYMENT] || \"\",\r\n      obj[SOURCE] || \"\",\r\n      obj[REF_NO] || \"\",\r\n      obj[ACCOUNT_NUMBER] || \"\",\r\n      obj.amount || \"\",\r\n      obj[AMOUNT_PAID] || \"\",\r\n      less ? parseInt(less).toFixed(2) : \"\",\r\n      obj.status || \"\",\r\n    ]\r\n  }\r\n\r\n  static groupDataByDateStart(data) {\r\n    const _groupData = {}\r\n    for (const obj of data) {\r\n      const dateValue = obj.startDate\r\n      if (typeof _groupData[dateValue] !== \"undefined\") {\r\n        _groupData[dateValue].push(this.producedObjectToArray(obj))\r\n      } else {\r\n        _groupData[dateValue] = [\r\n          tableGroups,\r\n          tableHeaders,\r\n          this.producedObjectToArray(obj),\r\n        ]\r\n      }\r\n    }\r\n    const _groupDataWithTotals = {}\r\n    for (const date in _groupData) {\r\n      const orderViaDatePropCopy = [..._groupData[date]]\r\n      let lessValue = 0\r\n      const dataObj = data.find((d) => {\r\n        if (typeof d.less !== \"undefined\") {\r\n          return d.startDate === date && Object.keys(d.less).length > 0\r\n        }\r\n      })\r\n      // if (dataObj?.less) {\r\n      //   for (const key in dataObj?.less) {\r\n      //     lessValue = parseInt(dataObj?.less[key])\r\n      //   }\r\n      // }\r\n      // this boundary is for totals of each group data of order via\r\n      const _totalQty = sumArrayDatas(orderViaDatePropCopy, 6)\r\n      const _totalAmount = sumArrayDatas(orderViaDatePropCopy, 12)\r\n      const _totalAmountPaid = sumArrayDatas(orderViaDatePropCopy, 13)\r\n      const _totalDiscount = sumArrayDatas(orderViaDatePropCopy, 14)\r\n\r\n      console.log(\"_totalQty\", _totalQty)\r\n      console.log(\"_totalAmount\", _totalAmount)\r\n      console.log(\"_totalAmountPaid\", _totalAmountPaid)\r\n      // this data will be the combined rows of grouped order via and totals\r\n      // each loop will update the totals row of each \"grouped order via\"\r\n      const arrayWithTotals = replace(\r\n        orderViaDatePropCopy,\r\n        orderViaDatePropCopy.length,\r\n        tableHeadersTotal(\r\n          _totalQty,\r\n          _totalAmount.toFixed(2),\r\n          _totalAmountPaid.toFixed(2),\r\n          _totalDiscount.toFixed(2)\r\n        )\r\n      )\r\n      _groupDataWithTotals[date] = [...arrayWithTotals]\r\n\r\n      // this is for less row setup\r\n      // const specificData = data.filter(\r\n      //   (d) => d.startDate === date && Object.keys(d.less).length > 0\r\n      // )\r\n      // console.log(`specific ${date}`, specificData)\r\n      // for (const obj of specificData) {\r\n      //   const less = obj?.less\r\n      //   if (typeof less !== \"undefined\") {\r\n      //     for (const key of Object.keys(less)) {\r\n      //       console.log(key, less[key])\r\n      //       _groupDataWithTotals[date].push(\r\n      //         lessData(key, less[key], obj[ORDER_NO])\r\n      //       )\r\n      //     }\r\n      //   }\r\n      // }\r\n      // console.log(\"_groupDataWithtotals\", _groupDataWithTotals)\r\n    }\r\n    return _groupDataWithTotals\r\n  }\r\n\r\n  static transformGroupByDate(excelReport, data, sourceSummary, branch) {\r\n    const dates = []\r\n    for (const obj of data) {\r\n      const startTime = formatDateFromDatabase(obj[DATE_START])\r\n      dates.push(formatDateDash(startTime))\r\n    }\r\n\r\n    const _groupData = {}\r\n    for (const obj of dates) {\r\n      if (typeof _groupData[obj] === \"undefined\") {\r\n        _groupData[obj] = []\r\n      }\r\n    }\r\n\r\n    // const sourceSummaryInfo = this.sourceSummaryFilteredByDate(\r\n    //   data,\r\n    //   sourceSummary\r\n    // )\r\n    // console.log(\"sourceSummaryInfo\", sourceSummaryInfo)\r\n    let count = 0\r\n    for (const dateValue in _groupData) {\r\n      for (const orderVia of excelReport) {\r\n        if (orderVia) {\r\n          // check the object orderVia 1 by 1 and filtered or group it by date\r\n          for (const key in orderVia) {\r\n            if (typeof orderVia[key][dateValue] !== \"undefined\") {\r\n              if (_groupData[dateValue].length === 0) {\r\n                count = 0\r\n              }\r\n              if (count === 0) {\r\n                _groupData[dateValue].push([\r\n                  `VITO'S BBQ ${branch.toUpperCase()}`,\r\n                ])\r\n                _groupData[dateValue].push([\"DAILY ORDER MASTERLIST\"])\r\n                _groupData[dateValue].push([formatDateLong(dateValue)])\r\n                _groupData[dateValue].push([])\r\n              }\r\n              if (count > 0) {\r\n                _groupData[dateValue].push([])\r\n                _groupData[dateValue].push([])\r\n              }\r\n              _groupData[dateValue].push([key])\r\n\r\n              for (const obj3 of orderVia[key][dateValue]) {\r\n                _groupData[dateValue].push(obj3)\r\n              }\r\n\r\n              const _sourceSummaryInfo = this.sourceSummaryFilteredByDate(\r\n                data,\r\n                dateValue,\r\n                key\r\n              )\r\n              _groupData[dateValue].push([])\r\n              _groupData[dateValue].push(sourceHeaders)\r\n              if (_sourceSummaryInfo.length > 0) {\r\n                for (const sourceSummaryArrays of _sourceSummaryInfo)\r\n                  _groupData[dateValue].push(sourceSummaryArrays)\r\n              }\r\n              // source summary portion\r\n              // if (typeof sourceSummaryInfo[dateValue] !== \"undefined\") {\r\n              //   _groupData[dateValue].push([])\r\n              //   _groupData[dateValue].push(sourceHeaders)\r\n              //   for (const summaryArray of sourceSummaryInfo[dateValue]) {\r\n              //     _groupData[dateValue].push(summaryArray)\r\n              //   }\r\n              // }\r\n\r\n              count = count + 1\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _groupData\r\n  }\r\n\r\n  static sourceSummaryFilteredByDate(data, dateValue, key) {\r\n    const filteredDataByDate = data.filter((obj) => {\r\n      const dateStart = formatDateFromDatabase(obj[DATE_START])\r\n      const formatDateStart = formatDateDash(dateStart)\r\n      return dateValue === formatDateStart && obj[SOURCE]\r\n    })\r\n    const filteredDataByOrderVia = filteredDataByDate.filter((obj) => {\r\n      return obj[ORDER_VIA]\r\n    })\r\n\r\n    const filteredDataByOrderViaPartner = filteredDataByDate.filter((obj) => {\r\n      return key.includes(obj[ORDER_VIA_PARTNER])\r\n    })\r\n\r\n    const responseData = []\r\n    const newData = []\r\n    if (key === \"DIRECT\") {\r\n      // produce simplified object with only the property needed is visible\r\n      for (const obj of filteredDataByOrderVia) {\r\n        // to get the only value of a discount and set it in the other variable\r\n        let others = 0\r\n        let count = 1\r\n        for (const key in obj[\"others\"]) {\r\n          others = obj[\"others\"][key]\r\n          count = count + 1\r\n        }\r\n        if (typeof obj[AMOUNT_PAID] !== \"undefined\") {\r\n          newData.push({\r\n            [SOURCE]: obj[SOURCE],\r\n            [AMOUNT_PAID]: Number(obj[AMOUNT_PAID]),\r\n            // [AMOUNT_PAID]: Number(obj[AMOUNT_PAID]) - Number(others),\r\n          })\r\n        }\r\n      }\r\n      const combinedTotals = sumArrayOfObjectsGrouping(\r\n        newData,\r\n        SOURCE,\r\n        AMOUNT_PAID\r\n      )\r\n      for (const obj of combinedTotals) {\r\n        responseData.push(sourceData(obj[SOURCE], obj[AMOUNT_PAID]))\r\n      }\r\n      responseData.push(\r\n        sourceData(\"Total\", sumArray(newData, AMOUNT_PAID).toFixed(2))\r\n      )\r\n      return responseData\r\n    }\r\n\r\n    // produce simplified object with only the property needed is visible\r\n    for (const obj of filteredDataByOrderViaPartner) {\r\n      // to get the only value of a discount and set it in the other variable\r\n      let others = 0\r\n      let count = 1\r\n      for (const key in obj[\"others\"]) {\r\n        others = obj[\"others\"][key]\r\n        count = count + 1\r\n      }\r\n      if (typeof obj[AMOUNT_PAID] !== \"undefined\") {\r\n        newData.push({\r\n          [SOURCE]: obj[SOURCE],\r\n          [AMOUNT_PAID]: Number(obj[AMOUNT_PAID]),\r\n          // [AMOUNT_PAID]: Number(obj[AMOUNT_PAID]) - Number(others),\r\n        })\r\n      }\r\n    }\r\n    const combinedTotals = sumArrayOfObjectsGrouping(\r\n      newData,\r\n      SOURCE,\r\n      AMOUNT_PAID\r\n    )\r\n    for (const obj of combinedTotals) {\r\n      responseData.push(sourceData(obj[SOURCE], obj[AMOUNT_PAID]))\r\n    }\r\n    responseData.push(\r\n      sourceData(\"Total\", sumArray(newData, AMOUNT_PAID).toFixed(2))\r\n    )\r\n    return responseData\r\n  }\r\n  // static sourceSummaryFilteredByDate(data, sourceSummary) {\r\n  //   console.log(\"datadaw\", data)\r\n  //   console.log(\"sourceSuumarry\", sourceSummary)\r\n  //   const dates = []\r\n  //   for (const obj of data) {\r\n  //     const startTime = formatDateFromDatabase(obj[DATE_START])\r\n  //     dates.push(formatDateDash(startTime))\r\n  //   }\r\n\r\n  //   const _groupData = {}\r\n  //   for (const obj of dates) {\r\n  //     if (typeof _groupData[obj] === \"undefined\") {\r\n  //       _groupData[obj] = []\r\n  //     }\r\n  //   }\r\n\r\n  //   // this is for source summary\r\n  //   for (const orderVia in sourceSummary) {\r\n  //     const summaryInfo = [...sourceSummary[orderVia].data]\r\n  //     if (summaryInfo) {\r\n  //       for (const dateValue in _groupData) {\r\n  //         const findSummaryByDate = summaryInfo.filter(\r\n  //           (data) => data[DATE_START] === dateValue\r\n  //         )\r\n\r\n  //         const amount_total = sumArray(findSummaryByDate, AMOUNT_PAID)\r\n  //         for (const obj of findSummaryByDate) {\r\n  //           _groupData[dateValue].push([\r\n  //             ...sourceData(obj[SOURCE], obj[AMOUNT_PAID]),\r\n  //           ])\r\n  //         }\r\n  //         _groupData[dateValue].push([\r\n  //           ...sourceData(\"Total\", amount_total.toFixed(2) || \"0.00\"),\r\n  //         ])\r\n  //         _groupData[dateValue].push([])\r\n  //         // _groupData[dateValue].push([\"Note: Order number details ongoing\"])\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return _groupData\r\n  // }\r\n\r\n  static dataSummary(data, branch) {\r\n    const dataByDate = {}\r\n    // produce group by date in the variable dataByDate\r\n    for (const obj of data) {\r\n      const startTime = formatDateFromDatabase(obj[DATE_START])\r\n      const dateFormatted = formatDateDash(startTime)\r\n      let totalAmountPaid = 0\r\n\r\n      if (typeof dataByDate[dateFormatted] === \"undefined\") {\r\n        if (typeof obj[AMOUNT_PAID] === \"undefined\") {\r\n          // if (obj?.others) {\r\n          //   totalAmountPaid = calculateTotalAmountPaid(0, obj?.others)\r\n          // }\r\n          dataByDate[dateFormatted] = [[dateFormatted, totalAmountPaid]]\r\n        } else {\r\n          // if (obj?.others) {\r\n          //   totalAmountPaid = calculateTotalAmountPaid(\r\n          //     parseInt(obj[AMOUNT_PAID]),\r\n          //     obj?.others\r\n          //   )\r\n          // }\r\n          totalAmountPaid =\r\n            typeof obj[AMOUNT_PAID] === \"undefined\" ||\r\n            typeof obj[SOURCE] === \"undefined\" ||\r\n            obj[SOURCE] === \"\"\r\n              ? 0\r\n              : Number(obj[AMOUNT_PAID])\r\n          dataByDate[dateFormatted] = [[dateFormatted, totalAmountPaid]]\r\n        }\r\n      } else {\r\n        if (typeof obj[AMOUNT_PAID] === \"undefined\") {\r\n          // if (obj?.others) {\r\n          //   totalAmountPaid = calculateTotalAmountPaid(0, obj?.others)\r\n          // }\r\n          totalAmountPaid =\r\n            typeof obj[AMOUNT_PAID] === \"undefined\" ||\r\n            typeof obj[SOURCE] === \"undefined\" ||\r\n            obj[SOURCE] === \"\"\r\n              ? 0\r\n              : Number(obj[AMOUNT_PAID])\r\n          dataByDate[dateFormatted].push([dateFormatted, totalAmountPaid])\r\n        } else {\r\n          // if (obj?.others) {\r\n          //   totalAmountPaid = calculateTotalAmountPaid(\r\n          //     parseInt(obj[AMOUNT_PAID]),\r\n          //     obj?.others\r\n          //   )\r\n          // }\r\n          totalAmountPaid =\r\n            typeof obj[AMOUNT_PAID] === \"undefined\" ||\r\n            typeof obj[SOURCE] === \"undefined\" ||\r\n            obj[SOURCE] === \"\"\r\n              ? 0\r\n              : Number(obj[AMOUNT_PAID])\r\n          dataByDate[dateFormatted].push([dateFormatted, totalAmountPaid])\r\n        }\r\n      }\r\n    }\r\n\r\n    const dateFrom = Object.keys(dataByDate)[0]\r\n    const dateTo = Object.keys(dataByDate)[Object.keys(dataByDate).length - 1]\r\n    const excelFormatDataByDateWithTotal = {\r\n      dSummary: [\r\n        [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n        [\"DAILY ORDER MASTERLIST\"],\r\n        [\r\n          `PERIOD COVERED: ${formatDateLong(dateFrom)} - ${formatDateLong(\r\n            dateTo\r\n          )}`,\r\n        ],\r\n        [],\r\n        [\"DATE SERVED\", \"AMOUNT PAID\"],\r\n      ],\r\n      temporaryData: [],\r\n    }\r\n    for (const key in dataByDate) {\r\n      console.log(\"dateWithTotal\", dataByDate[key])\r\n      const dataWithTotal = sumArrayDatas(dataByDate[key], 1)\r\n      excelFormatDataByDateWithTotal.dSummary.push([\r\n        key,\r\n        dataWithTotal.toFixed(2),\r\n      ])\r\n      excelFormatDataByDateWithTotal.temporaryData.push([\r\n        key,\r\n        dataWithTotal.toFixed(2),\r\n      ])\r\n    }\r\n\r\n    const dataWithSubTotal = sumArrayDatas(\r\n      excelFormatDataByDateWithTotal.temporaryData,\r\n      1\r\n    )\r\n\r\n    excelFormatDataByDateWithTotal.dSummary.push([\r\n      \"Total\",\r\n      dataWithSubTotal.toFixed(2),\r\n    ])\r\n\r\n    excelFormatDataByDateWithTotal.dSummary.push([])\r\n    delete excelFormatDataByDateWithTotal.temporaryData\r\n    return excelFormatDataByDateWithTotal\r\n  }\r\n\r\n  static orderViaSummary(data, dropdowns, dateFromTo, branch) {\r\n    const dateFrom = formatDateDash(dateFromTo[0])\r\n    const dateTo = formatDateDash(dateFromTo[1])\r\n    const dataByOrderSummary = {}\r\n    const temporary = {}\r\n    for (const value of dropdowns) {\r\n      dataByOrderSummary[value] = [\r\n        [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n        [value],\r\n        [`PERIOD COVERED: ${dateFrom} => ${dateTo}`],\r\n        [],\r\n        [\"SUMMARY OF COLLECTIBLES\"],\r\n        [\"DATE SERVED\", \"AMOUNT PAID\"],\r\n      ]\r\n      temporary[value] = []\r\n    }\r\n    // produce group by date in the variable dataByDate\r\n    for (const obj of data) {\r\n      const startTime = formatDateFromDatabase(obj[DATE_START])\r\n      const dateFormatted = formatDateDash(startTime)\r\n\r\n      if (typeof obj[SOURCE] !== \"undefined\" && obj[SOURCE]) {\r\n        let totalAmountPaid = 0\r\n        if (typeof obj[AMOUNT_PAID] === \"undefined\") {\r\n          // if (obj?.others) {\r\n          //   totalAmountPaid = calculateTotalAmountPaid(0, obj?.others)\r\n          // }\r\n          totalAmountPaid = Number(obj[AMOUNT_PAID])\r\n          temporary[obj[SOURCE]].push([dateFormatted, totalAmountPaid])\r\n          dataByOrderSummary[obj[SOURCE]].push([\r\n            dateFormatted,\r\n            totalAmountPaid.toFixed(2),\r\n          ])\r\n        } else {\r\n          // if (obj?.others) {\r\n          //   totalAmountPaid = calculateTotalAmountPaid(\r\n          //     parseInt(obj[AMOUNT_PAID]),\r\n          //     obj?.others\r\n          //   )\r\n          //\r\n          totalAmountPaid = Number(obj[AMOUNT_PAID])\r\n          temporary[obj[SOURCE]].push([dateFormatted, totalAmountPaid])\r\n          dataByOrderSummary[obj[SOURCE]].push([\r\n            dateFormatted,\r\n            totalAmountPaid.toFixed(2),\r\n          ])\r\n        }\r\n        // dataByOrderSummary[obj[SOURCE]].splice(\r\n        //   dataByOrderSummary[obj[SOURCE]].length,\r\n        //   1,\r\n        //   [\"Total\", sumArrayDatas(temporary[obj[SOURCE]], 1).toFixed(2)]\r\n        // )\r\n      }\r\n    }\r\n\r\n    for (const key in temporary) {\r\n      if (temporary[key].length > 0) {\r\n        const sumArray = sumArrayDatas(temporary[key], 1).toFixed(2)\r\n        dataByOrderSummary[key].push([\"Total\", sumArray])\r\n      }\r\n    }\r\n    console.log(\"temporaryValue\", temporary)\r\n    console.log(\"dataOrderViaSummary\", dataByOrderSummary)\r\n    return dataByOrderSummary\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTable\\index.js",
  [
    "1587",
    "1588",
    "1589",
    "1590",
    "1591"
  ],
  "import { Table, Tag, Space, Button } from \"antd\"\r\nimport useReceivedReport from \"./useReceivedReport\"\r\nimport Print from \"../../Print\"\r\nimport { AiFillPrinter } from \"react-icons/ai\"\r\nimport ReceivingProductReport from \"../../Print/Documents/receivingProductReport\"\r\nimport ReceivingModalView from \"./modal\"\r\nimport EditModal from \"./editModal\"\r\n\r\nexport default function (props) {\r\n  const [reportList] = useReceivedReport({ modalState: props.modalState })\r\n\r\n  const findRowData = (id) => {\r\n    return reportList.find((data) => data.id === id)\r\n  }\r\n  const findRowDataByRRNo = (rrNo) => {\r\n    return reportList.find((data) => data.rrNo === rrNo)\r\n  }\r\n  const columns = [\r\n    {\r\n      title: \"RR No\",\r\n      dataIndex: \"rrNo\",\r\n      key: \"rrNo\",\r\n      render: (data) => {\r\n        return <a>{data}</a>\r\n      },\r\n    },\r\n    {\r\n      title: \"Items Purchased\",\r\n      key: \"items\",\r\n      dataIndex: \"items\",\r\n      render: (tags) => (\r\n        <>\r\n          {tags?.map(({ code }) => {\r\n            console.log(\"Tag\", code)\r\n            return (\r\n              <Tag color=\"blue\" key={code}>\r\n                {code}\r\n              </Tag>\r\n            )\r\n          })}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Received By\",\r\n      dataIndex: \"receivedBy\",\r\n      key: \"receivedBy\",\r\n    },\r\n    {\r\n      title: \"Date\",\r\n      dataIndex: \"date\",\r\n      key: \"date\",\r\n    },\r\n    {\r\n      title: \"Total Amount\",\r\n      dataIndex: \"amount\",\r\n      key: \"amount\",\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      render: (id) => {\r\n        return (\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Print\r\n              button={<AiFillPrinter fontSize=\"1.5rem\" />}\r\n              component={\r\n                <ReceivingProductReport reportData={findRowData(id)} />\r\n              }\r\n            />\r\n            <ReceivingModalView reportData={findRowData(id)} />\r\n            <EditModal id={id} />\r\n          </div>\r\n        )\r\n      },\r\n    },\r\n  ]\r\n  return <Table columns={columns} dataSource={reportList} />\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTableView\\index.js",
  [
    "1592"
  ],
  "import { Table } from \"antd\"\r\nimport React, { useState } from \"react\"\r\nimport useProductServices from \"../ProductCards/useProductServices\"\r\nimport LedgerView from \"./ledgerView\"\r\nimport useProductTableView from \"./useProductTableView\"\r\n\r\nfunction ProductTableView() {\r\n  const { productList } = useProductServices()\r\n  const [productTableList, ledger] = useProductTableView(productList)\r\n  const [codeSelected, setCodeSelected] = useState(null)\r\n  const columns = [\r\n    {\r\n      title: \"Product Code\",\r\n      dataIndex: \"code\",\r\n      key: \"code\",\r\n      render: (data) => {\r\n        return <a onClick={() => setCodeSelected(data)}>{data}</a>\r\n      },\r\n    },\r\n    {\r\n      title: \"Product Description\",\r\n      dataIndex: \"description\",\r\n      key: \"description\",\r\n    },\r\n    {\r\n      title: \"Balance\",\r\n      dataIndex: \"balance\",\r\n      key: \"balance\",\r\n    },\r\n  ]\r\n  return codeSelected === null ? (\r\n    <Table dataSource={productTableList} columns={columns} />\r\n  ) : (\r\n    <LedgerView\r\n      back={() => setCodeSelected(null)}\r\n      code={codeSelected}\r\n      ledger={ledger}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ProductTableView\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\formatNumber.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\partialModal.js",
  [
    "1593",
    "1594",
    "1595",
    "1596",
    "1597",
    "1598",
    "1599",
    "1600",
    "1601",
    "1602"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport { Modal, Button, Table } from \"antd\"\r\nimport { Radio, Input, Space, Slider, DatePicker, Select } from \"antd\"\r\nimport { PlusCircleFilled, MinusCircleFilled } from \"@ant-design/icons\"\r\nimport moment from \"moment\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport { ACCOUNT_NUMBER, DATE_PAYMENT, MODE_PAYMENT, REF_NO } from \"./types\"\r\nimport DateTimePicker from \"components/fields/dateTimePicker\"\r\nimport { SOURCE } from \"Restructured/Constants/schedules\"\r\nconst { TextArea } = Input\r\nconst { Option } = Select\r\n\r\nconst defaultDateValue = moment(new Date(), \"MM/DD/YYYY\")\r\nconst dataFields = {\r\n  date: defaultDateValue,\r\n  [MODE_PAYMENT]: \"\",\r\n  [SOURCE]: \"\",\r\n  [ACCOUNT_NUMBER]: \"\",\r\n  [REF_NO]: \"\",\r\n  amount: 0,\r\n}\r\nfunction PartialPayments(props) {\r\n  const [visible, setVisible] = useState(false)\r\n  const [dataList, setDataList] = useState([])\r\n  const [dropdowns, setDropdowns] = useState([])\r\n\r\n  useEffect(() => {\r\n    setDropdowns(props.dropdowns)\r\n    const { formFields } = props\r\n    if (formFields?.partials) {\r\n      const _partials = []\r\n      for (const obj of formFields?.partials) {\r\n        _partials.push({ ...dataFields, ...obj })\r\n      }\r\n      setDataList(_partials)\r\n    } else {\r\n      setDataList([])\r\n    }\r\n  }, [props.formFields, visible])\r\n\r\n  return (\r\n    <>\r\n      <Button danger onClick={() => setVisible(true)}>\r\n        Partial Payments\r\n      </Button>\r\n      <Modal\r\n        title=\"Partial Payments\"\r\n        centered\r\n        visible={visible}\r\n        onOk={() => {\r\n          setVisible(false)\r\n          const _amountPaid = sumArray(dataList, \"amount\")\r\n          const _formFields = { ...props.formFields }\r\n          _formFields.partials = [\r\n            ...dataList.map((data) => {\r\n              return {\r\n                ...data,\r\n                amount: Number(data.amount),\r\n              }\r\n            }),\r\n          ]\r\n          _formFields.amountPaid = Number(_amountPaid)\r\n          props.setFormFields(_formFields)\r\n        }}\r\n        onCancel={() => setVisible(false)}\r\n        width={1000}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-start\",\r\n            width: \"100%\",\r\n            padding: \"1rem\",\r\n          }}\r\n        >\r\n          <div style={{ width: \"9rem\" }}>Date</div>\r\n          <div style={{ width: \"10rem\" }}>Mode Payment</div>\r\n          <div style={{ width: \"9rem\" }}>Source</div>\r\n          <div style={{ width: \"9rem\" }}>Account Number</div>\r\n          <div style={{ width: \"10rem\" }}>Ref No</div>\r\n          <div style={{ width: \"10rem\" }}>Amount</div>\r\n        </div>\r\n        {dataList.map((data, index) => {\r\n          return (\r\n            <div style={{ display: \"flex\" }}>\r\n              <DatePicker\r\n                style={{ width: \"10rem\", minWidth: \"10rem\" }}\r\n                value={moment(data?.date, \"MM/DD/YYYY\")}\r\n                onChange={(e) => {\r\n                  const _data = [...dataList]\r\n                  _data[index] = {\r\n                    ...dataList[index],\r\n                    date: e._d,\r\n                  }\r\n                  setDataList(_data)\r\n                }}\r\n                format=\"MM/DD/YYYY\"\r\n              />\r\n              <Select\r\n                size=\"large\"\r\n                value={data?.modePayment}\r\n                style={{ width: \"10rem\", minWidth: \"10rem\" }}\r\n                onChange={(value) => {\r\n                  const _data = [...dataList]\r\n                  _data[index] = {\r\n                    ...dataList[index],\r\n                    [MODE_PAYMENT]: value,\r\n                  }\r\n                  setDataList(_data)\r\n                }}\r\n              >\r\n                {dropdowns\r\n                  .find((field) => field.name === MODE_PAYMENT)\r\n                  ?.dataSource.map((value) => (\r\n                    <Option value={value}>{value}</Option>\r\n                  ))}\r\n              </Select>\r\n              <Select\r\n                value={data?.source}\r\n                size=\"large\"\r\n                style={{ width: \"9rem\", minWidth: \"9rem\" }}\r\n                onChange={(value) => {\r\n                  const _data = [...dataList]\r\n                  _data[index] = {\r\n                    ...dataList[index],\r\n                    [SOURCE]: value,\r\n                  }\r\n                  setDataList(_data)\r\n                }}\r\n              >\r\n                {dropdowns\r\n                  .find((field) => field.name === SOURCE)\r\n                  ?.dataSource.map((value) => (\r\n                    <Option value={value}>{value}</Option>\r\n                  ))}\r\n              </Select>\r\n              <Select\r\n                value={data?.accountNumber}\r\n                size=\"large\"\r\n                style={{ width: \"9rem\", minWidth: \"9rem\" }}\r\n                onChange={(value) => {\r\n                  const _data = [...dataList]\r\n                  _data[index] = {\r\n                    ...dataList[index],\r\n                    [ACCOUNT_NUMBER]: value,\r\n                  }\r\n                  setDataList(_data)\r\n                }}\r\n              >\r\n                {dropdowns\r\n                  .find((field) => field.name === ACCOUNT_NUMBER)\r\n                  ?.dataSource.map((value) => (\r\n                    <Option value={value}>{value}</Option>\r\n                  ))}\r\n              </Select>\r\n              <Input\r\n                value={data?.refNo}\r\n                onChange={(e) => {\r\n                  const _data = [...dataList]\r\n                  _data[index] = {\r\n                    ...dataList[index],\r\n                    [REF_NO]: e.target.value,\r\n                  }\r\n                  setDataList(_data)\r\n                }}\r\n                placeholder=\"Ref no\"\r\n              />\r\n              <Input\r\n                value={data?.amount}\r\n                onChange={(e) => {\r\n                  const _data = [...dataList]\r\n                  _data[index] = {\r\n                    ...dataList[index],\r\n                    amount: e.target.value,\r\n                  }\r\n                  setDataList(_data)\r\n                }}\r\n                placeholder=\"amount\"\r\n                type=\"number\"\r\n              />\r\n              <Button\r\n                shape=\"circle\"\r\n                size=\"large\"\r\n                icon={<MinusCircleFilled />}\r\n                onClick={() => {\r\n                  const _data = [...dataList]\r\n                  _data.splice(index, 1)\r\n                  setDataList(_data)\r\n                }}\r\n              />\r\n            </div>\r\n          )\r\n        })}\r\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusCircleFilled />}\r\n            size=\"large\"\r\n            onClick={() => {\r\n              const _data = [...dataList]\r\n              _data.push({\r\n                date: defaultDateValue._d,\r\n                amount: \"0.00\",\r\n              })\r\n              setDataList(_data)\r\n            }}\r\n          />\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PartialPayments\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\DiscountAndOthersDialog.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\index.js",
  [
    "1603",
    "1604",
    "1605"
  ],
  "import DateTimePicker from './dateTimePicker'\r\nimport DropdownList from './dropdownList'\r\nimport Input from './input'\r\nimport TextArea from './textArea'\r\nimport {\r\n  BLANK_FIELD,\r\n  CHIPS,\r\n  DATE_PICKER,\r\n  DATE_TIME_PICKER,\r\n  DESCRIPTION,\r\n  DROP_DOWN_LIST,\r\n  HEADER_FIELD,\r\n  HIDDEN,\r\n  INPUT,\r\n  NUMBER,\r\n  ORDER_VIA_TYPE,\r\n  STATUS_REASON,\r\n  TEXT_AREA\r\n} from './types'\r\nimport classes from './index.module.css'\r\nimport Chips from './chips'\r\nimport DatePicker from './datePicker'\r\nimport { Description } from 'containers/0.login/styles'\r\nimport { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Number from './number'\r\nimport OrderVia from './orderVia'\r\nimport StatusField from './statusField'\r\n\r\nconst RenderComponent = ({ label, children, isInline, isInlineBlock }) => {\r\n  if (isInline) {\r\n    return (\r\n      <div className={classes.containerInline}>\r\n        <div>\r\n          <label>{label}</label>\r\n        </div>\r\n        <div>{children}</div>\r\n      </div>\r\n    )\r\n  }\r\n  if (isInlineBlock) {\r\n    return (\r\n      <div className={classes.containerBlock}>\r\n        <div>\r\n          <label>{label}</label>\r\n        </div>\r\n        <div>{children}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={classes.block}>\r\n      <div>\r\n        <label>{label}</label>\r\n      </div>\r\n      <div>{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst DescriptionComponent = (props) => {\r\n  const prices = [props[props.name], props.dataSource[2]]\r\n  const total = prices[0] * prices[1]\r\n  const [amount, setAmount] = useState(isNaN(total) ? '0.00' : total.toFixed(2))\r\n  const computeHandler = (e) => {\r\n    const newTotal = e.target.value * prices[1]\r\n    setAmount(newTotal.toFixed(2))\r\n    const qty =\r\n      isNaN(e.target.value) || e.target.value === '' ? '0' : e.target.value\r\n    props.setTotals({\r\n      ...props.totals,\r\n      [props.name]: { qty, price: props.dataSource[2] }\r\n    })\r\n  }\r\n\r\n  const renderData = (data, index) => {\r\n    if (props.name === 'Header') {\r\n      return data\r\n    }\r\n    if (typeof data === 'string') {\r\n      if (index === 3) {\r\n        return amount\r\n      } else if (index === 2) {\r\n        return data\r\n      } else {\r\n        return data\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className={classes.description}>\r\n      {props.dataSource.map((data, index) => {\r\n        return (\r\n          <div key={data} style={{ width: '100%' }}>\r\n            {typeof data === 'string' ? (\r\n              <div\r\n                style={\r\n                  index >= 2\r\n                    ? {\r\n                        display: 'flex',\r\n                        justifyContent: 'flex-end'\r\n                      }\r\n                    : {}\r\n                }\r\n              >\r\n                {renderData(data, index)}\r\n              </div>\r\n            ) : (\r\n              fields[data.type]({\r\n                ...props,\r\n                onChange: computeHandler\r\n              })\r\n            )}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst fields = {\r\n  [DATE_TIME_PICKER]: (props) => {\r\n    return (\r\n      <RenderComponent\r\n        label={props.label}\r\n        isInline={props.isInline}\r\n        isInlineBlock={props.isInlineBlock}\r\n      >\r\n        <DateTimePicker {...props} />\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  [DATE_PICKER]: (props) => {\r\n    return (\r\n      <RenderComponent\r\n        label={props.label}\r\n        isInline={props.isInline}\r\n        isInlineBlock={props.isInlineBlock}\r\n      >\r\n        <DatePicker {...props} />\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  [DROP_DOWN_LIST]: (props) => {\r\n    return (\r\n      <RenderComponent {...props} isInline={props.isInline}>\r\n        <DropdownList {...props} />\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  [INPUT]: (props) => {\r\n    return (\r\n      <RenderComponent\r\n        label={props?.label}\r\n        isInline={props?.isInline}\r\n        isInlineBlock={props?.isInlineBlock}\r\n      >\r\n        <Input {...props} />\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  // this is a special case\r\n  [ORDER_VIA_TYPE]: (props) => {\r\n    return (\r\n      <RenderComponent\r\n        label={props?.label}\r\n        isInline={props?.isInline}\r\n        isInlineBlock={props?.isInlineBlock}\r\n      >\r\n        <OrderVia {...props} />\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  // this is a special case\r\n  [STATUS_REASON]: (props) => {\r\n    return (\r\n      <RenderComponent\r\n        label={props?.label}\r\n        isInline={props?.isInline}\r\n        isInlineBlock={props?.isInlineBlock}\r\n      >\r\n        <StatusField {...props} />\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  [TEXT_AREA]: (props) => {\r\n    return (\r\n      <RenderComponent {...props}>\r\n        <TextArea {...props} />\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  [NUMBER]: (props) => {\r\n    return (\r\n      <RenderComponent {...props}>\r\n        <Number {...props} />\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  [DESCRIPTION]: (props) => {\r\n    return <DescriptionComponent {...props} />\r\n  },\r\n  [HIDDEN]: (props) => {\r\n    return (\r\n      <input\r\n        id={props.name}\r\n        className='e-field e-input'\r\n        type='hidden'\r\n        name={props.name}\r\n        style={{ width: '100%' }}\r\n      />\r\n    )\r\n  },\r\n  [BLANK_FIELD]: (props) => {\r\n    return <RenderComponent {...props} />\r\n  },\r\n  [HEADER_FIELD]: (props) => {\r\n    return (\r\n      <RenderComponent>\r\n        <b>{props.label}</b>\r\n      </RenderComponent>\r\n    )\r\n  },\r\n  [CHIPS]: (props) => {\r\n    return <Chips {...props} />\r\n  }\r\n}\r\n\r\nexport default fields\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\LogServices.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\_dummy.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\calculateTotalAmountPaid.js",
  [
    "1606"
  ],
  "export default function (amountPaid, others) {\r\n  if (typeof amountPaid !== \"undefined\") {\r\n    const _amountPaid = parseInt(amountPaid)\r\n    let _others = 0\r\n    if (typeof others !== \"undefined\") {\r\n      for (const key in others) {\r\n        _others = _others + parseInt(others[key])\r\n      }\r\n    }\r\n    console.log(_amountPaid, _others)\r\n    // return _amountPaid + _others\r\n    return _amountPaid - _others\r\n  }\r\n  return 0\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\calculateTotalCost.js",
  [
    "1607"
  ],
  "export default function (prodObj, prodGroupHeaderAndPrice) {\r\n  let _totalCost = 0\r\n  for (const key in prodObj) {\r\n    const _price = prodGroupHeaderAndPrice[key]?.price\r\n    _totalCost = _price + _totalCost\r\n  }\r\n  return _totalCost\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\useGetBranches.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\ComponentToPrint.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\FilteringPanel\\Panel\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\dropdownList.js",
  [
    "1608",
    "1609",
    "1610"
  ],
  "import React, { useEffect, useState } from 'react'\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER\r\n} from 'components/SchedulerComponent/orderSlip/types'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  selectOrderComponentSlice,\r\n  setOrderViaField\r\n} from 'components/SchedulerComponent/orderSlip/orderSlipSlice'\r\n\r\nconst OutlinedContainer = styled.div`\r\n  border: 1px solid grey;\r\n  margin-top: 0.5rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  box-sizing: content-box;\r\n  position: relative;\r\n`\r\nfunction DropdownList (props) {\r\n  const [isDisplayed, setIsDisplayed] = useState(true)\r\n  const orderComponentSlice = useSelector(selectOrderComponentSlice)\r\n  const dispatch = useDispatch()\r\n\r\n  // const onChange = () => {\r\n  //   if (props.name === ORDER_VIA) {\r\n  //     return {\r\n  //       change: (e) => {\r\n  //         dispatch(setOrderViaField(e.value))\r\n  //       }\r\n  //     }\r\n  //   } else {\r\n  //     return {\r\n  //       change: props?.onChange\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  useEffect(() => {\r\n    loadDisplayedSetting()\r\n  }, [orderComponentSlice.orderViaField])\r\n\r\n  const loadDisplayedSetting = () => {\r\n    if (orderComponentSlice.orderViaField) {\r\n      if (orderComponentSlice.orderViaField.includes('Partner Merchant')) {\r\n        setIsDisplayed(false)\r\n      } else {\r\n        setIsDisplayed(true)\r\n      }\r\n    } else {\r\n      setIsDisplayed(true)\r\n    }\r\n  }\r\n\r\n  const handleOrderVia = (e) => {\r\n    if (e) {\r\n      if (props.name === ORDER_VIA) {\r\n        if (e.value === null) {\r\n          dispatch(setOrderViaField(e.value))\r\n        } else {\r\n          dispatch(setOrderViaField(`Direct ${e.value}`))\r\n        }\r\n      }\r\n      if (props.name === ORDER_VIA_PARTNER) {\r\n        if (e.value === null) {\r\n          dispatch(setOrderViaField(e.value))\r\n        } else {\r\n          dispatch(setOrderViaField(`Partner Merchant ${e.value}`))\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return props?.isGrouped ? (\r\n    <OutlinedContainer>\r\n      <DropDownListComponent\r\n        id={props.name}\r\n        value={props?.value}\r\n        className='e-field'\r\n        popupHeight='200px'\r\n        fields={props.field}\r\n        dataSource={props.dataSource}\r\n        placeholder='Choose'\r\n        enabled={props?.enabled}\r\n      />\r\n    </OutlinedContainer>\r\n  ) : (\r\n    <OutlinedContainer>\r\n      <DropDownListComponent\r\n        enabled={props.enabled}\r\n        id={props.name}\r\n        value={props?.value}\r\n        placeholder='Choose'\r\n        data-name={props.name}\r\n        change={props?.onChange}\r\n        className='e-field'\r\n        style={{ width: '100%' }}\r\n        dataSource={[...props.dataSource]}\r\n      />\r\n    </OutlinedContainer>\r\n  )\r\n}\r\n\r\nexport default DropdownList\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\ExcelExporter\\ItemizedExportService.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\0.container\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceTotalSumofItems.js",
  [
    "1611"
  ],
  "import lodash from \"lodash\"\r\nexport default function (dataOfEachDate, productPrice, productDescription) {\r\n  console.log(\"productDescription\", productDescription)\r\n  const renewedData = {}\r\n\r\n  for (const date of Object.keys(dataOfEachDate)) {\r\n    renewedData[date] = {}\r\n    const dateData = { ...dataOfEachDate[date] }\r\n    for (const orderVia of Object.keys(dateData)) {\r\n      renewedData[date][orderVia] = []\r\n      for (const productObj of dateData[orderVia]) {\r\n        let qtyList = {}\r\n        for (const productProperty of Object.keys(productObj)) {\r\n          const qty = parseInt(productObj[productProperty])\r\n          // if (parseInt(productPrice[productProperty]) > 0) {\r\n          if (typeof qtyList[productProperty] !== \"undefined\") {\r\n            qtyList[productProperty].push(qty)\r\n          } else {\r\n            qtyList[productProperty] = [qty]\r\n          }\r\n          // }\r\n        }\r\n\r\n        for (const item of Object.keys(qtyList)) {\r\n          // renewedData[date][orderVia][item] = lodash.sum(qtyList[item])\r\n          const itemTotalQty = lodash.sum(qtyList[item])\r\n          if (!item.includes(\"customPrice\")) {\r\n            const customPrice =\r\n              typeof qtyList[`customPrice${item}`]?.length > 0\r\n                ? qtyList[`customPrice${item}`][0]\r\n                : 0\r\n            const _productPrice = productPrice[item] || customPrice\r\n\r\n            renewedData[date][orderVia].push({\r\n              code: item,\r\n              description: productDescription[item],\r\n              price: _productPrice,\r\n              qty: itemTotalQty,\r\n              total: _productPrice * itemTotalQty,\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  console.log(\"renewed\", renewedData)\r\n  return renewedData\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\useProductServices.js",
  [
    "1612"
  ],
  "import { useEffect, useState } from \"react\"\r\nimport ProductServices from \"Restructured/Services/ProductServices\"\r\nimport SchedulerServices from \"Restructured/Services/SchedulerServices\"\r\nimport ReceivingReportServices from \"Restructured/Services/ReceivingReportServices\"\r\nimport produceTotalPurchases, {\r\n  produceTotalImports,\r\n} from \"./produceTotalPurchases\"\r\n\r\nexport default function () {\r\n  const [productList, setProductList] = useState([])\r\n  const [totalStorage, setTotalStorage] = useState(0)\r\n  useEffect(() => {\r\n    loadProducts()\r\n  }, [])\r\n  const loadProducts = async () => {\r\n    const _data = await ProductServices.getProducts()\r\n    setProductList(_data)\r\n  }\r\n\r\n  const getPurchasedProducts = async (code) => {\r\n    const _data = await SchedulerServices.getSchedulesByCode(code)\r\n    const _dataImports = await ReceivingReportServices.getRRByCode(code)\r\n    const purchases = produceTotalPurchases(_data, code)\r\n    const imports = produceTotalImports(_dataImports, code)\r\n    const _totalStorage = parseInt(imports - purchases)\r\n    setTotalStorage(_totalStorage)\r\n  }\r\n  return { productList, getPurchasedProducts, totalStorage }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceReports.js",
  [
    "1613"
  ],
  "export default function (totalSumofItems) {\r\n  const data = []\r\n  for (const date of Object.keys(totalSumofItems)) {\r\n    const dateData = { ...totalSumofItems[date] }\r\n    const renewedObj = {}\r\n    for (const orderVia of Object.keys(dateData)) {\r\n      if (dateData[orderVia].length > 0) {\r\n        renewedObj[orderVia] = [...dateData[orderVia]]\r\n      }\r\n    }\r\n    console.log(\"r\", renewedObj)\r\n    if (Object.keys(renewedObj).length > 0) {\r\n      data.push({ [date]: renewedObj })\r\n    }\r\n  }\r\n\r\n  return data\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\findDataHandler.js",
  [
    "1614"
  ],
  "import { useEffect, useState } from \"react\"\r\n\r\nexport default function useFindDataHandler(service) {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [data, setData] = useState(null)\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [])\r\n\r\n  // will cause an error in the develeopment server database due to indexing but will work in production\r\n  const loadData = async () => {\r\n    setIsLoading(true)\r\n    const _data = await service.getDataWithFieldName()\r\n    if (typeof _data === \"object\") {\r\n      setData(_data)\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n  return [{ data, isLoading }]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceListOfDates.js",
  [
    "1615"
  ],
  "import { DATE_START } from \"Restructured/Constants/schedules\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\n\r\nexport default function (schedules) {\r\n  const listOfDates = {}\r\n  for (const obj of schedules) {\r\n    const utcDate = formatDateFromDatabase(obj[DATE_START])\r\n    const formattedDate = formatDateDash(utcDate)\r\n    listOfDates[formattedDate] = { DIRECT: [] }\r\n  }\r\n  return listOfDates\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceProductList.js",
  [
    "1616"
  ],
  "import ProductServices from \"Restructured/Services/ProductServices\"\r\n\r\nexport default async function () {\r\n  const productList = []\r\n  const productPrice = {}\r\n  const productDescripton = {}\r\n  const products = await ProductServices.getProducts()\r\n  for (const obj of products) {\r\n    for (const obj2 of obj?.productList) {\r\n      productList.push(obj2?.code)\r\n      productPrice[obj2?.code] = obj2?.price\r\n      productDescripton[obj2?.code] = obj2?.description\r\n    }\r\n  }\r\n  return { productList, productPrice, productDescripton }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\Controllers\\produceDataOfEachDate.js",
  [
    "1617"
  ],
  "import {\r\n  DATE_START,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\n\r\nexport default function (listOfDateFiltered, schedules, products) {\r\n  const dataOfEachDate = { ...listOfDateFiltered }\r\n  for (const obj of schedules) {\r\n    const utcDate = formatDateFromDatabase(obj[DATE_START])\r\n    const formattedDate = formatDateDash(utcDate)\r\n    const dateProperty = dataOfEachDate[formattedDate]\r\n\r\n    // include custom prices if it exists\r\n    const objProducts = {}\r\n    for (const code of products) {\r\n      if (typeof obj[code] !== \"undefined\" && parseInt(obj[code]) > 0) {\r\n        objProducts[code] = obj[code]\r\n      }\r\n      if (\r\n        typeof obj[`customPrice${code}`] !== \"undefined\" &&\r\n        parseInt(obj[`customPrice${code}`]) > 0\r\n      ) {\r\n        objProducts[`customPrice${code}`] = obj[`customPrice${code}`]\r\n      }\r\n    }\r\n    // DIRECT data\r\n    if (typeof obj[ORDER_VIA] !== \"undefined\") {\r\n      if (obj[ORDER_VIA]) {\r\n        dateProperty[\"DIRECT\"].push(objProducts)\r\n      }\r\n    }\r\n\r\n    // PARTNER MERCHANT data\r\n    if (typeof obj[ORDER_VIA_PARTNER] !== \"undefined\") {\r\n      if (obj[ORDER_VIA_PARTNER]) {\r\n        const orderViaPartnerProperty = obj[ORDER_VIA_PARTNER]\r\n        if (typeof dateProperty[orderViaPartnerProperty] !== \"undefined\") {\r\n          dateProperty[orderViaPartnerProperty].push(objProducts)\r\n        } else {\r\n          dateProperty[orderViaPartnerProperty] = [objProducts]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return dataOfEachDate\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\commonStyles\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\ExcelFormatter\\ExcelFormatter.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\sumArray.js",
  [
    "1618",
    "1619",
    "1620"
  ],
  "import thousandsSeparators from \"./formatNumber\"\r\n\r\nexport default function (array, field) {\r\n  // Getting sum of numbers\r\n  if (array.length > 0) {\r\n    if (field) {\r\n      const sum = array.reduce(function (a = 0, b) {\r\n        let fieldNumber = typeof b[field] !== \"undefined\" ? b[field] : 0\r\n        return Number(a) + Number(fieldNumber)\r\n      }, 0)\r\n      return sum\r\n    }\r\n    const sum = array.reduce(function (a, b) {\r\n      return Number(a) + Number(b)\r\n    }, 0)\r\n    return sum\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const sumArrayDatas = (array, index) => {\r\n  if (array.length > 0) {\r\n    const sum = array.reduce(function (a = 0, b) {\r\n      if (typeof b[index] === \"number\") {\r\n        return parseInt(a) + parseInt(b[index])\r\n      }\r\n      if (b[index]) {\r\n        if (!isNaN(b[index])) {\r\n          return parseInt(a) + parseInt(b[index])\r\n        } else {\r\n          return parseInt(a) + 0\r\n        }\r\n      } else {\r\n        return parseInt(a) + 0\r\n      }\r\n    }, 0)\r\n    return sum\r\n  }\r\n  return 0\r\n}\r\n\r\n// to group the same name of value in an object\r\nexport const sumArrayOfObjectsGrouping = (data, field1, field2) => {\r\n  const newDataByGroup = []\r\n  data.forEach((obj) => {\r\n    let newDataByGroupIndex = 0\r\n\r\n    // check first if data already exist\r\n    const dataExist = newDataByGroup.find((d, index2) => {\r\n      if (typeof d[field1] !== \"undefined\") {\r\n        if (d[field1] === obj[field1]) {\r\n          newDataByGroupIndex = index2\r\n        }\r\n        return d[field1] === obj[field1]\r\n      }\r\n    })\r\n\r\n    if (dataExist) {\r\n      const number1 = Number(dataExist[field2])\r\n      const number2 = Number(obj[field2])\r\n      const sumNumber = number1 + number2\r\n      const renewedData = {\r\n        // ...obj,\r\n        // [field2]: sumNumber.toFixed(2),\r\n        [field1]: obj[field1],\r\n        [field2]: sumNumber.toFixed(2),\r\n      }\r\n      newDataByGroup.splice(newDataByGroupIndex, 1, renewedData)\r\n    } else {\r\n      const number = Number(obj[field2])\r\n      newDataByGroup.push({\r\n        // ...obj,\r\n        // [field2]: number.toFixed(2),\r\n        [field1]: obj[field1],\r\n        [field2]: number.toFixed(2),\r\n      })\r\n    }\r\n  })\r\n  return newDataByGroup\r\n}\r\n\r\nexport const sumNumbers = (array) => {\r\n  return array.reduce((a, b) => Number(a) + Number(b), 0)\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\print\\ComponentToPrint.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\viewProduct.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTableView\\useProductTableView.js",
  [
    "1621"
  ],
  "import { useEffect, useState } from \"react\"\r\nimport SchedulerServices from \"Restructured/Services/SchedulerServices\"\r\nimport ReceivingReportServices from \"Restructured/Services/ReceivingReportServices\"\r\nimport { sumNumbers } from \"Restructured/Utilities/sumArray\"\r\n\r\nexport default function useProductTableView(productList) {\r\n  const [productTableList, setProductTableList] = useState([])\r\n  const [ledger, setLedger] = useState({})\r\n\r\n  useEffect(() => {\r\n    loadServices()\r\n  }, [productList])\r\n\r\n  const loadServices = async () => {\r\n    const _schedules = await SchedulerServices.getSchedules()\r\n    const _receivingReports = await ReceivingReportServices.getRR()\r\n    loadProducts(_schedules, _receivingReports)\r\n  }\r\n\r\n  console.log(\"ledger\", ledger)\r\n  const loadProducts = (schedules, receivingReports) => {\r\n    const _productTableList = []\r\n    const _ledger = { ...ledger }\r\n    for (const obj of productList) {\r\n      const _productList = [...obj.productList]\r\n      for (const prod of _productList) {\r\n        _productTableList.push({\r\n          code: prod.code,\r\n          description: prod.description,\r\n          balance: loadBalance(prod?.code, schedules, receivingReports),\r\n        })\r\n        _ledger[prod?.code] = {\r\n          ...loadLedgers(prod?.code, schedules, receivingReports),\r\n        }\r\n      }\r\n    }\r\n    setLedger(_ledger)\r\n    setProductTableList(_productTableList)\r\n  }\r\n\r\n  const loadBalance = (code, schedules, receivingReports) => {\r\n    const codeOut = []\r\n    const codeIn = []\r\n    for (const obj of schedules) {\r\n      if (obj[code] !== \"0\") {\r\n        codeOut.push(obj[code])\r\n      }\r\n    }\r\n\r\n    for (const obj of receivingReports) {\r\n      if (obj[code] !== \"0\") {\r\n        codeIn.push(obj[code])\r\n      }\r\n    }\r\n    const totalCodeOut = sumNumbers(codeOut)\r\n    const totalCodeIn = sumNumbers(codeIn)\r\n    return totalCodeIn - totalCodeOut\r\n  }\r\n\r\n  const loadLedgers = (code, schedules, receivingReports) => {\r\n    const codeOut = []\r\n    const codeIn = []\r\n    for (const obj of schedules) {\r\n      if (obj[code] !== \"0\") {\r\n        codeOut.push(obj)\r\n      }\r\n    }\r\n\r\n    for (const obj of receivingReports) {\r\n      if (obj[code] !== \"0\") {\r\n        codeIn.push(obj)\r\n      }\r\n    }\r\n    return { codeOut, codeIn }\r\n  }\r\n\r\n  return [productTableList, ledger]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\index.js",
  [
    "1622"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Modal,\r\n  Button,\r\n  DatePicker,\r\n  Table,\r\n  Space,\r\n  Input,\r\n  Select,\r\n  Card,\r\n  Switch,\r\n  Alert,\r\n} from \"antd\"\r\nimport { SearchOutlined } from \"@ant-design/icons\"\r\nimport useGroupPaymentHook from \"./hook\"\r\nimport GroupPaymentPrint from \"./groupPaymentPrint\"\r\nconst { Option } = Select\r\nconst { RangePicker } = DatePicker\r\n\r\nconst CustomModal = ({ visible, setVisible }) => {\r\n  const [\r\n    {\r\n      rangeProps,\r\n      searchInputProps,\r\n      selectProps,\r\n      searchButtonProps,\r\n      refNoProps,\r\n      datePaymentProps,\r\n      editButtonProps,\r\n      discardButtonProps,\r\n      saveButtonProps,\r\n      switchProps,\r\n      tableProps,\r\n    },\r\n    { filteredData, selectData },\r\n  ] = useGroupPaymentHook()\r\n\r\n  console.log(\"selectData\", selectData)\r\n  return (\r\n    <Modal\r\n      title=\"Group Payments\"\r\n      visible={visible}\r\n      width={2000}\r\n      onCancel={() => setVisible(false)}\r\n      footer={[\r\n        <Button key=\"back\" onClick={() => setVisible(false)}>\r\n          Cancel\r\n        </Button>,\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            saveButtonProps.onClick()\r\n            setVisible(false)\r\n          }}\r\n          disabled={saveButtonProps.disabled}\r\n          danger\r\n        >\r\n          Save\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Space\r\n        direction=\"vertical\"\r\n        style={{\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <Space>\r\n            <Switch {...switchProps} />\r\n            {filteredData.length > 0 && (\r\n              <GroupPaymentPrint filteredData={filteredData} />\r\n            )}\r\n          </Space>\r\n          <Space direction=\"horizontal\" wrap>\r\n            Order Date:\r\n            <RangePicker {...rangeProps} />\r\n            <Input\r\n              // value={searchValue}\r\n              // onChange={(e) => setSearchValue(e.target.value)}\r\n              {...searchInputProps}\r\n              addonAfter={\r\n                <Select {...selectProps}>\r\n                  {selectData.map((value) => (\r\n                    <Option key={value} value={value}>\r\n                      {value}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              }\r\n            />\r\n            <Button\r\n              {...searchButtonProps}\r\n              danger\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </div>\r\n        <div style={{ width: \"100%\", display: \"flex\", flexFlow: \"row wrap\" }}>\r\n          <Card\r\n            style={{ width: \"100%\", maxWidth: \"375px\", position: \"relative\" }}\r\n          >\r\n            <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n              {filteredData.length > 0 && (\r\n                <Alert\r\n                  message=\"Informational Notes\"\r\n                  description={\r\n                    discardButtonProps.disabled\r\n                      ? \"Step 1: Click Edit button below to show the checkboxes in the table\"\r\n                      : \"Step 2: Please input the Ref No first before checking the box\"\r\n                  }\r\n                  type=\"info\"\r\n                  showIcon\r\n                  closable\r\n                />\r\n              )}\r\n              <label>Ref No</label>\r\n              <Input {...refNoProps} />\r\n              <label>Date Payment</label>\r\n              <DatePicker\r\n                allowClear={false}\r\n                style={{ width: \"100%\" }}\r\n                format=\"MM/DD/YYYY\"\r\n                {...datePaymentProps}\r\n                onKeyDown={(e) => {\r\n                  e.preventDefault()\r\n                  return false\r\n                }}\r\n              />\r\n            </Space>\r\n            <br />\r\n            <br />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"right\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <Space>\r\n                <Button {...discardButtonProps}>Discard</Button>\r\n                <Button danger {...editButtonProps}>\r\n                  Edit\r\n                </Button>\r\n              </Space>\r\n            </div>\r\n          </Card>\r\n          {/* <div style={{ overflowY: \"auto\", flex: 1, minWidth: \"375px\" }}> */}\r\n          <Table\r\n            {...tableProps}\r\n            style={{ flex: 1, minWidth: \"375px\" }}\r\n            pagination={{\r\n              size: \"small\",\r\n              defaultPageSize: 20,\r\n            }}\r\n            size=\"small\"\r\n            // scroll={{ y: 690 }}\r\n          />\r\n          {/* </div> */}\r\n        </div>\r\n      </Space>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst GroupPayments = () => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"primary\" onClick={() => setVisible(true)} danger>\r\n        Add Group Payment\r\n      </Button>\r\n      {visible && <CustomModal visible={visible} setVisible={setVisible} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GroupPayments\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTableView\\ledgerView.js",
  [
    "1623",
    "1624"
  ],
  "import { Button, Table } from \"antd\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { BiArrowBack } from \"react-icons/bi\"\r\nimport { Flex, Grid } from \"Restructured/Styles\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\n\r\nfunction LedgerView(props) {\r\n  const [codeOut, setCodeOut] = useState([])\r\n  const [codeIn, setCodeIn] = useState([])\r\n  const columns = [\r\n    {\r\n      title: \"Date\",\r\n      dataIndex: \"date\",\r\n      key: \"date\",\r\n    },\r\n    {\r\n      title: \"Order Number\",\r\n      dataIndex: \"orderNo\",\r\n      key: \"orderNo\",\r\n    },\r\n    {\r\n      title: \"Quantity\",\r\n      dataIndex: \"qty\",\r\n      key: \"qty\",\r\n    },\r\n    {\r\n      title: \"User\",\r\n      dataIndex: \"user\",\r\n      key: \"user\",\r\n    },\r\n  ]\r\n\r\n  const columns2 = [\r\n    {\r\n      title: \"Date\",\r\n      dataIndex: \"date\",\r\n      key: \"date\",\r\n    },\r\n    {\r\n      title: \"RR Number\",\r\n      dataIndex: \"rrNo\",\r\n      key: \"rrNo\",\r\n    },\r\n    {\r\n      title: \"Quantity\",\r\n      dataIndex: \"qty\",\r\n      key: \"qty\",\r\n    },\r\n    {\r\n      title: \"User\",\r\n      dataIndex: \"user\",\r\n      key: \"user\",\r\n    },\r\n  ]\r\n\r\n  useEffect(() => {\r\n    loadLedgers()\r\n  }, [props])\r\n\r\n  const loadLedgers = () => {\r\n    const ledger = { ...props?.ledger }\r\n    const codeOut = []\r\n    const codeIn = []\r\n    for (const data of ledger[props?.code]?.codeOut) {\r\n      const date = formatDateFromDatabase(data.StartTime)\r\n      codeOut.push({\r\n        date: formatDateDash(date),\r\n        orderNo: data?.orderNo,\r\n        qty: data[props?.code],\r\n      })\r\n    }\r\n    for (const data of ledger[props?.code]?.codeIn) {\r\n      const date = formatDateFromDatabase(data.date)\r\n      codeIn.push({\r\n        date: formatDateDash(date),\r\n        rrNo: data?.rrNo,\r\n        qty: data[props?.code],\r\n      })\r\n    }\r\n    setCodeOut(codeOut)\r\n    setCodeIn(codeIn)\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <Flex>\r\n        <div>\r\n          <button\r\n            onClick={props.back}\r\n            style={{\r\n              border: \"none\",\r\n              backgroundColor: \"transparent\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              cursor: \"pointer\",\r\n            }}\r\n          >\r\n            <BiArrowBack size={20} />\r\n          </button>\r\n        </div>\r\n        <div>{`Ledger In and Out ( ${props?.code} )`}</div>\r\n      </Flex>\r\n      <h3 style={{ padding: \"1rem\", color: \"#0275d8\" }}>\r\n        Credit (Grilled Fullfilled)\r\n      </h3>\r\n      <Table dataSource={codeOut} columns={columns} />\r\n      <h3 style={{ padding: \"1rem\", color: \"#0275d8\" }}>Debit (RR)</h3>\r\n      <Table dataSource={codeIn} columns={columns2} />\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default LedgerView\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\generatedNoString.js",
  [
    "1625"
  ],
  "export default function (no) {\r\n  const newNo = no + 1\r\n  if (newNo < 10) {\r\n    return `0000${newNo}`\r\n  } else if (newNo > 9 && newNo < 100) {\r\n    return `000${newNo}`\r\n  } else if (newNo > 99 && newNo < 1000) {\r\n    return `00${newNo}`\r\n  } else if (newNo > 1000 && newNo < 10000) {\r\n    return `0${newNo}`\r\n  } else {\r\n    return newNo\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Print\\Documents\\receivingProductReport.js",
  [
    "1626",
    "1627",
    "1628",
    "1629",
    "1630",
    "1631",
    "1632",
    "1633"
  ],
  "import React, { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport { CODE, DESCRIPTION, QUANTITY } from \"Restructured/Constants/products\"\r\nimport { DATE_END, DATE_START } from \"Restructured/Constants/schedules\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport FilteringPanelMethods from \"../../FilteringPanel/Controllers/FilteringPanelMethods\"\r\nimport PrintMethods from \"../Controllers/PrintMethods\"\r\n\r\nfunction ReceivingProductReport({ reportData }) {\r\n  const [totalAmount, setTotalAmount] = useState(0)\r\n  useEffect(() => {\r\n    const _totalAmount = sumArray(reportData?.items, \"amount\")\r\n    setTotalAmount(_totalAmount)\r\n  }, [])\r\n\r\n  return (\r\n    <Grid padding=\"3rem\">\r\n      <Grid>\r\n        <h3>VITOS BBQ</h3>\r\n      </Grid>\r\n      <Grid>\r\n        <h3>RECEIVING ITEMS FORM</h3>\r\n      </Grid>\r\n      <Grid>\r\n        <div>\r\n          <b>Invoice No: </b> {reportData?.invoiceNo}{\" \"}\r\n        </div>\r\n        <div>\r\n          <b>Delivery No: </b> {reportData?.deliveryNo}{\" \"}\r\n        </div>\r\n        <div>\r\n          <b>Purchased Order No: </b> {reportData?.purchaseOrderNo}{\" \"}\r\n        </div>\r\n        <div>\r\n          <b>Date:</b> {reportData?.date}{\" \"}\r\n        </div>\r\n      </Grid>\r\n      <Grid>\r\n        <br />\r\n        <div>\r\n          <h3>ITEMS</h3>\r\n        </div>\r\n        <table>\r\n          <tr>\r\n            <th>Category</th>\r\n            <th>Code</th>\r\n            <th>Description</th>\r\n            <th>Qty</th>\r\n            <th style={{ textAlign: \"right\" }}>Price</th>\r\n            <th style={{ textAlign: \"right\" }}>Amount</th>\r\n          </tr>\r\n          {reportData.items.map((data) => {\r\n            return (\r\n              <tr>\r\n                <th>{data?.category}</th>\r\n                <td>{data?.code}</td>\r\n                <td>{data?.description}</td>\r\n                <td>{data?.value}</td>\r\n                <td style={{ textAlign: \"right\" }}>{data?.price.toFixed(2)}</td>\r\n                <td style={{ textAlign: \"right\" }}>\r\n                  {data?.amount.toFixed(2)}\r\n                </td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </table>\r\n      </Grid>\r\n      <Grid>\r\n        <table>\r\n          <tr>\r\n            <th>Total</th>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n            <th style={{ textAlign: \"right\" }}>{totalAmount.toFixed(2)}</th>\r\n          </tr>\r\n        </table>\r\n      </Grid>\r\n      <Grid>\r\n        <br />\r\n        <br />\r\n        <p>\r\n          <b>Received By:</b>\r\n          <br />\r\n          {\" \\n\"}\r\n          {reportData?.receivedBy}\r\n        </p>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ReceivingProductReport\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTable\\modal.js",
  [
    "1634",
    "1635",
    "1636",
    "1637",
    "1638",
    "1639",
    "1640",
    "1641",
    "1642",
    "1643",
    "1644",
    "1645"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport { Modal, Button, Input, Divider, Select, Table } from \"antd\"\r\nimport { addData } from \"services\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { Option } from \"antd/lib/mentions\"\r\nimport { formatDateDash } from \"Restructured/Utilities/dateFormat\"\r\nimport ReceivingReportServices from \"Restructured/Services/ReceivingReportServices\"\r\nimport generatedNoString from \"Restructured/Utilities/generatedNoString\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\n\r\nconst ReceivingModalView = ({ reportData }) => {\r\n  const [visible, setVisible] = useState(false)\r\n  const [totalAmount, setTotalAmount] = useState(0)\r\n  useEffect(() => {\r\n    const _totalAmount = sumArray(reportData?.items, \"amount\")\r\n    setTotalAmount(_totalAmount)\r\n  }, [])\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Category\",\r\n      dataIndex: \"category\",\r\n      key: \"category\",\r\n      render: (data) => {\r\n        return <a>{data}</a>\r\n      },\r\n    },\r\n    {\r\n      title: \"Code\",\r\n      dataIndex: \"code\",\r\n      key: \"code\",\r\n    },\r\n    {\r\n      title: \"Description\",\r\n      dataIndex: \"description\",\r\n      key: \"description\",\r\n    },\r\n    {\r\n      title: \"Qty\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      dataIndex: \"price\",\r\n      key: \"price\",\r\n      align: \"right\",\r\n    },\r\n    {\r\n      title: \"Amount\",\r\n      dataIndex: \"amount\",\r\n      key: \"amount\",\r\n      align: \"right\",\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"danger\" onClick={() => setVisible(true)}>\r\n        View\r\n      </Button>\r\n      <Modal\r\n        title=\"RECEIVING REPORT\"\r\n        centered\r\n        visible={visible}\r\n        onOk={() => {\r\n          setVisible(true)\r\n        }}\r\n        onCancel={() => {\r\n          setVisible(false)\r\n        }}\r\n        width={1000}\r\n      >\r\n        <Grid padding=\"3rem\">\r\n          <Grid>\r\n            <div>\r\n              <b>Invoice No: </b> {reportData?.invoiceNo}{\" \"}\r\n            </div>\r\n            <div>\r\n              <b>Delivery No: </b> {reportData?.deliveryNo}{\" \"}\r\n            </div>\r\n            <div>\r\n              <b>Purchased Order No: </b> {reportData?.purchaseOrderNo}{\" \"}\r\n            </div>\r\n            <div>\r\n              <b>Date:</b> {reportData?.date}{\" \"}\r\n            </div>\r\n          </Grid>\r\n          <Grid>\r\n            <br />\r\n            <div>\r\n              <h3>ITEMS RECEIVED</h3>\r\n            </div>\r\n            <Table columns={columns} dataSource={reportData.items} />\r\n          </Grid>\r\n          <Grid>\r\n            <table>\r\n              <tr>\r\n                <th>Total</th>\r\n                <th></th>\r\n                <th></th>\r\n                <th></th>\r\n                <th></th>\r\n                <th style={{ textAlign: \"right\" }}>{totalAmount.toFixed(2)}</th>\r\n              </tr>\r\n            </table>\r\n          </Grid>\r\n          <Grid>\r\n            <br />\r\n            <br />\r\n            <p>\r\n              <b>Received By:</b>\r\n              <br />\r\n              {\" \\n\"}\r\n              {reportData?.receivedBy}\r\n            </p>\r\n          </Grid>\r\n        </Grid>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReceivingModalView\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTable\\editModal.js",
  [
    "1646",
    "1647",
    "1648",
    "1649",
    "1650",
    "1651",
    "1652",
    "1653"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport { Modal, Button, Input, Divider, Select } from \"antd\"\r\nimport useProductServices from \"../ProductCards/useProductServices\"\r\nimport { updateData } from \"services\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { Option } from \"antd/lib/mentions\"\r\nimport { formatDateDash } from \"Restructured/Utilities/dateFormat\"\r\nimport ReceivingReportServices from \"Restructured/Services/ReceivingReportServices\"\r\nimport generatedNoString from \"Restructured/Utilities/generatedNoString\"\r\n\r\nconst produceStateProperty = (productList) => {\r\n  const list = { invoiceNo: \"\", deliveryNo: \"\", purchaseOrderNo: \"\" }\r\n  for (const obj of productList) {\r\n    for (const obj2 of obj.productList) {\r\n      list[obj2?.code] = \"0\"\r\n    }\r\n  }\r\n  return list\r\n}\r\nconst ReceivingModal = (props) => {\r\n  const userComponentSlice = useSelector(selectUserSlice)\r\n  const { productList } = useProductServices()\r\n  const [importObj, setImportObj] = useState({})\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const handleSubmit = async () => {\r\n    updateData({\r\n      data: importObj,\r\n      collection: \"receivingReports\",\r\n      id: props.id,\r\n    })\r\n    setVisible(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      loadProductList()\r\n    }\r\n  }, [visible])\r\n\r\n  const loadProductList = async () => {\r\n    const productList = await ReceivingReportServices.getRRById(props.id)\r\n    setImportObj({ ...productList })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={() => setVisible(true)}>Edit</Button>\r\n      <Modal\r\n        title=\"Edit Receiving Report\"\r\n        centered\r\n        visible={visible}\r\n        onOk={() => {\r\n          handleSubmit()\r\n        }}\r\n        onCancel={() => {\r\n          setVisible(false)\r\n        }}\r\n        width={1000}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"flex-start\",\r\n            flexFlow: \"row wrap\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              padding: \"1rem\",\r\n              marginBottom: \"1rem\",\r\n              maxWidth: \"15rem\",\r\n            }}\r\n          >\r\n            <label>Branch</label>\r\n            <Select style={{ width: \"13rem\" }} value={importObj.branch}>\r\n              <Option value=\"Libis\">Libis</Option>\r\n              <Option value=\"Ronac\">Ronac</Option>\r\n            </Select>\r\n          </div>\r\n          <div\r\n            style={{ padding: \"1rem\", marginBottom: \"1rem\", maxWidth: \"15rem\" }}\r\n          >\r\n            <label>Invoice No</label>\r\n            <Input\r\n              name=\"invoiceNo\"\r\n              value={importObj.invoiceNo}\r\n              onChange={(e) =>\r\n                setImportObj({ ...importObj, invoiceNo: e.target.value })\r\n              }\r\n              value={importObj[\"invoiceNo\"]}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{ padding: \"1rem\", marginBottom: \"1rem\", maxWidth: \"15rem\" }}\r\n          >\r\n            <label>Delivery No</label>\r\n            <Input\r\n              name=\"deliveryNo\"\r\n              value={importObj.deliveryNo}\r\n              onChange={(e) =>\r\n                setImportObj({ ...importObj, deliveryNo: e.target.value })\r\n              }\r\n              value={importObj[\"deliveryNo\"]}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{ padding: \"1rem\", marginBottom: \"1rem\", maxWidth: \"15rem\" }}\r\n          >\r\n            <label>Purchase Order No</label>\r\n            <Input\r\n              name=\"purchaseOrderNo\"\r\n              value={importObj.purchaseOrderNo}\r\n              onChange={(e) =>\r\n                setImportObj({ ...importObj, purchaseOrderNo: e.target.value })\r\n              }\r\n              value={importObj[\"purchaseOrderNo\"]}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          {productList.map((product) => {\r\n            return (\r\n              <div>\r\n                <h3>{product?.groupHeader}</h3>\r\n                <Divider />\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexFlow: \"row wrap\",\r\n                    justifyContent: \"flex-end\",\r\n                    alignItems: \"flex-end\",\r\n                  }}\r\n                >\r\n                  {product?.productList.map((data) => {\r\n                    return (\r\n                      <div\r\n                        style={{\r\n                          padding: \"1rem\",\r\n                          marginBottom: \"1rem\",\r\n                          maxWidth: \"15rem\",\r\n                        }}\r\n                      >\r\n                        <label>{`${data?.description} (${data?.code})`}</label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"purchaseOrderNo\"\r\n                          onChange={(e) => {\r\n                            setImportObj({\r\n                              ...importObj,\r\n                              [data?.code]: e.target.value,\r\n                            })\r\n                          }}\r\n                          value={importObj[data?.code]}\r\n                        />\r\n                      </div>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReceivingModal\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\statusField.js",
  [
    "1654",
    "1655"
  ],
  "// this function component is a special case\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport Input from './input'\r\nimport styled from 'styled-components'\r\nimport {\r\n  INDICATE_REASON,\r\n  LABELS,\r\n  ORDER_VIA,\r\n  PARTNER_MERCHANT_ORDER_NO,\r\n  STATUS\r\n} from 'components/SchedulerComponent/orderSlip/types'\r\nimport DropdownList from './dropdownList'\r\nimport { useGetDropdowns } from 'components/SchedulerComponent/dropdowns'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  width: 100%;\r\n  position: relative;\r\n`\r\nconst Left = styled.div`\r\n  width: 50%;\r\n\r\n  label {\r\n    color: #888;\r\n  }\r\n`\r\n\r\nconst Right = styled.div`\r\n  width: 50%;\r\n  position: absolute;\r\n  right: -0.9rem;\r\n\r\n  label {\r\n    color: #888;\r\n  }\r\n`\r\n\r\nfunction StatusField (props) {\r\n  const dropdowns = useGetDropdowns()\r\n  const [isCancelledResched, setIsCancelledResched] = useState(false)\r\n  const [newProps, setNewProps] = useState(props)\r\n  const [secondFieldValue, setSecondFieldValue] = useState('')\r\n  useEffect(() => {\r\n    setNewProps(props)\r\n    setSecondFieldValue(props[INDICATE_REASON])\r\n  }, [props])\r\n  return (\r\n    <Container>\r\n      <Left>\r\n        <label>{LABELS[STATUS]}</label>\r\n        <DropdownList\r\n          {...newProps}\r\n          value={newProps[STATUS]}\r\n          name={STATUS}\r\n          dataSource={dropdowns[STATUS]}\r\n          onChange={(e) => {\r\n            if (e.value) {\r\n              if (\r\n                e.value === 'REVISED / RESCHEDULED' ||\r\n                e.value === 'CANCELLED'\r\n              ) {\r\n                setIsCancelledResched(false)\r\n                setSecondFieldValue(props[INDICATE_REASON])\r\n              } else {\r\n                setIsCancelledResched(true)\r\n                setSecondFieldValue('')\r\n              }\r\n            }\r\n          }}\r\n        />\r\n      </Left>\r\n      <Right>\r\n        <label>{LABELS[INDICATE_REASON]}</label>\r\n        <Input\r\n          {...newProps}\r\n          name={INDICATE_REASON}\r\n          value={secondFieldValue}\r\n          disabled={isCancelledResched}\r\n          onChange={(e) => {\r\n            setSecondFieldValue(e.target.value)\r\n          }}\r\n        />\r\n      </Right>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default StatusField\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\formatNumber.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\2.menu\\index.js",
  [
    "1656",
    "1657",
    "1658"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport {\r\n  Wrapper,\r\n  TitleItem,\r\n  MenuItem,\r\n  MenuText,\r\n  ArrowDown,\r\n  ArrowUp,\r\n  SubItem,\r\n  SubMenuContainer,\r\n} from \"./styles\"\r\nimport { useSelectMenus } from \"./menuData\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectSideNav } from \"../sideNavSlice\"\r\nimport { selectMenuSlice } from \"./menuSlice\"\r\nimport { Popover, Menu } from \"antd\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useRef } from \"react\"\r\nconst { SubMenu } = Menu\r\n\r\nconst menus = {}\r\nfunction CustomMenu({ isToggled }) {\r\n  let history = useHistory()\r\n  const menuRef = useRef()\r\n  const [menuWidth, setMenuWidth] = useState(0)\r\n  const { menuData } = useSelector(selectMenuSlice)\r\n  const sideNavSlice = useSelector(selectSideNav)\r\n  const [state, setState] = useState(menus)\r\n\r\n  for (const obj of menuData) {\r\n    menus[obj.title] = sideNavSlice.selectedMenu.includes(obj.title)\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => {\r\n      const width =\r\n        typeof menuRef?.current?.clientWidth !== \"undefined\"\r\n          ? menuRef?.current?.clientWidth\r\n          : 0\r\n      setMenuWidth(width)\r\n    })\r\n    setMenuWidth(menuRef?.current?.clientWidth)\r\n  }, [menuRef.current])\r\n  return (\r\n    <Wrapper>\r\n      {menuData.map(({ title, Icon, subMenu, display, path, flex }) => (\r\n        <div\r\n          style={\r\n            title === \"Settings\"\r\n              ? { position: \"absolute\", bottom: 1, width: \"100%\" }\r\n              : {}\r\n          }\r\n        >\r\n          <MenuItem\r\n            key={title}\r\n            style={display ? {} : { display: \"none\" }}\r\n            ref={menuRef}\r\n          >\r\n            {/* main title */}\r\n            {subMenu.length > 0 ? (\r\n              <TitleItem\r\n                active={sideNavSlice.selectedMenu.includes(title)}\r\n                onClick={() => {\r\n                  setState({ ...state, [title]: !state[title] })\r\n                }}\r\n              >\r\n                {menuWidth === 75 || !isToggled ? (\r\n                  <Popover\r\n                    placement=\"right\"\r\n                    title={title}\r\n                    content={\r\n                      <Menu>\r\n                        {subMenu.map((subItem) => (\r\n                          <Menu.Item\r\n                            onClick={() => {\r\n                              history.push(subItem.path)\r\n                            }}\r\n                            active={sideNavSlice.selectedMenu.includes(\r\n                              subItem.title\r\n                            )}\r\n                          >\r\n                            {subItem.title}\r\n                          </Menu.Item>\r\n                        ))}\r\n                      </Menu>\r\n                    }\r\n                    trigger=\"click\"\r\n                  >\r\n                    <div>\r\n                      <Icon isToggled={isToggled} />\r\n                    </div>\r\n                  </Popover>\r\n                ) : (\r\n                  <div>\r\n                    <Icon isToggled={isToggled} />\r\n                  </div>\r\n                )}\r\n\r\n                <MenuText isToggled={isToggled}>{title}</MenuText>\r\n                {state[title] ? <ArrowUp /> : <ArrowDown />}\r\n              </TitleItem>\r\n            ) : (\r\n              <SubItem isToggled={isToggled} to={path}>\r\n                {title}\r\n              </SubItem>\r\n            )}\r\n\r\n            {/* sub items */}\r\n            <SubMenuContainer active={state[title]} isToggled={isToggled}>\r\n              {subMenu.map((subItem) => (\r\n                <SubItem\r\n                  style={subItem.display ? {} : { display: \"none\" }}\r\n                  to={subItem.path}\r\n                  key={subItem.title}\r\n                  active={sideNavSlice.selectedMenu.includes(subItem.title)}\r\n                >\r\n                  <span style={{ marginLeft: \"5rem\" }}>{subItem.title}</span>\r\n                </SubItem>\r\n              ))}\r\n            </SubMenuContainer>\r\n          </MenuItem>\r\n        </div>\r\n      ))}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CustomMenu\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Services\\ReceivingReportServices.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\PaymentDetails\\dropdowns.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\sorting.js",
  [
    "1659"
  ],
  "export default function (array, field) {\r\n  return array.sort((a, b) => {\r\n    if (a[field] < b[field]) {\r\n      return -1\r\n    }\r\n    if (a[field] > b[field]) {\r\n      return 1\r\n    }\r\n    return 0\r\n  })\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\1.banner\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductCards\\produceTotalPurchases.js",
  [
    "1660"
  ],
  "export default function (data, code) {\r\n  let purchases = 0\r\n\r\n  for (const obj of data) {\r\n    purchases = purchases + parseInt(obj[code])\r\n  }\r\n\r\n  return purchases\r\n}\r\n\r\nexport const produceTotalImports = (data, code) => {\r\n  let purchases = 0\r\n\r\n  for (const obj of data) {\r\n    purchases = purchases + parseInt(obj[code])\r\n  }\r\n\r\n  return purchases\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\number.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\datePicker.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DirectAndThirdParty\\ExcelFormatter\\ExcelConstantDataRow.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\chips.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\dateTimePicker.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\fields\\textArea.js",
  [
    "1661",
    "1662",
    "1663"
  ],
  "import { TextBoxComponent } from \"@syncfusion/ej2-react-inputs\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nconst OutlinedContainer = styled.div`\r\n  border: 1px solid grey;\r\n  margin-top: 0.5rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  box-sizing: content-box;\r\n  position: relative;\r\n  width: 100%;\r\n`\r\n\r\nfunction TextArea(props) {\r\n  return (\r\n    <OutlinedContainer>\r\n      <textarea\r\n        id={props.name}\r\n        class=\"e-field e-input\"\r\n        name={props.name}\r\n        rows=\"3\"\r\n        cols=\"50\"\r\n        value={props.value}\r\n        style={{ resize: \"vertical\" }}\r\n        onChange={props?.onChange}\r\n      />\r\n    </OutlinedContainer>\r\n  )\r\n}\r\n\r\nexport default TextArea\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Inventory\\ProductTable\\useReceivedReport.js",
  [
    "1664",
    "1665",
    "1666",
    "1667",
    "1668"
  ],
  "import { useEffect, useState } from \"react\"\r\nimport ReceivingReportServices from \"Restructured/Services/ReceivingReportServices\"\r\nimport ProductServices from \"Restructured/Services/ProductServices\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport db from \"services/firebase\"\r\n\r\nexport default function (props) {\r\n  const [reportList, setReportList] = useState([])\r\n  const [originalReportList, setOriginalReportList] = useState([])\r\n  useEffect(() => {\r\n    // const unsubscribe = db\r\n    //   .collection(\"receivingReports\")\r\n    //   .onSnapshot(function (snapshot) {\r\n    //     const _reportList = [...originalReportList]\r\n    //     for (const obj of snapshot.docChanges()) {\r\n    //       if (obj.type === \"modified\") {\r\n    //         const data = obj.doc.data()\r\n    //         setOriginalReportList(data)\r\n    //         console.log(\"eventRealMod\", data)\r\n    //         // setReportList(data)\r\n    //       } else if (obj.type === \"added\") {\r\n    //         const data = obj.doc.data()\r\n    //         console.log(\"eventReal\", data)\r\n    //         // setReportList(data)\r\n    //       } else {\r\n    //         console.log(\"nothing\")\r\n    //       }\r\n    //     }\r\n    //   })\r\n    // return () => {\r\n    //   unsubscribe()\r\n    // }\r\n    loadReports()\r\n  }, [])\r\n  const loadProducts = async () => {\r\n    const _productList = []\r\n    const products = await ProductServices.getProducts()\r\n\r\n    for (const obj of products) {\r\n      for (const product of obj?.productList) {\r\n        _productList.push({\r\n          ...product,\r\n          groupHeader: obj?.groupHeader,\r\n          price: product?.price,\r\n        })\r\n      }\r\n    }\r\n    return _productList\r\n  }\r\n\r\n  const loadReports = async (/*report*/) => {\r\n    const _reportList = []\r\n    const report = await ReceivingReportServices.getRR()\r\n    const _productList = await loadProducts()\r\n    for (const obj of report) {\r\n      const user = { ...obj.receivedBy }\r\n      const date = formatDateFromDatabase(obj?.date)\r\n      const formattedDate = formatDateDash(date)\r\n      const items = []\r\n      for (const product of _productList) {\r\n        if (parseInt(obj[product?.code]) > 0) {\r\n          items.push({\r\n            code: product?.code,\r\n            value: parseInt(obj[product?.code]),\r\n            description: product?.description,\r\n            category: product?.groupHeader,\r\n            price: product?.price,\r\n            amount: parseInt(product?.price) * parseInt(obj[product?.code]),\r\n          })\r\n        }\r\n      }\r\n      const totalAmount = sumArray(items, \"amount\")\r\n      _reportList.push({\r\n        invoiceNo: obj?.invoiceNo,\r\n        deliveryNo: obj?.deliveryNo,\r\n        purchaseOrderNo: obj?.purchaseOrderNo,\r\n        receivedBy: user?.displayName,\r\n        items,\r\n        id: obj?._id,\r\n        date: formattedDate,\r\n        amount: totalAmount,\r\n        rrNo: obj?.rrNo,\r\n      })\r\n    }\r\n    setReportList(_reportList)\r\n    return _reportList\r\n  }\r\n\r\n  return [reportList, loadReports]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\Reports\\Controllers\\ExcelFormatter\\ExcelConstantDataRow.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DailyReport\\dailyReportType.js",
  [
    "1669",
    "1670",
    "1671",
    "1672",
    "1673",
    "1674",
    "1675",
    "1676",
    "1677",
    "1678",
    "1679",
    "1680",
    "1681",
    "1682",
    "1683",
    "1684"
  ],
  "import { Button, DatePicker, Input, Switch, Table, Tag } from \"antd\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  TOTAL_DUE,\r\n} from \"components/PaymentDetails/types\"\r\nimport moment from \"moment\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport {\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport DropdownServices from \"Restructured/Services/DropdownServices\"\r\nimport { Flex, Grid, Item } from \"Restructured/Styles\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport {\r\n  AiFillCaretLeft,\r\n  AiFillCaretRight,\r\n  AiFillPrinter,\r\n  AiOutlineArrowLeft,\r\n} from \"react-icons/ai\"\r\nimport addMinusDay from \"Restructured/Utilities/addMinusDay\"\r\nimport thousandsSeparators from \"Restructured/Utilities/formatNumber\"\r\nimport {\r\n  ORDER_NO,\r\n  ORDER_VIA_PARTNER,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport LiquidChart from \"../LiquidChart\"\r\nimport sumArray, {\r\n  sumArrayDatas,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport checkDate from \"Restructured/Utilities/checkDate\"\r\nimport Print from \"Restructured/Components/Features/Print\"\r\nconst { RangePicker } = DatePicker\r\n\r\nconst dateFormat = (date) => {\r\n  return moment(date, \"MM/DD/YYYY\")\r\n}\r\nfunction DailyReportType({ Services, filterBasis, title, back }) {\r\n  const [date, setDate] = useState(dateFormat(new Date()))\r\n  const [dateTo, setDateTo] = useState(dateFormat(new Date()))\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [dataList, setDataList] = useState([])\r\n  const [subTotalOfDataList, setSubTotalOfDataList] = useState([])\r\n  const [subTotalOfOrderVia, setSubTotalOfOrderVia] = useState([])\r\n  const [subTotalOfSources, setSubTotalOfSources] = useState([])\r\n  const [grandTotalDue, setGrandTotalDue] = useState(0)\r\n  const [grandAmountPaid, setGrandAmountPaid] = useState(0)\r\n  const [targetAmount, setTargetAmount] = useState(0)\r\n  const [isSwitch, setIsSwitch] = useState(true)\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [Services, date, dateTo])\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [Services])\r\n\r\n  const loadDropdowns = async () => {\r\n    if (typeof filterBasis === \"object\") {\r\n      setIsSwitch(false)\r\n      let dropdowns = []\r\n      for (const value of filterBasis) {\r\n        const _dropdowns = await DropdownServices.getDropdowns(value)\r\n        if (_dropdowns?.list) {\r\n          dropdowns = [...dropdowns, ..._dropdowns?.list]\r\n        }\r\n      }\r\n      setDropdowns(dropdowns)\r\n    } else {\r\n      const dropdowns = await DropdownServices.getDropdowns(filterBasis)\r\n      if (dropdowns?.list) {\r\n        setDropdowns(dropdowns?.list)\r\n      }\r\n    }\r\n  }\r\n\r\n  const loadData = async () => {\r\n    if (dropdowns.length > 0) {\r\n      const Service = new Services()\r\n      const data = await Service.getSchedulesByDate(\r\n        [date._d, dateTo._d],\r\n        DATE_PAYMENT\r\n      )\r\n      console.log(\"listdata\", data)\r\n      let newData = data.filter((row) => dropdowns.includes(row[filterBasis]))\r\n      console.log(\"listagain\", newData)\r\n      const formattedDataList = []\r\n      for (const obj of newData) {\r\n        const datePaid =\r\n          typeof obj[DATE_PAYMENT] === \"undefined\"\r\n            ? null\r\n            : formatDateFromDatabase(obj[DATE_PAYMENT])\r\n        const dateOrderPlaced = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n        if (datePaid) {\r\n          formattedDataList.push({\r\n            [ORDER_VIA]: obj[ORDER_VIA],\r\n            [SOURCE]: obj[SOURCE],\r\n            [ACCOUNT_NUMBER]: obj[ACCOUNT_NUMBER],\r\n            [TOTAL_DUE]: obj[TOTAL_DUE],\r\n            [CUSTOMER]: obj[CUSTOMER],\r\n            [ORDER_NO]: obj[ORDER_NO],\r\n            [DATE_PAYMENT]: formatDateSlash(datePaid),\r\n            [DATE_ORDER_PLACED]: formatDateSlash(dateOrderPlaced),\r\n            [AMOUNT_PAID]: obj[AMOUNT_PAID],\r\n            partials: obj?.partials ? obj?.partials : [],\r\n          })\r\n        }\r\n      }\r\n      setDataList(formattedDataList)\r\n\r\n      // dataList sub total\r\n      const subtotalDue = sumArray(formattedDataList, TOTAL_DUE)\r\n      const subAmountPaid = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfDataList([\r\n        {\r\n          [DATE_PAYMENT]: \"\",\r\n          [DATE_ORDER_PLACED]: \"\",\r\n          [ORDER_NO]: \"\",\r\n          [CUSTOMER]: \"Sub Total\",\r\n          [TOTAL_DUE]: subtotalDue,\r\n          [AMOUNT_PAID]: subAmountPaid.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // orderVia sub total\r\n      const subAmountPaidOrderVia = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfOrderVia([\r\n        {\r\n          [ORDER_VIA]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidOrderVia.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // sources sub total\r\n      const subAmountPaidSources = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfSources([\r\n        {\r\n          [ACCOUNT_NUMBER]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidSources.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      /// set the dataSources of SUMMARY OF SALES\r\n      const totalDue = sumArray([...newData], TOTAL_DUE)\r\n      const totalAmountPaid = sumArray([...newData], AMOUNT_PAID)\r\n      setGrandTotalDue(totalDue.toFixed(2))\r\n      setGrandAmountPaid(totalAmountPaid.toFixed(2))\r\n      setTargetAmount(totalDue.toFixed(2))\r\n    }\r\n  }\r\n\r\n  const calculatePercent = () => {\r\n    if (isSwitch) {\r\n      return grandAmountPaid / grandTotalDue\r\n    } else {\r\n      if (targetAmount) {\r\n        return grandAmountPaid / targetAmount\r\n      } else {\r\n        return grandAmountPaid / 0\r\n      }\r\n    }\r\n  }\r\n\r\n  const columnsOfOrders = [\r\n    {\r\n      title: \"DATE PAID\",\r\n      key: DATE_PAYMENT,\r\n      dataIndex: DATE_PAYMENT,\r\n    },\r\n    {\r\n      title: \"ORDER DATE\",\r\n      key: DATE_ORDER_PLACED,\r\n      dataIndex: DATE_ORDER_PLACED,\r\n    },\r\n    {\r\n      title: \"VBS #\",\r\n      key: ORDER_NO,\r\n      dataIndex: ORDER_NO,\r\n    },\r\n    {\r\n      title: \"CUSTOMER\",\r\n      key: CUSTOMER,\r\n      dataIndex: CUSTOMER,\r\n    },\r\n    {\r\n      title: \"TOTAL DUE\",\r\n      key: TOTAL_DUE,\r\n      dataIndex: TOTAL_DUE,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n    {\r\n      title: \"AMOUNT PAID\",\r\n      key: AMOUNT_PAID,\r\n      dataIndex: AMOUNT_PAID,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n  ]\r\n\r\n  console.log(\"dataList\", dataList)\r\n  return (\r\n    <>\r\n      <div>\r\n        <Grid padding=\"1rem\">\r\n          <Flex justifyContent=\"center\">\r\n            <div style={{ padding: \"1rem\", flex: 1 }}>\r\n              <Button\r\n                icon={<AiOutlineArrowLeft />}\r\n                size=\"large\"\r\n                shape=\"circle\"\r\n                type=\"primary\"\r\n                danger\r\n                onClick={back}\r\n              />\r\n            </div>\r\n            <RangePicker\r\n              showTime={false}\r\n              value={[date, dateTo]}\r\n              format=\"MM/DD/YYYY\"\r\n              onChange={(date) => {\r\n                if (date) {\r\n                  setDate(date[0])\r\n                  setDateTo(date[1])\r\n                }\r\n              }}\r\n            />\r\n            <div style={{ padding: \"1rem\" }}>{formatDateLong(date._d)}</div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretLeft />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"minus\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretRight />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"add\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n        <Grid padding=\" 1rem 4rem\">\r\n          <h1>{title}</h1>\r\n          <Table\r\n            dataSource={[...dataList, ...subTotalOfDataList]}\r\n            columns={columnsOfOrders}\r\n            pagination={false}\r\n          />\r\n        </Grid>\r\n        <Grid padding=\"1rem 4rem\">\r\n          <h1>SUMMARY OF SALES</h1>\r\n          <Flex alignItems=\"flex-start\">\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ORDER_VIA,\r\n                    AMOUNT_PAID\r\n                  ),\r\n                  ...subTotalOfOrderVia,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"ORDER VIA\",\r\n                    key: \"orderVia\",\r\n                    dataIndex: \"orderVia\",\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ACCOUNT_NUMBER,\r\n                    AMOUNT_PAID\r\n                  ),\r\n                  ...subTotalOfSources,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"SOURCES\",\r\n                    key: ACCOUNT_NUMBER,\r\n                    dataIndex: ACCOUNT_NUMBER,\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n          </Flex>\r\n        </Grid>\r\n      </div>\r\n      {/* this is print */}\r\n      <div style={{ position: \"fixed\", right: 0, bottom: 0, padding: \"1rem\" }}>\r\n        <Print\r\n          component={\r\n            <div>\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  DIRECT ORDERS\r\n                </thead>\r\n                <tbody style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      {columnsOfOrders.map((field) => {\r\n                        return <th>{field?.title}</th>\r\n                      })}\r\n                    </tr>\r\n                    {[...dataList].reverse().map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    {subTotalOfDataList.map((data) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (dataList.length + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n              <br />\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SUMMARY OF SALES\r\n                </thead>\r\n                <tbody\r\n                  style={{ fontSize: \"8px\", display: \"flex\", width: \"100%\" }}\r\n                >\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                      marginRight: \"1rem\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>ORDER VIA</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ].map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          <td>{data[ORDER_VIA]}</td>\r\n                          <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                  <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>RECEIVING ACCT</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ACCOUNT_NUMBER,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ].map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          <td>{data[ACCOUNT_NUMBER]}</td>\r\n                          <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          }\r\n          button={<AiFillPrinter fontSize=\"2.5rem\" />}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DailyReportType\r\n\r\n// <Grid padding=\" 1rem 4rem\">\r\n//   <div>\r\n//     <h6>VITOS BBQ DAILY REPORT</h6>\r\n//   </div>\r\n//   <br />\r\n//   <br />\r\n//   <br />\r\n//   <Grid>\r\n//     <h2>DIRECT ORDER</h2>\r\n//     <Table\r\n//       size=\"small\"\r\n//       dataSource={[...dataList, ...subTotalOfDataList]}\r\n//       columns={columnsOfOrders}\r\n//       pagination={false}\r\n//     />\r\n//   </Grid>\r\n//   <br />\r\n//   <br />\r\n//   <br />\r\n//   <Grid>\r\n//     <h2>SUMMARY OF SALES</h2>\r\n//     <Flex alignItems=\"flex-start\">\r\n//       <Table\r\n//         size=\"small\"\r\n//         showHeader={false}\r\n//         pagination={false}\r\n//         dataSource={[\r\n//           ...sumArrayOfObjectsGrouping(\r\n//             dataList,\r\n//             ORDER_VIA,\r\n//             AMOUNT_PAID\r\n//           ),\r\n//           ...subTotalOfOrderVia,\r\n//         ]}\r\n//         columns={[\r\n//           {\r\n//             title: \"ORDER VIA\",\r\n//             key: \"orderVia\",\r\n//             dataIndex: \"orderVia\",\r\n//           },\r\n//           {\r\n//             title: \"AMOUNT PAID\",\r\n//             key: \"amountPaid\",\r\n//             dataIndex: \"amountPaid\",\r\n//             align: \"right\",\r\n//             render: (value) => {\r\n//               return <a>{thousandsSeparators(value)}</a>\r\n//             },\r\n//           },\r\n//         ]}\r\n//       />\r\n//       <Table\r\n//         showHeader={false}\r\n//         pagination={false}\r\n//         size=\"small\"\r\n//         dataSource={[\r\n//           ...sumArrayOfObjectsGrouping(\r\n//             dataList,\r\n//             ORDER_VIA,\r\n//             AMOUNT_PAID\r\n//           ),\r\n//           ...subTotalOfSources,\r\n//         ]}\r\n//         columns={[\r\n//           {\r\n//             title: \"SOURCES\",\r\n//             key: \"source\",\r\n//             dataIndex: \"source\",\r\n//           },\r\n//           {\r\n//             title: \"AMOUNT PAID\",\r\n//             key: \"amountPaid\",\r\n//             dataIndex: \"amountPaid\",\r\n//             align: \"right\",\r\n//             render: (value) => {\r\n//               return <a>{thousandsSeparators(value)}</a>\r\n//             },\r\n//           },\r\n//         ]}\r\n//       />\r\n//     </Flex>\r\n//   </Grid>\r\n// </Grid>\r\n\r\n{\r\n  /* <Flex>\r\n                  <div style={{ flex: 1 }}>\r\n                    <h1>TOTAL AMOUNT PAID</h1>\r\n                  </div>\r\n                  {isSwitch ? (\r\n                    <span style={{ marginRight: \".5rem\" }}>Total Due</span>\r\n                  ) : (\r\n                    <span style={{ marginRight: \".5rem\" }}>Target Amount</span>\r\n                  )}\r\n                  <Switch\r\n                    checked={isSwitch}\r\n                    onChange={() => {\r\n                      setIsSwitch(!isSwitch)\r\n                    }}\r\n                  />\r\n                </Flex> */\r\n}\r\n{\r\n  /* <Flex>\r\n                  <LiquidChart percent={calculatePercent} />\r\n                  <div>\r\n                    <Tag color={isSwitch ? \"#2db7f5\" : \"\"}>\r\n                      {isSwitch ? \"Total Due\" : \"Target Amount\"}\r\n                    </Tag>\r\n                    {isSwitch ? (\r\n                      <div style={{ marginLeft: \".7rem\" }}>\r\n                        {thousandsSeparators(grandTotalDue)}\r\n                      </div>\r\n                    ) : (\r\n                      <div style={{ width: \"10rem\" }}>\r\n                        <Input\r\n                          value={targetAmount}\r\n                          bordered={false}\r\n                          onChange={(e) => setTargetAmount(e.target.value)}\r\n                          onBlur={(e) => {\r\n                            if (\r\n                              Number(e.target.value) < Number(grandAmountPaid)\r\n                            ) {\r\n                              setTargetAmount(grandAmountPaid)\r\n                            }\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    <br />\r\n                    <Tag color=\"#ff4d4f\">Amount Paid</Tag>\r\n                    <div style={{ marginLeft: \".7rem\" }}>\r\n                      {thousandsSeparators(grandAmountPaid)}\r\n                    </div>\r\n                  </div>\r\n                </Flex> */\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\DailyReport\\servedReportType.js",
  [
    "1685",
    "1686",
    "1687",
    "1688",
    "1689",
    "1690",
    "1691",
    "1692",
    "1693",
    "1694",
    "1695",
    "1696",
    "1697",
    "1698",
    "1699",
    "1700",
    "1701",
    "1702",
    "1703"
  ],
  "import { Button, DatePicker, Input, Switch, Table, Tag } from \"antd\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  TOTAL_DUE,\r\n} from \"components/PaymentDetails/types\"\r\nimport moment from \"moment\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport {\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport DropdownServices from \"Restructured/Services/DropdownServices\"\r\nimport { Flex, Grid, Item } from \"Restructured/Styles\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateLong,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport {\r\n  AiFillCaretLeft,\r\n  AiFillCaretRight,\r\n  AiFillPrinter,\r\n  AiOutlineArrowLeft,\r\n} from \"react-icons/ai\"\r\nimport addMinusDay from \"Restructured/Utilities/addMinusDay\"\r\nimport thousandsSeparators from \"Restructured/Utilities/formatNumber\"\r\nimport {\r\n  ORDER_NO,\r\n  ORDER_VIA_PARTNER,\r\n  UTAK_NO,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport LiquidChart from \"../LiquidChart\"\r\nimport sumArray, {\r\n  sumArrayDatas,\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport checkDate from \"Restructured/Utilities/checkDate\"\r\nimport Print from \"Restructured/Components/Features/Print\"\r\nconst { RangePicker } = DatePicker\r\nconst dateFormat = (date) => {\r\n  return moment(date, \"MM/DD/YYYY\")\r\n}\r\nfunction ServedReportType({ Services, filterBasis, title, back }) {\r\n  const [date, setDate] = useState(dateFormat(new Date()))\r\n  const [dateTo, setDateTo] = useState(dateFormat(new Date()))\r\n  const [dropdowns, setDropdowns] = useState([])\r\n  const [dataList, setDataList] = useState([])\r\n  const [subTotalOfDataList, setSubTotalOfDataList] = useState([])\r\n  const [subTotalOfOrderVia, setSubTotalOfOrderVia] = useState([])\r\n  const [subTotalOfSources, setSubTotalOfSources] = useState([])\r\n  const [grandTotalDue, setGrandTotalDue] = useState(0)\r\n  const [grandAmountPaid, setGrandAmountPaid] = useState(0)\r\n  const [targetAmount, setTargetAmount] = useState(0)\r\n  const [isSwitch, setIsSwitch] = useState(true)\r\n  const [targets, setTargets] = useState([35000, 5000, 15000])\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [Services, date, dateTo])\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [Services])\r\n\r\n  const loadDropdowns = async () => {\r\n    if (typeof filterBasis === \"object\") {\r\n      setIsSwitch(false)\r\n      let dropdowns = []\r\n      for (const value of filterBasis) {\r\n        const _dropdowns = await DropdownServices.getDropdowns(value)\r\n        if (_dropdowns?.list) {\r\n          dropdowns = [...dropdowns, ..._dropdowns?.list]\r\n        }\r\n      }\r\n      setDropdowns(dropdowns)\r\n    } else {\r\n      const dropdowns = await DropdownServices.getDropdowns(filterBasis)\r\n      if (dropdowns?.list) {\r\n        setDropdowns(dropdowns?.list)\r\n      }\r\n    }\r\n  }\r\n\r\n  const loadData = async () => {\r\n    if (dropdowns.length > 0) {\r\n      const Service = new Services()\r\n      const data = await Service.getSchedulesByDate([date._d, dateTo._d])\r\n      let newData = []\r\n      if (typeof filterBasis === \"object\") {\r\n        for (const value of filterBasis) {\r\n          const _data = data.filter((row) => dropdowns.includes(row[value]))\r\n          for (const obj of _data) {\r\n            if (typeof obj?.partials === \"object\") delete obj.partials\r\n            newData.push({\r\n              ...obj,\r\n              [ORDER_VIA]: obj[ORDER_VIA_PARTNER]\r\n                ? obj[ORDER_VIA_PARTNER]\r\n                : obj[ORDER_VIA],\r\n            })\r\n          }\r\n        }\r\n        console.log(\"newDDD\", newData)\r\n      } else {\r\n        newData = data.filter((row) => dropdowns.includes(row[filterBasis]))\r\n      }\r\n\r\n      /// set the dataSources of SALES DIRECT ORDERS TABLE\r\n      const formattedDataList = []\r\n      for (const obj of newData) {\r\n        const datePaid =\r\n          typeof obj[DATE_PAYMENT] === \"undefined\"\r\n            ? null\r\n            : formatDateFromDatabase(obj[DATE_PAYMENT])\r\n        const dateOrderPlaced = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n        const dateStart = formatDateFromDatabase(obj[DATE_START])\r\n        formattedDataList.push({\r\n          [ORDER_VIA]: obj[ORDER_VIA],\r\n          [SOURCE]: obj[SOURCE],\r\n          [TOTAL_DUE]: obj[TOTAL_DUE],\r\n          [ACCOUNT_NUMBER]: obj[ACCOUNT_NUMBER],\r\n          [CUSTOMER]: obj[CUSTOMER],\r\n          [ORDER_NO]: obj[ORDER_NO],\r\n          [UTAK_NO]: obj[UTAK_NO],\r\n          [DATE_PAYMENT]: datePaid ? formatDateSlash(datePaid) : 0,\r\n          [DATE_START]: formatDateSlash(dateStart),\r\n          [DATE_ORDER_PLACED]: formatDateSlash(dateOrderPlaced),\r\n          [AMOUNT_PAID]: datePaid ? obj[AMOUNT_PAID] : 0,\r\n        })\r\n      }\r\n      setDataList(formattedDataList)\r\n\r\n      // dataList sub total\r\n      const subtotalDue = sumArray(formattedDataList, TOTAL_DUE)\r\n      const subAmountPaid = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfDataList([\r\n        {\r\n          [DATE_PAYMENT]: \"\",\r\n          [DATE_ORDER_PLACED]: \"\",\r\n          [ORDER_NO]: \"\",\r\n          [CUSTOMER]: \"Sub Total\",\r\n          [TOTAL_DUE]: subtotalDue.toFixed(2),\r\n          [AMOUNT_PAID]: subAmountPaid.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // orderVia sub total\r\n      const subAmountPaidOrderVia = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfOrderVia([\r\n        {\r\n          [ORDER_VIA]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidOrderVia.toFixed(2),\r\n        },\r\n      ])\r\n\r\n      // sources sub total\r\n      const subAmountPaidSources = sumArray(formattedDataList, AMOUNT_PAID)\r\n      setSubTotalOfSources([\r\n        {\r\n          [ACCOUNT_NUMBER]: \"Sub Total\",\r\n          [AMOUNT_PAID]: subAmountPaidSources,\r\n        },\r\n      ])\r\n\r\n      /// set the dataSources of SUMMARY OF SALES\r\n      const totalDue = sumArray([...newData], TOTAL_DUE)\r\n      const totalAmountPaid = sumArray([...newData], AMOUNT_PAID)\r\n      setGrandTotalDue(totalDue.toFixed(2))\r\n      setGrandAmountPaid(totalAmountPaid.toFixed(2))\r\n      setTargetAmount(totalDue.toFixed(2))\r\n    }\r\n  }\r\n\r\n  const calculatePercent = (paidValue, totalValue) => {\r\n    // if (isSwitch) {\r\n    return paidValue / totalValue\r\n    // } else {\r\n    //   if (targetAmount) {\r\n    //     return grandAmountPaid / targetAmount\r\n    //   } else {\r\n    //     return grandAmountPaid / 0\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  const columnsOfOrders = [\r\n    {\r\n      title: \"DATE SERVED\",\r\n      key: DATE_START,\r\n      dataIndex: DATE_START,\r\n    },\r\n    {\r\n      title: \"ORDER DATE\",\r\n      key: DATE_ORDER_PLACED,\r\n      dataIndex: DATE_ORDER_PLACED,\r\n    },\r\n    {\r\n      title: \"UTAK #\",\r\n      key: UTAK_NO,\r\n      dataIndex: UTAK_NO,\r\n    },\r\n    {\r\n      title: \"VBS #\",\r\n      key: ORDER_NO,\r\n      dataIndex: ORDER_NO,\r\n    },\r\n    {\r\n      title: \"CUSTOMER\",\r\n      key: CUSTOMER,\r\n      dataIndex: CUSTOMER,\r\n    },\r\n    {\r\n      title: \"VIA\",\r\n      key: ORDER_VIA,\r\n      dataIndex: ORDER_VIA,\r\n    },\r\n    {\r\n      title: \"TOTAL\",\r\n      key: TOTAL_DUE,\r\n      dataIndex: TOTAL_DUE,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n    {\r\n      title: \"AMT PAID\",\r\n      key: AMOUNT_PAID,\r\n      dataIndex: AMOUNT_PAID,\r\n      align: \"right\",\r\n      render: (value) => {\r\n        return <a>{thousandsSeparators(value)}</a>\r\n      },\r\n    },\r\n  ]\r\n\r\n  const getPageMargins = () => {\r\n    return `@page { margin: 1rem 1rem 1rem 1rem !important; }`\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <Grid padding=\"1rem\">\r\n          <Flex justifyContent=\"center\">\r\n            <div style={{ padding: \"1rem\", flex: 1 }}>\r\n              <Button\r\n                icon={<AiOutlineArrowLeft />}\r\n                size=\"large\"\r\n                shape=\"circle\"\r\n                type=\"primary\"\r\n                danger\r\n                onClick={back}\r\n              />\r\n            </div>\r\n            <RangePicker\r\n              showTime={false}\r\n              value={[date, dateTo]}\r\n              format=\"MM/DD/YYYY\"\r\n              onChange={(date) => {\r\n                if (date) {\r\n                  setDate(date[0])\r\n                  setDateTo(date[1])\r\n                }\r\n              }}\r\n            />\r\n            <div style={{ padding: \"1rem\" }}>{formatDateLong(date._d)}</div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretLeft />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"minus\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ padding: \"1rem\" }}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<AiFillCaretRight />}\r\n                size=\"medium\"\r\n                onClick={() => {\r\n                  const _date = addMinusDay({\r\n                    action: \"add\",\r\n                    date: date._d,\r\n                    days: 1,\r\n                  })\r\n                  setDate(dateFormat(_date))\r\n                }}\r\n              />\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n        <Grid padding=\" 1rem 4rem\">\r\n          <h1>{title}</h1>\r\n          <Table\r\n            dataSource={[...dataList, ...subTotalOfDataList]}\r\n            columns={columnsOfOrders}\r\n            pagination={false}\r\n          />\r\n        </Grid>\r\n        <Grid padding=\"1rem 4rem\">\r\n          <h1>SUMMARY OF SALES</h1>\r\n          <Flex\r\n            alignItems=\"flex-start\"\r\n            justifyContent=\"flex-end\"\r\n            flexFlow=\"row\"\r\n          >\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ORDER_VIA,\r\n                    AMOUNT_PAID\r\n                  ),\r\n                  ...subTotalOfOrderVia,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"ORDER VIA\",\r\n                    key: \"orderVia\",\r\n                    dataIndex: \"orderVia\",\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n            <Item>\r\n              <Table\r\n                showHeader={false}\r\n                pagination={false}\r\n                dataSource={[\r\n                  ...sumArrayOfObjectsGrouping(\r\n                    dataList,\r\n                    ACCOUNT_NUMBER,\r\n                    AMOUNT_PAID\r\n                  ).filter((obj) => {\r\n                    if (parseInt(obj[AMOUNT_PAID]) > 0) {\r\n                      return obj\r\n                    }\r\n                  }),\r\n                  ...subTotalOfSources,\r\n                ]}\r\n                columns={[\r\n                  {\r\n                    title: \"SOURCES\",\r\n                    key: ACCOUNT_NUMBER,\r\n                    dataIndex: ACCOUNT_NUMBER,\r\n                  },\r\n                  {\r\n                    title: \"AMOUNT PAID\",\r\n                    key: \"amountPaid\",\r\n                    dataIndex: \"amountPaid\",\r\n                    align: \"right\",\r\n                    render: (value) => {\r\n                      return <a>{thousandsSeparators(value)}</a>\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </Item>\r\n\r\n            {/* this is the percentage portion */}\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n                marginTop: \"-5rem\",\r\n              }}\r\n            >\r\n              <Flex justifyContent=\"flex-end\">\r\n                <div style={{ width: \"15rem\" }}>\r\n                  <LiquidChart\r\n                    percent={() =>\r\n                      calculatePercent(grandAmountPaid, grandTotalDue)\r\n                    }\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"green\">Target</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[0])}\r\n                      </span>\r\n                      <span style={{ marginLeft: \"6rem\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[0]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"red\">Below</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[1])}\r\n                      </span>\r\n                      <span style={{ marginLeft: \"6rem\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[1]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex flexFlow=\"column\" alignItems=\"flex-start\">\r\n                    <Tag color=\"orange\">Above</Tag>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginLeft: \".2rem\" }}>\r\n                        {thousandsSeparators(targets[2])}\r\n                      </span>\r\n                      <span style={{ float: \"left\" }}>{`${(\r\n                        calculatePercent(grandAmountPaid, targets[2]) * 100\r\n                      ).toFixed(0)}%`}</span>\r\n                    </div>\r\n                  </Flex>\r\n                </div>\r\n              </Flex>\r\n            </div>\r\n          </Flex>\r\n        </Grid>\r\n      </div>\r\n      {/* this is print */}\r\n      <div style={{ position: \"fixed\", right: 0, bottom: 0, padding: \"1rem\" }}>\r\n        <Print\r\n          component={\r\n            <div>\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SERVED ORDERS\r\n                </thead>\r\n                <tbody style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      {columnsOfOrders.map((field) => {\r\n                        return <th>{field?.title}</th>\r\n                      })}\r\n                    </tr>\r\n                    {[...dataList].reverse().map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    {subTotalOfDataList.map((data) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (dataList.length + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          {columnsOfOrders.map((field) => {\r\n                            return (\r\n                              <td\r\n                                align={\r\n                                  field.key === AMOUNT_PAID ||\r\n                                  field.key === TOTAL_DUE\r\n                                    ? \"right\"\r\n                                    : \"left\"\r\n                                }\r\n                              >\r\n                                {data[field.key]}\r\n                              </td>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n              <br />\r\n              <table style={{ width: \"100%\" }}>\r\n                <thead style={{ fontSize: \"10\", fontWeight: \"bolder\" }}>\r\n                  SUMMARY OF SALES\r\n                </thead>\r\n                <tbody\r\n                  style={{ fontSize: \"8px\", display: \"flex\", width: \"100%\" }}\r\n                >\r\n                  <table\r\n                    style={{\r\n                      width: \"100%\",\r\n                      fontSize: \"8px\",\r\n                      marginRight: \"1rem\",\r\n                    }}\r\n                    border=\"1\"\r\n                  >\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>ORDER VIA</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ].map((data, index) => {\r\n                      return (\r\n                        <tr\r\n                          style={\r\n                            (index + 1) % 2 === 0\r\n                              ? { backgroundColor: \"white\" }\r\n                              : { backgroundColor: \"#999\" }\r\n                          }\r\n                        >\r\n                          <td>{data[ORDER_VIA]}</td>\r\n                          <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                  <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n                    <tr style={{ width: \"100%\" }}>\r\n                      <th>RECEIVING ACCT</th>\r\n                      <th>AMOUNT PAID</th>\r\n                    </tr>\r\n                    {[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ACCOUNT_NUMBER,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ]\r\n                      .filter((obj) => {\r\n                        if (parseInt(obj[AMOUNT_PAID]) > 0) {\r\n                          return obj\r\n                        }\r\n                      })\r\n                      .map((data, index) => {\r\n                        return (\r\n                          <tr\r\n                            style={\r\n                              (index + 1) % 2 === 0\r\n                                ? { backgroundColor: \"white\" }\r\n                                : { backgroundColor: \"#999\" }\r\n                            }\r\n                          >\r\n                            <td>{data[ACCOUNT_NUMBER]}</td>\r\n                            <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                          </tr>\r\n                        )\r\n                      })}\r\n                  </table>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          }\r\n          button={<AiFillPrinter fontSize=\"2.5rem\" />}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ServedReportType\r\n\r\n{\r\n  /* <Grid>\r\n              <div>\r\n                <h4>VITOS BBQ DAILY REPORT</h4>\r\n              </div>\r\n              <Grid>\r\n                <h5>SERVED ORDER</h5>\r\n                <table>\r\n                  <thead>\r\n                    {columnsOfOrders.map((data) => (\r\n                      <th>{data.title}</th>\r\n                    ))}\r\n                  </thead>\r\n                  <tbody>\r\n                    {[...dataList, ...subTotalOfDataList].map((data) => {\r\n                      return (\r\n                        <tr>\r\n                          {Object.keys(data).map((field) => (\r\n                            <td>{data[field]}</td>\r\n                          ))}\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                    <tr>\r\n                      <td>data 1</td>\r\n                      <td>data 2</td>\r\n                      <td>data 3</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <Table\r\n                  size=\"small\"\r\n                  dataSource={[...dataList, ...subTotalOfDataList]}\r\n                  columns={columnsOfOrders}\r\n                  pagination={false}\r\n                />\r\n              </Grid>\r\n              <Grid>\r\n                <h5>SUMMARY OF SALES</h5>\r\n                <Flex alignItems=\"flex-start\">\r\n                  <Table\r\n                    size=\"small\"\r\n                    showHeader={false}\r\n                    pagination={false}\r\n                    dataSource={[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfOrderVia,\r\n                    ]}\r\n                    columns={[\r\n                      {\r\n                        title: \"ORDER VIA\",\r\n                        key: \"orderVia\",\r\n                        dataIndex: \"orderVia\",\r\n                      },\r\n                      {\r\n                        title: \"AMOUNT PAID\",\r\n                        key: \"amountPaid\",\r\n                        dataIndex: \"amountPaid\",\r\n                        align: \"right\",\r\n                        render: (value) => {\r\n                          return <a>{thousandsSeparators(value)}</a>\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                  <Table\r\n                    showHeader={false}\r\n                    pagination={false}\r\n                    size=\"small\"\r\n                    dataSource={[\r\n                      ...sumArrayOfObjectsGrouping(\r\n                        dataList,\r\n                        ORDER_VIA,\r\n                        AMOUNT_PAID\r\n                      ),\r\n                      ...subTotalOfSources,\r\n                    ]}\r\n                    columns={[\r\n                      {\r\n                        title: \"SOURCES\",\r\n                        key: \"source\",\r\n                        dataIndex: \"source\",\r\n                      },\r\n                      {\r\n                        title: \"AMOUNT PAID\",\r\n                        key: \"amountPaid\",\r\n                        dataIndex: \"amountPaid\",\r\n                        align: \"right\",\r\n                        render: (value) => {\r\n                          return <a>{thousandsSeparators(value)}</a>\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                </Flex>\r\n              </Grid>\r\n            </Grid> */\r\n}\r\n\r\n{\r\n  /* <Flex>\r\n                  <div style={{ flex: 1 }}>\r\n                    <h1>TOTAL AMOUNT PAID</h1>\r\n                  </div>\r\n                  {isSwitch ? (\r\n                    <span style={{ marginRight: \".5rem\" }}>Total Due</span>\r\n                  ) : (\r\n                    <span style={{ marginRight: \".5rem\" }}>Target Amount</span>\r\n                  )}\r\n                  <Switch\r\n                    checked={isSwitch}\r\n                    onChange={() => {\r\n                      setIsSwitch(!isSwitch)\r\n                    }}\r\n                  />\r\n                </Flex> */\r\n}\r\n{\r\n  /* <Flex>\r\n                  <LiquidChart percent={calculatePercent} />\r\n                  <div>\r\n                    <Tag color={isSwitch ? \"#2db7f5\" : \"\"}>\r\n                      {isSwitch ? \"Total Due\" : \"Target Amount\"}\r\n                    </Tag>\r\n                    {isSwitch ? (\r\n                      <div style={{ marginLeft: \".7rem\" }}>\r\n                        {thousandsSeparators(grandTotalDue)}\r\n                      </div>\r\n                    ) : (\r\n                      <div style={{ width: \"10rem\" }}>\r\n                        <Input\r\n                          value={targetAmount}\r\n                          bordered={false}\r\n                          onChange={(e) => setTargetAmount(e.target.value)}\r\n                          onBlur={(e) => {\r\n                            if (\r\n                              Number(e.target.value) < Number(grandAmountPaid)\r\n                            ) {\r\n                              setTargetAmount(grandAmountPaid)\r\n                            }\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    <br />\r\n                    <Tag color=\"#ff4d4f\">Amount Paid</Tag>\r\n                    <div style={{ marginLeft: \".7rem\" }}>\r\n                      {thousandsSeparators(grandAmountPaid)}\r\n                    </div>\r\n                  </div>\r\n                </Flex> */\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\uploads\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\hook.js",
  [
    "1704",
    "1705"
  ],
  "import ScheduleServicess from \"services/firebase/SchedulesServicess\"\r\nimport DropdownServicess from \"services/firebase/DropdownServicess\"\r\nimport useSelectComponentHandler from \"hooks/selectComponentHandler\"\r\nimport useRangeHandler from \"hooks/rangeHandler\"\r\nimport useFindDataHandler from \"hooks/findDataHandler\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport handleAutoFill from \"./handleAutoFill\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { arrayReplace } from \"Restructured/Utilities/arrayFuntions\"\r\nimport moment from \"moment\"\r\nimport useFindDataHandlers from \"./findDataHandler\"\r\n\r\nexport default function useGroupPaymentHook() {\r\n  const format = \"MM/DD/YYYY\"\r\n  // user slice from redux\r\n  const userComponent = useSelector(selectUserSlice)\r\n  // reusableHook from hooks folder for dateFrom and dateTo\r\n  const [rangeProps, rangeHandlerFilteredData, loadRangeHandlerData] =\r\n    useRangeHandler(ScheduleServicess)\r\n\r\n  // find data on firebase dropdown collection\r\n  const [dataHandler] = useFindDataHandlers(\r\n    new DropdownServicess({\r\n      _fieldName: \"name\",\r\n      _fieldValue: \"orderViaPartner\",\r\n    })\r\n  )\r\n  // this selectHandler is dependent on dataHandler\r\n  const [selectHandler] = useSelectComponentHandler(dataHandler.data?.list)\r\n\r\n  // states\r\n  const [searchValue, setSearchValue] = useState(\"\")\r\n  const [filteredData, setFilteredData] = useState([])\r\n  const [cacheFilteredData, setCacheFilteredData] = useState([])\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n  const [isChecked, setIsChecked] = useState(false)\r\n  const [isEditClicked, setIsEditClicked] = useState(true)\r\n  const [isDiscardClicked, setIsDiscardClicked] = useState(true)\r\n  const [additionalInfo, setAdditionalInfo] = useState({\r\n    refNo: \"\",\r\n    datePayment: new Date(),\r\n  })\r\n  useEffect(() => {\r\n    switchHandler(isChecked)\r\n    if (rangeHandlerFilteredData.searchData.length > 0) {\r\n      setIsEditClicked(false)\r\n      setIsDiscardClicked(true)\r\n    } else {\r\n      setIsEditClicked(true)\r\n      setIsDiscardClicked(true)\r\n    }\r\n  }, [rangeHandlerFilteredData.searchData, isChecked])\r\n\r\n  const switchHandler = (value) => {\r\n    setIsChecked(value)\r\n    setCacheFilteredData([])\r\n    setSelectedRows([])\r\n    if (rangeHandlerFilteredData.searchData.length > 0) {\r\n      const _filteredData = [...rangeHandlerFilteredData.searchData]\r\n      if (isChecked) {\r\n        const _newFilteredData = _filteredData.filter(\r\n          (data) => data?.datePayment\r\n        )\r\n        setFilteredData(_newFilteredData)\r\n      } else {\r\n        const _newFilteredData = _filteredData.filter(\r\n          (data) => typeof data?.datePayment === \"undefined\"\r\n        )\r\n        setFilteredData(_newFilteredData)\r\n      }\r\n    } else {\r\n      setFilteredData([])\r\n    }\r\n  }\r\n\r\n  const searchHandler = () => {\r\n    setSelectedRows([])\r\n    setCacheFilteredData([])\r\n    loadRangeHandlerData({\r\n      dateField: \"StartTime\", // required\r\n      orderBy: \"StartTime\", // required\r\n      search: {\r\n        //optional\r\n        partnerMerchantOrderNo: searchValue,\r\n        orderViaPartner: selectHandler.value,\r\n        branch: userComponent?.branches[0],\r\n      },\r\n    })\r\n  }\r\n\r\n  const amountPaidChangeHandler = (e, id) => {\r\n    // const _amountPaidList = [...amountPaidList]\r\n    const _dataIndex = cacheFilteredData.findIndex(\r\n      (dataRow) => dataRow._id === id\r\n    )\r\n    // _amountPaidList[_dataIndex] = e.target.value\r\n    // setAmountPaidList(_amountPaidList)\r\n\r\n    const _cacheFilteredData = { ...cacheFilteredData[_dataIndex] }\r\n    _cacheFilteredData.amountPaid = Number(e.target.value).toFixed(2)\r\n    const newCache = arrayReplace(\r\n      cacheFilteredData,\r\n      _dataIndex,\r\n      _cacheFilteredData\r\n    )\r\n    setCacheFilteredData(newCache)\r\n  }\r\n\r\n  const submitHandler = () => {\r\n    if (selectedRows.length > 0) {\r\n      for (const obj of cacheFilteredData) {\r\n        if (selectedRows.includes(obj._id)) {\r\n          const submissionData = {\r\n            modePayment: obj?.modePayment,\r\n            source: obj?.source,\r\n            accountNumber: obj?.accountNumber,\r\n            amountPaid: obj?.amountPaid,\r\n            datePayment: obj?.datePayment,\r\n            refNo: obj?.refNo,\r\n          }\r\n          const service = new ScheduleServicess({\r\n            _id: obj._id,\r\n            _data: submissionData,\r\n          })\r\n          service.mergeData()\r\n        }\r\n      }\r\n    } else {\r\n      alert(\"no data\")\r\n    }\r\n  }\r\n\r\n  const componentProps = {\r\n    rangeProps,\r\n    searchInputProps: {\r\n      value: searchValue,\r\n      onChange: (e) => setSearchValue(e.target.value),\r\n    },\r\n    selectProps: {\r\n      ...selectHandler,\r\n      loading: dataHandler.isLoading,\r\n      disabled: true,\r\n    },\r\n    searchButtonProps: { onClick: searchHandler },\r\n    refNoProps: {\r\n      value: additionalInfo?.refNo,\r\n      onChange: (e) => {\r\n        setAdditionalInfo({\r\n          ...additionalInfo,\r\n          refNo: e.target.value,\r\n        })\r\n      },\r\n    },\r\n    datePaymentProps: {\r\n      value: moment(additionalInfo.datePayment, format),\r\n      onChange: (date, dateString) => {\r\n        if (!date) return\r\n        setAdditionalInfo({\r\n          ...additionalInfo,\r\n          datePayment: date._d,\r\n        })\r\n      },\r\n    },\r\n    editButtonProps: {\r\n      onClick: () => {\r\n        setIsEditClicked(true)\r\n        setIsDiscardClicked(false)\r\n        setCacheFilteredData([...filteredData])\r\n      },\r\n      disabled: isEditClicked,\r\n    },\r\n    discardButtonProps: {\r\n      onClick: () => {\r\n        setIsDiscardClicked(true)\r\n        setIsEditClicked(!rangeHandlerFilteredData.searchData.length > 0)\r\n        setCacheFilteredData([])\r\n        setSelectedRows([])\r\n      },\r\n      disabled: isDiscardClicked,\r\n    },\r\n    saveButtonProps: {\r\n      onClick: submitHandler,\r\n      disabled: selectedRows.length === 0,\r\n    },\r\n    switchProps: {\r\n      onChange: switchHandler,\r\n      checked: isChecked,\r\n      checkedChildren: \"Paid\",\r\n      unCheckedChildren: \"Unpaid\",\r\n    },\r\n    tableProps: {\r\n      rowSelection: !isDiscardClicked\r\n        ? {\r\n            type: isChecked ? \"radio\" : \"checkbox\",\r\n            onChange: (record) => {\r\n              if (additionalInfo.refNo && additionalInfo.datePayment) {\r\n                const newData = handleAutoFill(\r\n                  record,\r\n                  cacheFilteredData, // this is a copy of the original\r\n                  additionalInfo.refNo,\r\n                  additionalInfo.datePayment,\r\n                  filteredData // this the original data cannot be modified to prevent error\r\n                )\r\n                setSelectedRows(record)\r\n                setCacheFilteredData(newData)\r\n              }\r\n            },\r\n            getCheckboxProps: (record) =>\r\n              additionalInfo.refNo && additionalInfo.datePayment\r\n                ? { disabled: false }\r\n                : { disabled: true },\r\n          }\r\n        : false,\r\n      dataSource:\r\n        cacheFilteredData.length > 0\r\n          ? [\r\n              ...cacheFilteredData.map((data) => {\r\n                return { ...data, key: data._id }\r\n              }),\r\n            ]\r\n          : [\r\n              ...filteredData.map((data) => {\r\n                return { ...data, key: data._id }\r\n              }),\r\n            ],\r\n      columns: [\r\n        {\r\n          title: \"ORDER DATE/TIME\",\r\n          key: \"StartTime\",\r\n          dataIndex: \"StartTime\",\r\n          render: (date) => {\r\n            const formatDate = formatDateFromDatabase(date)\r\n            const dateSlash = formatDateDashWithTime(formatDate)\r\n            return <span>{dateSlash}</span>\r\n          },\r\n        },\r\n        {\r\n          title: \"ORDER #\",\r\n          key: \"orderNo\",\r\n          dataIndex: \"orderNo\",\r\n        },\r\n        {\r\n          title: \"UTAK #\",\r\n          key: \"utakNo\",\r\n          dataIndex: \"utakNo\",\r\n        },\r\n        {\r\n          title: \"PARTNER MERCH ORDER #\",\r\n          key: \"partnerMerchantOrderNo\",\r\n          dataIndex: \"partnerMerchantOrderNo\",\r\n        },\r\n        {\r\n          title: \"CUSTOMER\",\r\n          key: \"customer\",\r\n          dataIndex: \"customer\",\r\n        },\r\n        {\r\n          title: \"REF #\",\r\n          key: \"refNo\",\r\n          dataIndex: \"refNo\",\r\n        },\r\n        {\r\n          title: \"DATE PAID\",\r\n          key: \"datePayment\",\r\n          dataIndex: \"datePayment\",\r\n          render: (date) => {\r\n            if (date) {\r\n              const formatDate = formatDateFromDatabase(date)\r\n              const dateSlash = formatDateDash(formatDate)\r\n              return <span>{dateSlash}</span>\r\n            } else {\r\n              return <></>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"TOTAL DUE\",\r\n          key: \"totalDue\",\r\n          dataIndex: \"totalDue\",\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          key: \"amountPaid\",\r\n          dataIndex: \"amountPaid\",\r\n          align: \"right\",\r\n          render: (value, record) => {\r\n            const _dataIndex = cacheFilteredData.findIndex(\r\n              (dataRow) => dataRow._id === record._id\r\n            )\r\n            return cacheFilteredData.length > 0 &&\r\n              selectedRows.includes(record._id) ? (\r\n              <input\r\n                type=\"number\"\r\n                step=\".00\"\r\n                placeholder=\"0\"\r\n                value={cacheFilteredData[_dataIndex]?.amountPaid}\r\n                onChange={(e) => {\r\n                  amountPaidChangeHandler(e, record._id)\r\n                }}\r\n              />\r\n            ) : (\r\n              <span>{value || \"0.00\"}</span>\r\n            )\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  }\r\n\r\n  const dataResponses = {\r\n    filteredData,\r\n    selectData: dataHandler?.data?.list || [],\r\n    selectedRows,\r\n  }\r\n\r\n  return [componentProps, dataResponses]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\groupPaymentPrint.js",
  [
    "1706",
    "1707",
    "1708",
    "1709",
    "1710",
    "1711",
    "1712",
    "1713"
  ],
  "import { Button, DatePicker, Input } from \"antd\"\r\nimport {\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nimport moment from \"moment\"\r\nimport {\r\n  AiFillCloseCircle,\r\n  AiFillFilter,\r\n  AiFillPrinter,\r\n  AiOutlineClose,\r\n} from \"react-icons/ai\"\r\nimport Print from \"Restructured/Components/Features/Print\"\r\nimport {\r\n  CUSTOMER,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  PARTNER_MERCHANT_ORDER_NO,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\n\r\nconst defaultDate = moment(new Date(), \"MM/DD/YYYY\")\r\nfunction GroupPaymentPrint({ filteredData }) {\r\n  const startDate = formatDateFromDatabase(filteredData[DATE_START])\r\n  const datePayment = formatDateFromDatabase(filteredData[DATE_PAYMENT])\r\n  return (\r\n    <Print\r\n      component={\r\n        <div>\r\n          <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n            <tr style={{ width: \"100%\" }}>\r\n              <th>ORDER DATE/TIME</th>\r\n              <th>ORDER #</th>\r\n              <th>PARTNER MERCH ORDER #</th>\r\n              <th>CUSTOMER</th>\r\n              <th>REF NO</th>\r\n              <th>DATE PAID</th>\r\n              <th align=\"right\">TOTAL DUE</th>\r\n              <th align=\"right\">AMOUNT PAID</th>\r\n            </tr>\r\n            {filteredData.map((data) => {\r\n              return (\r\n                <tr>\r\n                  <td>{formatDateSlash(startDate)}</td>\r\n                  <td>{data[ORDER_NO]}</td>\r\n                  <td>{data[PARTNER_MERCHANT_ORDER_NO]}</td>\r\n                  <td>{data[CUSTOMER]}</td>\r\n                  <td>{data[REF_NO]}</td>\r\n                  <td>{formatDateSlash(datePayment)}</td>\r\n                  <td align=\"right\">{data?.totalDue}</td>\r\n                  <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n            <tr style={{ color: \"red\" }}>\r\n              <td>TOTAL</td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td align=\"right\">\r\n                {sumArray(filteredData, \"totalDue\").toFixed(2)}\r\n              </td>\r\n              <td align=\"right\">\r\n                {sumArray(filteredData, AMOUNT_PAID).toFixed(2)}\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      }\r\n      button={<AiFillPrinter fontSize=\"2rem\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default GroupPaymentPrint\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\base\\index.js",
  [
    "1714"
  ],
  "import db from \"services/firebase\"\r\n\r\nexport default class Commands {\r\n  #collectionName\r\n  #id\r\n  #data\r\n  #fieldName\r\n  #fieldValue\r\n  #orderBy\r\n  constructor(args) {\r\n    const {\r\n      _collectionName,\r\n      _id,\r\n      _data = {},\r\n      _fieldName = \"\",\r\n      _fieldValue = \"\",\r\n      _orderBy = \"\",\r\n    } = args\r\n    this.#collectionName = _collectionName\r\n    this.#id = _id\r\n    this.#data = _data\r\n    this.#fieldName = _fieldName\r\n    this.#fieldValue = _fieldValue\r\n    this.#orderBy = _orderBy\r\n  }\r\n\r\n  async getData() {\r\n    const ref = db.collection(this.#collectionName)\r\n    const snapshot = await ref.get()\r\n    if (snapshot.empty) {\r\n      console.log(\"No matching documents.\")\r\n      return []\r\n    }\r\n\r\n    const data = []\r\n    snapshot.forEach((doc) => {\r\n      data.push({ ...doc.data(), _id: doc.id })\r\n    })\r\n    return data\r\n  }\r\n\r\n  async getDataWithId() {\r\n    if (this.#id) {\r\n      const ref = db.collection(this.#collectionName).doc(this.#id)\r\n      const doc = await ref.get()\r\n      if (!doc.exists) {\r\n        return {}\r\n      } else {\r\n        const data = { ...doc.data() }\r\n        return data\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n\r\n  getDataWithFieldName() {\r\n    return new Promise((resolve, reject) => {\r\n      db.collection(this.#collectionName)\r\n        .where(this.#fieldName, \"==\", this.#fieldValue)\r\n        .orderBy(this.#orderBy, \"desc\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const _dataFetched = []\r\n          querySnapshot.forEach((doc) => {\r\n            const _data = doc.data()\r\n            _dataFetched.push({ ..._data, _id: doc.id })\r\n          })\r\n          resolve(_dataFetched)\r\n        })\r\n        .catch((error) => {\r\n          reject(error)\r\n          console.log(\"Error getting documents: \", error)\r\n        })\r\n    }).catch((error) => {\r\n      console.log(\"code error\", error)\r\n    })\r\n  }\r\n\r\n  async mergeData() {\r\n    const ref = db.collection(this.#collectionName).doc(this.#id)\r\n    const setWithMerge = ref.set(\r\n      {\r\n        ...this.#data,\r\n      },\r\n      { merge: true }\r\n    )\r\n  }\r\n\r\n  async updateData() {\r\n    if (this.#id) {\r\n      console.log(`Updated ${this.#id}`, this.#data)\r\n    }\r\n  }\r\n\r\n  async deleteData() {\r\n    if (this.#id) {\r\n      console.log(`Deleted ${this.#id}`, this.#data)\r\n    }\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dialog\\index.js",
  [
    "1715",
    "1716",
    "1717"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport { Modal, Button } from \"antd\"\r\nimport fields from \"components/fields\"\r\nimport { INPUT } from \"components/fields/types\"\r\nimport { AiOutlinePlus } from \"react-icons/ai\"\r\n\r\nexport default function App(props) {\r\n  const [fieldNames, setFieldNames] = useState({})\r\n  const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true)\r\n  }\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false)\r\n    props.setOthers(fieldNames)\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false)\r\n  }\r\n\r\n  const handleAdd = (index) => {\r\n    const newFieldNames = { ...fieldNames }\r\n    newFieldNames[index] = \"\"\r\n    setFieldNames(newFieldNames)\r\n  }\r\n\r\n  const handleChange = (e, index) => {\r\n    const newFieldNames = { ...fieldNames }\r\n    newFieldNames[index] = e.target.value\r\n    setFieldNames(newFieldNames)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props?.others) {\r\n      let count = 0\r\n      for (const key in props?.others) {\r\n        setFieldNames({ ...fieldNames, [count]: key })\r\n        count = count + 1\r\n      }\r\n    } else {\r\n      setFieldNames({ 0: \"\" })\r\n    }\r\n  }, [props?.others])\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"primary\" onClick={showModal} danger>\r\n        {props.label}\r\n      </Button>\r\n      <Modal\r\n        title=\"Add fields\"\r\n        visible={isModalVisible}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n      >\r\n        {Object.keys(fieldNames).map((fieldName, index) => {\r\n          return (\r\n            <div key={index} style={{ display: \"flex\" }}>\r\n              <div style={{ flex: \".8\" }}>\r\n                {fields[INPUT]({\r\n                  name: fieldName,\r\n                  value: fieldNames[index],\r\n                  onChange: (e) => handleChange(e, index),\r\n                })}\r\n              </div>\r\n              <div\r\n                style={{\r\n                  flex: \".2\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-end\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                {/* {Object.keys(fieldNames).length - 1 === index && (\r\n                  <Button\r\n                    type='secondary'\r\n                    danger\r\n                    shape='circle'\r\n                    onClick={() => handleAdd(index + 1)}\r\n                    icon={<AiOutlinePlus />}\r\n                  />\r\n                )} */}\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\Select\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\sideNav\\1.banner\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\RangePicker\\index.js",
  [
    "1718"
  ],
  "import React from \"react\"\r\nimport { FieldContainer } from \"../styles\"\r\nimport { DatePicker, Space } from \"antd\"\r\nconst { RangePicker } = DatePicker\r\n\r\nfunction CustomTimePicker({\r\n  label,\r\n  onChange,\r\n  value,\r\n  disabled,\r\n  showTime = true,\r\n  format = \"MM/DD/YYYY hh:mm A\",\r\n}) {\r\n  return (\r\n    <FieldContainer>\r\n      <label>{label}</label>\r\n      <RangePicker\r\n        showTime={showTime}\r\n        use12Hours\r\n        format={format}\r\n        minuteStep={30}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n        value={value}\r\n      />\r\n    </FieldContainer>\r\n  )\r\n}\r\n\r\nexport default CustomTimePicker\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\0.login\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\Timepicker\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\handleAutoFill.js",
  [
    "1719"
  ],
  "import { formatDateDash } from \"Restructured/Utilities/dateFormat\"\r\n\r\nconst ifOrigHasRef = (originalData) => {\r\n  if (originalData?.refNo && originalData?.datePayment) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nconst handleAutoFill = (\r\n  checkedId,\r\n  cacheFilteredData,\r\n  refNo,\r\n  datePayment,\r\n  filteredData\r\n) => {\r\n  const result = []\r\n  for (const obj of cacheFilteredData) {\r\n    const originalData = filteredData.find((data) => data._id === obj._id)\r\n    let withPercent = 0\r\n    let totalAmountPaid = 0\r\n    if (originalData?.totalDue) {\r\n      withPercent = Number(originalData?.totalDue) * 0.05\r\n      totalAmountPaid = Number(originalData?.totalDue) - (withPercent + 10)\r\n    }\r\n    if (checkedId.includes(obj?._id)) {\r\n      result.push({\r\n        ...obj,\r\n        modePayment: \"Zap\",\r\n        source: \"Zap\",\r\n        accountNumber: \"BDO / 609\",\r\n        amountPaid: ifOrigHasRef(originalData)\r\n          ? obj?.amountPaid\r\n          : Number(obj?.amountPaid) > 0\r\n          ? Number(obj?.amountPaid).toFixed(2)\r\n          : totalAmountPaid.toFixed(2),\r\n        refNo: ifOrigHasRef(originalData)\r\n          ? refNo\r\n          : obj.refNo\r\n          ? obj.refNo\r\n          : refNo,\r\n        datePayment: ifOrigHasRef(originalData)\r\n          ? datePayment\r\n          : obj.datePayment\r\n          ? obj.datePayment\r\n          : datePayment,\r\n      })\r\n    } else {\r\n      result.push({\r\n        ...obj,\r\n        modePayment: \"\",\r\n        source: \"\",\r\n        accountNumber: \"\",\r\n        amountPaid: originalData?.amountPaid\r\n          ? originalData?.amountPaid\r\n          : \"0.00\",\r\n        refNo: originalData?.refNo ? originalData?.refNo : \"\",\r\n        datePayment: originalData?.datePayment ? originalData?.datePayment : \"\",\r\n      })\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nexport default handleAutoFill\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\uploads\\useGetUploads.js",
  [
    "1720",
    "1721"
  ],
  "import { useEffect, useState } from 'react'\r\nimport { addData, deleteData, getData } from 'services'\r\nimport db, { storage } from 'services/firebase'\r\n\r\nexport function useGetUploads (documentId) {\r\n  const [fileList, setFileList] = useState([\r\n    // {\r\n    //   uid: 'a',\r\n    //   name: 'xxx.png',\r\n    //   status: 'done',\r\n    //   url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n    //   thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n    //   idRef: 'asdfasdfasdf'\r\n    // },\r\n    // {\r\n    //   uid: 'b',\r\n    //   name: 'yyy.png',\r\n    //   status: 'error'\r\n    // }\r\n  ])\r\n\r\n  useEffect(() => {\r\n    loadUploads(documentId)\r\n  }, [documentId])\r\n\r\n  const addUpload = async (data) => {\r\n    const newFileListFilter = fileList.filter(file => file.status !== 'uploading')\r\n    const newFileList = [...newFileListFilter]\r\n    const docRefId = await addData({ collection: 'uploads', data })\r\n    newFileList.push({ ...data, uploadId: docRefId })\r\n    setFileList(newFileList)\r\n  }\r\n\r\n  const handleUpload = (file) => {\r\n    console.log('file', file)\r\n    const newFileList = [...fileList]\r\n    newFileList.push({ name: file?.name, status: 'uploading', uid: file?.uid, percent: 50, url: '' })\r\n    setFileList(newFileList)\r\n\r\n    const uploadTask = storage.ref(`uploads/${documentId}/${file.name}`).put(file)\r\n    uploadTask.on(\r\n      'state_changed',\r\n      snapshot => { },\r\n      error => {\r\n        console.log(error)\r\n      },\r\n      () => {\r\n        storage\r\n          .ref(`uploads/${documentId}`)\r\n          .child(file.name)\r\n          .getDownloadURL()\r\n          .then(url => {\r\n            if (url) {\r\n              const data = { name: file?.name, url, thumbUrl: url, idRef: documentId, status: 'done', uid: file?.uid }\r\n              addUpload(data)\r\n            }\r\n          })\r\n      }\r\n    )\r\n  }\r\n  const handleRemove = (file) => {\r\n    const newFileList = fileList.filter(f => f.uploadId !== file.uploadId)\r\n    setFileList(newFileList)\r\n    // Create a reference to the file to delete\r\n    const deleteTask = storage?.ref(`uploads/${file.idRef}/`).child(file.name)\r\n    // Delete the file\r\n    deleteTask.delete().then(() => {\r\n      deleteData({ id: file.uploadId, collection: 'uploads' })\r\n    }).catch((error) => {\r\n      console.log('delete upload error occured', error)\r\n      // Uh-oh, an error occurred!\r\n    })\r\n  }\r\n  const loadUploads = async (id) => {\r\n    db.collection('uploads')\r\n      .where('idRef', '==', id)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        const newFileList = [...fileList]\r\n        querySnapshot.forEach((doc) => {\r\n          const data = doc.data()\r\n          newFileList.push({ ...data, uploadId: doc.id })\r\n        })\r\n        setFileList([...newFileList])\r\n      })\r\n  }\r\n  return [fileList, handleUpload, handleRemove]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Commons\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\index.js",
  [
    "1722",
    "1723",
    "1724",
    "1725",
    "1726",
    "1727",
    "1728"
  ],
  "import React from \"react\"\r\nimport {\r\n  Modal,\r\n  Button,\r\n  DatePicker,\r\n  Table,\r\n  Space,\r\n  Input,\r\n  Select,\r\n  Card,\r\n  Switch,\r\n  Alert,\r\n  Typography,\r\n  Divider,\r\n} from \"antd\"\r\nimport {\r\n  SearchOutlined,\r\n  ArrowLeftOutlined,\r\n  PrinterFilled,\r\n} from \"@ant-design/icons\"\r\nimport useReportDirectSales from \"./hook\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport PrintComponent from \"./PrintComponent\"\r\nconst { RangePicker } = DatePicker\r\nconst { Title } = Typography\r\n\r\nfunction ReportThirdPartySales({ back }) {\r\n  const [\r\n    {\r\n      rangeProps,\r\n      searchButtonProps,\r\n      tableProps,\r\n      partialTableProps,\r\n      orderViaSummaryTableProps,\r\n      accountNumberSummaryTableProps,\r\n    },\r\n    listWithPartials,\r\n    listWithPartialsTotal,\r\n  ] = useReportDirectSales()\r\n  const style = {\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    padding: \"1rem\",\r\n  }\r\n  return (\r\n    <>\r\n      <Space direction=\"horizontal\" style={style}>\r\n        <Button onClick={back} shape=\"circle\" icon={<ArrowLeftOutlined />} />\r\n        <Space wrap>\r\n          Date Paid:\r\n          <RangePicker {...rangeProps} />\r\n          <Button\r\n            {...searchButtonProps}\r\n            danger\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<SearchOutlined />}\r\n          />\r\n        </Space>\r\n      </Space>\r\n      <Space direction=\"vertical\" style={style}>\r\n        <Title level={3}>DAILY SALES THIRD PARTY ORDER</Title>\r\n        <Table\r\n          {...tableProps}\r\n          expandable={{\r\n            expandedRowRender: (record) => {\r\n              const partials =\r\n                record?.partials !== \"__\"\r\n                  ? record?.partials.map((_data) => {\r\n                      const dateStart = formatDateFromDatabase(_data.date)\r\n                      return {\r\n                        datePayment: formatDateSlash(dateStart),\r\n                        StartTime: \"\",\r\n                        totalDue: \"\",\r\n                        dateOrderPlaced: \"\",\r\n                        partials: \"\",\r\n                        customer: \"\",\r\n                        amountPaid: Number(_data?.amount),\r\n                      }\r\n                    })\r\n                  : []\r\n              return (\r\n                <Table\r\n                  {...partialTableProps}\r\n                  dataSource={[...partials]}\r\n                ></Table>\r\n              )\r\n            },\r\n            rowExpandable: (record) => {\r\n              if (typeof record?.partials === \"object\") {\r\n                if (record?.partials.length > 0) {\r\n                  return true\r\n                } else {\r\n                  return false\r\n                }\r\n              } else {\r\n                return false\r\n              }\r\n            },\r\n          }}\r\n        />\r\n        <br />\r\n        <Title level={3}>SUMMARY OF SALES</Title>\r\n        <Space direction=\"horizontal\" align=\"baseline\">\r\n          <Table {...orderViaSummaryTableProps} />\r\n          <Divider type=\"vertical\" />\r\n          <Table {...accountNumberSummaryTableProps} />\r\n        </Space>\r\n      </Space>\r\n\r\n      <PrintComponent\r\n        tableProps={tableProps}\r\n        orderViaSummaryTableProps={orderViaSummaryTableProps}\r\n        accountNumberSummaryTableProps={accountNumberSummaryTableProps}\r\n        listWithPartials={[...listWithPartials]}\r\n        listWithPartialsTotal={listWithPartialsTotal}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReportThirdPartySales\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\DropdownServicess.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\selectComponentHandler.js",
  [],
  [
    "1729",
    "1730"
  ],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\SchedulesServicess.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\rangeHandler.js",
  [
    "1731",
    "1732",
    "1733"
  ],
  "import moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function useRangeHandler(Service) {\r\n  // example instance class: SchedulerServicess\r\n  // how to call hook example: const [rangeHandler, loadData] = useRangeHandler(ScheduleServicess)\r\n  const format = \"MM/DD/YYYY\"\r\n  const defaultDate = moment(new Date(), format)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState([defaultDate, defaultDate])\r\n  const [rangeData, setRangeData] = useState([])\r\n  const [searchData, setSearchData] = useState([])\r\n\r\n  const loadData = async (args) => {\r\n    const { search = null, dateField, orderBy } = args\r\n    setIsLoading(true)\r\n    let dateRange = []\r\n    if (value.length > 0) {\r\n      dateRange = [value[0]._d, value[1]._d]\r\n      const _data = await new Service({\r\n        _dateField: dateField,\r\n        _orderBy: orderBy,\r\n        _dateRange: dateRange,\r\n      }).getRange()\r\n      if (_data.length > 0 && search) {\r\n        const _searchData = _data.filter((data) => {\r\n          let filterResult = true\r\n          for (const key in search) {\r\n            if (search[key] && data[key]) {\r\n              if (data[key].includes(search[key])) {\r\n                // console.log(\"result\", true)\r\n                filterResult = filterResult && true\r\n              } else {\r\n                // console.log(\"result\", false)\r\n                filterResult = filterResult && false\r\n              }\r\n            } else {\r\n              if (search[key]) {\r\n                filterResult = filterResult && false\r\n              } else {\r\n                filterResult = filterResult && true\r\n              }\r\n            }\r\n          }\r\n          return filterResult\r\n        })\r\n        console.log(\"_searchData\", _searchData)\r\n        setSearchData(_searchData)\r\n      } else {\r\n        setSearchData([])\r\n      }\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const onChange = (value) => {\r\n    if (value) {\r\n      setValue(value)\r\n    }\r\n  }\r\n\r\n  return [\r\n    { showTime: false, format, value, onChange }, // rangeComponentHandler\r\n    { value /*rangeData*/, searchData }, // filtered data result\r\n    loadData,\r\n    isLoading,\r\n    // load data example : loadRangeHandlerData({\r\n    //   dateField: \"StartTime\", // required\r\n    //   orderBy: \"StartTime\", // required\r\n    //   search: { //optional\r\n    //     partnerMerchantOrderNo: searchValue,\r\n    //     orderViaPartner: selectHandler.value,\r\n    //   },\r\n    //   specialSearch: \"datePayment\", // use in filter together with search check if value already has a payment //optional\r\n    // })\r\n  ]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\PrintComponent.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportThirdPartySales\\hook.js",
  [
    "1734",
    "1735",
    "1736"
  ],
  "import { Tag, Space } from \"antd\"\r\nimport useRangeHandler from \"hooks/rangeHandler\"\r\nimport ScheduleServicess from \"services/firebase/SchedulesServicess\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { useSelector } from \"react-redux\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray, {\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport { useState, useEffect } from \"react\"\r\n\r\nexport default function useReportDirectSales() {\r\n  const userComponent = useSelector(selectUserSlice)\r\n  // reusableHook from hooks folder for dateFrom and dateTo\r\n  const [rangeProps, rangeHandlerFilteredData, loadRangeHandlerData] =\r\n    useRangeHandler(ScheduleServicess)\r\n\r\n  // states\r\n  const [filteredData, setFilteredData] = useState([])\r\n  const [listWithPartials, setListWithPartials] = useState([])\r\n  const [listWithPartialsTotal, setListWithPartialsTotal] = useState([])\r\n  const [orderViaSummary, setOrderViaSummary] = useState([])\r\n  const [accountNumberSummary, setAccountNumberSummary] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (rangeHandlerFilteredData.searchData.length > 0) {\r\n      directOrderHandler(rangeHandlerFilteredData.searchData)\r\n      listWithPartialsHandler(rangeHandlerFilteredData.searchData)\r\n    } else {\r\n      setFilteredData([])\r\n      setOrderViaSummary([])\r\n      setAccountNumberSummary([])\r\n    }\r\n  }, [rangeHandlerFilteredData.searchData])\r\n\r\n  const directOrderHandler = (data) => {\r\n    const _newData = []\r\n\r\n    // to move orderViaPartner value to orderVia property\r\n    for (const obj of data) {\r\n      if (obj?.orderViaPartner && obj?.status !== \"CANCELLED\") {\r\n        const newObj = {\r\n          ...obj,\r\n          orderVia: obj?.orderViaPartner,\r\n        }\r\n        newObj.orderViaPartner = null\r\n        _newData.push({\r\n          ...newObj,\r\n        })\r\n      }\r\n    }\r\n\r\n    console.log(\"_newData\", _newData)\r\n    const totalDue = sumArray(_newData, \"totalDue\")\r\n    const amountPaid = sumArray(_newData, \"amountPaid\")\r\n\r\n    _newData.push({\r\n      datePayment: \"TOTAL\",\r\n      StartTime: \"__\",\r\n      orderNo: \"__\",\r\n      customer: \"__\",\r\n      partials: \"__\",\r\n      totalDue: Number(totalDue).toFixed(2),\r\n      amountPaid: Number(amountPaid).toFixed(2),\r\n    })\r\n    setListWithPartialsTotal([\r\n      {\r\n        datePayment: \"TOTAL\",\r\n        StartTime: \"__\",\r\n        orderNo: \"__\",\r\n        customer: \"__\",\r\n        partials: \"__\",\r\n        totalDue: Number(totalDue).toFixed(2),\r\n        amountPaid: Number(amountPaid).toFixed(2),\r\n      },\r\n    ])\r\n    setFilteredData(\r\n      _newData.map((_data) => {\r\n        return { ..._data, key: _data?.orderNo }\r\n      })\r\n    )\r\n  }\r\n\r\n  const listWithPartialsHandler = (data) => {\r\n    const _newData = []\r\n\r\n    // to move orderViaPartner value to orderVia property\r\n    for (const obj of data) {\r\n      if (obj?.orderViaPartner && obj?.status !== \"CANCELLED\") {\r\n        const newObj = {\r\n          ...obj,\r\n          orderVia: obj?.orderViaPartner,\r\n        }\r\n        newObj.orderViaPartner = null\r\n        _newData.push({\r\n          ...newObj,\r\n        })\r\n      }\r\n    }\r\n\r\n    const withPartials = []\r\n    for (const obj of _newData) {\r\n      if (typeof obj?.partials === \"object\") {\r\n        if (obj?.partials.length > 0) {\r\n          let count = 0\r\n          for (const partialObj of obj?.partials) {\r\n            withPartials.push({\r\n              ...obj,\r\n              datePayment: partialObj?.date,\r\n              modePayment: partialObj?.modePayment,\r\n              accountNumber: partialObj?.accountNumber,\r\n              source: partialObj?.source,\r\n              refNo: partialObj.refNo,\r\n              amountPaid: Number(partialObj?.amount),\r\n              totalDue: count ? \"__\" : obj?.totalDue,\r\n              partials: \"Partial\",\r\n            })\r\n            count = count + 1\r\n          }\r\n        } else {\r\n          withPartials.push({ ...obj, partials: \"Full\" })\r\n        }\r\n      } else {\r\n        withPartials.push({ ...obj, partials: \"Full\" })\r\n      }\r\n    }\r\n\r\n    const orderViaSummary = sumArrayOfObjectsGrouping(\r\n      withPartials,\r\n      \"orderVia\",\r\n      \"amountPaid\"\r\n    )\r\n    const accountNumberSummary = sumArrayOfObjectsGrouping(\r\n      withPartials,\r\n      \"accountNumber\",\r\n      \"amountPaid\"\r\n    )\r\n    setListWithPartials(withPartials)\r\n    setOrderViaSummary(orderViaSummary)\r\n    setAccountNumberSummary(accountNumberSummary)\r\n  }\r\n  console.log(\"listWithPartials\", listWithPartials)\r\n  const searchHandler = () => {\r\n    loadRangeHandlerData({\r\n      dateField: \"datePayment\", // required\r\n      orderBy: \"datePayment\", // required\r\n      search: {\r\n        //optional\r\n        branch: userComponent?.branches[0],\r\n      },\r\n    })\r\n  }\r\n  const componentProps = {\r\n    rangeProps,\r\n    searchButtonProps: { onClick: searchHandler },\r\n    tableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      dataSource: [...filteredData],\r\n      columns: [\r\n        {\r\n          title: \"DATE PAID\",\r\n          key: \"datePayment\",\r\n          dataIndex: \"datePayment\",\r\n          render: (date) => {\r\n            if (date === \"TOTAL\") {\r\n              return date\r\n            }\r\n            if (date) {\r\n              const formatDate = formatDateFromDatabase(date)\r\n              const dateSlash = formatDateSlash(formatDate)\r\n              return <span>{dateSlash || date}</span>\r\n            } else {\r\n              return <></>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"ORDER DATE\",\r\n          key: \"StartTime\",\r\n          dataIndex: \"StartTime\",\r\n          render: (date) => {\r\n            if (date === \"__\") {\r\n              return date\r\n            }\r\n            const formatDate = formatDateFromDatabase(date)\r\n            const dateSlash = formatDateSlash(formatDate)\r\n            return <span>{dateSlash || \"__\"}</span>\r\n          },\r\n        },\r\n        {\r\n          title: \"ORDER #\",\r\n          key: \"orderNo\",\r\n          dataIndex: \"orderNo\",\r\n          editable: true,\r\n        },\r\n        {\r\n          title: \"UTAK #\",\r\n          key: \"utakNo\",\r\n          dataIndex: \"utakNo\",\r\n          editable: true,\r\n        },\r\n        {\r\n          title: \"CUSTOMER\",\r\n          key: \"customer\",\r\n          dataIndex: \"customer\",\r\n        },\r\n        {\r\n          title: \"PAYMENT TYPE\",\r\n          key: \"partials\",\r\n          dataIndex: \"partials\",\r\n          align: \"right\",\r\n          onClick: () => {},\r\n          render: (data) => {\r\n            if (data) {\r\n              if (data === \"__\") {\r\n                return data\r\n              }\r\n              if (data.length > 0) {\r\n                return <Tag>Partial</Tag>\r\n              }\r\n              return <Tag>Full</Tag>\r\n              // return (\r\n              // <Space wrap style={{ cursor: \"pointer\" }}>\r\n              //   {data.map((obj) => (\r\n              //     <Tag color=\"success\">{Number(obj?.amount).toFixed(2)}</Tag>\r\n              //   ))}\r\n              // </Space>\r\n              // )\r\n            } else {\r\n              return <Tag>Full</Tag>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"TOTAL DUE\",\r\n          key: \"totalDue\",\r\n          dataIndex: \"totalDue\",\r\n          align: \"right\",\r\n          render: (data) => {\r\n            return Number(data).toFixed(2)\r\n          },\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          key: \"amountPaid\",\r\n          dataIndex: \"amountPaid\",\r\n          align: \"right\",\r\n          render: (data) => {\r\n            return Number(data).toFixed(2)\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    partialTableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      showHeader: false,\r\n      columns: [\r\n        {\r\n          title: \"DATE PAID\",\r\n          key: \"datePayment\",\r\n          dataIndex: \"datePayment\",\r\n          render: (date) => {\r\n            if (date === \"TOTAL\") {\r\n              return date\r\n            }\r\n            if (date) {\r\n              const formatDate = formatDateFromDatabase(date)\r\n              const dateSlash = formatDateSlash(formatDate)\r\n              return (\r\n                <span style={{ marginLeft: \"1rem\" }}>{dateSlash || date}</span>\r\n              )\r\n            } else {\r\n              return <></>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"ORDER DATE\",\r\n          key: \"StartTime\",\r\n          dataIndex: \"StartTime\",\r\n        },\r\n        {\r\n          title: \"ORDER #\",\r\n          key: \"orderNo\",\r\n          dataIndex: \"orderNo\",\r\n        },\r\n        {\r\n          title: \"CUSTOMER\",\r\n          key: \"customer\",\r\n          dataIndex: \"customer\",\r\n        },\r\n        {\r\n          title: \"PARTIAL PAYMENTS\",\r\n          key: \"partials\",\r\n          dataIndex: \"partials\",\r\n        },\r\n        {\r\n          title: \"TOTAL DUE\",\r\n          key: \"totalDue\",\r\n          dataIndex: \"totalDue\",\r\n          align: \"right\",\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          key: \"amountPaid\",\r\n          dataIndex: \"amountPaid\",\r\n          align: \"right\",\r\n          render: (data) => {\r\n            return Number(data).toFixed(2)\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    orderViaSummaryTableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      columns: [\r\n        { title: \"ORDER VIA\", dataIndex: \"orderVia\", key: \"orderVia\" },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          dataIndex: \"amountPaid\",\r\n          key: \"amountPaid\",\r\n          align: \"right\",\r\n        },\r\n      ],\r\n      dataSource: [...orderViaSummary],\r\n    },\r\n    accountNumberSummaryTableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      columns: [\r\n        {\r\n          title: \"ACCOUNT #\",\r\n          dataIndex: \"accountNumber\",\r\n          key: \"accountNumber\",\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          dataIndex: \"amountPaid\",\r\n          key: \"amountPaid\",\r\n          align: \"right\",\r\n        },\r\n      ],\r\n      dataSource: [...accountNumberSummary],\r\n    },\r\n  }\r\n  return [componentProps, listWithPartials, listWithPartialsTotal]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\PrintComponent.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsReportDirectSales\\hook.js",
  [
    "1737",
    "1738",
    "1739"
  ],
  "import { Tag, Space } from \"antd\"\r\nimport useRangeHandler from \"hooks/rangeHandler\"\r\nimport ScheduleServicess from \"services/firebase/SchedulesServicess\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { useSelector } from \"react-redux\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray, {\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport { useState, useEffect } from \"react\"\r\n\r\nexport default function useReportDirectSales() {\r\n  const userComponent = useSelector(selectUserSlice)\r\n  // reusableHook from hooks folder for dateFrom and dateTo\r\n  const [rangeProps, rangeHandlerFilteredData, loadRangeHandlerData] =\r\n    useRangeHandler(ScheduleServicess)\r\n\r\n  // states\r\n  const [filteredData, setFilteredData] = useState([])\r\n  const [listWithPartials, setListWithPartials] = useState([])\r\n  const [listWithPartialsTotal, setListWithPartialsTotal] = useState([])\r\n  const [orderViaSummary, setOrderViaSummary] = useState([])\r\n  const [accountNumberSummary, setAccountNumberSummary] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (rangeHandlerFilteredData.searchData.length > 0) {\r\n      directOrderHandler(rangeHandlerFilteredData.searchData)\r\n      listWithPartialsHandler(rangeHandlerFilteredData.searchData)\r\n    } else {\r\n      setFilteredData([])\r\n      setOrderViaSummary([])\r\n      setAccountNumberSummary([])\r\n    }\r\n  }, [rangeHandlerFilteredData.searchData])\r\n\r\n  const directOrderHandler = (data) => {\r\n    // const _data = data.filter((obj) => obj?.orderVia && obj?.status !== \"CANCELLED\")\r\n    const _newData = data.filter(\r\n      (obj) => obj?.orderVia && obj?.status !== \"CANCELLED\"\r\n    )\r\n    // to remove an object in array that is not yet paid\r\n    // for (const obj of _data) {\r\n    //   if (obj?.amountPaid) {\r\n    //     if (Number(obj?.amountPaid) > 0) _newData.push({ ...obj })\r\n    //   }\r\n    // }\r\n\r\n    console.log(\"_newData\", _newData)\r\n    const totalDue = sumArray(_newData, \"totalDue\")\r\n    const amountPaid = sumArray(_newData, \"amountPaid\")\r\n\r\n    _newData.push({\r\n      datePayment: \"TOTAL\",\r\n      StartTime: \"__\",\r\n      orderNo: \"__\",\r\n      customer: \"__\",\r\n      partials: \"__\",\r\n      totalDue: Number(totalDue).toFixed(2),\r\n      amountPaid: Number(amountPaid).toFixed(2),\r\n    })\r\n    setListWithPartialsTotal([\r\n      {\r\n        datePayment: \"TOTAL\",\r\n        StartTime: \"__\",\r\n        orderNo: \"__\",\r\n        customer: \"__\",\r\n        partials: \"__\",\r\n        totalDue: Number(totalDue).toFixed(2),\r\n        amountPaid: Number(amountPaid).toFixed(2),\r\n      },\r\n    ])\r\n    setFilteredData(\r\n      _newData.map((_data) => {\r\n        return { ..._data, key: _data?.orderNo }\r\n      })\r\n    )\r\n  }\r\n\r\n  const listWithPartialsHandler = (data) => {\r\n    const _newData = data.filter(\r\n      (obj) => obj.orderVia && obj?.status !== \"CANCELLED\"\r\n    )\r\n    console.log(\"withPartialsNewData\", _newData)\r\n    const withPartials = []\r\n    for (const obj of _newData) {\r\n      if (typeof obj?.partials === \"object\") {\r\n        if (obj?.partials.length > 0) {\r\n          let count = 0\r\n          for (const partialObj of obj?.partials) {\r\n            withPartials.push({\r\n              ...obj,\r\n              datePayment: partialObj?.date,\r\n              modePayment: partialObj?.modePayment,\r\n              accountNumber: partialObj?.accountNumber,\r\n              source: partialObj?.source,\r\n              refNo: partialObj.refNo,\r\n              amountPaid: Number(partialObj?.amount),\r\n              totalDue: count ? \"__\" : obj?.totalDue,\r\n              partials: \"Partial\",\r\n            })\r\n            count = count + 1\r\n          }\r\n        } else {\r\n          withPartials.push({ ...obj, partials: \"Full\" })\r\n        }\r\n      } else {\r\n        withPartials.push({ ...obj, partials: \"Full\" })\r\n      }\r\n    }\r\n    console.log(\"withPartials\", withPartials)\r\n    const orderViaSummary = sumArrayOfObjectsGrouping(\r\n      withPartials,\r\n      \"orderVia\",\r\n      \"amountPaid\"\r\n    )\r\n    const accountNumberSummary = sumArrayOfObjectsGrouping(\r\n      withPartials,\r\n      \"accountNumber\",\r\n      \"amountPaid\"\r\n    )\r\n    setListWithPartials(withPartials)\r\n    setOrderViaSummary(orderViaSummary)\r\n    setAccountNumberSummary(accountNumberSummary)\r\n  }\r\n\r\n  const searchHandler = () => {\r\n    loadRangeHandlerData({\r\n      dateField: \"datePayment\", // required\r\n      orderBy: \"datePayment\", // required\r\n      search: {\r\n        //optional\r\n        branch: userComponent?.branches[0],\r\n      },\r\n    })\r\n  }\r\n  const componentProps = {\r\n    rangeProps,\r\n    searchButtonProps: { onClick: searchHandler },\r\n    tableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      dataSource: [...filteredData],\r\n      columns: [\r\n        {\r\n          title: \"DATE PAID\",\r\n          key: \"datePayment\",\r\n          dataIndex: \"datePayment\",\r\n          render: (date) => {\r\n            if (date === \"TOTAL\") {\r\n              return date\r\n            }\r\n            if (date) {\r\n              const formatDate = formatDateFromDatabase(date)\r\n              const dateSlash = formatDateSlash(formatDate)\r\n              return <span>{dateSlash || date}</span>\r\n            } else {\r\n              return <></>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"ORDER DATE\",\r\n          key: \"StartTime\",\r\n          dataIndex: \"StartTime\",\r\n          render: (date) => {\r\n            if (date === \"__\") {\r\n              return date\r\n            }\r\n            const formatDate = formatDateFromDatabase(date)\r\n            const dateSlash = formatDateSlash(formatDate)\r\n            return <span>{dateSlash || \"__\"}</span>\r\n          },\r\n        },\r\n        {\r\n          title: \"UTAK #\",\r\n          key: \"utakNo\",\r\n          dataIndex: \"utakNo\",\r\n        },\r\n        {\r\n          title: \"VBS #\",\r\n          key: \"orderNo\",\r\n          dataIndex: \"orderNo\",\r\n          editable: true,\r\n        },\r\n        {\r\n          title: \"CUSTOMER\",\r\n          key: \"customer\",\r\n          dataIndex: \"customer\",\r\n        },\r\n        {\r\n          title: \"PAYMENT TYPE\",\r\n          key: \"partials\",\r\n          dataIndex: \"partials\",\r\n          align: \"right\",\r\n          onClick: () => {},\r\n          render: (data) => {\r\n            if (data) {\r\n              if (data === \"__\") {\r\n                return data\r\n              }\r\n              if (data.length > 0) {\r\n                return <Tag>Partial</Tag>\r\n              }\r\n              return <Tag>Full</Tag>\r\n              // return (\r\n              //   <Space wrap style={{ cursor: \"pointer\" }}>\r\n              //     {data.map((obj) => (\r\n              //       <Tag color=\"success\">{Number(obj?.amount).toFixed(2)}</Tag>\r\n              //     ))}\r\n              //   </Space>\r\n              // )\r\n            } else {\r\n              return <Tag>Full</Tag>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"TOTAL DUE\",\r\n          key: \"totalDue\",\r\n          dataIndex: \"totalDue\",\r\n          align: \"right\",\r\n          render: (data) => {\r\n            return Number(data).toFixed(2)\r\n          },\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          key: \"amountPaid\",\r\n          dataIndex: \"amountPaid\",\r\n          align: \"right\",\r\n          render: (data) => {\r\n            return Number(data).toFixed(2)\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    partialTableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      showHeader: false,\r\n      columns: [\r\n        {\r\n          title: \"DATE PAID\",\r\n          key: \"datePayment\",\r\n          dataIndex: \"datePayment\",\r\n          render: (date) => {\r\n            if (date === \"TOTAL\") {\r\n              return date\r\n            }\r\n            if (date) {\r\n              const formatDate = formatDateFromDatabase(date)\r\n              const dateSlash = formatDateSlash(formatDate)\r\n              return (\r\n                <span style={{ marginLeft: \"1rem\" }}>{dateSlash || date}</span>\r\n              )\r\n            } else {\r\n              return <></>\r\n            }\r\n          },\r\n        },\r\n        {\r\n          title: \"ORDER DATE\",\r\n          key: \"StartTime\",\r\n          dataIndex: \"StartTime\",\r\n        },\r\n        {\r\n          title: \"ORDER #\",\r\n          key: \"orderNo\",\r\n          dataIndex: \"orderNo\",\r\n        },\r\n        {\r\n          title: \"CUSTOMER\",\r\n          key: \"customer\",\r\n          dataIndex: \"customer\",\r\n        },\r\n        {\r\n          title: \"PARTIAL PAYMENTS\",\r\n          key: \"partials\",\r\n          dataIndex: \"partials\",\r\n        },\r\n        {\r\n          title: \"TOTAL DUE\",\r\n          key: \"totalDue\",\r\n          dataIndex: \"totalDue\",\r\n          align: \"right\",\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          key: \"amountPaid\",\r\n          dataIndex: \"amountPaid\",\r\n          align: \"right\",\r\n          render: (data) => {\r\n            return Number(data).toFixed(2)\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    orderViaSummaryTableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      columns: [\r\n        { title: \"ORDER VIA\", dataIndex: \"orderVia\", key: \"orderVia\" },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          dataIndex: \"amountPaid\",\r\n          key: \"amountPaid\",\r\n          align: \"right\",\r\n        },\r\n      ],\r\n      dataSource: [...orderViaSummary],\r\n    },\r\n    accountNumberSummaryTableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      columns: [\r\n        {\r\n          title: \"ACCOUNT #\",\r\n          dataIndex: \"accountNumber\",\r\n          key: \"accountNumber\",\r\n        },\r\n        {\r\n          title: \"AMOUNT PAID\",\r\n          dataIndex: \"amountPaid\",\r\n          key: \"amountPaid\",\r\n          align: \"right\",\r\n        },\r\n      ],\r\n      dataSource: [...accountNumberSummary],\r\n    },\r\n  }\r\n  return [componentProps, listWithPartials, listWithPartialsTotal]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Components\\Features\\LiquidChart\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\checkDate.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\addMinusDay.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\appBar\\UserInfoCard.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\appBar\\appBarStyles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\useGetUsers.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\userCard.js",
  [
    "1740",
    "1741",
    "1742",
    "1743",
    "1744"
  ],
  "import React, { useEffect, useState } from 'react'\r\nimport { Card, Avatar, Dropdown, Switch, Button } from 'antd'\r\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { Wrapper } from './styles'\r\nimport Tags from 'components/tags'\r\nimport { getData, updateData } from 'services'\r\nimport { BRANCHES, ROLES, USERS } from 'services/collectionNames'\r\nimport Edit from './edit'\r\nconst { Meta } = Card\r\n\r\nconst Settings = ({ setIsEnabled, isEnabled }) => {\r\n  return (\r\n    <Card\r\n      style={{ width: 300 }}\r\n    >\r\n      <Wrapper>\r\n        <label style={{ marginRight: '1rem' }}>Disabled / Enabled </label>\r\n        <Switch checked={isEnabled} onChange={setIsEnabled} />\r\n      </Wrapper>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default function Users (props) {\r\n  const [isEnabled, setIsEnabled] = useState(false)\r\n  const [roles, setRoles] = useState([])\r\n  const [branches, setBranches] = useState([])\r\n\r\n  useEffect(() => {\r\n    setIsEnabled(props?.isEnabled)\r\n    setRoles(props?.roles)\r\n    setBranches(props?.branches)\r\n  }, [props])\r\n\r\n  const handleSave = (values) => {\r\n    props.handleSave(values)\r\n  }\r\n\r\n  const handleEnabled = (state) => {\r\n    const data = {\r\n      isEnabled: state\r\n    }\r\n    updateData({ collection: USERS, data, id: props?.email })\r\n    setIsEnabled(state)\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <Card\r\n        style={{ width: 300 }}\r\n        actions={[\r\n          <Dropdown\r\n            key='setting' overlay={<Settings\r\n              isEnabled={isEnabled}\r\n              setIsEnabled={() => { handleEnabled(!isEnabled) }}\r\n                                   />} placement='bottomCenter'\r\n          >\r\n            <SettingOutlined />\r\n          </Dropdown>,\r\n          <Dropdown\r\n            key='edit' overlay={\r\n              <Edit\r\n                isEnabled={isEnabled}\r\n                roleValues={roles}\r\n                branchValues={branches}\r\n                handleSave={handleSave}\r\n              />\r\n            } placement='bottomCenter'\r\n          >\r\n            <EditOutlined />\r\n          </Dropdown>,\r\n          <EllipsisOutlined key='ellipsis' />\r\n        ]}\r\n      >\r\n        {!isEnabled && <div style={{\r\n          height: '80%',\r\n          width: '100%',\r\n          background: 'grey',\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          zIndex: 999,\r\n          opacity: 0.5,\r\n          display: 'flex',\r\n          color: 'white',\r\n          justifyContent: 'center',\r\n          alignItems: 'center'\r\n        }}\r\n                       >UNAUTHORIZED USER\r\n        </div>}\r\n        <Meta\r\n          avatar={<Avatar src={props.photoURL} />}\r\n          title={props.name}\r\n          description={\r\n            <div>\r\n              <p>{props.email}<br /><small style={{ color: 'red' }}>{roles.join(', ')}</small></p>\r\n            </div>\r\n          }\r\n        />\r\n        <div style={{ height: '4rem' }}>\r\n          <div style={{ display: 'flex', flexFlow: 'row wrap', marginLeft: '3rem' }}>\r\n            {branches.map(data => <div key={data} style={{ backgroundColor: '#444', margin: '.3rem', color: 'white', padding: '0rem 1rem', borderRadius: '10px' }}>{data}</div>)}\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\identifyDateRange.js",
  [
    "1745"
  ],
  "export default function (args) {\r\n  if (typeof args === 'undefined') {\r\n    return ''\r\n  }\r\n\r\n  const date = new Date(args)\r\n  const day = date.getDay()\r\n  console.log(day)\r\n  switch (day) {\r\n    case 1:\r\n      return [1, 5]\r\n    case 2:\r\n      return [2, 4]\r\n    case 3:\r\n      return [3, 3]\r\n    case 4:\r\n      return [4, 2]\r\n    case 5:\r\n      return [5, 1]\r\n    case 6:\r\n      return [6, 0]\r\n    default:\r\n      return [0, 6]\r\n  }\r\n}\r\n\r\nexport const getDaysInMonthUTC = args => {\r\n  if (typeof args === 'undefined') {\r\n    return ''\r\n  }\r\n\r\n  const month = args.getMonth()\r\n  const year = args.getYear()\r\n  //   const date = new Date(Date.UTC(year, month, 1))\r\n  //   const days = []\r\n  //   while (date.getUTCMonth() === month) {\r\n  //     days.push(new Date(date))\r\n  //     date.setUTCDate(date.getUTCDate() + 1)\r\n  //   }\r\n  //   return days\r\n  var date = new Date(year, month, 1)\r\n  var days = []\r\n  while (date.getMonth() === month) {\r\n    days.push(new Date(date))\r\n    date.setDate(date.getDate() + 1)\r\n  }\r\n  return days\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\formatDataSource.js",
  [
    "1746",
    "1747",
    "1748",
    "1749",
    "1750",
    "1751",
    "1752",
    "1753",
    "1754",
    "1755",
    "1756",
    "1757",
    "1758",
    "1759",
    "1760",
    "1761",
    "1762",
    "1763",
    "1764",
    "1765",
    "1766",
    "1767",
    "1768",
    "1769",
    "1770",
    "1771"
  ],
  "import {\r\n  DATE_START,\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  EIGHT,\r\n  TWELVE,\r\n  BC,\r\n  BC_HALF,\r\n  CH_8,\r\n  CH_12,\r\n  BC_2,\r\n  BC_4,\r\n  JV_4,\r\n  JV_2,\r\n  BCJ_4,\r\n  BCJ_2,\r\n  BCJ_1,\r\n  FCH_8,\r\n  FCH_12,\r\n  FBC_4,\r\n  BAO,\r\n  REPAER,\r\n  CHILI_OIL,\r\n  SPICED_VINEGAR,\r\n  BC_SAUCE,\r\n  ATCHARA,\r\n  BASTING_SAUCE,\r\n  DELIVERY_DATE,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\n\r\nexport const formatDate = (date) => {\r\n  if (date === null) {\r\n    return \"\"\r\n  }\r\n  return new Date(date.seconds * 1000 + date.nanoseconds / 1000000)\r\n}\r\nexport default function (dataSource) {\r\n  const newDataSource = []\r\n  for (const obj of dataSource) {\r\n    const startTime = obj[DATE_START]\r\n    const endTime = obj[DATE_END]\r\n    const dateOrder = obj[DATE_ORDER_PLACED]\r\n    const modifiedBy =\r\n      typeof obj?.modifiedBy !== \"undefined\"\r\n        ? obj.modifiedBy.map((data) => {\r\n            const dataFromDatabase = formatDateFromDatabase(data.date)\r\n            return {\r\n              ...data,\r\n              date: formatDateSlash(dataFromDatabase),\r\n            }\r\n          })\r\n        : []\r\n    // const deliveryDate = obj[DELIVERY_DATE]\r\n    newDataSource.push({\r\n      ...obj,\r\n      [DATE_START]: formatDate(startTime),\r\n      [DATE_END]: formatDate(endTime),\r\n      [DATE_ORDER_PLACED]: formatDate(dateOrder),\r\n      // [DELIVERY_DATE]: formatDate(deliveryDate)\r\n      // [CH_8]: obj[CH_8].toString(),\r\n      // [CH_12]: obj[CH_12].toString(),\r\n      // [BC_2]: obj[BC_2].toString(),\r\n      // [BC_4]: obj[BC_4].toString(),\r\n      // [JV_4]: obj[JV_4].toString(),\r\n      // [JV_2]: obj[JV_2].toString(),\r\n      // [BCJ_4]: obj[BCJ_4].toString(),\r\n      // [BCJ_2]: obj[BCJ_2].toString(),\r\n      // [BCJ_1]: obj[BCJ_1].toString(),\r\n      // [FCH_8]: obj[FCH_8].toString(),\r\n      // [FCH_12]: obj[FCH_12].toString(),\r\n      // [FBC_4]: obj[FBC_4].toString(),\r\n      // [ATCHARA]: obj[ATCHARA].toString(),\r\n      // [BC_SAUCE]: obj[BC_SAUCE].toString(),\r\n      // [SPICED_VINEGAR]: obj[SPICED_VINEGAR].toString(),\r\n      // [BASTING_SAUCE]: obj[BASTING_SAUCE].toString(),\r\n      // [CHILI_OIL]: obj[CHILI_OIL].toString(),\r\n      // [REPAER]: obj[REPAER].toString(),\r\n      // [BAO]: obj[BAO].toString(),\r\n    })\r\n  }\r\n  return newDataSource\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\schedulerSchema.js",
  [
    "1772",
    "1773",
    "1774",
    "1775",
    "1776",
    "1777",
    "1778",
    "1779",
    "1780",
    "1781",
    "1782",
    "1783",
    "1784",
    "1785",
    "1786",
    "1787",
    "1788",
    "1789",
    "1790",
    "1791",
    "1792",
    "1793",
    "1794",
    "1795",
    "1796",
    "1797",
    "1798",
    "1799",
    "1800",
    "1801",
    "1802"
  ],
  "import orderSlipConfig, {\r\n  DROPDOWN_DATAS,\r\n} from \"components/SchedulerComponent/orderSlip/orderSlipConfig\"\r\nimport {\r\n  ACCOUNT_NAME,\r\n  ATCHARA,\r\n  BAO,\r\n  BASTING_SAUCE,\r\n  BC,\r\n  BCJ_1,\r\n  BCJ_2,\r\n  BCJ_4,\r\n  BC_2,\r\n  BC_4,\r\n  BC_HALF,\r\n  BC_SAUCE,\r\n  BRANCH,\r\n  CHILI_OIL,\r\n  CH_12,\r\n  CH_8,\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  DELIVERY_DATE,\r\n  EIGHT,\r\n  FBC_4,\r\n  FCH_12,\r\n  FCH_8,\r\n  GUID,\r\n  ID,\r\n  INDICATE_REASON,\r\n  JV_2,\r\n  JV_4,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  PAYMENT_MODE,\r\n  REPAER,\r\n  SPICED_VINEGAR,\r\n  STATUS,\r\n  TWELVE,\r\n  _ID,\r\n} from \"components/SchedulerComponent/orderSlip/types\"\r\n\r\nconst schedulerSchema = {}\r\nfor (const obj of orderSlipConfig) {\r\n  if (obj.name) {\r\n    schedulerSchema[obj.name] = \"\"\r\n  }\r\n}\r\n\r\n// for number only\r\nconst checkIfValidNumber = (number) => {\r\n  if (isNaN(number)) {\r\n    return 0\r\n  } else {\r\n    if (number.trim() !== \"\") {\r\n      return parseInt(number)\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n}\r\n\r\n// for dropdown only\r\nconst fillDropdownValueIfNull = (data, key) => {\r\n  if (data[key] === null) {\r\n    const branch = data?.orderNo.includes(\"RSJ002\") ? \"Ronac\" : \"Libis\"\r\n    return branch\r\n  } else {\r\n    return data[key]\r\n  }\r\n}\r\n\r\nexport default function (data) {\r\n  if (data) {\r\n    return {\r\n      ...data,\r\n      [BRANCH]: fillDropdownValueIfNull(data, BRANCH),\r\n      [DATE_START]: data[DATE_START],\r\n      [DATE_END]: data[DATE_END],\r\n      [CUSTOMER]: data[CUSTOMER],\r\n      [CONTACT_NUMBER]: data[CONTACT_NUMBER],\r\n      [ORDER_NO]: data[ORDER_NO],\r\n      [INDICATE_REASON]: data[INDICATE_REASON],\r\n      [ACCOUNT_NAME]: data[ACCOUNT_NAME],\r\n      [ID]: data[ID],\r\n      [GUID]: data?.Guid ? data?.Guid : null,\r\n      [_ID]: data[_ID],\r\n    }\r\n  } else {\r\n    return {}\r\n  }\r\n}\r\n\r\n// [CH_8]: checkIfValidNumber(data[CH_8]),\r\n// [CH_12]: checkIfValidNumber(data[CH_12]),\r\n// [BC_2]: checkIfValidNumber(data[BC_2]),\r\n// [BC_4]: checkIfValidNumber(data[BC_4]),\r\n// [JV_4]: checkIfValidNumber(data[JV_4]),\r\n// [JV_2]: checkIfValidNumber(data[JV_2]),\r\n// [BCJ_4]: checkIfValidNumber(data[BCJ_4]),\r\n// [BCJ_2]: checkIfValidNumber(data[BCJ_2]),\r\n// [BCJ_1]: checkIfValidNumber(data[BCJ_1]),\r\n// [FCH_8]: checkIfValidNumber(data[FCH_8]),\r\n// [FCH_12]: checkIfValidNumber(data[FCH_12]),\r\n// [FBC_4]: checkIfValidNumber(data[FBC_4]),\r\n// [ATCHARA]: checkIfValidNumber(data[ATCHARA]),\r\n// [BC_SAUCE]: checkIfValidNumber(data[BC_SAUCE]),\r\n// [SPICED_VINEGAR]: checkIfValidNumber(data[SPICED_VINEGAR]),\r\n// [BASTING_SAUCE]: checkIfValidNumber(data[BASTING_SAUCE]),\r\n// [CHILI_OIL]: checkIfValidNumber(data[CHILI_OIL]),\r\n// [REPAER]: checkIfValidNumber(data[REPAER]),\r\n// [BAO]: checkIfValidNumber(data[BAO]),\r\n// [DATE_ORDER_PLACED]: data[DATE_ORDER_PLACED] || new Date(),\r\n// [DELIVERY_DATE]: data[DELIVERY_DATE] || new Date(),\r\n// [ORDER_VIA]: fillDropdownValueIfNull(data, ORDER_VIA),\r\n// [STATUS]: fillDropdownValueIfNull(data, STATUS),\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\appBar\\userInfoStyles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\users\\edit.js",
  [
    "1803",
    "1804",
    "1805",
    "1806"
  ],
  "import React, { useState, useEffect } from 'react'\r\nimport { Card, Avatar, Dropdown, Switch, Button } from 'antd'\r\nimport { Wrapper } from './styles'\r\nimport Tags from 'components/tags'\r\nimport { getData } from 'services'\r\nimport { BRANCHES, ROLES } from 'services/collectionNames'\r\n\r\nconst Edit = ({\r\n  setIsEnabled,\r\n  isEnabled,\r\n  handleDiscard,\r\n  handleSave,\r\n  roleValues,\r\n  branchValues\r\n}) => {\r\n  const [roles, setRoles] = useState([])\r\n  const [branches, setBranches] = useState([])\r\n  const [isTouched, setIsTouched] = useState(false)\r\n  const [values, setValues] = useState({ branches: [], roles: [] })\r\n\r\n  useEffect(() => {\r\n    loadBranches()\r\n    loadRoles()\r\n    setValues({ branches: branchValues, roles: roleValues })\r\n  }, [])\r\n\r\n  const loadBranches = async () => {\r\n    const data = []\r\n    const result = await getData(BRANCHES)\r\n    for (const obj of result) {\r\n      data.push(obj.branchName)\r\n    }\r\n    setBranches(data)\r\n  }\r\n\r\n  const loadRoles = async () => {\r\n    const data = []\r\n    const result = await getData(ROLES)\r\n    for (const obj of result) {\r\n      data.push(obj.name)\r\n    }\r\n    setRoles(data)\r\n  }\r\n  return (\r\n    <Card\r\n      style={{ width: 300 }}\r\n    >\r\n      <Wrapper>\r\n        <Tags\r\n          label='Roles'\r\n          values={values.roles}\r\n          dropdowns={roles}\r\n          onChange={(value) => {\r\n            setIsTouched(true)\r\n            setValues({ ...values, roles: value })\r\n          }}\r\n        />\r\n        <Tags\r\n          label='Branches'\r\n          values={values.branches}\r\n          dropdowns={branches}\r\n          setIsTouched={() => setIsTouched(true)}\r\n          onChange={(value) => {\r\n            setIsTouched(true)\r\n            setValues({ ...values, branches: value })\r\n          }}\r\n        />\r\n        <br />\r\n        <br />\r\n        {isTouched && <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'flex-end', width: '100%' }}>\r\n          <Button\r\n            danger onClick={() => {\r\n              setIsTouched(false)\r\n              setValues({ branches: branchValues, roles: roleValues })\r\n            }}\r\n          >Discard\r\n          </Button>\r\n          <Button\r\n            danger type='primary' onClick={() => {\r\n              setIsTouched(false)\r\n              handleSave({ ...values })\r\n            }}\r\n          >Save\r\n          </Button>\r\n        </div>}\r\n      </Wrapper>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Edit\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\commonFunctions\\useHandleModal.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\tags\\index.js",
  [
    "1807",
    "1808"
  ],
  "import React, { useEffect, useState } from 'react'\r\nimport { Select } from 'antd'\r\n\r\nconst { Option } = Select\r\n\r\nconst children = []\r\nfor (let i = 10; i < 36; i++) {\r\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>)\r\n}\r\n\r\nexport default function Tags (props) {\r\n  return (\r\n    <>\r\n      <label>{props.label}</label>\r\n      <Select\r\n        mode='multiple'\r\n        allowClear\r\n        style={{ width: '100%' }}\r\n        placeholder='Please select'\r\n        value={props.values}\r\n        onChange={props.onChange}\r\n      >\r\n        {props.dropdowns.map(data => <Option key={data}>{data}</Option>)}\r\n      </Select>\r\n    </>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\backdrop\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\index.js",
  [
    "1809",
    "1810",
    "1811",
    "1812",
    "1813",
    "1814",
    "1815",
    "1816",
    "1817"
  ],
  "import React, { useState } from \"react\"\r\nimport { Button, DatePicker, Card, Space, Typography, Row, Col } from \"antd\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport { SearchOutlined, ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport useAnalyticsTransaction from \"./hook\"\r\nimport useDirectOrders from \"./hookDirectOrders\"\r\nimport TableDirectOrderContents from \"./TableDirectOrderContents\"\r\nimport TablePartnerOrderContents from \"./TablePartnerOrderContents\"\r\nimport { Tabs } from \"antd\"\r\nimport { VerticalAutoScroll } from \"./styles\"\r\nimport usePartnerOrderHook from \"./hookPartnerOrders\"\r\nimport TableSummaryCollectableContents from \"./TableSummaryCollectableContents\"\r\nimport TableDailySummaryContent from \"./TableDailySummaryContent\"\r\nimport ExportService from \"Restructured/Components/Features/ExcelExporter/ExportService\"\r\nimport useExcelExport from \"./hookExcelExporter\"\r\nconst { TabPane } = Tabs\r\nconst { RangePicker } = DatePicker\r\n\r\nconst style = {\r\n  justifyContent: \"space-between\",\r\n  width: \"100%\",\r\n  padding: \"1rem\",\r\n}\r\n\r\nfunction AnalyticsTransaction() {\r\n  /// main hook\r\n  const [\r\n    { rangeProps, searchButtonProps, tableProps },\r\n    filteredData,\r\n    startTimeDateList,\r\n    sourceList,\r\n    orderViaPartnerList,\r\n  ] = useAnalyticsTransaction()\r\n\r\n  /// partner orders hook\r\n  const [\r\n    partnerOrderData,\r\n    summaryOfSource,\r\n    grandTotal,\r\n    grandTotalSourceSum,\r\n    handlePartnerOrderData,\r\n    handlePartnerOrderExcel, // used in the UI to show or hide table based on partner order data\r\n  ] = usePartnerOrderHook()\r\n\r\n  const { exportOrderByDate, exportOrderSummary, exportOrderSummaryBySource } =\r\n    useExcelExport()\r\n\r\n  const handleExport = () => {\r\n    const orderByDate = exportOrderByDate(\r\n      filteredData,\r\n      startTimeDateList,\r\n      orderViaPartnerList\r\n    )\r\n    const orderSummary = exportOrderSummary(filteredData)\r\n    const orderSummaryBySource = exportOrderSummaryBySource(\r\n      filteredData,\r\n      sourceList\r\n    )\r\n    if (Object.keys(orderByDate).length > 0) {\r\n      ExportService.exportExcelReports(\r\n        {\r\n          ...orderByDate,\r\n          ...orderSummary,\r\n          ...orderSummaryBySource,\r\n        },\r\n        [[...sourceList]]\r\n      )\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Space direction=\"horizontal\" style={style}>\r\n          <span>\r\n            {filteredData.length > 0 && (\r\n              <Button danger type=\"primary\" onClick={handleExport}>\r\n                Export Excel\r\n              </Button>\r\n            )}\r\n          </span>\r\n          <Space wrap>\r\n            Date Order:\r\n            <RangePicker {...rangeProps} />\r\n            <Button\r\n              {...searchButtonProps}\r\n              danger\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </Space>\r\n        <Grid padding=\"1rem\">\r\n          <h3>TRANSACTIONS</h3>\r\n          <br />\r\n          <Tabs tabPosition=\"left\" style={{ height: \"80vh\" }}>\r\n            {startTimeDateList.map((date, index) => {\r\n              return (\r\n                <TabPane\r\n                  tab={date}\r\n                  key={date}\r\n                  style={{\r\n                    backgroundColor: \"#eee\",\r\n                    padding: \"1rem\",\r\n                    overflow: \"auto\",\r\n                    height: \"80vh\",\r\n                  }}\r\n                >\r\n                  <Card title=\"DIRECT\" bordered={false}>\r\n                    <VerticalAutoScroll>\r\n                      <TableDirectOrderContents\r\n                        tableProps={tableProps}\r\n                        filteredData={filteredData}\r\n                        dateString={date}\r\n                      />\r\n                    </VerticalAutoScroll>\r\n                  </Card>\r\n                  <br />\r\n                  {orderViaPartnerList.map((viaPartner) => {\r\n                    const [dataWithPartials] = handlePartnerOrderExcel(\r\n                      filteredData,\r\n                      date,\r\n                      viaPartner\r\n                    )\r\n                    if (dataWithPartials.length > 0) {\r\n                      return (\r\n                        <>\r\n                          <Card\r\n                            title={`PARTNER MERCHANT: ${viaPartner}`}\r\n                            bordered={false}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <TablePartnerOrderContents\r\n                                tableProps={tableProps}\r\n                                filteredData={filteredData}\r\n                                dateString={date}\r\n                                orderViaPartner={viaPartner}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                          <br />\r\n                        </>\r\n                      )\r\n                    }\r\n                    return <></>\r\n                  })}\r\n                </TabPane>\r\n              )\r\n            })}\r\n          </Tabs>\r\n        </Grid>\r\n        <Row>\r\n          <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n            <Grid padding=\"1rem\">\r\n              <br />\r\n              <h3>SUMMARY OF COLLECTIBLES</h3>\r\n              <br />\r\n              <Tabs tabPosition=\"left\" style={{ height: \"80vh\" }}>\r\n                {sourceList.map((data, index) => {\r\n                  const dateTo =\r\n                    startTimeDateList.length > 0 ? startTimeDateList[0] : \"\"\r\n                  const dateFrom =\r\n                    startTimeDateList.length > 0\r\n                      ? startTimeDateList[startTimeDateList.length - 1]\r\n                      : \"\"\r\n                  return (\r\n                    <TabPane\r\n                      tab={data}\r\n                      key={data}\r\n                      style={{\r\n                        backgroundColor: \"#eee\",\r\n                        padding: \"1rem\",\r\n                        overflow: \"auto\",\r\n                        height: \"80vh\",\r\n                      }}\r\n                    >\r\n                      <Card\r\n                        title={`Date from: ${dateFrom} | Date to: ${dateTo}`}\r\n                        bordered={false}\r\n                      >\r\n                        <VerticalAutoScroll>\r\n                          <TableSummaryCollectableContents\r\n                            filteredData={filteredData}\r\n                            dateList={startTimeDateList}\r\n                            source={data}\r\n                          />\r\n                        </VerticalAutoScroll>\r\n                      </Card>\r\n                      <br />\r\n                    </TabPane>\r\n                  )\r\n                })}\r\n              </Tabs>\r\n            </Grid>\r\n          </Col>\r\n          <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n            <Grid padding=\"1rem\">\r\n              <br />\r\n              <h3>DAILY SUMMARY</h3>\r\n              <br />\r\n              <TableDailySummaryContent\r\n                filteredData={filteredData}\r\n                dateList={startTimeDateList}\r\n              />\r\n            </Grid>\r\n          </Col>\r\n        </Row>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnalyticsTransaction\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hook.js",
  [
    "1818",
    "1819",
    "1820",
    "1821"
  ],
  "import useRangeHandler from \"hooks/rangeHandler\"\r\nimport ScheduleServicess from \"services/firebase/SchedulesServicess\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { useSelector } from \"react-redux\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n  formatTime,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray, {\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport { useState, useEffect } from \"react\"\r\nimport tableColumns from \"./tableColumns\"\r\nimport {\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_VIA_PARTNER,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { DATE_PAYMENT } from \"components/PaymentDetails/types\"\r\nimport { handlePartials } from \"./hookDirectOrders\"\r\n\r\nexport default function useAnalyticsTransaction() {\r\n  const userComponent = useSelector(selectUserSlice)\r\n  // reusableHook from hooks folder for dateFrom and dateTo\r\n  const [rangeProps, rangeHandlerFilteredData, loadRangeHandlerData] =\r\n    useRangeHandler(ScheduleServicess)\r\n\r\n  // states\r\n  const [filteredData, setFilteredData] = useState([])\r\n  const [startTimeDateList, setStartTimeDateList] = useState([])\r\n  const [orderViaPartnerList, setOrderViaPartnerList] = useState([])\r\n  const [sourceList, setSourceList] = useState([])\r\n\r\n  useEffect(() => {\r\n    const _filteredData = []\r\n    const _startTimeDateList = []\r\n    const _orderViaPartnerList = []\r\n\r\n    handleSourceList(rangeHandlerFilteredData?.searchData)\r\n    // filtering each row data from database\r\n    for (const obj of rangeHandlerFilteredData?.searchData) {\r\n      const dateOrderPlaced = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n      const startTime = formatDateFromDatabase(obj[DATE_START])\r\n      const datePayment = formatDateFromDatabase(obj[DATE_PAYMENT])\r\n\r\n      // to create a list of dates start base from filter\r\n      if (!_startTimeDateList.includes(formatDateDash(startTime))) {\r\n        _startTimeDateList.push(formatDateDash(startTime))\r\n      }\r\n\r\n      // to create a list of order via partners\r\n      if (obj[ORDER_VIA_PARTNER]) {\r\n        if (!_orderViaPartnerList.includes(obj[ORDER_VIA_PARTNER])) {\r\n          _orderViaPartnerList.push(obj[ORDER_VIA_PARTNER])\r\n        }\r\n      }\r\n\r\n      // to recreate the list of all the data filtered with corresponding date formats\r\n      _filteredData.push({\r\n        ...obj,\r\n        [DATE_ORDER_PLACED]: formatDateDash(dateOrderPlaced),\r\n        [DATE_START]: formatDateDash(startTime),\r\n        time: formatTime(startTime),\r\n        [DATE_PAYMENT]: formatDateDash(datePayment),\r\n      })\r\n    }\r\n\r\n    // set the data gathered inside the state\r\n    setStartTimeDateList(_startTimeDateList)\r\n    setOrderViaPartnerList(_orderViaPartnerList)\r\n    setFilteredData(_filteredData)\r\n  }, [rangeHandlerFilteredData?.searchData])\r\n\r\n  const handleSourceList = (data) => {\r\n    const dataWithPartials = handlePartials(data)\r\n    const _sourceList = []\r\n    // produce list of sources\r\n    for (const obj of dataWithPartials) {\r\n      if (obj?.source) {\r\n        if (!_sourceList.includes(obj?.source)) {\r\n          _sourceList.push(obj?.source)\r\n        }\r\n      }\r\n    }\r\n    setSourceList(_sourceList)\r\n  }\r\n\r\n  const searchHandler = () => {\r\n    loadRangeHandlerData({\r\n      dateField: \"StartTime\", // required\r\n      orderBy: \"StartTime\", // required\r\n      search: {\r\n        //optional\r\n        branch: userComponent?.branches[0],\r\n      },\r\n    })\r\n  }\r\n\r\n  const componentProps = {\r\n    rangeProps,\r\n    searchButtonProps: { onClick: searchHandler },\r\n    tableProps: {\r\n      size: \"small\",\r\n      pagination: false,\r\n      columns: [...tableColumns],\r\n    },\r\n  }\r\n  return [\r\n    componentProps,\r\n    filteredData,\r\n    startTimeDateList,\r\n    sourceList,\r\n    orderViaPartnerList,\r\n  ]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\index.js",
  [
    "1822",
    "1823"
  ],
  "import React, { useEffect, useState } from 'react'\r\nimport { Container } from 'commonStyles'\r\nimport { Header, Body, Footer } from './styles'\r\nimport Dropdown from './dropdown'\r\nimport { Button, Divider } from 'antd'\r\nimport { addData, deleteData, getData } from 'services'\r\nimport { Dropdowngroup } from './dropdownGroup'\r\nimport { useGetDropdownGroup } from './useDropdownGroup'\r\n\r\nexport default function Dropdowns({ collectionName, withDropdownGroup }) {\r\n  const [dropdowns, setDropdowns] = useState({})\r\n  const [groupDropdowns, saveGroupDropdowns] = useGetDropdownGroup('orderVia')\r\n\r\n  useEffect(() => {\r\n    loadDropdowns()\r\n  }, [collectionName])\r\n\r\n  const loadDropdowns = async () => {\r\n    const data = await getData(collectionName)\r\n    const dropdownList = {}\r\n    for (const obj of data) {\r\n      dropdownList[obj._id] = { name: obj.name, list: [...obj.list], isEditable: false }\r\n    }\r\n    setDropdowns(dropdownList)\r\n  }\r\n\r\n  const handleChange = (e, id) => {\r\n    const dropdownCopy = { ...dropdowns }\r\n    const dropdownObject = { ...dropdownCopy[id] }\r\n    dropdownObject.name = e.target.value\r\n    dropdownCopy[id] = dropdownObject\r\n    setDropdowns(dropdownCopy)\r\n  }\r\n\r\n  const handleToggleEdit = (id, status, list = [], name, buttonClicked) => {\r\n    const dropdownCopy = { ...dropdowns }\r\n    const dropdownObject = { ...dropdownCopy[id] }\r\n    dropdownObject.isEditable = status\r\n    if (buttonClicked === 'discard') {\r\n      dropdownObject.name = name\r\n    }\r\n    if (list.length > 0) {\r\n      dropdownObject.list = list\r\n    }\r\n    dropdownCopy[id] = dropdownObject\r\n    setDropdowns(dropdownCopy)\r\n  }\r\n\r\n  const handleChangeList = (id, list) => {\r\n    const dropdownCopy = { ...dropdowns }\r\n    const dropdownObject = { ...dropdownCopy[id] }\r\n    dropdownObject.list = [...list]\r\n    dropdownCopy[id] = dropdownObject\r\n    setDropdowns(dropdownCopy)\r\n  }\r\n\r\n  const handleAddDropdowns = async () => {\r\n    const data = {\r\n      name: '',\r\n      list: []\r\n    }\r\n    const docId = await addData({ data, collection: collectionName })\r\n    setDropdowns({ ...dropdowns, [docId]: { ...data } })\r\n  }\r\n\r\n  const handleRemove = async (id) => {\r\n    console.log('id', id)\r\n    const result = await deleteData({ id, collection: collectionName })\r\n    if (result === 'success') {\r\n      const dropdownsCopy = { ...dropdowns }\r\n      delete dropdownsCopy[id]\r\n      setDropdowns(dropdownsCopy)\r\n    }\r\n  }\r\n  return (\r\n    <Container>\r\n      <Divider />\r\n      <h3 style={{ padding: '1rem 0 0 0' }}>Dropdowns </h3>\r\n      <Header display>\r\n        <Button type='primary' danger onClick={() => handleAddDropdowns()}>Add</Button>\r\n      </Header>\r\n      <Body>\r\n        {Object.keys(dropdowns).map(data => <Dropdown\r\n          collectionName={collectionName}\r\n          key={data}\r\n          id={data}\r\n          name={dropdowns[data]?.name}\r\n          list={dropdowns[data]?.list}\r\n          isEditable={dropdowns[data]?.isEditable}\r\n          handleToggleEdit={(status, list, name, buttonClicked) => handleToggleEdit(data, status, list, name, buttonClicked)}\r\n          handleChange={(e) => handleChange(e, data)}\r\n          handleChangeList={(list) => handleChangeList(data, list)}\r\n          handleRemove={() => handleRemove(data)}\r\n        />)}\r\n      </Body>\r\n      <Divider />\r\n      <h3 style={withDropdownGroup ? { padding: '1rem 0 0 0' } : { display: 'none' }}>Dropdown Groups</h3>\r\n      <Header display={withDropdownGroup}>\r\n        <Button type='primary' danger onClick={() => { }}>Add</Button>\r\n      </Header>\r\n      <Footer display={withDropdownGroup}>\r\n        {groupDropdowns.map(groupDropdown => {\r\n          const groups = []\r\n          for (const key in groupDropdown) {\r\n            if (key === '_id' || key === 'name') {\r\n            } else {\r\n              groups.push({\r\n                name: key,\r\n                values: groupDropdown[key]\r\n              })\r\n            }\r\n          }\r\n          return (\r\n            <Dropdowngroup\r\n              key={groupDropdowns.name}\r\n              groupName={groupDropdown.name}\r\n              groups={groups}\r\n            />\r\n          )\r\n        })}\r\n\r\n      </Footer>\r\n    </Container>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\dropdown.js",
  [
    "1824"
  ],
  "import fields from 'components/fields'\r\nimport Input from 'components/fields/input'\r\nimport { StyledDropdown, ChipContainer, Chips, Chip, ChipValue, ChipButton, Footer } from './styles'\r\nimport { INPUT } from 'components/fields/types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai'\r\nimport { GrAdd } from 'react-icons/gr'\r\nimport { Button } from 'antd'\r\nimport { updateData } from 'services'\r\n\r\nexport default function Dropdown(props) {\r\n  const [isAddShowing, setIsAddShowing] = useState(true)\r\n  const [list, setList] = useState([])\r\n  const [name, setName] = useState('')\r\n  const [initialList, setInitialList] = useState([])\r\n\r\n  useEffect(() => {\r\n    setName(props.name)\r\n    setInitialList(props.list)\r\n  }, [])\r\n  const handleAddChip = (e) => {\r\n    if (e.target.value.trim() !== '') {\r\n      const addedList = [...list]\r\n      addedList.push(e.target.value)\r\n      setList(addedList)\r\n\r\n      const listCopy = [...props.list]\r\n      if (!props?.list.includes(e.target.value)) {\r\n        listCopy.push(e.target.value)\r\n      }\r\n      props.handleChangeList(listCopy)\r\n    }\r\n  }\r\n\r\n  const handleRemoveChip = (value) => {\r\n    const listCopy = [...props.list]\r\n    const newListCopy = listCopy.filter(data => data !== value)\r\n    props.handleChangeList(newListCopy)\r\n  }\r\n\r\n  const handleClose = (clickedButton) => {\r\n    if (clickedButton === 'discard') {\r\n      // const listCopy = [...props.list]\r\n      // const newListCopy = listCopy.filter(data => !list.includes(data))\r\n      props.handleToggleEdit(false, initialList, name, 'discard')\r\n    } else {\r\n      setName(props.name)\r\n      setInitialList(props.list)\r\n      props.handleToggleEdit(false)\r\n      const data = {\r\n        name: props.name,\r\n        list: props.list\r\n      }\r\n      const collection = props?.collectionName\r\n      const id = props.id\r\n      updateData({ data, collection, id })\r\n    }\r\n    setList([])\r\n  }\r\n  return (\r\n    <StyledDropdown>\r\n      <div style={props.isEditable ? { width: '100%' } : { display: 'none' }}>\r\n        {fields[INPUT]({ label: 'Name', value: props.name, onChange: (e) => props.handleChange(e), isInline: true })}\r\n      </div>\r\n      <div style={!props.isEditable ? { width: '100%' } : { display: 'none' }}>\r\n        <label>Name: </label>\r\n        {props.name}\r\n      </div>\r\n      <br />\r\n      <ChipContainer>\r\n        <Chips>\r\n          {props?.list.map(listValue =>\r\n            <Chip key={listValue}>\r\n              <ChipValue>{listValue}</ChipValue>\r\n              <ChipButton onHover onClick={() => handleRemoveChip(listValue)} isEditable={props.isEditable}>\r\n                <AiOutlineCloseCircle />\r\n              </ChipButton>\r\n            </Chip>)}\r\n\r\n          <div style={!props.isEditable ? { display: 'none' } : {}}>\r\n            {isAddShowing\r\n              ? <Chip onHover>\r\n                <ChipValue onClick={() => setIsAddShowing(false)}>Add</ChipValue>\r\n                <ChipButton isEditable onClick={() => setIsAddShowing(false)}>\r\n                  <GrAdd />\r\n                </ChipButton>\r\n              </Chip>\r\n              : <Input onBlur={(e) => {\r\n                handleAddChip(e)\r\n                setIsAddShowing(true)\r\n              }}\r\n              />}\r\n\r\n          </div>\r\n        </Chips>\r\n\r\n      </ChipContainer>\r\n      <Footer display={!props.isEditable}>\r\n        <Button\r\n          size='small'\r\n          danger onClick={props.handleRemove}\r\n        >Remove\r\n        </Button>\r\n        <Button\r\n          size='small'\r\n          type='primary'\r\n          danger onClick={() => props.handleToggleEdit(true)}\r\n        >Edit\r\n        </Button>\r\n      </Footer>\r\n      <Footer display={props.isEditable}>\r\n        <Button\r\n          size='small'\r\n          danger\r\n          onClick={() => handleClose('discard')}\r\n        >Discard\r\n        </Button>\r\n        <Button\r\n          disabled={!isAddShowing}\r\n          type='primary'\r\n          size='small'\r\n          danger onClick={() => handleClose()}\r\n        >Save\r\n        </Button>\r\n      </Footer>\r\n    </StyledDropdown>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\dropdowns\\dropdownGroup.js",
  [
    "1825"
  ],
  "import { isEditable } from '@syncfusion/ej2-grids'\r\nimport { Button } from 'antd'\r\nimport Tags from 'components/tags'\r\nimport React, { useState } from 'react'\r\nimport { GroupContainer, StyledDropdown, Chips, Chip, ChipValue, ChipContainer, Footer } from './styles'\r\n\r\nexport function Dropdowngroup(props) {\r\n  const [values, setValues] = useState(['test'])\r\n  return props.isEditable\r\n    ? (\r\n      <StyledDropdown>\r\n        <label>Name: {props.groupName}</label><br />\r\n        <GroupContainer>\r\n          <Tags\r\n            label={props.groupName}\r\n            values={values}\r\n            dropdowns={['test', 'test2', 'test3']}\r\n            onChange={(value) => {\r\n              setValues({ ...values, roles: value })\r\n            }}\r\n          />\r\n        </GroupContainer>\r\n      </StyledDropdown>\r\n    )\r\n    : (\r\n      <StyledDropdown>\r\n        <label>Name: {props.groupName}</label><br />\r\n        <ChipContainer>\r\n          {props.groups.map(group =>\r\n            <div key={group?.name}>\r\n              <label>{group?.name}</label>\r\n              <Chips>\r\n                {group.values?.map(listValue =>\r\n                  <Chip key={listValue}>\r\n                    <ChipValue>{listValue}</ChipValue>\r\n                  </Chip>)}\r\n              </Chips>\r\n            </div>)}\r\n        </ChipContainer>\r\n        <Footer display={!props.isEditable}>\r\n          <Button\r\n            size='small'\r\n            danger onClick={() => { }}\r\n          >Remove\r\n          </Button>\r\n          <Button\r\n            size='small'\r\n            type='primary'\r\n            danger onClick={() => { }}\r\n          >Edit\r\n          </Button>\r\n        </Footer>\r\n      </StyledDropdown>\r\n    )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardScheduler\\index.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\TransactionGroupPayments\\findDataHandler.js",
  [
    "1826"
  ],
  "import { useEffect, useState } from \"react\"\r\n\r\nexport default function useFindDataHandlers(service) {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [data, setData] = useState(null)\r\n  useEffect(() => {\r\n    loadData()\r\n  }, [])\r\n\r\n  // will cause an error in the develeopment server database due to indexing but will work in production\r\n  const loadData = async () => {\r\n    setIsLoading(true)\r\n    const _data = await service.getDataWithFieldName()\r\n    if (typeof _data === \"object\") {\r\n      setData(_data[0])\r\n    }\r\n    setData(_data)\r\n    setIsLoading(false)\r\n  }\r\n  return [{ data, isLoading }]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardScheduler\\hooks.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\tableColumns.js",
  [
    "1827",
    "1828",
    "1829",
    "1830"
  ],
  "import { Tag, Space } from \"antd\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nconst tableColumns = [\r\n  {\r\n    title: \"DATE PLACED\",\r\n    dataIndex: DATE_ORDER_PLACED,\r\n    key: DATE_ORDER_PLACED,\r\n    render: (text) => <a>{text}</a>,\r\n    width: \"8%\",\r\n  },\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"10%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"NAME\",\r\n    dataIndex: CUSTOMER,\r\n    key: CUSTOMER,\r\n  },\r\n  {\r\n    title: \"CONTACT #\",\r\n    dataIndex: CONTACT_NUMBER,\r\n    key: CONTACT_NUMBER,\r\n  },\r\n  {\r\n    title: \"VIA\",\r\n    dataIndex: ORDER_VIA,\r\n    key: ORDER_VIA,\r\n  },\r\n  // {\r\n  //   title: \"DATE ORDER\",\r\n  //   dataIndex: DATE_START,\r\n  //   key: DATE_START,\r\n  // },\r\n  {\r\n    title: \"TIME\",\r\n    dataIndex: \"time\",\r\n    key: \"time\",\r\n  },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  // },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISC\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (data > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{data}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => <span>{Number(data).toFixed(2)}</span>,\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (data) {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{data}</span>\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"TOTAL AMOUNT\",\r\n  //   dataIndex: \"totalDue\",\r\n  //   key: \"totalDue\",\r\n  //   align: \"right\",\r\n  // },\r\n  // {\r\n  //   title: \"OTHERS/DEDUCTION\",\r\n  //   dataIndex: \"others\",\r\n  //   key: \"others\",\r\n  //   align: \"right\",\r\n  //   render: (tags) => {\r\n  //     return (\r\n  //       <>\r\n  //         {typeof tags !== \"undefined\" ? (\r\n  //           Object.keys(tags).map((tag) => {\r\n  //             return <Tag key={tag}>{`${tags[tag]}`}</Tag>\r\n  //           })\r\n  //         ) : (\r\n  //           <Tag></Tag>\r\n  //         )}\r\n  //       </>\r\n  //     )\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"PAYMENT TYPE\",\r\n    dataIndex: \"partials\",\r\n    key: \"partials\",\r\n    render: (data) => {\r\n      if (data === \"Discounted\") {\r\n        return <span style={{ color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default tableColumns\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\SchedulerComponent\\orderSlip\\hookOrderNoCounter.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookExcelExporter.js",
  [
    "1831",
    "1832",
    "1833",
    "1834",
    "1835",
    "1836",
    "1837",
    "1838",
    "1839",
    "1840",
    "1841",
    "1842",
    "1843",
    "1844",
    "1845",
    "1846",
    "1847",
    "1848",
    "1849",
    "1850"
  ],
  "import useDirectOrders from \"./hookDirectOrders\"\r\nimport usePartnerOrderHook from \"./hookPartnerOrders\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  PAYMENT_MODE,\r\n  SOURCE,\r\n  STATUS,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUserSlice } from \"containers/0.NewLogin/loginSlice\"\r\nimport { AMOUNT_PAID, TOTAL_DUE } from \"components/PaymentDetails/types\"\r\nimport moment from \"moment\"\r\nimport { formatDateLong } from \"Restructured/Utilities/dateFormat\"\r\nimport useDailySummary from \"./hookDailySummary\"\r\nimport useSummaryOfCollectibles from \"./hookSummaryOfCollectibles\"\r\n\r\nexport default function useExcelExport() {\r\n  const userComponentSlice = useSelector(selectUserSlice)\r\n  /// direct orders hook\r\n  const [\r\n    directData,\r\n    directSummaryOfSource,\r\n    directGrandTotal,\r\n    directHrandTotalSourceSum,\r\n    directHandleData,\r\n    directHandleExcel,\r\n  ] = useDirectOrders()\r\n\r\n  /// partner orders hook\r\n  const [\r\n    partnerOrderData,\r\n    summaryOfSource,\r\n    grandTotal,\r\n    grandTotalSourceSum,\r\n    handlePartnerOrderData,\r\n    partnerHandleExcel,\r\n  ] = usePartnerOrderHook()\r\n\r\n  // daily summary hook\r\n  const [\r\n    dailySummaryData,\r\n    handleDailySummaryData,\r\n    dailySummaryGrandTotal,\r\n    dailySummaryHandleExcel,\r\n  ] = useDailySummary()\r\n\r\n  // data of each source\r\n  const [sourceData, handleSourceData, sourceGrandTotal, sourceHandleExcel] =\r\n    useSummaryOfCollectibles()\r\n\r\n  const branch =\r\n    typeof userComponentSlice.branches[0] !== \"undefined\"\r\n      ? userComponentSlice.branches[0]\r\n      : \"\"\r\n  const exportOrderByDate = (\r\n    filteredData,\r\n    startTimeDateList,\r\n    orderViaPartnerList\r\n  ) => {\r\n    const orders = {}\r\n    const reverseStartTimeDateList = startTimeDateList.reverse()\r\n    for (const date of reverseStartTimeDateList) {\r\n      const dateFormat = formatDateLong(date)\r\n      const [dataWithPartials, grandTotal, sourceSummary, grandTotalSource] = [\r\n        ...directHandleExcel(filteredData, date),\r\n      ]\r\n      if (dataWithPartials.length > 0) {\r\n        const grandTotalObj = { ...grandTotal[0] }\r\n        const grandTotalSourceObj = { ...grandTotalSource[0] }\r\n        if (Number(grandTotalObj?.amountPaid) > 0) {\r\n          if (typeof orders[date] === \"undefined\") {\r\n            orders[date] = [\r\n              [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n              [\"DAILY ORDER MASTERLIST\"],\r\n              [dateFormat],\r\n              [\"\"],\r\n            ]\r\n          }\r\n          orders[date].push([\"DIRECT\"])\r\n          orders[date].push([\r\n            \"ORDER DETAILS\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"PAYMENT DETAILS\",\r\n          ])\r\n          orders[date].push([\r\n            \"DATE PLACED\",\r\n            \"NAME\",\r\n            \"CONTACT #\",\r\n            \"VIA\",\r\n            \"TIME\",\r\n            \"DATE PAYMENT\",\r\n            \"MODE\",\r\n            \"SOURCE\",\r\n            \"REF #\",\r\n            \"ACCT #\",\r\n            \"TOTAL DUE\",\r\n            \"DISCOUNT\",\r\n            \"AMOUNT PAID\",\r\n            \"BALANCE DUE\",\r\n            \"PAYMENT TYPE\",\r\n            \"STATUS\",\r\n          ])\r\n          for (const row of dataWithPartials) {\r\n            orders[date].push([\r\n              row[DATE_ORDER_PLACED],\r\n              row[CUSTOMER],\r\n              row[CONTACT_NUMBER],\r\n              row[ORDER_VIA],\r\n              row?.time,\r\n              row?.datePayment,\r\n              row?.modePayment,\r\n              row[SOURCE],\r\n              row?.refNo,\r\n              row?.accountNumber,\r\n              row?.totalDue === 0 ? \"__\" : row?.totalDue,\r\n              Number(row?.others).toFixed(2),\r\n              row?.amountPaid,\r\n              Number(row?.balanceDue).toFixed(2),\r\n              row?.partials,\r\n              row[STATUS],\r\n            ])\r\n          }\r\n          orders[date].push([\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"TOTAL\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            Number(grandTotalObj?.totalDue).toFixed(2),\r\n            Number(grandTotalObj?.discount).toFixed(2),\r\n            Number(grandTotalObj?.amountPaid).toFixed(2),\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n          ])\r\n\r\n          // this is for the source summary of direct orders\r\n          orders[date].push([\"\"])\r\n          orders[date].push([\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"FROM\",\r\n            \"AMOUNT PAID\",\r\n          ])\r\n          for (const row of sourceSummary) {\r\n            if (Number(row?.amountPaid) > 0) {\r\n              orders[date].push([\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                row[SOURCE],\r\n                row[AMOUNT_PAID],\r\n              ])\r\n            }\r\n          }\r\n\r\n          orders[date].push([\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"TOTAL\",\r\n            Number(grandTotalSourceObj?.amountPaid).toFixed(2),\r\n          ])\r\n        }\r\n      }\r\n\r\n      // this is for partner order via ///////////////////////////////////////////////////////////////////////////////////////////////\r\n      for (const orderVia of orderViaPartnerList) {\r\n        const [dataWithPartials, grandTotal, sourceSummary, grandTotalSource] =\r\n          [...partnerHandleExcel(filteredData, date, orderVia)]\r\n        if (dataWithPartials.length > 0) {\r\n          const grandTotalObj = { ...grandTotal[0] }\r\n          const grandTotalSourceObj = { ...grandTotalSource[0] }\r\n          if (typeof orders[date] === \"undefined\") {\r\n            orders[date] = [\r\n              [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n              [\"DAILY ORDER MASTERLIST\"],\r\n              [dateFormat],\r\n              [\"\"],\r\n            ]\r\n          }\r\n          orders[date].push(\"\")\r\n          orders[date].push([`PARTNER MERCHANT ${orderVia}`])\r\n          orders[date].push([\r\n            \"ORDER DETAILS\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"PAYMENT DETAILS\",\r\n            \"\",\r\n          ])\r\n          orders[date].push([\r\n            \"DATE PLACED\",\r\n            \"NAME\",\r\n            \"CONTACT #\",\r\n            \"TIME\",\r\n            \"DATE PAYMENT\",\r\n            \"MODE\",\r\n            \"SOURCE\",\r\n            \"REF #\",\r\n            \"ACCT #\",\r\n            \"TOTAL DUE\",\r\n            \"DISCOUNT\",\r\n            \"AMOUNT PAID\",\r\n            \"BALANCE DUE\",\r\n            \"PAYMENT TYPE\",\r\n            \"STATUS\",\r\n          ])\r\n          for (const row of dataWithPartials) {\r\n            orders[date].push([\r\n              row[DATE_ORDER_PLACED],\r\n              row[CUSTOMER],\r\n              row[CONTACT_NUMBER],\r\n              row?.time,\r\n              row?.datePayment,\r\n              row?.modePayment,\r\n              row[SOURCE],\r\n              row?.refNo,\r\n              row?.accountNumber,\r\n              row?.totalDue === 0 ? \"__\" : row?.totalDue,\r\n              Number(row?.others).toFixed(2),\r\n              row?.amountPaid,\r\n              Number(row?.balanceDue).toFixed(2),\r\n              row?.partials,\r\n              row[STATUS],\r\n            ])\r\n          }\r\n          orders[date].push([\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"TOTAL\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            Number(grandTotalObj?.totalDue).toFixed(2),\r\n            Number(grandTotalObj?.discount).toFixed(2),\r\n            Number(grandTotalObj?.amountPaid).toFixed(2),\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n          ])\r\n\r\n          // this is for the source summary of direct orders\r\n          orders[date].push([\"\"])\r\n          orders[date].push([\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"FROM\",\r\n            \"AMOUNT PAID\",\r\n          ])\r\n          for (const row of sourceSummary) {\r\n            if (Number(row?.amountPaid) > 0) {\r\n              orders[date].push([\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                row[SOURCE],\r\n                row[AMOUNT_PAID],\r\n              ])\r\n            }\r\n          }\r\n\r\n          orders[date].push([\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"TOTAL\",\r\n            Number(grandTotalSourceObj?.amountPaid).toFixed(2),\r\n          ])\r\n        }\r\n      }\r\n    }\r\n    return orders\r\n  }\r\n\r\n  const exportOrderSummary = (filteredData) => {\r\n    const orders = {\r\n      dSummary: [\r\n        [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n        [\"DAILY ORDER MASTERLIST\"],\r\n        [\"Date from and to\"],\r\n        [\"\"],\r\n        [\"DATE SERVED\", \"TOTAL DUE\", \"DISCOUNT\", \"AMOUNT PAID\", \"BALANCE DUE\"],\r\n      ],\r\n    }\r\n    const [dataWithPartials, dailySummaryGrandTotal] =\r\n      dailySummaryHandleExcel(filteredData)\r\n    if (dataWithPartials.length > 0) {\r\n      const dailySummaryGrandTotalObj = { ...dailySummaryGrandTotal[0] }\r\n      for (const row of dataWithPartials.reverse()) {\r\n        orders[\"dSummary\"].push([\r\n          row[DATE_START],\r\n          row[TOTAL_DUE],\r\n          row?.discount,\r\n          row[AMOUNT_PAID],\r\n          row?.balanceDue,\r\n        ])\r\n      }\r\n\r\n      orders[\"dSummary\"].push([\r\n        \"TOTAL\",\r\n        dailySummaryGrandTotalObj[TOTAL_DUE],\r\n        dailySummaryGrandTotalObj?.discount,\r\n        dailySummaryGrandTotalObj[AMOUNT_PAID],\r\n        dailySummaryGrandTotalObj?.balanceDue,\r\n      ])\r\n    }\r\n    return orders\r\n  }\r\n\r\n  const exportOrderSummaryBySource = (filteredData, sourceList) => {\r\n    const orders = {}\r\n    for (const source of sourceList) {\r\n      const [sourceSummary, sourceGrandTotal] = sourceHandleExcel(\r\n        filteredData,\r\n        \"\",\r\n        source\r\n      )\r\n      const sourceGrandTotalObj = { ...sourceGrandTotal[0] }\r\n      if (sourceSummary.length > 0) {\r\n        orders[source] = [\r\n          [`VITO'S BBQ ${branch.toUpperCase()}`],\r\n          [source.toUpperCase()],\r\n          [\"\"],\r\n          [\"\"],\r\n          [\"DATE SERVED\", \"AMOUNT PAID\"],\r\n        ]\r\n        for (const row of sourceSummary) {\r\n          orders[source].push([row[DATE_START], row[AMOUNT_PAID]])\r\n        }\r\n        orders[source].push([\"TOTAL\", sourceGrandTotalObj[AMOUNT_PAID]])\r\n      }\r\n    }\r\n    return orders\r\n  }\r\n  return { exportOrderByDate, exportOrderSummary, exportOrderSummaryBySource }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\TableSummaryCollectableContents.js",
  [
    "1851"
  ],
  "import React, { useEffect } from \"react\"\r\nimport { Table } from \"antd\"\r\nimport { VerticalAutoScroll } from \"./styles\"\r\nimport useSummaryOfCollectibles from \"./hookSummaryOfCollectibles\"\r\nimport { DATE_START } from \"components/SchedulerComponent/orderSlip/types\"\r\n\r\nfunction TableSummaryCollectableContents({\r\n  filteredData = [],\r\n  dateList,\r\n  source,\r\n}) {\r\n  const [summaryData, handleSummaryData, grandTotal] =\r\n    useSummaryOfCollectibles()\r\n\r\n  useEffect(() => {\r\n    if (filteredData.length > 0) {\r\n      handleSummaryData(filteredData, dateList, source)\r\n    }\r\n  }, [filteredData, source])\r\n  return (\r\n    <VerticalAutoScroll>\r\n      <Table\r\n        size=\"small\"\r\n        pagination={false}\r\n        columns={[\r\n          { title: \"Date Served\", key: DATE_START, dataIndex: DATE_START },\r\n          {\r\n            title: \"Amount Paid\",\r\n            key: \"amountPaid\",\r\n            dataIndex: \"amountPaid\",\r\n            align: \"right\",\r\n          },\r\n        ]}\r\n        dataSource={[...summaryData, ...grandTotal]}\r\n      />\r\n    </VerticalAutoScroll>\r\n  )\r\n}\r\n\r\nexport default TableSummaryCollectableContents\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\TableDailySummaryContent.js",
  [
    "1852",
    "1853"
  ],
  "import React, { useEffect } from \"react\"\r\nimport { Card, Space, Table } from \"antd\"\r\nimport { VerticalAutoScroll } from \"Restructured/Components/Features/PaymentTransactionTable/styles\"\r\nimport { DATE_START } from \"Restructured/Constants/schedules\"\r\nimport { AMOUNT_PAID } from \"components/PaymentDetails/types\"\r\nimport useDailySummary from \"./hookDailySummary\"\r\n\r\nfunction TableDailySummaryContent({ filteredData = [], dateList = [] }) {\r\n  const [data, handleData, grandTotal] = useDailySummary()\r\n\r\n  useEffect(() => {\r\n    handleData(filteredData, dateList)\r\n  }, [filteredData, dateList])\r\n  return (\r\n    <VerticalAutoScroll>\r\n      <div style={{ padding: \"1rem\", backgroundColor: \"#eee\", height: \"80vh\" }}>\r\n        <Card bordered={false}>\r\n          <Table\r\n            dataSource={[...data, ...grandTotal]}\r\n            pagination={false}\r\n            size=\"small\"\r\n            columns={[\r\n              { title: \"Date Served\", key: DATE_START, dataIndex: DATE_START },\r\n              {\r\n                title: \"Total Due\",\r\n                key: \"totalDue\",\r\n                dataIndex: \"totalDue\",\r\n                align: \"right\",\r\n              },\r\n              {\r\n                title: \"Discount\",\r\n                key: \"discount\",\r\n                dataIndex: \"discount\",\r\n                align: \"right\",\r\n                render: (data) => {\r\n                  if (Number(data) > 0) {\r\n                    return <span style={{ color: \"red\" }}>{data}</span>\r\n                  }\r\n                  return <span>{data}</span>\r\n                },\r\n              },\r\n              {\r\n                title: \"Amount Paid\",\r\n                dataIndex: AMOUNT_PAID,\r\n                key: AMOUNT_PAID,\r\n                align: \"right\",\r\n              },\r\n              {\r\n                title: \"Balance Due\",\r\n                dataIndex: \"balanceDue\",\r\n                key: \"balanceDue\",\r\n                align: \"right\",\r\n              },\r\n            ]}\r\n          />\r\n        </Card>\r\n      </div>\r\n    </VerticalAutoScroll>\r\n  )\r\n}\r\n\r\nexport default TableDailySummaryContent\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookPartnerOrders.js",
  [
    "1854",
    "1855",
    "1856",
    "1857"
  ],
  "import {\r\n  DATE_ORDER_PLACED,\r\n  ORDER_VIA_PARTNER,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { useState } from \"react\"\r\nimport { ORDER_VIA, DATE_START, STATUS } from \"Restructured/Constants/schedules\"\r\nimport {\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  TOTAL_DUE,\r\n} from \"components/PaymentDetails/types\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray, {\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport { handlePartials } from \"./hookDirectOrders\"\r\n\r\nexport default function usePartnerOrderHook() {\r\n  const [data, setData] = useState([])\r\n  const [grandTotal, setGrandTotal] = useState([])\r\n  const [summaryOfSource, setSummaryOfSource] = useState([])\r\n  const [grandTotalSourceSum, setGrandTotalSourceSum] = useState([])\r\n  const [discounts, setDiscounts] = useState([])\r\n\r\n  const handleData = (filteredData = [], dateString, orderViaPartner) => {\r\n    const _data = filteredData.filter(\r\n      (row) =>\r\n        row[DATE_START] === dateString &&\r\n        row[ORDER_VIA_PARTNER] === orderViaPartner &&\r\n        row[STATUS] !== \"CANCELLED\"\r\n    )\r\n    const dataWithPartials = handlePartials(_data)\r\n    const grandTotalDue = handleGrandTotalDue(_data)\r\n    const discounts = handleDiscounts(_data)\r\n    const grandTotalAmountPaid = handleGrandTotalAmountPaid(_data)\r\n    const summaryOfSource = handleSummary(dataWithPartials)\r\n    const grandTotalSource = handleGrandTotalSource(summaryOfSource)\r\n    setGrandTotal([\r\n      {\r\n        amountPaid: grandTotalAmountPaid,\r\n        [DATE_ORDER_PLACED]: \"Grand Total\",\r\n        totalDue: grandTotalDue,\r\n      },\r\n    ])\r\n    setGrandTotalSourceSum([\r\n      {\r\n        amountPaid: Number(grandTotalSource).toFixed(2),\r\n        [SOURCE]: \"Total\",\r\n      },\r\n    ])\r\n    setDiscounts(discounts)\r\n    setSummaryOfSource(summaryOfSource)\r\n    setData(dataWithPartials)\r\n  }\r\n\r\n  const handleExcel = (filteredData = [], dateString, orderViaPartner) => {\r\n    const _data = filteredData.filter(\r\n      (row) =>\r\n        row[DATE_START] === dateString &&\r\n        row[ORDER_VIA_PARTNER] === orderViaPartner &&\r\n        row[STATUS] !== \"CANCELLED\"\r\n    )\r\n    const dataWithPartials = handlePartials(_data)\r\n    const grandTotalDue = handleGrandTotalDue(_data)\r\n    const discounts = handleDiscounts(_data)\r\n    const grandTotalDisc = handleGrandTotalDisc(discounts)\r\n    const grandTotalAmountPaid = handleGrandTotalAmountPaid(_data)\r\n    const summaryOfSource = handleSummary(dataWithPartials)\r\n    const grandTotalSource = handleGrandTotalSource(summaryOfSource)\r\n    const grandTotalObj = [\r\n      {\r\n        amountPaid: grandTotalAmountPaid,\r\n        [DATE_ORDER_PLACED]: \"Grand Total\",\r\n        discount: grandTotalDisc,\r\n        totalDue: grandTotalDue,\r\n      },\r\n    ]\r\n    const grandTotalSourceObj = [\r\n      {\r\n        amountPaid: Number(grandTotalSource).toFixed(2),\r\n        [SOURCE]: \"Total\",\r\n      },\r\n    ]\r\n    return [\r\n      dataWithPartials,\r\n      grandTotalObj,\r\n      summaryOfSource,\r\n      grandTotalSourceObj,\r\n      discounts,\r\n    ]\r\n  }\r\n\r\n  const handleSummary = (data) => {\r\n    const _data = sumArrayOfObjectsGrouping(data, SOURCE, AMOUNT_PAID)\r\n    const clearRowIfAmountIsZero = _data.filter(\r\n      (row) => Number(row?.amountPaid) > 0\r\n    )\r\n    return clearRowIfAmountIsZero\r\n  }\r\n\r\n  const handleGrandTotalAmountPaid = (d) => {\r\n    const _data = sumArray(d, AMOUNT_PAID)\r\n    return _data\r\n  }\r\n\r\n  const handleGrandTotalSource = (d) => {\r\n    const _data = sumArray(d, AMOUNT_PAID)\r\n    return _data\r\n  }\r\n\r\n  const handleGrandTotalDue = (d) => {\r\n    const _data = sumArray(d, TOTAL_DUE)\r\n    return _data\r\n  }\r\n\r\n  const handleDiscounts = (d) => {\r\n    const rowWithExistDiscount = []\r\n    for (const obj of d) {\r\n      if (obj?.others) {\r\n        for (const key in obj?.others) {\r\n          rowWithExistDiscount.push({\r\n            description: key,\r\n            totalDue: obj?.totalDue,\r\n            discount: Number(obj?.others[key]).toFixed(2),\r\n            orderNo: obj.orderNo,\r\n          })\r\n          break\r\n        }\r\n      }\r\n    }\r\n    return rowWithExistDiscount\r\n  }\r\n\r\n  const handleGrandTotalDisc = (d) => {\r\n    const _data = sumArray(d, \"discount\")\r\n    return _data\r\n  }\r\n\r\n  return [\r\n    data,\r\n    summaryOfSource,\r\n    grandTotal,\r\n    grandTotalSourceSum,\r\n    handleData,\r\n    handleExcel,\r\n    discounts,\r\n  ]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\styles.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookDirectOrders.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\TablePartnerOrderContents.js",
  [
    "1858",
    "1859",
    "1860"
  ],
  "import React, { useEffect } from \"react\"\r\nimport { Space, Table } from \"antd\"\r\nimport useDirectOrders from \"./hookDirectOrders\"\r\nimport { VerticalAutoScroll } from \"./styles\"\r\nimport usePartnerOrderHook from \"./hookPartnerOrders\"\r\nimport tableColumnsPartner from \"./tableColumnsPartner\"\r\n\r\nfunction TablePartnerOrderContents({\r\n  filteredData = [],\r\n  dateString,\r\n  tableProps,\r\n  orderViaPartner,\r\n}) {\r\n  const [\r\n    partnerOrderData,\r\n    summaryOfSource,\r\n    grandTotal,\r\n    grandTotalSourceSum,\r\n    handlePartnerOrderData,\r\n    handleExcel,\r\n    discounts,\r\n  ] = usePartnerOrderHook()\r\n  useEffect(() => {\r\n    if (filteredData.length > 0) {\r\n      handlePartnerOrderData(filteredData, dateString, orderViaPartner)\r\n    }\r\n  }, [filteredData, dateString])\r\n\r\n  const tablePropsCopy = { ...tableProps }\r\n\r\n  // delete columns that is originally used by direct orders table (the difference is only via column)\r\n  delete tablePropsCopy.columns\r\n  return (\r\n    <VerticalAutoScroll>\r\n      <Table\r\n        {...tablePropsCopy}\r\n        columns={tableColumnsPartner}\r\n        dataSource={[...partnerOrderData, ...grandTotal]}\r\n      />\r\n      {summaryOfSource.length > 0 && (\r\n        <Space align=\"baseline\">\r\n          <Table\r\n            dataSource={[...summaryOfSource, ...grandTotalSourceSum]}\r\n            pagination={false}\r\n            size=\"small\"\r\n            columns={[\r\n              { title: \"Source\", key: \"source\", dataIndex: \"source\" },\r\n              {\r\n                title: \"Amount Paid\",\r\n                dataIndex: \"amountPaid\",\r\n                key: \"amountPaid\",\r\n                align: \"right\",\r\n              },\r\n            ]}\r\n          />\r\n          <Table\r\n            dataSource={[...discounts]}\r\n            pagination={false}\r\n            size=\"small\"\r\n            columns={[\r\n              { title: \"Order No\", key: \"orderNo\", dataIndex: \"orderNo\" },\r\n              {\r\n                title: \"Description\",\r\n                dataIndex: \"description\",\r\n                key: \"description\",\r\n              },\r\n              {\r\n                title: \"Amount Due\",\r\n                dataIndex: \"totalDue\",\r\n                key: \"totalDue\",\r\n                align: \"right\",\r\n              },\r\n              {\r\n                title: \"Discount\",\r\n                dataIndex: \"discount\",\r\n                key: \"discount\",\r\n                align: \"right\",\r\n              },\r\n            ]}\r\n          />\r\n        </Space>\r\n      )}\r\n    </VerticalAutoScroll>\r\n  )\r\n}\r\n\r\nexport default TablePartnerOrderContents\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\TableDirectOrderContents.js",
  [
    "1861",
    "1862"
  ],
  "import React, { useEffect } from \"react\"\r\nimport { Space, Table } from \"antd\"\r\nimport useDirectOrders from \"./hookDirectOrders\"\r\nimport { VerticalAutoScroll } from \"./styles\"\r\n\r\nfunction TableDirectOrderContents({ filteredData, dateString, tableProps }) {\r\n  const [\r\n    directOrderData,\r\n    summaryOfSource,\r\n    grandTotal,\r\n    grandTotalSourceSum,\r\n    handleDirectOrderData,\r\n    handleExcel,\r\n    discounts,\r\n  ] = useDirectOrders()\r\n  useEffect(() => {\r\n    if (filteredData.length > 0) {\r\n      handleDirectOrderData(filteredData, dateString)\r\n    }\r\n  }, [filteredData, dateString])\r\n  return (\r\n    <VerticalAutoScroll>\r\n      <Table {...tableProps} dataSource={[...directOrderData, ...grandTotal]} />\r\n      {summaryOfSource.length > 0 && (\r\n        <Space align=\"baseline\">\r\n          <Table\r\n            dataSource={[...summaryOfSource, ...grandTotalSourceSum]}\r\n            pagination={false}\r\n            size=\"small\"\r\n            columns={[\r\n              { title: \"Source\", key: \"source\", dataIndex: \"source\" },\r\n              {\r\n                title: \"Amount Paid\",\r\n                dataIndex: \"amountPaid\",\r\n                key: \"amountPaid\",\r\n                align: \"right\",\r\n              },\r\n            ]}\r\n          />\r\n          <Table\r\n            dataSource={[...discounts]}\r\n            pagination={false}\r\n            size=\"small\"\r\n            columns={[\r\n              { title: \"Order No\", key: \"orderNo\", dataIndex: \"orderNo\" },\r\n              {\r\n                title: \"Description\",\r\n                dataIndex: \"description\",\r\n                key: \"description\",\r\n              },\r\n              {\r\n                title: \"Amount Due\",\r\n                dataIndex: \"totalDue\",\r\n                key: \"totalDue\",\r\n                align: \"right\",\r\n              },\r\n              {\r\n                title: \"Discount\",\r\n                dataIndex: \"discount\",\r\n                key: \"discount\",\r\n                align: \"right\",\r\n              },\r\n            ]}\r\n          />\r\n        </Space>\r\n      )}\r\n    </VerticalAutoScroll>\r\n  )\r\n}\r\n\r\nexport default TableDirectOrderContents\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookSummaryOfCollectibles.js",
  [
    "1863",
    "1864",
    "1865",
    "1866",
    "1867",
    "1868",
    "1869"
  ],
  "import {\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  TOTAL_DUE,\r\n} from \"components/PaymentDetails/types\"\r\nimport { useState } from \"react\"\r\nimport {\r\n  ORDER_VIA,\r\n  DATE_START,\r\n  STATUS,\r\n  SOURCE,\r\n  DATE_ORDER_PLACED,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray, {\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport { handlePartials } from \"./hookDirectOrders\"\r\n\r\nexport default function useSummaryOfCollectibles() {\r\n  const [data, setData] = useState([])\r\n  const [grandTotal, setGrandTotal] = useState([])\r\n\r\n  const handleData = (filteredData = [], dateString, source) => {\r\n    const dataWithPartials = handlePartials(filteredData)\r\n    const new_data = dataWithPartials.filter((row) => {\r\n      return row?.source === source && row[STATUS] !== \"CANCELLED\"\r\n    })\r\n    const summary = sumArrayOfObjectsGrouping(new_data, DATE_START, AMOUNT_PAID)\r\n    const _grandTotal = sumArray(summary, AMOUNT_PAID)\r\n    setGrandTotal([\r\n      { [DATE_START]: \"Total\", [AMOUNT_PAID]: Number(_grandTotal).toFixed(2) },\r\n    ])\r\n    setData(summary)\r\n  }\r\n\r\n  const handleExcel = (filteredData = [], dateString, source) => {\r\n    const dataWithPartials = handlePartials(filteredData)\r\n    const new_data = dataWithPartials.filter((row) => {\r\n      return row?.source === source && row[STATUS] !== \"CANCELLED\"\r\n    })\r\n    const summary = sumArrayOfObjectsGrouping(new_data, DATE_START, AMOUNT_PAID)\r\n    const _grandTotal = sumArray(summary, AMOUNT_PAID)\r\n    const grandTotalObj = [\r\n      { [DATE_START]: \"Total\", [AMOUNT_PAID]: Number(_grandTotal).toFixed(2) },\r\n    ]\r\n    return [summary, grandTotalObj]\r\n  }\r\n  return [data, handleData, grandTotal, handleExcel]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\hookDailySummary.js",
  [
    "1870",
    "1871",
    "1872",
    "1873",
    "1874",
    "1875"
  ],
  "import {\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  TOTAL_DUE,\r\n} from \"components/PaymentDetails/types\"\r\nimport { useState } from \"react\"\r\nimport {\r\n  ORDER_VIA,\r\n  DATE_START,\r\n  STATUS,\r\n  SOURCE,\r\n  DATE_ORDER_PLACED,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport sumArray, {\r\n  sumArrayOfObjectsGrouping,\r\n} from \"Restructured/Utilities/sumArray\"\r\nimport { handlePartials } from \"./hookDirectOrders\"\r\n\r\nconst mergeSummaryHandler = (totalAmountPaid, totalDue, totalDiscount) => {\r\n  const combinedData = []\r\n  for (const obj of totalAmountPaid) {\r\n    const discObj = totalDiscount.find(\r\n      (row) => row[DATE_START] === obj[DATE_START]\r\n    )\r\n    const totalDueObj = totalDue.find(\r\n      (row) => row[DATE_START] === obj[DATE_START]\r\n    )\r\n\r\n    const balanceDue =\r\n      Number(totalDueObj[TOTAL_DUE]) -\r\n      Number(obj[AMOUNT_PAID]) -\r\n      Number(discObj?.others)\r\n\r\n    combinedData.push({\r\n      ...obj,\r\n      totalDue: totalDueObj?.totalDue,\r\n      discount: discObj?.others,\r\n      balanceDue: balanceDue.toFixed(2),\r\n    })\r\n  }\r\n  return combinedData\r\n}\r\n\r\nexport default function useDailySummary() {\r\n  const [data, setData] = useState([])\r\n  const [grandTotal, setGrandTotal] = useState([])\r\n\r\n  const handleData = (filteredData = [], dateString) => {\r\n    const dataWithPartials = handlePartials(filteredData)\r\n    const new_data = dataWithPartials.filter(\r\n      (row) => row?.amountPaid && row[STATUS] !== \"CANCELLED\"\r\n    )\r\n    const _data = sumArrayOfObjectsGrouping(new_data, DATE_START, AMOUNT_PAID)\r\n    const dailyTotalDue = sumArrayOfObjectsGrouping(\r\n      new_data,\r\n      DATE_START,\r\n      \"totalDue\"\r\n    )\r\n    const dailySummaryDisc = sumArrayOfObjectsGrouping(\r\n      new_data,\r\n      DATE_START,\r\n      \"others\"\r\n    )\r\n\r\n    // to combine the discount list and totalDue list in total amount paids list\r\n    const mergeSummary = mergeSummaryHandler(\r\n      _data, // list of total amount paids\r\n      dailyTotalDue, // list of total dues\r\n      dailySummaryDisc // list of total discounts\r\n    )\r\n\r\n    const _newData = mergeSummary.filter((row) => Number(row?.amountPaid) > 0)\r\n    const _grandTotal = sumArray(_newData, AMOUNT_PAID)\r\n    const _grandTotalDue = sumArray(_newData, TOTAL_DUE)\r\n    const _grandDiscount = sumArray(_newData, \"discount\")\r\n    const _grandBalanceDue = sumArray(_newData, \"balanceDue\")\r\n    setGrandTotal([\r\n      {\r\n        [DATE_START]: \"Total\",\r\n        [AMOUNT_PAID]: Number(_grandTotal).toFixed(2),\r\n        [TOTAL_DUE]: Number(_grandTotalDue).toFixed(2),\r\n        discount: Number(_grandDiscount).toFixed(2),\r\n        balanceDue: Number(_grandBalanceDue).toFixed(2),\r\n      },\r\n    ])\r\n    setData(_newData)\r\n  }\r\n\r\n  const handleExcel = (filteredData = [], dateString) => {\r\n    const dataWithPartials = handlePartials(filteredData)\r\n    const new_data = dataWithPartials.filter(\r\n      (row) => row?.amountPaid && row[STATUS] !== \"CANCELLED\"\r\n    )\r\n    const _data = sumArrayOfObjectsGrouping(new_data, DATE_START, AMOUNT_PAID)\r\n    const dailyTotalDue = sumArrayOfObjectsGrouping(\r\n      new_data,\r\n      DATE_START,\r\n      \"totalDue\"\r\n    )\r\n    const dailySummaryDisc = sumArrayOfObjectsGrouping(\r\n      new_data,\r\n      DATE_START,\r\n      \"others\"\r\n    )\r\n\r\n    // to combine the discount list and totalDue list in total amount paids list\r\n    const mergeSummary = mergeSummaryHandler(\r\n      _data, // list of total amount paids\r\n      dailyTotalDue, // list of total dues\r\n      dailySummaryDisc // list of total discounts\r\n    )\r\n\r\n    const _newData = mergeSummary.filter((row) => Number(row?.amountPaid) > 0)\r\n    const _grandTotal = sumArray(_newData, AMOUNT_PAID)\r\n    const _grandTotalDue = sumArray(_newData, TOTAL_DUE)\r\n    const _grandDiscount = sumArray(_newData, \"discount\")\r\n    const _grandBalanceDue = sumArray(_newData, \"balanceDue\")\r\n    const grandTotalObj = [\r\n      {\r\n        [DATE_START]: \"Total\",\r\n        [AMOUNT_PAID]: Number(_grandTotal).toFixed(2),\r\n        [TOTAL_DUE]: Number(_grandTotalDue).toFixed(2),\r\n        discount: Number(_grandDiscount).toFixed(2),\r\n        balanceDue: Number(_grandBalanceDue).toFixed(2),\r\n      },\r\n    ]\r\n    return [_newData, grandTotalObj]\r\n  }\r\n  return [data, handleData, grandTotal, handleExcel]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsTransaction\\tableColumnsPartner.js",
  [
    "1876",
    "1877",
    "1878",
    "1879",
    "1880",
    "1881"
  ],
  "import { Tag, Space } from \"antd\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  ORDER_VIA_PARTNER,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nconst tableColumnsPartner = [\r\n  {\r\n    title: \"DATE PLACED\",\r\n    dataIndex: DATE_ORDER_PLACED,\r\n    key: DATE_ORDER_PLACED,\r\n    render: (text) => <a>{text}</a>,\r\n    innerWidth: 22,\r\n  },\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"10%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"NAME\",\r\n    dataIndex: CUSTOMER,\r\n    key: CUSTOMER,\r\n  },\r\n  {\r\n    title: \"CONTACT #\",\r\n    dataIndex: CONTACT_NUMBER,\r\n    key: CONTACT_NUMBER,\r\n  },\r\n  // {\r\n  //   title: \"DATE ORDER\",\r\n  //   dataIndex: DATE_START,\r\n  //   key: DATE_START,\r\n  // },\r\n  {\r\n    title: \"TIME\",\r\n    dataIndex: \"time\",\r\n    key: \"time\",\r\n  },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  // },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (data === \"__\") {\r\n        return <span>{data}</span>\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISC\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (data > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{data}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => <span>{Number(data).toFixed(2)}</span>,\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (data) {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{data}</span>\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"TOTAL AMOUNT\",\r\n  //   dataIndex: \"totalDue\",\r\n  //   key: \"totalDue\",\r\n  //   align: \"right\",\r\n  // },\r\n  // {\r\n  //   title: \"OTHERS/DEDUCTION\",\r\n  //   dataIndex: \"others\",\r\n  //   key: \"others\",\r\n  //   align: \"right\",\r\n  //   render: (tags) => {\r\n  //     return (\r\n  //       <>\r\n  //         {typeof tags !== \"undefined\" ? (\r\n  //           Object.keys(tags).map((tag) => {\r\n  //             return <Tag key={tag}>{`${tags[tag]}`}</Tag>\r\n  //           })\r\n  //         ) : (\r\n  //           <Tag></Tag>\r\n  //         )}\r\n  //       </>\r\n  //     )\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"PAYMENT TYPE\",\r\n    dataIndex: \"partials\",\r\n    key: \"partials\",\r\n  },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default tableColumnsPartner\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\11.AnalyticsCustomer\\index.js",
  [
    "1882",
    "1883",
    "1884"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport {\r\n  DAILY_REPORTS,\r\n  REPORTS,\r\n  CUSTOMER_REPORTS,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport AnalyticsCustomer from \"components/features/AnalyticsCustomer\"\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([REPORTS, CUSTOMER_REPORTS]))\r\n  }, [])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <AnalyticsCustomer />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\index.js",
  [
    "1885",
    "1886",
    "1887",
    "1888"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Button,\r\n  DatePicker,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Tabs,\r\n  Input,\r\n  Tooltip,\r\n  Card,\r\n} from \"antd\"\r\nimport { SearchOutlined, FilterOutlined } from \"@ant-design/icons\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport useAnalyticsCustomer from \"./hook\"\r\nimport { VerticalAutoScroll } from \"../AnalyticsTransaction/styles\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport { AMOUNT_PAID, TOTAL_DUE } from \"components/PaymentDetails/types\"\r\nimport PrintComponent from \"./PrintComponent\"\r\nimport othersTableColumns from \"./othersTableColumns\"\r\nimport Animate, {\r\n  FadeIn,\r\n  SlideInRight,\r\n  SlideOutRight,\r\n  Wobble,\r\n} from \"animate-css-styled-components\"\r\nimport { useRef } from \"react\"\r\nconst { RangePicker } = DatePicker\r\nconst { TabPane } = Tabs\r\n\r\nconst numbeStyle = {\r\n  style: {\r\n    fontSize: \"1.5rem\",\r\n  },\r\n}\r\nfunction AnalyticsCustomer() {\r\n  const [scrollPosition, setScrollPosition] = useState(0)\r\n  const [tabValue, setTabValue] = useState(\"\")\r\n  const [filteredCustomer, setFilteredCustomer] = useState([])\r\n  const [grandTotals, setGrandTotals] = useState({\r\n    totalDue: 0,\r\n    discount: 0,\r\n    amountPaid: 0,\r\n    balanceDue: 0,\r\n  })\r\n\r\n  useEffect(() => {\r\n    window.onscroll = (e) => {\r\n      setScrollPosition(document.documentElement.scrollTop)\r\n    }\r\n  }, [])\r\n  /// main hook\r\n  const [\r\n    { rangeProps, searchButtonProps, tableProps },\r\n    customerList,\r\n    dataByCustomer,\r\n    filteredData,\r\n  ] = useAnalyticsCustomer()\r\n\r\n  const style = {\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    padding: \"1rem\",\r\n  }\r\n\r\n  const othersTableProps = {\r\n    ...tableProps,\r\n    columns: [...othersTableColumns],\r\n    pagination: true,\r\n  }\r\n  const handleFilter = (e) => {\r\n    const _filteredCustomer = customerList.filter(\r\n      (key) =>\r\n        key.includes(e.target.value) ||\r\n        key.includes(e.target.value.toUpperCase())\r\n    )\r\n    setFilteredCustomer(_filteredCustomer)\r\n    if (tabValue.includes(e.target.value)) {\r\n    } else {\r\n      setTabValue(\"\")\r\n      setGrandTotals({\r\n        totalDue: 0,\r\n        discount: 0,\r\n        amountPaid: 0,\r\n        balanceDue: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleClickCustomer = (customer) => {\r\n    setTabValue(customer)\r\n    const customerData =\r\n      typeof dataByCustomer[customer] !== \"undefined\"\r\n        ? dataByCustomer[customer]\r\n        : []\r\n\r\n    const dataWithDiscount = []\r\n    for (const obj of customerData) {\r\n      let disc = 0\r\n      if (typeof obj.others !== \"undefined\") {\r\n        for (const key of Object.keys(obj.others)) {\r\n          disc = obj.others[key]\r\n          break\r\n        }\r\n      }\r\n      dataWithDiscount.push({ ...obj, others: Number(disc) })\r\n    }\r\n\r\n    const totalDue = sumArray(customerData, TOTAL_DUE)\r\n    const amountPaid = sumArray(customerData, AMOUNT_PAID)\r\n    const discount = sumArray(dataWithDiscount, \"others\")\r\n    const balanceDue = totalDue - amountPaid - Number(discount)\r\n    setGrandTotals({\r\n      totalDue,\r\n      discount: Number(discount),\r\n      amountPaid,\r\n      balanceDue,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Space direction=\"horizontal\" style={style}>\r\n          <span>\r\n            {customerList.length > 0 && (\r\n              <Space>\r\n                <label>Name </label>\r\n                <Input\r\n                  placeholder=\"Filter\"\r\n                  onChange={handleFilter}\r\n                  suffix={\r\n                    <Tooltip title=\"Filter by name\">\r\n                      <FilterOutlined style={{ color: \"rgba(0,0,0,.45)\" }} />\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              </Space>\r\n            )}\r\n          </span>\r\n          <Space wrap>\r\n            Date Order:\r\n            <RangePicker {...rangeProps} />\r\n            <Button\r\n              {...searchButtonProps}\r\n              danger\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </Space>\r\n\r\n        <VerticalAutoScroll>\r\n          <Row style={{ padding: \"1rem\" }}>\r\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\r\n              <Tabs\r\n                activeKey={tabValue}\r\n                tabPosition=\"top\"\r\n                style={{ height: \"77vh\", position: \"relative\" }}\r\n                size=\"small\"\r\n                onChange={handleClickCustomer}\r\n              >\r\n                {filteredCustomer.length > 0\r\n                  ? filteredCustomer.map((customer) => {\r\n                      if (!customer) {\r\n                        return <></>\r\n                      }\r\n                      const recordFound =\r\n                        typeof dataByCustomer[customer] !== \"undefined\"\r\n                          ? dataByCustomer[customer].length\r\n                          : 0\r\n                      return (\r\n                        <TabPane\r\n                          tab={customer}\r\n                          key={customer}\r\n                          style={{\r\n                            backgroundColor: \"#eee\",\r\n                            padding: \"1rem\",\r\n                            height: \"80vh\",\r\n                          }}\r\n                        >\r\n                          <Card\r\n                            title={customer}\r\n                            extra={\r\n                              <PrintComponent\r\n                                dataByCustomer={[...dataByCustomer[customer]]}\r\n                                customer={customer}\r\n                                grandTotals={grandTotals}\r\n                              />\r\n                            }\r\n                            actions={[\r\n                              <div>{`Records Found: ${recordFound}`}</div>,\r\n                            ]}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <Table\r\n                                {...tableProps}\r\n                                dataSource={[...dataByCustomer[customer]]}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                        </TabPane>\r\n                      )\r\n                    })\r\n                  : customerList.map((customer) => {\r\n                      if (!customer) {\r\n                        return <></>\r\n                      }\r\n                      const recordFound =\r\n                        typeof dataByCustomer[customer] !== \"undefined\"\r\n                          ? dataByCustomer[customer].length\r\n                          : 0\r\n                      return (\r\n                        <TabPane\r\n                          tab={customer}\r\n                          key={customer}\r\n                          style={{\r\n                            backgroundColor: \"#eee\",\r\n                            padding: \"1rem\",\r\n                            height: \"80vh\",\r\n                            position: \"relative\",\r\n                          }}\r\n                        >\r\n                          <Card\r\n                            title={customer}\r\n                            extra={\r\n                              <PrintComponent\r\n                                dataByCustomer={[...dataByCustomer[customer]]}\r\n                                customer={customer}\r\n                                grandTotals={grandTotals}\r\n                              />\r\n                            }\r\n                            actions={[\r\n                              <div>{`Records Found: ${recordFound}`}</div>,\r\n                            ]}\r\n                          >\r\n                            <VerticalAutoScroll>\r\n                              <Table\r\n                                {...tableProps}\r\n                                dataSource={[...dataByCustomer[customer]]}\r\n                              />\r\n                            </VerticalAutoScroll>\r\n                          </Card>\r\n                        </TabPane>\r\n                      )\r\n                    })}\r\n              </Tabs>\r\n            </Col>\r\n            <Col\r\n              xs={24}\r\n              sm={24}\r\n              md={24}\r\n              lg={24}\r\n              xl={24}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Space wrap size={[16, 5]}>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Total Due\r\n                  </span>\r\n                  <span {...numbeStyle}>\r\n                    <b>{grandTotals.totalDue.toFixed(2)}</b>\r\n                  </span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Discount\r\n                  </span>\r\n                  <span {...numbeStyle}>{grandTotals.discount.toFixed(2)}</span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Amount Paid\r\n                  </span>\r\n                  <span {...numbeStyle}>\r\n                    {grandTotals.amountPaid.toFixed(2)}\r\n                  </span>\r\n                </Space>\r\n                <Space direction=\"vertical\" size={[1, 1]} align=\"end\">\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"10px\",\r\n                      color: \"grey\",\r\n                    }}\r\n                  >\r\n                    Balance Due\r\n                  </span>\r\n                  <span\r\n                    style={\r\n                      grandTotals.balanceDue > 0\r\n                        ? { color: \"red\", ...numbeStyle.style }\r\n                        : { ...numbeStyle.style }\r\n                    }\r\n                  >\r\n                    {grandTotals.balanceDue.toFixed(2)}\r\n                  </span>\r\n                </Space>\r\n              </Space>\r\n            </Col>\r\n          </Row>\r\n        </VerticalAutoScroll>\r\n\r\n        <VerticalAutoScroll>\r\n          <Space\r\n            direction=\"vertical\"\r\n            style={{ padding: \"1rem\", height: \"100vh\", width: \"100%\" }}\r\n          >\r\n            <Card\r\n              title=\"OTHER ORDERS\"\r\n              extra={\r\n                scrollPosition > 800 && (\r\n                  <Animate\r\n                    Animation={[SlideInRight]}\r\n                    duration={[\"1s\"]}\r\n                    delay={[\"0.2s\"]}\r\n                  >\r\n                    <Space wrap>\r\n                      Date Order:\r\n                      <RangePicker {...rangeProps} />\r\n                      <Button\r\n                        {...searchButtonProps}\r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        icon={<SearchOutlined />}\r\n                      />\r\n                    </Space>\r\n                  </Animate>\r\n                )\r\n              }\r\n            >\r\n              <VerticalAutoScroll>\r\n                <Table\r\n                  {...othersTableProps}\r\n                  dataSource={[\r\n                    ...filteredData.filter(\r\n                      (data) => data.orderVia === \"[ OTH ] OTHER\"\r\n                    ),\r\n                  ]}\r\n                />\r\n              </VerticalAutoScroll>\r\n            </Card>\r\n          </Space>\r\n        </VerticalAutoScroll>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnalyticsCustomer\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\hook.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\tableColumns.js",
  [
    "1889",
    "1890",
    "1891",
    "1892",
    "1893",
    "1894",
    "1895"
  ],
  "import { Tag, Space } from \"antd\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nimport { UTAK_NO } from \"components/SchedulerComponent/orderSlip/types\"\r\nconst tableColumns = [\r\n  // {\r\n  //   title: \"DATE PLACED\",\r\n  //   dataIndex: DATE_ORDER_PLACED,\r\n  //   key: DATE_ORDER_PLACED,\r\n  //   render: (text) => <a>{text}</a>,\r\n  //   width: \"8%\",\r\n  // },\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"13%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"UTAK #\",\r\n    dataIndex: UTAK_NO,\r\n    key: UTAK_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n    render: (text) => <a>{text}</a>,\r\n    width: \"8%\",\r\n  },\r\n  // {\r\n  //   title: \"NAME\",\r\n  //   dataIndex: CUSTOMER,\r\n  //   key: CUSTOMER,\r\n  // },\r\n  // {\r\n  //   title: \"CONTACT #\",\r\n  //   dataIndex: CONTACT_NUMBER,\r\n  //   key: CONTACT_NUMBER,\r\n  // },\r\n  // {\r\n  //   title: \"VIA\",\r\n  //   dataIndex: ORDER_VIA,\r\n  //   key: ORDER_VIA,\r\n  // },\r\n  // {\r\n  //   title: \"DATE ORDER\",\r\n  //   dataIndex: DATE_START,\r\n  //   key: DATE_START,\r\n  // },\r\n  // {\r\n  //   title: \"TIME\",\r\n  //   dataIndex: \"time\",\r\n  //   key: \"time\",\r\n  // },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  // },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      let disc = 0\r\n      if (typeof data !== \"undefined\") {\r\n        for (const key of Object.keys(data)) {\r\n          disc = data[key]\r\n          break\r\n        }\r\n      }\r\n      if (disc > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(disc).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (typeof data !== \"undefined\") {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(\"0\").toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      let amountPaid =\r\n        typeof record?.amountPaid !== \"undefined\" ? record?.amountPaid : 0\r\n      let totalDue =\r\n        typeof record?.totalDue !== \"undefined\" ? record?.totalDue : 0\r\n      let disc = 0\r\n      if (typeof record?.others !== \"undefined\") {\r\n        for (const key of Object.keys(record?.others)) {\r\n          disc = record?.others[key]\r\n          break\r\n        }\r\n      }\r\n      const balanceDue = Number(totalDue) - Number(amountPaid) - Number(disc)\r\n      return <span>{Number(balanceDue).toFixed(2)}</span>\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"TOTAL AMOUNT\",\r\n  //   dataIndex: \"totalDue\",\r\n  //   key: \"totalDue\",\r\n  //   align: \"right\",\r\n  // },\r\n  // {\r\n  //   title: \"OTHERS/DEDUCTION\",\r\n  //   dataIndex: \"others\",\r\n  //   key: \"others\",\r\n  //   align: \"right\",\r\n  //   render: (tags) => {\r\n  //     return (\r\n  //       <>\r\n  //         {typeof tags !== \"undefined\" ? (\r\n  //           Object.keys(tags).map((tag) => {\r\n  //             return <Tag key={tag}>{`${tags[tag]}`}</Tag>\r\n  //           })\r\n  //         ) : (\r\n  //           <Tag></Tag>\r\n  //         )}\r\n  //       </>\r\n  //     )\r\n  //   },\r\n  // },\r\n  // {\r\n  //   title: \"PAYMENT TYPE\",\r\n  //   dataIndex: \"partials\",\r\n  //   key: \"partials\",\r\n  //   render: (data) => {\r\n  //     if (data === \"Discounted\") {\r\n  //       return <span style={{ color: \"red\" }}>{data}</span>\r\n  //     } else {\r\n  //       return <span>{data}</span>\r\n  //     }\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default tableColumns\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\PrintComponent.js",
  [
    "1896",
    "1897",
    "1898"
  ],
  "import React from \"react\"\r\nimport Print from \"Restructured/Components/Features/Print\"\r\nimport { Divider, Space } from \"antd\"\r\nimport { PrinterFilled } from \"@ant-design/icons\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport {\r\n  DATE_START,\r\n  ORDER_NO,\r\n  SOURCE,\r\n  STATUS,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n  TOTAL_DUE,\r\n} from \"components/PaymentDetails/types\"\r\n\r\nfunction PrintComponent(props) {\r\n  const handleDiscount = (data) => {\r\n    let disc = 0\r\n    if (typeof data !== \"undefined\") {\r\n      for (const key of Object.keys(data)) {\r\n        disc = data[key]\r\n        break\r\n      }\r\n    }\r\n    if (disc > 0) {\r\n      return Number(disc).toFixed(2)\r\n    }\r\n    return Number(disc).toFixed(2)\r\n  }\r\n\r\n  const handleBalance = (totalDue = 0, amountPaid = 0, others = {}) => {\r\n    const _discount = Number(handleDiscount(others))\r\n    const _amountPaid = Number(amountPaid)\r\n    const _totalDue = Number(totalDue)\r\n    const balanceDue = _totalDue - _amountPaid - _discount\r\n    return balanceDue.toFixed(2)\r\n  }\r\n  return (\r\n    <Print\r\n      component={\r\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n          <span>{props.customer}</span>\r\n          <table style={{ fontSize: \"8px\", width: \"100%\" }}>\r\n            <tr\r\n              style={{\r\n                fontWeight: 700,\r\n                backgroundColor: \"#999\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <td>ORDER #</td>\r\n              <td>DATE ORDER</td>\r\n              <td>MODE</td>\r\n              <td>SOURCE</td>\r\n              <td>REF #</td>\r\n              <td>ACCT #</td>\r\n              <td align=\"right\">TOTAL DUE</td>\r\n              <td align=\"right\">DISCOUNT</td>\r\n              <td align=\"right\">AMOUNT PAID</td>\r\n              <td align=\"right\">BALANCE DUE</td>\r\n              <td align=\"right\">STATUS</td>\r\n            </tr>\r\n            {props.dataByCustomer.map((data, index) => {\r\n              return (\r\n                <tr\r\n                  style={\r\n                    index % 2 === 0\r\n                      ? { backgroundColor: \"white\" }\r\n                      : { backgroundColor: \"#999\" }\r\n                  }\r\n                >\r\n                  <td>{data[ORDER_NO]}</td>\r\n                  <td>{data[DATE_START]}</td>\r\n                  <td>{data[MODE_PAYMENT]}</td>\r\n                  <td>{data[SOURCE]}</td>\r\n                  <td>{data[REF_NO]}</td>\r\n                  <td>{data[ACCOUNT_NUMBER]}</td>\r\n                  <td align=\"right\">{data[TOTAL_DUE]}</td>\r\n                  <td align=\"right\">{handleDiscount(data?.others)}</td>\r\n                  <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                  <td align=\"right\">\r\n                    {handleBalance(\r\n                      data[TOTAL_DUE],\r\n                      data[AMOUNT_PAID],\r\n                      data?.others\r\n                    )}\r\n                  </td>\r\n                  <td align=\"right\">{data[STATUS]}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n          </table>\r\n          <span>Grand Totals</span>\r\n          <table style={{ fontSize: \"8px\", width: \"20%\" }}>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Total Due:</td>\r\n              <td align=\"right\">{props?.grandTotals.totalDue}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Discount:</td>\r\n              <td align=\"right\">{props?.grandTotals.discount}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Amount Paid:</td>\r\n              <td align=\"right\">{props?.grandTotals.amountPaid}</td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ fontWeight: 700 }}>Balance Due:</td>\r\n              <td align=\"right\">{props?.grandTotals.balanceDue}</td>\r\n            </tr>\r\n          </table>\r\n        </Space>\r\n      }\r\n      button={<PrinterFilled fontSize=\"2.5rem\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrintComponent\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsCustomer\\othersTableColumns.js",
  [
    "1899",
    "1900",
    "1901",
    "1902",
    "1903",
    "1904"
  ],
  "import { Tag, Space } from \"antd\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nimport { UTAK_NO } from \"components/SchedulerComponent/orderSlip/types\"\r\nconst othersTableColumns = [\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n    width: \"13%\",\r\n    render: (data, record) => {\r\n      if (record?.others > 0) {\r\n        return <span style={{ fontWeigth: \"bold\", color: \"red\" }}>{data}</span>\r\n      } else {\r\n        return <span>{data}</span>\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: \"UTAK #\",\r\n    dataIndex: UTAK_NO,\r\n    key: UTAK_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"CUSTOMER\",\r\n    dataIndex: CUSTOMER,\r\n    key: CUSTOMER,\r\n  },\r\n  {\r\n    title: \"DATE PAYMENT\",\r\n    dataIndex: DATE_PAYMENT,\r\n    key: DATE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"MODE\",\r\n    dataIndex: MODE_PAYMENT,\r\n    key: MODE_PAYMENT,\r\n  },\r\n  {\r\n    title: \"SOURCE\",\r\n    dataIndex: SOURCE,\r\n    key: SOURCE,\r\n  },\r\n  {\r\n    title: \"REF #\",\r\n    dataIndex: REF_NO,\r\n    key: REF_NO,\r\n  },\r\n  {\r\n    title: \"ACCT #\",\r\n    dataIndex: ACCOUNT_NUMBER,\r\n    key: ACCOUNT_NUMBER,\r\n  },\r\n  {\r\n    title: \"TOTAL DUE\",\r\n    dataIndex: \"totalDue\",\r\n    key: \"totalDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      if (data === 0) {\r\n        if (record?.partials === \"Partial\") {\r\n          return <span>__</span>\r\n        } else {\r\n          return <span>{data}</span>\r\n        }\r\n      }\r\n      return <span>{Number(data).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"others\",\r\n    key: \"others\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      let disc = 0\r\n      if (typeof data !== \"undefined\") {\r\n        for (const key of Object.keys(data)) {\r\n          disc = data[key]\r\n          break\r\n        }\r\n      }\r\n      if (disc > 0) {\r\n        return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(disc).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"AMOUNT PAID\",\r\n    dataIndex: \"amountPaid\",\r\n    key: \"amountPaid\",\r\n    align: \"right\",\r\n    render: (data) => {\r\n      if (typeof data !== \"undefined\") {\r\n        return <span>{Number(data).toFixed(2)}</span>\r\n      }\r\n      return <span>{Number(\"0\").toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"BALANCE DUE\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n    align: \"right\",\r\n    render: (data, record) => {\r\n      let amountPaid =\r\n        typeof record?.amountPaid !== \"undefined\" ? record?.amountPaid : 0\r\n      let totalDue =\r\n        typeof record?.totalDue !== \"undefined\" ? record?.totalDue : 0\r\n      let disc = 0\r\n      if (typeof record?.others !== \"undefined\") {\r\n        for (const key of Object.keys(record?.others)) {\r\n          disc = record?.others[key]\r\n          break\r\n        }\r\n      }\r\n      const balanceDue = Number(totalDue) - Number(amountPaid) - Number(disc)\r\n      return <span>{Number(balanceDue).toFixed(2)}</span>\r\n    },\r\n  },\r\n  {\r\n    title: \"STATUS\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (value) => {\r\n      if (value === \"CONFIRMED\") {\r\n        return <Tag color=\"lightblue\">{value}</Tag>\r\n      }\r\n      if (value === \"PENDING PAYMENT\") {\r\n        return <Tag color=\"yellow\">{value}</Tag>\r\n      }\r\n      if (value === \"FULLFILLED\") {\r\n        return <Tag>{value}</Tag>\r\n      }\r\n      return <Tag>{value}</Tag>\r\n    },\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nexport default othersTableColumns\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\containers\\12.AnalyticsDiscounts\\index.js",
  [
    "1905",
    "1906",
    "1907",
    "1908"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport AppBar from \"components/appBar\"\r\nimport { Wrapper, Container, RightContent } from \"../styles\"\r\nimport Sidenav from \"components/sideNav\"\r\nimport Animate, { FadeIn } from \"animate-css-styled-components\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { navigateTo } from \"components/sideNav/sideNavSlice\"\r\nimport {\r\n  DAILY_REPORTS,\r\n  REPORTS,\r\n  CUSTOMER_REPORTS,\r\n  DISCOUNT_OTHERS,\r\n} from \"components/sideNav/2.menu/menuData\"\r\nimport AnalyticsDiscount from \"components/features/AnalyticsDiscount\"\r\n\r\nexport default function (props) {\r\n  const dispatch = useDispatch()\r\n  const [toggle, setToggle] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateTo([REPORTS, DISCOUNT_OTHERS]))\r\n  }, [])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Sidenav isToggled={toggle} />\r\n        <RightContent isToggled={toggle}>\r\n          <Animate Animation={[FadeIn]} duration={[\"1s\"]} delay={[\"0.2s\"]}>\r\n            <AppBar isToggled={toggle} toggle={() => setToggle(!toggle)} />\r\n            <AnalyticsDiscount />\r\n          </Animate>\r\n        </RightContent>\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\index.js",
  [
    "1909",
    "1910",
    "1911",
    "1912",
    "1913",
    "1914",
    "1915",
    "1916",
    "1917",
    "1918",
    "1919"
  ],
  "import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Button,\r\n  DatePicker,\r\n  Space,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Tabs,\r\n  Input,\r\n  Tooltip,\r\n  Card,\r\n} from \"antd\"\r\nimport { SearchOutlined, FilterOutlined } from \"@ant-design/icons\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport useAnalyticsCustomer from \"./hook\"\r\nimport { VerticalAutoScroll } from \"../AnalyticsTransaction/styles\"\r\nimport sumArray from \"Restructured/Utilities/sumArray\"\r\nimport { AMOUNT_PAID, TOTAL_DUE } from \"components/PaymentDetails/types\"\r\nimport discountTableColumns from \"./discountTableColumns\"\r\nimport PrintComponent from \"./PrintComponent\"\r\nimport Animate, { SlideInRight } from \"animate-css-styled-components\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { PuffLoader } from \"react-spinners\"\r\nimport { selectUserSlice } from \"containers/0.NewLogin/loginSlice\"\r\nconst { RangePicker } = DatePicker\r\nconst { TabPane } = Tabs\r\n\r\nconst numbeStyle = {\r\n  style: {\r\n    fontSize: \"1.5rem\",\r\n  },\r\n}\r\n\r\nconst style = {\r\n  justifyContent: \"space-between\",\r\n  width: \"100%\",\r\n  padding: \"1rem\",\r\n}\r\n\r\nfunction AnalyticsDiscount() {\r\n  const userComponentSlice = useSelector(selectUserSlice)\r\n  /// main hook\r\n  const [\r\n    { rangeProps, searchButtonProps, tableProps },\r\n    dataByDiscount,\r\n    filteredData,\r\n    isLoading,\r\n  ] = useAnalyticsCustomer()\r\n  const [tabValue, setTabValue] = useState(\"\")\r\n\r\n  const handleClickDiscount = (discount) => {\r\n    setTabValue(discount)\r\n  }\r\n\r\n  console.log(\"isLoaidng\", isLoading)\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Space direction=\"horizontal\" style={style}>\r\n          <span></span>\r\n          <Space wrap>\r\n            Date Order:\r\n            <RangePicker {...rangeProps} />\r\n            <Button\r\n              {...searchButtonProps}\r\n              danger\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              icon={<SearchOutlined />}\r\n            />\r\n          </Space>\r\n        </Space>\r\n\r\n        {isLoading && (\r\n          <div>\r\n            <PuffLoader />\r\n          </div>\r\n        )}\r\n        <VerticalAutoScroll>\r\n          <Row style={{ padding: \"1rem\" }}>\r\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\r\n              <Tabs\r\n                activeKey={tabValue}\r\n                tabPosition=\"top\"\r\n                style={{ height: \"77vh\", position: \"relative\" }}\r\n                size=\"small\"\r\n                onChange={handleClickDiscount}\r\n              >\r\n                {Object.keys(discountTableColumns).map((discount) => {\r\n                  // if (!customer) {\r\n                  //   return <></>\r\n                  // }\r\n                  // const recordFound =\r\n                  //   typeof dataByCustomer[customer] !== \"undefined\"\r\n                  //     ? dataByCustomer[customer].length\r\n                  //     : 0\r\n                  const _tableProps = {\r\n                    ...tableProps,\r\n                    columns: discountTableColumns[discount],\r\n                  }\r\n\r\n                  // this is for particular discount\r\n                  // const discount = _tableProps.columns.find({title})\r\n                  return (\r\n                    <TabPane\r\n                      tab={discount}\r\n                      key={discount}\r\n                      style={{\r\n                        backgroundColor: \"#eee\",\r\n                        padding: \"1rem\",\r\n                        height: \"80vh\",\r\n                        position: \"relative\",\r\n                      }}\r\n                    >\r\n                      <Card\r\n                        title={discount}\r\n                        extra={\r\n                          <PrintComponent\r\n                            discountTableColumns={{\r\n                              [discount]: [..._tableProps.columns],\r\n                            }}\r\n                            dataByDiscount={dataByDiscount}\r\n                          />\r\n                        }\r\n                        // actions={[<div>{`Records Found: ${recordFound}`}</div>]}\r\n                      >\r\n                        <VerticalAutoScroll>\r\n                          <Table\r\n                            {..._tableProps}\r\n                            dataSource={[...dataByDiscount[discount]]}\r\n                          />\r\n                        </VerticalAutoScroll>\r\n                      </Card>\r\n                    </TabPane>\r\n                  )\r\n                })}\r\n              </Tabs>\r\n            </Col>\r\n          </Row>\r\n          <Space\r\n            style={{\r\n              width: \"100%\",\r\n              justifyContent: \"space-between\",\r\n              padding: \"1rem\",\r\n            }}\r\n          >\r\n            <div>{`Prepared by: ${userComponentSlice.displayName}`}</div>\r\n            <PrintComponent\r\n              discountTableColumns={discountTableColumns}\r\n              dataByDiscount={dataByDiscount}\r\n            />\r\n          </Space>\r\n        </VerticalAutoScroll>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDiscount\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\hook.js",
  [
    "1920",
    "1921",
    "1922",
    "1923",
    "1924",
    "1925"
  ],
  "import { DATE_PAYMENT } from \"components/PaymentDetails/types\"\r\nimport { ORDER_VIA } from \"components/SchedulerComponent/orderSlip/types\"\r\nimport { selectUserSlice } from \"containers/0.NewLogin/loginSlice\"\r\nimport useRangeHandler from \"hooks/rangeHandler\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport {\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatTime,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport ScheduleServicess from \"services/firebase/SchedulesServicess\"\r\nimport tableColumns from \"./tableColumns\"\r\n\r\nconst sortFunct = (a, b) => {\r\n  if (a < b) {\r\n    return -1\r\n  }\r\n  if (a > b) {\r\n    return 1\r\n  }\r\n\r\n  // names must be equal\r\n  return 0\r\n}\r\n\r\nexport default function useAnalyticsCustomer() {\r\n  const userComponent = useSelector(selectUserSlice)\r\n  // reusableHook from hooks folder for dateFrom and dateTo\r\n  const [\r\n    rangeProps,\r\n    rangeHandlerFilteredData,\r\n    loadRangeHandlerData,\r\n    isLoading,\r\n  ] = useRangeHandler(ScheduleServicess)\r\n\r\n  const [filteredData, setFilteredData] = useState([])\r\n  const [otherList, setOtherList] = useState([])\r\n  const defaultDiscountState = {\r\n    \"Senior Citizen\": [],\r\n    PWD: [],\r\n    \"Automatic 50 percent off\": [],\r\n    Promo: [],\r\n    Special: [],\r\n    Incidents: [],\r\n    Refund: [],\r\n    Others: [],\r\n  }\r\n  const [dataByDiscount, setDataByDiscount] = useState({\r\n    ...defaultDiscountState,\r\n  })\r\n\r\n  useEffect(() => {\r\n    const sample = []\r\n    if (rangeHandlerFilteredData?.searchData.length > 0) {\r\n      const _dataByDiscount = { ...defaultDiscountState }\r\n      for (const obj of rangeHandlerFilteredData?.searchData) {\r\n        const dateOrderPlaced = formatDateFromDatabase(obj[DATE_ORDER_PLACED])\r\n        const startTime = formatDateFromDatabase(obj[DATE_START])\r\n        const datePayment = formatDateFromDatabase(obj[DATE_PAYMENT])\r\n        const customer = obj[CUSTOMER]\r\n\r\n        if (obj?.others) {\r\n          for (const key in obj?.others) {\r\n            _dataByDiscount[key].push({\r\n              ...obj?.discountAdditionalDetails[key],\r\n              [DATE_START]: formatDateDash(startTime),\r\n              name: customer,\r\n            })\r\n            if (obj[ORDER_VIA].includes(\"OTHER\")) {\r\n              _dataByDiscount[\"Others\"].push({\r\n                ...obj?.discountAdditionalDetails[key],\r\n                [ORDER_NO]: obj?.orderNo,\r\n                customer: obj?.customer,\r\n                [DATE_START]: formatDateDash(startTime),\r\n                [DATE_PAYMENT]: formatDateDash(datePayment),\r\n                [DATE_ORDER_PLACED]: formatDateDash(dateOrderPlaced),\r\n                discount: key,\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      console.log(\"smaple\", sample)\r\n      setDataByDiscount(_dataByDiscount)\r\n      // const sortedCustList = _discountList.sort(sortFunct)\r\n      // setDataByDiscount(_dataByDiscount)\r\n      // setDiscountList(sortedCustList)\r\n      // setFilteredData(_filteredData)\r\n    } else {\r\n      setDataByDiscount({ ...defaultDiscountState })\r\n      // setDataByDiscount([])\r\n      // setDiscountList([])\r\n      // setFilteredData([])\r\n    }\r\n  }, [rangeHandlerFilteredData?.searchData])\r\n\r\n  const searchHandler = () => {\r\n    loadRangeHandlerData({\r\n      dateField: \"StartTime\", // required\r\n      orderBy: \"StartTime\", // required\r\n      search: {\r\n        //optional\r\n        branch: userComponent?.branches[0],\r\n      },\r\n    })\r\n  }\r\n\r\n  const componentProps = {\r\n    rangeProps,\r\n    searchButtonProps: { onClick: searchHandler },\r\n    tableProps: {\r\n      size: \"small\",\r\n      pagination: true,\r\n      columns: [...tableColumns],\r\n    },\r\n  }\r\n\r\n  return [componentProps, dataByDiscount, filteredData, isLoading]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\PrintComponent.js",
  [
    "1926",
    "1927",
    "1928",
    "1929",
    "1930",
    "1931",
    "1932",
    "1933",
    "1934",
    "1935",
    "1936",
    "1937"
  ],
  "import React from \"react\"\r\nimport Print from \"Restructured/Components/Features/Print\"\r\nimport { Divider, Space } from \"antd\"\r\nimport { PrinterFilled } from \"@ant-design/icons\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport {\r\n  DATE_START,\r\n  ORDER_NO,\r\n  SOURCE,\r\n  STATUS,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n  TOTAL_DUE,\r\n} from \"components/PaymentDetails/types\"\r\n\r\nfunction PrintComponent({ dataByDiscount = {}, discountTableColumns = [] }) {\r\n  return (\r\n    <Print\r\n      component={\r\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n          {Object.keys(discountTableColumns).map((discount) => {\r\n            return (\r\n              <>\r\n                <span>{discount}</span>\r\n                <table\r\n                  style={{\r\n                    fontSize: \"8px\",\r\n                    width: \"100%\",\r\n                    border: \"1px solid grey\",\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    {discountTableColumns[discount].map(({ title }) => (\r\n                      <th\r\n                        style={{\r\n                          border: \"1px solid grey\",\r\n                        }}\r\n                      >\r\n                        {title}\r\n                      </th>\r\n                    ))}\r\n                  </tr>\r\n                  {dataByDiscount[discount].map((data) => {\r\n                    return (\r\n                      <tr>\r\n                        {discountTableColumns[discount].map(({ key }) => (\r\n                          <td\r\n                            style={{\r\n                              border: \"1px solid grey\",\r\n                            }}\r\n                          >\r\n                            {data[key]}\r\n                          </td>\r\n                        ))}\r\n                      </tr>\r\n                    )\r\n                  })}\r\n                </table>\r\n              </>\r\n            )\r\n          })}\r\n        </Space>\r\n      }\r\n      button={<PrinterFilled fontSize=\"2.5rem\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrintComponent\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\tableColumns.js",
  [
    "1938",
    "1939",
    "1940",
    "1941",
    "1942",
    "1943",
    "1944",
    "1945",
    "1946",
    "1947",
    "1948",
    "1949"
  ],
  "import { Tag, Space } from \"antd\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nconst tableColumns = [\r\n  {\r\n    title: \"ORDER #\",\r\n    dataIndex: ORDER_NO,\r\n    key: ORDER_NO,\r\n  },\r\n  {\r\n    title: \"DATE ORDER\",\r\n    dataIndex: DATE_START,\r\n    key: DATE_START,\r\n  },\r\n  {\r\n    title: \"NAME\",\r\n    dataIndex: \"customer\",\r\n    key: \"customer\",\r\n  },\r\n  {\r\n    title: \"DISCOUNT\",\r\n    dataIndex: \"discount\",\r\n    key: \"discount\",\r\n  },\r\n  {\r\n    title: \"AMOUNT\",\r\n    dataIndex: \"amount\",\r\n    key: \"amount\",\r\n    align: \"right\",\r\n  },\r\n  // {\r\n  //   title: \"DISCOUNT\",\r\n  //   dataIndex: \"others\",\r\n  //   key: \"others\",\r\n  //   align: \"right\",\r\n  //   render: (data) => {\r\n  //     let disc = 0\r\n  //     if (typeof data !== \"undefined\") {\r\n  //       for (const key of Object.keys(data)) {\r\n  //         disc = data[key]\r\n  //         break\r\n  //       }\r\n  //     }\r\n  //     if (disc > 0) {\r\n  //       return <span style={{ color: \"red\" }}>{Number(disc).toFixed(2)}</span>\r\n  //     }\r\n  //     return <span>{Number(disc).toFixed(2)}</span>\r\n  //   },\r\n  // },\r\n]\r\n\r\nexport default tableColumns\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\AnalyticsDiscount\\discountTableColumns.js",
  [
    "1950",
    "1951",
    "1952",
    "1953",
    "1954",
    "1955",
    "1956",
    "1957",
    "1958",
    "1959",
    "1960",
    "1961"
  ],
  "import { Tag, Space } from \"antd\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n  ORDER_VIA,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  REF_NO,\r\n} from \"components/PaymentDetails/types\"\r\nimport tableColumns from \"./tableColumns\"\r\nconst firstColumns = [\r\n  {\r\n    title: \"Order Date\",\r\n    key: DATE_START,\r\n    dataIndex: DATE_START,\r\n  },\r\n  {\r\n    title: \"Name\",\r\n    key: CUSTOMER,\r\n    dataIndex: CUSTOMER,\r\n  },\r\n  {\r\n    title: \"City\",\r\n    key: \"city\",\r\n    dataIndex: \"city\",\r\n  },\r\n  {\r\n    title: \"ID #\",\r\n    key: \"id\",\r\n    dataIndex: \"id\",\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    key: \"amount\",\r\n    dataIndex: \"amount\",\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nconst secondColumns = [\r\n  {\r\n    title: \"Order Date\",\r\n    key: DATE_START,\r\n    dataIndex: DATE_START,\r\n  },\r\n  {\r\n    title: \"Name\",\r\n    key: \"name\",\r\n    dataIndex: \"name\",\r\n  },\r\n  {\r\n    title: \"Remarks\",\r\n    key: \"remarks\",\r\n    dataIndex: \"remarks\",\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    key: \"amount\",\r\n    dataIndex: \"amount\",\r\n    align: \"right\",\r\n  },\r\n]\r\n\r\nconst thirdColumns = [\r\n  {\r\n    title: \"Order Date\",\r\n    key: DATE_START,\r\n    dataIndex: DATE_START,\r\n  },\r\n  {\r\n    title: \"Name\",\r\n    key: CUSTOMER,\r\n    dataIndex: CUSTOMER,\r\n  },\r\n  {\r\n    title: \"Order #\",\r\n    key: \"orderNo\",\r\n    dataIndex: \"orderNo\",\r\n  },\r\n  {\r\n    title: \"Contact #\",\r\n    key: \"contactNo\",\r\n    dataIndex: \"contactNo\",\r\n  },\r\n  {\r\n    title: \"Date and Time of Order #\",\r\n    key: \"dateAndTime\",\r\n    dataIndex: \"dateAndTime\",\r\n  },\r\n  {\r\n    title: \"Brief Description\",\r\n    key: \"briefDescription\",\r\n    dataIndex: \"briefDescription\",\r\n  },\r\n  {\r\n    title: \"On Duty\",\r\n    key: \"onDuty\",\r\n    dataIndex: \"onDuty\",\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    key: \"amount\",\r\n    dataIndex: \"amount\",\r\n    align: \"right\",\r\n  },\r\n]\r\nconst discountTableColumns = {\r\n  \"Senior Citizen\": [...firstColumns],\r\n  PWD: [...firstColumns],\r\n  \"Automatic 50 percent off\": [...secondColumns],\r\n  Promo: [...secondColumns],\r\n  Special: [...thirdColumns],\r\n  Incidents: [...thirdColumns],\r\n  Refund: [...secondColumns],\r\n  Others: [...tableColumns],\r\n}\r\n\r\nexport default discountTableColumns\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\index.js",
  [
    "1962",
    "1963",
    "1964",
    "1965",
    "1966",
    "1967",
    "1968",
    "1969",
    "1970",
    "1971",
    "1972",
    "1973",
    "1974",
    "1975",
    "1976",
    "1977",
    "1978"
  ],
  "import { Space, DatePicker, Button, Table, Checkbox, Select } from \"antd\"\r\nimport { Grid } from \"Restructured/Styles\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport useDashboardTransaction from \"./hook\"\r\nimport { SearchOutlined, ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport GroupPayments from \"../TransactionGroupPayments\"\r\nimport PaginateCommands from \"services/firebase/PaginateCommands\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateDash,\r\n  formatDateDashWithTime,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport classes from \"./dashboardTrans.module.css\"\r\nimport {\r\n  ORDER_NO,\r\n  BRANCH,\r\n  DATE_ORDER_PLACED,\r\n  ACCOUNT_NAME,\r\n  CUSTOMER,\r\n  CONTACT_NUMBER,\r\n  DATE_START,\r\n  DATE_END,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  OTHERS_DEDUCTION,\r\n  TOTAL_DUE,\r\n} from \"components/PaymentDetails/types\"\r\nimport columnWidths from \"./columnWidths\"\r\nimport { UTAK_NO } from \"components/SchedulerComponent/orderSlip/types\"\r\nimport { QUANTITY } from \"Restructured/Constants/products\"\r\nimport { VerticalAutoScroll } from \"../AnalyticsTransaction/styles\"\r\nimport usePaginate from \"hooks/paginate\"\r\nimport useProductServices from \"Restructured/Components/Features/Inventory/ProductCards/useProductServices\"\r\nimport { selectUserSlice } from \"containers/0.NewLogin/loginSlice\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nconst backgrounds = {\r\n  CONFIRMED: { backgroundColor: \"lightblue\" },\r\n  CANCELLED: { backgroundColor: \"orange\" },\r\n  FULFILLED: { backgroundColor: \"white\" },\r\n  PENDING_DIRECT: { backgroundColor: \"yellow\" },\r\n  PENDING_PARTNER: { backgroundColor: \"pink\" },\r\n}\r\n\r\nconst handleBackground = (status, records) => {\r\n  let background = backgrounds[status]\r\n  if (status === \"PENDING PAYMENT\") {\r\n    if (records?.orderVia) {\r\n      background = backgrounds[\"PENDING_DIRECT\"]\r\n    }\r\n    if (records?.orderViaPartner) {\r\n      background = backgrounds[\"PENDING_PARTNER\"]\r\n    }\r\n  }\r\n  return background\r\n}\r\n\r\nfunction DashboardTransaction(props) {\r\n  const userComponentSlice = useSelector(selectUserSlice)\r\n  const { productList } = useProductServices()\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Grid style={{ padding: \"1rem\" }}>\r\n          <VerticalAutoScroll>\r\n            <Table\r\n              onRow={(record) => {\r\n                return {\r\n                  onDoubleClick: (event) => {\r\n                    props.rowSelected(record)\r\n                  },\r\n                }\r\n              }}\r\n              scroll={{ x: \"max-content\", y: 690 }}\r\n              size=\"small\"\r\n              pagination={{\r\n                showSizeChanger: false,\r\n                pageSize: 20,\r\n                total: props?.dataSource().length,\r\n                onChange: (pageNumber) => {\r\n                  const lastPage = props?.dataSource().length / 20 // 15 is a number of rows per page\r\n                  if (pageNumber === lastPage) {\r\n                    const branch = userComponentSlice?.branches[0]\r\n                    props.loadData(branch)\r\n                  }\r\n                },\r\n              }}\r\n              dataSource={[...props?.dataSource()]}\r\n              columns={[\r\n                {\r\n                  title: columnWidths(DATE_ORDER_PLACED)[1],\r\n                  key: DATE_ORDER_PLACED,\r\n                  dataIndex: DATE_ORDER_PLACED,\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    const dateFromD = formatDateFromDatabase(data)\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{formatDateDash(dateFromD)}</span>,\r\n                    }\r\n                  },\r\n                  width: columnWidths(DATE_ORDER_PLACED)[0],\r\n                  align: \"center\",\r\n                },\r\n                {\r\n                  title: columnWidths(DATE_START)[1],\r\n                  key: DATE_START,\r\n                  dataIndex: DATE_START,\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    const dateFromD = formatDateFromDatabase(data)\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: (\r\n                        <span>{formatDateDashWithTime(dateFromD)}</span>\r\n                      ),\r\n                    }\r\n                  },\r\n                  width: columnWidths(DATE_START)[0],\r\n                  align: \"center\",\r\n                },\r\n                {\r\n                  title: columnWidths(UTAK_NO, \"UTAK #\")[1],\r\n                  key: UTAK_NO,\r\n                  dataIndex: UTAK_NO,\r\n                  width: columnWidths(UTAK_NO)[0],\r\n                  align: \"center\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(ORDER_NO)[1],\r\n                  key: ORDER_NO,\r\n                  dataIndex: ORDER_NO,\r\n                  width: columnWidths(ORDER_NO)[0],\r\n                  align: \"center\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(CUSTOMER)[1],\r\n                  key: CUSTOMER,\r\n                  dataIndex: CUSTOMER,\r\n                  width: columnWidths(CUSTOMER)[0],\r\n                  align: \"center\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(CONTACT_NUMBER)[1],\r\n                  key: CONTACT_NUMBER,\r\n                  dataIndex: CONTACT_NUMBER,\r\n                  width: columnWidths(CONTACT_NUMBER)[0],\r\n                  align: \"center\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(\"totalQty\")[1],\r\n                  key: \"totalQty\",\r\n                  dataIndex: \"totalQty\",\r\n                  width: columnWidths(\"totalQty\")[0],\r\n                  align: \"left\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n\r\n                    // get the total qty of product purchased\r\n                    let totalQty = 0\r\n                    if (productList.length > 0) {\r\n                      const productCodes = []\r\n                      for (const row of productList) {\r\n                        for (const products of row?.productList) {\r\n                          productCodes.push(products?.code)\r\n                        }\r\n                      }\r\n\r\n                      for (const code of productCodes) {\r\n                        if (typeof records[code] !== \"undefined\")\r\n                          totalQty = Number(records[code]) + totalQty\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{totalQty}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(DATE_PAYMENT)[1],\r\n                  key: DATE_PAYMENT,\r\n                  dataIndex: DATE_PAYMENT,\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    const dateFromD = formatDateFromDatabase(data)\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{formatDateDash(dateFromD)}</span>,\r\n                    }\r\n                  },\r\n                  width: columnWidths(DATE_PAYMENT)[0],\r\n                  align: \"center\",\r\n                },\r\n                {\r\n                  title: columnWidths(MODE_PAYMENT)[1],\r\n                  key: MODE_PAYMENT,\r\n                  dataIndex: MODE_PAYMENT,\r\n                  width: columnWidths(MODE_PAYMENT)[0],\r\n                  align: \"center\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(SOURCE, \"SOURCE\")[1],\r\n                  key: SOURCE,\r\n                  dataIndex: SOURCE,\r\n                  width: columnWidths(SOURCE)[0],\r\n                  align: \"center\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(ACCOUNT_NUMBER)[1],\r\n                  key: ACCOUNT_NUMBER,\r\n                  dataIndex: ACCOUNT_NUMBER,\r\n                  width: columnWidths(ACCOUNT_NUMBER)[0],\r\n                  align: \"center\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(TOTAL_DUE)[1],\r\n                  key: TOTAL_DUE,\r\n                  dataIndex: TOTAL_DUE,\r\n                  width: columnWidths(TOTAL_DUE)[0],\r\n                  align: \"right\",\r\n                  fixed: \"right\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(\"totalAmountPaid\")[1],\r\n                  key: AMOUNT_PAID,\r\n                  dataIndex: AMOUNT_PAID,\r\n                  width: columnWidths(\"totalAmountPaid\")[0],\r\n                  align: \"right\",\r\n                  fixed: \"right\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    return {\r\n                      props: { style: { fontSize: \"12px\", ...background } },\r\n                      children: <span>{data}</span>,\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  title: columnWidths(OTHERS_DEDUCTION)[1],\r\n                  key: \"others\",\r\n                  dataIndex: \"others\",\r\n                  width: columnWidths(OTHERS_DEDUCTION)[0],\r\n                  align: \"right\",\r\n                  fixed: \"right\",\r\n                  render: (data, records) => {\r\n                    let background = handleBackground(records?.status, records)\r\n                    if (!data) {\r\n                      return {\r\n                        props: { style: { fontSize: \"12px\", ...background } },\r\n                        children: <span>__</span>,\r\n                      }\r\n                    }\r\n                    for (const key in data) {\r\n                      return {\r\n                        props: { style: background },\r\n                        children: <span>{data[key]}</span>,\r\n                      }\r\n                    }\r\n\r\n                    return {\r\n                      props: { style: background },\r\n                      children: <span></span>,\r\n                    }\r\n                  },\r\n                },\r\n              ]}\r\n              rowClassName={(record) => {\r\n                if (record?.status === \"PENDING PAYMENT\") {\r\n                  if (record?.orderVia) {\r\n                    return classes[\"PENDING_DIRECT\"]\r\n                  }\r\n                  if (record?.orderViaPartner) {\r\n                    return classes[\"PENDING_PARTNER\"]\r\n                  }\r\n                }\r\n                return classes[record?.status]\r\n              }}\r\n            />\r\n          </VerticalAutoScroll>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DashboardTransaction\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\hook.js",
  [
    "1979"
  ],
  "import useRangeHandler from \"hooks/rangeHandler\"\r\nimport ScheduleServicess from \"services/firebase/SchedulesServicess\"\r\nimport { selectUserSlice } from \"containers/0.login/loginSlice\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { useEffect } from \"react\"\r\nimport dateDeduction from \"Restructured/Utilities/dateDeduction\"\r\nimport moment from \"moment\"\r\n\r\nexport default function useDashboardTransaction() {\r\n  const format = \"MM/DD/YYYY\"\r\n  const defaultDate = moment(new Date(), format)\r\n  const userComponent = useSelector(selectUserSlice)\r\n  // reusableHook from hooks folder for dateFrom and dateTo\r\n  const [rangeProps, rangeHandlerFilteredData, loadRangeHandlerData] =\r\n    useRangeHandler(ScheduleServicess)\r\n\r\n  useEffect(() => {\r\n    const deductedDate = moment(dateDeduction(new Date(), 31), format)\r\n    rangeProps.onChange([deductedDate, defaultDate])\r\n  }, [])\r\n\r\n  const searchHandler = () => {\r\n    loadRangeHandlerData({\r\n      dateField: \"datePayment\", // required\r\n      orderBy: \"datePayment\", // required\r\n      search: {\r\n        //optional\r\n        branch: userComponent?.branches[0],\r\n      },\r\n    })\r\n  }\r\n\r\n  const componentProps = {\r\n    rangeProps,\r\n    searchButtonProps: { onClick: searchHandler },\r\n  }\r\n  return [componentProps, rangeHandlerFilteredData]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\Restructured\\Utilities\\dateDeduction.js",
  [
    "1980"
  ],
  "import { formatDateDash } from \"./dateFormat\"\r\n\r\nexport default function (date, days = 0) {\r\n  const formattedDate = formatDateDash(date)\r\n  const newDate = new Date(formattedDate)\r\n  newDate.setDate(newDate.getDate() - days)\r\n\r\n  return newDate\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\PaginateCommands.js",
  [
    "1981",
    "1982",
    "1983"
  ],
  "import db from \"services/firebase\"\r\nimport {\r\n  formatDateFromDatabase,\r\n  formatDateDash,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nexport default class PaginateCommands {\r\n  static async getData(collectionName, limit = 30, branch) {\r\n    const collection = db\r\n      .collection(collectionName)\r\n      .where(\"branch\", \"==\", branch)\r\n      // .orderBy(\"StartTime\", \"desc\")\r\n      .limit(limit)\r\n    return new Promise((resolve, reject) => {\r\n      collection.get().then((documentSnapshots) => {\r\n        let colData = []\r\n        // set the last visible document that will be use in getMoreData\r\n        const lastVisible =\r\n          documentSnapshots.docs[documentSnapshots.docs.length - 1]\r\n\r\n        documentSnapshots.forEach((doc) => {\r\n          // doc.data() is never undefined for query doc snapshots\r\n          const dateFromD = formatDateFromDatabase(doc.data()?.StartTime)\r\n          const docData = { ...doc.data(), _id: doc.id }\r\n          colData.push(docData)\r\n        })\r\n        resolve([lastVisible, colData])\r\n      })\r\n    })\r\n  }\r\n\r\n  static async getMoreData(collectionName, limit = 30, lastVisible, branch) {\r\n    // Construct a new query starting at this document,\r\n    // get the next 25 cities.\r\n    return new Promise((resolve, reject) => {\r\n      const next = db\r\n        .collection(collectionName)\r\n        .where(\"branch\", \"==\", branch)\r\n        // .orderBy(\"StartTime\", \"desc\")\r\n        .startAfter(lastVisible)\r\n        .limit(limit)\r\n\r\n      next.get().then((documentSnapshots) => {\r\n        let colData = []\r\n        let _lastVisible = null\r\n        documentSnapshots.forEach((doc) => {\r\n          // doc.data() is never undefined for query doc snapshots\r\n          const dateFromD = formatDateFromDatabase(doc.data()?.StartTime)\r\n          const docData = { ...doc.data(), _id: doc.id }\r\n          _lastVisible =\r\n            documentSnapshots.docs[documentSnapshots.docs.length - 1]\r\n          console.log(doc.id, \" => \", docData)\r\n          colData.push(docData)\r\n        })\r\n        console.log(\"colData\", colData)\r\n        resolve([_lastVisible, colData])\r\n      })\r\n    })\r\n  }\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\columnWidths.js",
  [
    "1984",
    "1985",
    "1986",
    "1987",
    "1988"
  ],
  "import {\r\n  ORDER_NO,\r\n  BRANCH,\r\n  DATE_ORDER_PLACED,\r\n  ACCOUNT_NAME,\r\n  CUSTOMER,\r\n  CONTACT_NUMBER,\r\n  DATE_START,\r\n  DATE_END,\r\n  SOURCE,\r\n} from \"Restructured/Constants/schedules\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  OTHERS_DEDUCTION,\r\n} from \"components/PaymentDetails/types\"\r\n\r\nexport default function (key, headerText = \"\") {\r\n  const fontStyle = {\r\n    fontSize: \"12px\",\r\n  }\r\n  if (key === DATE_START) {\r\n    return [\r\n      \"15rem\",\r\n      <>\r\n        <span style={fontStyle}>ORDER</span>\r\n        <br />\r\n        <span style={fontStyle}>DATE/TIME:</span>\r\n      </>,\r\n    ]\r\n  }\r\n  if (key === DATE_ORDER_PLACED) {\r\n    return [\r\n      \"5rem\",\r\n      <>\r\n        <span style={fontStyle}>DATE/TIME</span>\r\n        <br />\r\n        <span style={fontStyle}>PLACED:</span>\r\n      </>,\r\n    ]\r\n  }\r\n  if (key === ORDER_NO) {\r\n    return [\"15rem\", <span style={fontStyle}>VBS #:</span>]\r\n  }\r\n  if (key === CUSTOMER) {\r\n    return [\"10rem\", <span style={fontStyle}>CUSTOMER:</span>]\r\n  }\r\n  if (key === CONTACT_NUMBER) {\r\n    return [\r\n      \"10rem\",\r\n      <>\r\n        <span style={fontStyle}>CONTACT</span>\r\n        <br />\r\n        <span style={fontStyle}>#:</span>\r\n      </>,\r\n    ]\r\n  }\r\n  if (key === \"totalQty\") {\r\n    return [\"3rem\", <span style={fontStyle}>QTY:</span>]\r\n  }\r\n  if (key === \"totalDue\") {\r\n    return [\"6rem\", <span style={fontStyle}>AMT:</span>]\r\n  }\r\n  if (key === DATE_PAYMENT) {\r\n    return [\r\n      \"8rem\",\r\n      <>\r\n        <span style={fontStyle}>DATE</span>\r\n        <br />\r\n        <span style={fontStyle}>PAID:</span>\r\n      </>,\r\n    ]\r\n  }\r\n  if (key === MODE_PAYMENT) {\r\n    return [\"5rem\", \"MOP:\"]\r\n  }\r\n  if (key === SOURCE) {\r\n    return [\"5rem\", headerText.toUpperCase() + \":\"]\r\n  }\r\n  if (key === ACCOUNT_NUMBER) {\r\n    return [\r\n      \"7rem\",\r\n      <>\r\n        <span style={fontStyle}>RECEIVING</span>\r\n        <br />\r\n        <span style={fontStyle}>ACCT:</span>\r\n      </>,\r\n    ]\r\n  }\r\n  if (key === \"totalAmountPaid\") {\r\n    return [\r\n      \"8rem\",\r\n      <>\r\n        <span style={fontStyle}>PAID</span>\r\n        <br />\r\n        <span style={fontStyle}>AMT:</span>\r\n      </>,\r\n    ]\r\n  }\r\n  if (key === OTHERS_DEDUCTION) {\r\n    return [\r\n      \"8rem\",\r\n      <>\r\n        <span style={fontStyle}>OTHERS /</span>\r\n        <br />\r\n        <span style={fontStyle}>DEDUCTIONS:</span>\r\n      </>,\r\n    ]\r\n  }\r\n  return [\r\n    \"8rem\",\r\n    <span style={fontStyle}>{`${headerText.toUpperCase()}:`}</span>,\r\n  ]\r\n}\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\hooks\\paginate.js",
  [
    "1989",
    "1990"
  ],
  "import React, { useState, useEffect } from \"react\"\r\nimport PaginateCommands from \"services/firebase/PaginateCommands\"\r\nimport FirestoreCommands from \"services/firebase/FirestoreCommands\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUserSlice } from \"containers/0.NewLogin/loginSlice\"\r\n\r\nfunction usePaginate(collectionName = \"schedules\", limit = 200) {\r\n  const userComponent = useSelector(selectUserSlice)\r\n  const [lastVisible, setLastVisible] = useState(null)\r\n  const [dataSource, setDataSource] = useState([])\r\n  console.log(\"userComponent\", userComponent)\r\n  useEffect(() => {\r\n    if (lastVisible === null && userComponent?.branches.length > 0) {\r\n      const branch = userComponent?.branches[0]\r\n      loadData(branch)\r\n    }\r\n  }, [lastVisible, userComponent?.branches])\r\n  const loadData = async (branch) => {\r\n    if (lastVisible) {\r\n      const [_lastVisible, colData = []] = await PaginateCommands.getMoreData(\r\n        collectionName,\r\n        limit,\r\n        lastVisible,\r\n        branch\r\n      )\r\n      if (colData.length > 0) {\r\n        const newData = [...dataSource, ...colData]\r\n        setDataSource(newData)\r\n        setLastVisible(_lastVisible)\r\n      }\r\n    } else {\r\n      // this will be the first load of data\r\n      const [_lastVisible, colData] = await PaginateCommands.getData(\r\n        collectionName,\r\n        limit,\r\n        branch\r\n      )\r\n      setDataSource(colData)\r\n      setLastVisible(_lastVisible)\r\n    }\r\n  }\r\n\r\n  const modifiedData = async (id) => {\r\n    const dataSourceCopy = [...dataSource]\r\n    const dataIndex = dataSourceCopy.findIndex((row) => row._id === id)\r\n    const dataObj = await FirestoreCommands.getDataById(\"schedules\", id)\r\n    if (dataObj) {\r\n      dataSourceCopy[dataIndex] = { ...dataObj }\r\n    }\r\n    setDataSource(dataSourceCopy)\r\n  }\r\n\r\n  return { dataSource, loadData, modifiedData }\r\n}\r\n\r\nexport default usePaginate\r\n",
  "D:\\Projects\\Scheduler App\\scheduler\\src\\services\\firebase\\FirestoreCommands.js",
  [],
  "D:\\Projects\\Scheduler App\\scheduler\\src\\components\\features\\DashboardTransaction\\dashboardTransPrint.js",
  [
    "1991",
    "1992",
    "1993",
    "1994",
    "1995",
    "1996",
    "1997",
    "1998",
    "1999",
    "2000",
    "2001",
    "2002",
    "2003",
    "2004",
    "2005",
    "2006",
    "2007"
  ],
  "import { Button, DatePicker, Input } from \"antd\"\r\nimport moment from \"moment\"\r\nimport React, { useState } from \"react\"\r\nimport Services from \"Restructured/Services/SchedulerServices\"\r\nimport {\r\n  AiFillCloseCircle,\r\n  AiFillFilter,\r\n  AiFillPrinter,\r\n  AiOutlineClose,\r\n} from \"react-icons/ai\"\r\nimport Print from \"Restructured/Components/Features/Print\"\r\nimport {\r\n  CONTACT_NUMBER,\r\n  CUSTOMER,\r\n  DATE_END,\r\n  DATE_ORDER_PLACED,\r\n  DATE_START,\r\n  ORDER_NO,\r\n} from \"Restructured/Constants/schedules\"\r\nimport { RangePicker } from \"Restructured/Components/Commons\"\r\nimport {\r\n  formatDateDash,\r\n  formatDateFromDatabase,\r\n  formatDateSlash,\r\n  formatTime,\r\n} from \"Restructured/Utilities/dateFormat\"\r\nimport {\r\n  ACCOUNT_NUMBER,\r\n  AMOUNT_PAID,\r\n  DATE_PAYMENT,\r\n  MODE_PAYMENT,\r\n  OTHERS_DEDUCTION,\r\n  SOURCE,\r\n} from \"components/PaymentDetails/types\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectTableSlice } from \"components/Table/tableSlice\"\r\nimport { QUANTITY } from \"Restructured/Constants/products\"\r\nimport sumArray, { sumArrayDatas } from \"Restructured/Utilities/sumArray\"\r\n\r\nconst defaultDate = moment(new Date(), \"MM/DD/YYYY\")\r\nconst formatDate = (date) => {\r\n  const formatD = formatDateFromDatabase(date)\r\n  const formattedD = formatDateDash(formatD)\r\n  return formattedD\r\n}\r\nfunction DashboardTransPrint({ dataList }) {\r\n  const handleQty = () => {\r\n    return 0\r\n  }\r\n  return (\r\n    <div style={{ display: \"flex\", paddingLeft: \"3rem\" }}>\r\n      {dataList.length > 0 && (\r\n        <Print\r\n          component={\r\n            <div>\r\n              <table style={{ width: \"100%\", fontSize: \"8px\" }} border=\"1\">\r\n                <tr style={{ width: \"100%\" }}>\r\n                  <th>DATE/TIME PLACED</th>\r\n                  <th>ORDER DATE/TIME</th>\r\n                  <th>ORDER #</th>\r\n                  <th>CUSTOMER</th>\r\n                  <th>CONTACT #</th>\r\n                  <th>QTY</th>\r\n                  <th align=\"right\">AMT</th>\r\n                  <th>DATE PAID</th>\r\n                  <th>MOP</th>\r\n                  <th>SOURCE</th>\r\n                  <th>RECEIVING ACCT</th>\r\n                  <th align=\"right\">PAID AMT</th>\r\n                  <th align=\"right\">OTHERS/DEDUCTIONS</th>\r\n                </tr>\r\n                {dataList.map((data, index) => {\r\n                  return (\r\n                    <tr\r\n                      style={\r\n                        (index + 1) % 2 === 0\r\n                          ? { backgroundColor: \"white\" }\r\n                          : { backgroundColor: \"#999\" }\r\n                      }\r\n                    >\r\n                      <td>{formatDate(data[DATE_ORDER_PLACED])}</td>\r\n                      <td>{formatDate(data[DATE_START])}</td>\r\n                      <td>{data[ORDER_NO]}</td>\r\n                      <td>{data[CUSTOMER]}</td>\r\n                      <td>{data[CONTACT_NUMBER]}</td>\r\n                      <td>{handleQty(data)}</td>\r\n                      <td align=\"right\">{data[\"totalDue\"]}</td>\r\n                      <td>{formatDate(data[DATE_PAYMENT])}</td>\r\n                      <td>{data[MODE_PAYMENT]}</td>\r\n                      <td>{data[SOURCE]}</td>\r\n                      <td>{data[ACCOUNT_NUMBER]}</td>\r\n                      <td align=\"right\">{data[AMOUNT_PAID]}</td>\r\n                      <td align=\"right\">{data[OTHERS_DEDUCTION]}</td>\r\n                    </tr>\r\n                  )\r\n                })}\r\n                <tr style={{ color: \"red\" }}>\r\n                  <td>Total</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td>{sumArray(dataList, \"totalQty\")}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td align=\"right\">\r\n                    {sumArray(dataList, AMOUNT_PAID).toFixed(2)}\r\n                  </td>\r\n                  <td align=\"right\">\r\n                    {sumArray(dataList, OTHERS_DEDUCTION).toFixed(2)}\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n          }\r\n          button={<AiFillPrinter fontSize=\"1rem\" />}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DashboardTransPrint\r\n",
  {
    "ruleId": "2008",
    "replacedBy": "2009"
  },
  {
    "ruleId": "2010",
    "replacedBy": "2011"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2013",
    "line": 5,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2016",
    "line": 26,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 26,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2017",
    "line": 28,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 28,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2018",
    "line": 29,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2019",
    "line": 30,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 30,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2020",
    "line": 53,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 53,
    "endColumn": 18
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2022",
    "line": 71,
    "column": 6,
    "nodeType": "2023",
    "endLine": 71,
    "endColumn": 8,
    "suggestions": "2024"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 75,
    "column": 6,
    "nodeType": "2023",
    "endLine": 75,
    "endColumn": 12,
    "suggestions": "2026"
  },
  {
    "ruleId": "2027",
    "severity": 1,
    "message": "2028",
    "line": 124,
    "column": 15,
    "nodeType": "2029",
    "endLine": 124,
    "endColumn": 67
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2030",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2031",
    "line": 3,
    "column": 19,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2032",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2033",
    "line": 1,
    "column": 27,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 36
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2034",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2035",
    "line": 4,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 17
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2036",
    "line": 30,
    "column": 6,
    "nodeType": "2023",
    "endLine": 30,
    "endColumn": 13,
    "suggestions": "2037"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 24,
    "column": 1,
    "nodeType": "2040",
    "endLine": 30,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2041",
    "line": 2,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2042",
    "line": 11,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2043",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2044",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2045",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2046",
    "line": 21,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2047",
    "line": 145,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 145,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2048",
    "line": 154,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 154,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2049",
    "line": 155,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 155,
    "endColumn": 29
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 169,
    "column": 6,
    "nodeType": "2023",
    "endLine": 169,
    "endColumn": 8,
    "suggestions": "2050"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2051",
    "line": 2,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2052",
    "line": 13,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2053",
    "line": 13,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 31
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2054",
    "line": 13,
    "column": 33,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 45
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 46,
    "column": 6,
    "nodeType": "2023",
    "endLine": 46,
    "endColumn": 8,
    "suggestions": "2055"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 60,
    "column": 6,
    "nodeType": "2023",
    "endLine": 60,
    "endColumn": 8,
    "suggestions": "2056"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 13,
    "column": 1,
    "nodeType": "2040",
    "endLine": 34,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 19,
    "column": 6,
    "nodeType": "2023",
    "endLine": 19,
    "endColumn": 26,
    "suggestions": "2057"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2051",
    "line": 2,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2058",
    "line": 27,
    "column": 19,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 27,
    "endColumn": 29
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 31,
    "column": 6,
    "nodeType": "2023",
    "endLine": 31,
    "endColumn": 8,
    "suggestions": "2059"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2043",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2046",
    "line": 21,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2060",
    "line": 34,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 34,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2047",
    "line": 36,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 36,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2048",
    "line": 41,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 41,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2049",
    "line": 42,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2061",
    "line": 44,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 44,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2062",
    "line": 46,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 46,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2063",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2064",
    "line": 13,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2065",
    "line": 14,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 28
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 17,
    "column": 1,
    "nodeType": "2040",
    "endLine": 39,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 23,
    "column": 6,
    "nodeType": "2023",
    "endLine": 23,
    "endColumn": 8,
    "suggestions": "2066"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2051",
    "line": 2,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2067",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2068",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2069",
    "line": 17,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2070",
    "line": 20,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 21,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2072",
    "line": 22,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2073",
    "line": 23,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2074",
    "line": 26,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 26,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2075",
    "line": 38,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2076",
    "line": 38,
    "column": 21,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 33
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2058",
    "line": 40,
    "column": 19,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 40,
    "endColumn": 29
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2077",
    "line": 41,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 41,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2078",
    "line": 42,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2079",
    "line": 43,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 43,
    "endColumn": 19
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 47,
    "column": 6,
    "nodeType": "2023",
    "endLine": 47,
    "endColumn": 8,
    "suggestions": "2080"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2081",
    "line": 49,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 49,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2082",
    "line": 54,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 54,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2083",
    "line": 55,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 55,
    "endColumn": 22
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 11,
    "column": 1,
    "nodeType": "2040",
    "endLine": 32,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 17,
    "column": 6,
    "nodeType": "2023",
    "endLine": 17,
    "endColumn": 8,
    "suggestions": "2084"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2063",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2085",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2064",
    "line": 14,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2018",
    "line": 15,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 17
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 18,
    "column": 1,
    "nodeType": "2040",
    "endLine": 39,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 24,
    "column": 6,
    "nodeType": "2023",
    "endLine": 24,
    "endColumn": 8,
    "suggestions": "2086"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2087",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2063",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2085",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2064",
    "line": 15,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2018",
    "line": 16,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2088",
    "line": 17,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 27
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 20,
    "column": 1,
    "nodeType": "2040",
    "endLine": 41,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 26,
    "column": 6,
    "nodeType": "2023",
    "endLine": 26,
    "endColumn": 8,
    "suggestions": "2089"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 13,
    "column": 1,
    "nodeType": "2040",
    "endLine": 34,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 19,
    "column": 6,
    "nodeType": "2023",
    "endLine": 19,
    "endColumn": 26,
    "suggestions": "2090"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2051",
    "line": 2,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2091",
    "line": 7,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2034",
    "line": 7,
    "column": 23,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 34
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2092",
    "line": 8,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2093",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2085",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2052",
    "line": 13,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2094",
    "line": 14,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2095",
    "line": 14,
    "column": 22,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 30
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2096",
    "line": 14,
    "column": 32,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 43
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2097",
    "line": 15,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2098",
    "line": 17,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2099",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2101",
    "line": 20,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2102",
    "line": 21,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 22,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2104",
    "line": 24,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2105",
    "line": 25,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2106",
    "line": 26,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 26,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2107",
    "line": 27,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 27,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2108",
    "line": 29,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2109",
    "line": 30,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 30,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2110",
    "line": 31,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 31,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2111",
    "line": 33,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 33,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2112",
    "line": 34,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 34,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2113",
    "line": 36,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 36,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 37,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 38,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2116",
    "line": 39,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 39,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2117",
    "line": 40,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 40,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2118",
    "line": 41,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 41,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 42,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2120",
    "line": 44,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 44,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2121",
    "line": 45,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 45,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2122",
    "line": 46,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 46,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2123",
    "line": 47,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 47,
    "endColumn": 31
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2124",
    "line": 48,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 48,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2032",
    "line": 49,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 49,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2125",
    "line": 50,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 50,
    "endColumn": 32
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2126",
    "line": 54,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 54,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2127",
    "line": 57,
    "column": 26,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 57,
    "endColumn": 43
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2128",
    "line": 81,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 81,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2129",
    "line": 95,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 95,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2087",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2063",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2085",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2130",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2064",
    "line": 16,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2018",
    "line": 17,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2088",
    "line": 18,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 27
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 21,
    "column": 1,
    "nodeType": "2040",
    "endLine": 42,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 27,
    "column": 6,
    "nodeType": "2023",
    "endLine": 27,
    "endColumn": 8,
    "suggestions": "2131"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2132",
    "line": 1,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 13
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 3,
    "column": 1,
    "nodeType": "2040",
    "endLine": 17,
    "endColumn": 2
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 3,
    "column": 1,
    "nodeType": "2040",
    "endLine": 11,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2133",
    "line": 5,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 21
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 3,
    "column": 1,
    "nodeType": "2040",
    "endLine": 28,
    "endColumn": 2
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 2,
    "column": 1,
    "nodeType": "2040",
    "endLine": 39,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2134",
    "line": 1,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 10
  },
  {
    "ruleId": "2135",
    "severity": 1,
    "message": "2136",
    "line": 4,
    "column": 15,
    "nodeType": "2137",
    "messageId": "2138",
    "endLine": 4,
    "endColumn": 16,
    "suggestions": "2139"
  },
  {
    "ruleId": "2135",
    "severity": 1,
    "message": "2136",
    "line": 4,
    "column": 40,
    "nodeType": "2137",
    "messageId": "2138",
    "endLine": 4,
    "endColumn": 41,
    "suggestions": "2140"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2141",
    "line": 38,
    "column": 7,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 16
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2142",
    "line": 59,
    "column": 6,
    "nodeType": "2023",
    "endLine": 59,
    "endColumn": 8,
    "suggestions": "2143"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 1,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2145",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2146",
    "line": 21,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2147",
    "line": 7,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2104",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2148",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2149",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2150",
    "line": 17,
    "column": 22,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2151",
    "line": 17,
    "column": 37,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 53
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2152",
    "line": 21,
    "column": 26,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 31
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2153",
    "line": 22,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 29
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 24,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2155",
    "line": 25,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 16
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2156",
    "line": 51,
    "column": 6,
    "nodeType": "2023",
    "endLine": 51,
    "endColumn": 25,
    "suggestions": "2157"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2158",
    "line": 80,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 80,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 18,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2160",
    "line": 1,
    "column": 32,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2113",
    "line": 4,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2116",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2161",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 10,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 10,
    "column": 28,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 36
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2163",
    "line": 12,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 12,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2101",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2104",
    "line": 17,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2166",
    "line": 22,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2167",
    "line": 24,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 16
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2168",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 11,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2169",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2170",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2171",
    "line": 30,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 30,
    "endColumn": 5
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2172",
    "line": 31,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 31,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 33,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 33,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2173",
    "line": 35,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 35,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2174",
    "line": 39,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 39,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2175",
    "line": 42,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2176",
    "line": 43,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 43,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2177",
    "line": 43,
    "column": 29,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 43,
    "endColumn": 46
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2178",
    "line": 44,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 44,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2179",
    "line": 50,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 50,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2180",
    "line": 51,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 51,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2181",
    "line": 65,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 65,
    "endColumn": 31
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2182",
    "line": 68,
    "column": 22,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 68,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2183",
    "line": 69,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 69,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2184",
    "line": 69,
    "column": 27,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 69,
    "endColumn": 45
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2185",
    "line": 74,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 74,
    "endColumn": 23
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2186",
    "line": 103,
    "column": 6,
    "nodeType": "2023",
    "endLine": 103,
    "endColumn": 38,
    "suggestions": "2187"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2188",
    "line": 110,
    "column": 6,
    "nodeType": "2023",
    "endLine": 110,
    "endColumn": 42,
    "suggestions": "2189"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2190",
    "line": 174,
    "column": 6,
    "nodeType": "2023",
    "endLine": 174,
    "endColumn": 27,
    "suggestions": "2191"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 197,
    "column": 6,
    "nodeType": "2023",
    "endLine": 197,
    "endColumn": 8,
    "suggestions": "2192"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2193",
    "line": 267,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 267,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2194",
    "line": 283,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 283,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2195",
    "line": 331,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 331,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2196",
    "line": 334,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 334,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2170",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2197",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2198",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2199",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2016",
    "line": 21,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 3,
    "column": 27,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 36
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 9,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2200",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2201",
    "line": 22,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 18,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2160",
    "line": 1,
    "column": 32,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 3,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 3,
    "column": 28,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 36
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2163",
    "line": 5,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 5,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2101",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2104",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2202",
    "line": 22,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2203",
    "line": 1,
    "column": 26,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 32
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 2,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 5,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2204",
    "line": 9,
    "column": 20,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 32
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 1,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2205",
    "line": 2,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 23
  },
  {
    "ruleId": "2206",
    "severity": 1,
    "message": "2207",
    "line": 29,
    "column": 26,
    "nodeType": "2029",
    "endLine": 29,
    "endColumn": 68
  },
  {
    "ruleId": "2206",
    "severity": 1,
    "message": "2207",
    "line": 42,
    "column": 21,
    "nodeType": "2029",
    "endLine": 48,
    "endColumn": 23
  },
  {
    "ruleId": "2206",
    "severity": 1,
    "message": "2207",
    "line": 58,
    "column": 26,
    "nodeType": "2029",
    "endLine": 58,
    "endColumn": 68
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2016",
    "line": 4,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2208",
    "line": 4,
    "column": 19,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 29
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2209",
    "line": 4,
    "column": 31,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 41
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2210",
    "line": 5,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2211",
    "line": 7,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2052",
    "line": 8,
    "column": 18,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2212",
    "line": 10,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 23,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 29,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 18
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2213",
    "line": 100,
    "column": 6,
    "nodeType": "2023",
    "endLine": 100,
    "endColumn": 18,
    "suggestions": "2214"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2215",
    "line": 102,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 102,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 2,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 22
  },
  {
    "ruleId": "2216",
    "severity": 1,
    "message": "2217",
    "line": 4,
    "column": 3,
    "nodeType": "2218",
    "messageId": "2219",
    "endLine": 4,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2098",
    "line": 2,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2220",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2105",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2120",
    "line": 32,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 32,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2111",
    "line": 35,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 35,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2221",
    "line": 37,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2222",
    "line": 38,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 21
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2223",
    "line": 55,
    "column": 6,
    "nodeType": "2023",
    "endLine": 55,
    "endColumn": 27,
    "suggestions": "2224"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 6,
    "column": 1,
    "nodeType": "2040",
    "endLine": 17,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2225",
    "line": 14,
    "column": 6,
    "nodeType": "2023",
    "endLine": 14,
    "endColumn": 41,
    "suggestions": "2226"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2227",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2220",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2146",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2228",
    "line": 27,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 27,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2229",
    "line": 35,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 35,
    "endColumn": 24
  },
  {
    "ruleId": "2027",
    "severity": 1,
    "message": "2028",
    "line": 128,
    "column": 7,
    "nodeType": "2029",
    "endLine": 132,
    "endColumn": 9
  },
  {
    "ruleId": "2027",
    "severity": 1,
    "message": "2028",
    "line": 134,
    "column": 9,
    "nodeType": "2029",
    "endLine": 134,
    "endColumn": 77
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2168",
    "line": 345,
    "column": 1,
    "nodeType": "2040",
    "endLine": 355,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2230",
    "line": 346,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 346,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2231",
    "line": 2,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2222",
    "line": 4,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2232",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2233",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 6
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2234",
    "line": 17,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2171",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 5
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2235",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2236",
    "line": 20,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2237",
    "line": 21,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2238",
    "line": 22,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2239",
    "line": 23,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2172",
    "line": 24,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2240",
    "line": 25,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2241",
    "line": 27,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 27,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2242",
    "line": 28,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 28,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2243",
    "line": 29,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2244",
    "line": 30,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 30,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2245",
    "line": 31,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 31,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2246",
    "line": 32,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 32,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2227",
    "line": 38,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2173",
    "line": 39,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 39,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2247",
    "line": 40,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 40,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2248",
    "line": 41,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 41,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2249",
    "line": 42,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2250",
    "line": 43,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 43,
    "endColumn": 5
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2220",
    "line": 44,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 44,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2251",
    "line": 45,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 45,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2252",
    "line": 46,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 46,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2253",
    "line": 47,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 47,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2105",
    "line": 49,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 49,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2254",
    "line": 50,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 50,
    "endColumn": 6
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2255",
    "line": 51,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 51,
    "endColumn": 6
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2148",
    "line": 55,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 55,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2256",
    "line": 57,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 57,
    "endColumn": 6
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2257",
    "line": 59,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 59,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2258",
    "line": 60,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 60,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2259",
    "line": 63,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 63,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2174",
    "line": 64,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 64,
    "endColumn": 9
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2260",
    "line": 98,
    "column": 1,
    "nodeType": "2040",
    "endLine": 221,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2163",
    "line": 13,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 13,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2106",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 11
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 58,
    "column": 25,
    "nodeType": "2029",
    "endLine": 58,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2263",
    "line": 5,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2264",
    "line": 11,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 27
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2265",
    "line": 21,
    "column": 6,
    "nodeType": "2023",
    "endLine": 21,
    "endColumn": 45,
    "suggestions": "2266"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 85,
    "column": 6,
    "nodeType": "2023",
    "endLine": 85,
    "endColumn": 13,
    "suggestions": "2267"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 93,
    "column": 1,
    "nodeType": "2040",
    "endLine": 196,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2268",
    "line": 138,
    "column": 6,
    "nodeType": "2023",
    "endLine": 138,
    "endColumn": 8,
    "suggestions": "2269"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2160",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2113",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 4,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2116",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2161",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2101",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 17,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2270",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2106",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 20,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 21,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2073",
    "line": 23,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 25,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2125",
    "line": 26,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 26,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2272",
    "line": 48,
    "column": 25,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 48,
    "endColumn": 41
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 1,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2163",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2222",
    "line": 3,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 3,
    "column": 29,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 37
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2102",
    "line": 4,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2270",
    "line": 4,
    "column": 20,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 30
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2273",
    "line": 6,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2274",
    "line": 7,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 29
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2275",
    "line": 8,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2170",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2197",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2276",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2277",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2198",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2199",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2016",
    "line": 18,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2208",
    "line": 18,
    "column": 19,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 29
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2278",
    "line": 2,
    "column": 25,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 31
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2201",
    "line": 16,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2279",
    "line": 23,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2280",
    "line": 26,
    "column": 18,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 26,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2281",
    "line": 27,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 27,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2282",
    "line": 29,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2283",
    "line": 29,
    "column": 28,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 47
  },
  {
    "ruleId": "2284",
    "severity": 1,
    "message": "2285",
    "line": 37,
    "column": 68,
    "nodeType": "2286",
    "messageId": "2287",
    "endLine": 37,
    "endColumn": 70
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2288",
    "line": 180,
    "column": 6,
    "nodeType": "2023",
    "endLine": 180,
    "endColumn": 38,
    "suggestions": "2289"
  },
  {
    "ruleId": "2290",
    "severity": 1,
    "message": "2291",
    "line": 269,
    "column": 9,
    "nodeType": "2292",
    "messageId": "2287",
    "endLine": 269,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2293",
    "line": 1,
    "column": 18,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 1,
    "column": 30,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2294",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2295",
    "line": 23,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2124",
    "line": 24,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 36,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 36,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2296",
    "line": 37,
    "column": 20,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 33
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2297",
    "line": 61,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 61,
    "endColumn": 30
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2298",
    "line": 62,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 62,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2299",
    "line": 44,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 44,
    "endColumn": 17
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2300",
    "line": 65,
    "column": 6,
    "nodeType": "2023",
    "endLine": 65,
    "endColumn": 28,
    "suggestions": "2301"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 3,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2302",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2152",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2113",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2116",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2118",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2161",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 17,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2303",
    "line": 21,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2108",
    "line": 24,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2209",
    "line": 25,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2201",
    "line": 25,
    "column": 22,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2295",
    "line": 36,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 36,
    "endColumn": 18
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2223",
    "line": 52,
    "column": 6,
    "nodeType": "2023",
    "endLine": 52,
    "endColumn": 45,
    "suggestions": "2304"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2305",
    "line": 57,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 57,
    "endColumn": 21
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2306",
    "line": 104,
    "column": 6,
    "nodeType": "2023",
    "endLine": 104,
    "endColumn": 39,
    "suggestions": "2307"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2308",
    "line": 104,
    "column": 15,
    "nodeType": "2309",
    "endLine": 104,
    "endColumn": 38
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2310",
    "line": 138,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 138,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2204",
    "line": 146,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 146,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2299",
    "line": 183,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 183,
    "endColumn": 17
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2168",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 3,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2311",
    "line": 30,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 30,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2167",
    "line": 31,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 31,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2312",
    "line": 32,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 32,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2313",
    "line": 34,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 34,
    "endColumn": 32
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2273",
    "line": 36,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 36,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2032",
    "line": 37,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2314",
    "line": 41,
    "column": 53,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 41,
    "endColumn": 72
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2315",
    "line": 49,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 49,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 1,
    "column": 18,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2316",
    "line": 42,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2317",
    "line": 42,
    "column": 29,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 47
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2225",
    "line": 66,
    "column": 6,
    "nodeType": "2023",
    "endLine": 66,
    "endColumn": 41,
    "suggestions": "2318"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2148",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2319",
    "line": 3,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2299",
    "line": 16,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 17
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 3,
    "column": 1,
    "nodeType": "2040",
    "endLine": 15,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2320",
    "line": 5,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2070",
    "line": 7,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2263",
    "line": 8,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2321",
    "line": 10,
    "column": 41,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 52
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2322",
    "line": 13,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2323",
    "line": 1,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2324",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2325",
    "line": 1,
    "column": 24,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 1,
    "column": 35,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 41
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 2,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2073",
    "line": 4,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2106",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2313",
    "line": 29,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 32
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2326",
    "line": 36,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 36,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2327",
    "line": 82,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 82,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2328",
    "line": 83,
    "column": 13,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 83,
    "endColumn": 20
  },
  {
    "ruleId": "2329",
    "severity": 1,
    "message": "2330",
    "line": 83,
    "column": 37,
    "nodeType": "2331",
    "messageId": "2332",
    "endLine": 83,
    "endColumn": 39
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2333",
    "line": 236,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 236,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2333",
    "line": 267,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 267,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 22,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 1,
    "column": 29,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 9,
    "column": 1,
    "nodeType": "2040",
    "endLine": 80,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2334",
    "line": 15,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 26
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 24,
    "column": 16,
    "nodeType": "2029",
    "endLine": 24,
    "endColumn": 19
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 17,
    "column": 16,
    "nodeType": "2029",
    "endLine": 17,
    "endColumn": 57
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2052",
    "line": 2,
    "column": 25,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 30
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2335",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 3,
    "column": 24,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 29
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2336",
    "line": 3,
    "column": 31,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 37
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2295",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 11,
    "column": 26,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 38
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2337",
    "line": 12,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2338",
    "line": 14,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 17
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2339",
    "line": 43,
    "column": 6,
    "nodeType": "2023",
    "endLine": 43,
    "endColumn": 33,
    "suggestions": "2340"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2045",
    "line": 23,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 24,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2034",
    "line": 25,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 21
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 15,
    "endColumn": 2
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 8,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2341",
    "line": 23,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 21
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2225",
    "line": 43,
    "column": 6,
    "nodeType": "2023",
    "endLine": 43,
    "endColumn": 41,
    "suggestions": "2342"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2343",
    "line": 57,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 57,
    "endColumn": 23
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 2,
    "column": 1,
    "nodeType": "2040",
    "endLine": 48,
    "endColumn": 2
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 9,
    "column": 1,
    "nodeType": "2040",
    "endLine": 29,
    "endColumn": 2
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 18,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2223",
    "line": 8,
    "column": 6,
    "nodeType": "2023",
    "endLine": 8,
    "endColumn": 8,
    "suggestions": "2344"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 7,
    "column": 1,
    "nodeType": "2040",
    "endLine": 15,
    "endColumn": 2
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 3,
    "column": 1,
    "nodeType": "2040",
    "endLine": 16,
    "endColumn": 2
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 11,
    "column": 1,
    "nodeType": "2040",
    "endLine": 51,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2345",
    "line": 1,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 27
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 3,
    "column": 1,
    "nodeType": "2040",
    "endLine": 19,
    "endColumn": 2
  },
  {
    "ruleId": "2329",
    "severity": 1,
    "message": "2330",
    "line": 49,
    "column": 55,
    "nodeType": "2331",
    "messageId": "2332",
    "endLine": 49,
    "endColumn": 57
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2346",
    "line": 12,
    "column": 6,
    "nodeType": "2023",
    "endLine": 12,
    "endColumn": 19,
    "suggestions": "2347"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 1,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 16
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2348",
    "line": 61,
    "column": 6,
    "nodeType": "2023",
    "endLine": 61,
    "endColumn": 13,
    "suggestions": "2349"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 14,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2163",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2222",
    "line": 3,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 3,
    "column": 29,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 37
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2102",
    "line": 4,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2270",
    "line": 4,
    "column": 20,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 30
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2274",
    "line": 7,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 29
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2275",
    "line": 8,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 20
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2350",
    "line": 15,
    "column": 6,
    "nodeType": "2023",
    "endLine": 15,
    "endColumn": 8,
    "suggestions": "2351"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 2,
    "column": 25,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 30
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2229",
    "line": 2,
    "column": 32,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 39
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2278",
    "line": 2,
    "column": 41,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 47
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2016",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2034",
    "line": 4,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2032",
    "line": 5,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2352",
    "line": 6,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 7,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2353",
    "line": 8,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 31
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2354",
    "line": 9,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 25
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2350",
    "line": 19,
    "column": 6,
    "nodeType": "2023",
    "endLine": 19,
    "endColumn": 8,
    "suggestions": "2355"
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 27,
    "column": 16,
    "nodeType": "2029",
    "endLine": 27,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 8,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2354",
    "line": 10,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2356",
    "line": 12,
    "column": 7,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2357",
    "line": 22,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 27
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2358",
    "line": 40,
    "column": 6,
    "nodeType": "2023",
    "endLine": 40,
    "endColumn": 15,
    "suggestions": "2359"
  },
  {
    "ruleId": "2360",
    "severity": 1,
    "message": "2361",
    "line": 95,
    "column": 15,
    "nodeType": "2362",
    "endLine": 95,
    "endColumn": 45
  },
  {
    "ruleId": "2360",
    "severity": 1,
    "message": "2361",
    "line": 108,
    "column": 15,
    "nodeType": "2362",
    "endLine": 108,
    "endColumn": 46
  },
  {
    "ruleId": "2360",
    "severity": 1,
    "message": "2361",
    "line": 121,
    "column": 15,
    "nodeType": "2362",
    "endLine": 121,
    "endColumn": 51
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2148",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2363",
    "line": 12,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2364",
    "line": 19,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 16
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2365",
    "line": 43,
    "column": 6,
    "nodeType": "2023",
    "endLine": 43,
    "endColumn": 23,
    "suggestions": "2366"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 11,
    "endColumn": 2
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 9,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2147",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 2,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 2,
    "column": 28,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 36
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2097",
    "line": 9,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 10
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 11,
    "column": 1,
    "nodeType": "2040",
    "endLine": 94,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2367",
    "line": 13,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2368",
    "line": 13,
    "column": 30,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 51
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2369",
    "line": 38,
    "column": 6,
    "nodeType": "2023",
    "endLine": 38,
    "endColumn": 8,
    "suggestions": "2370"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 1,
    "column": 30,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2371",
    "line": 1,
    "column": 37,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 43
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2160",
    "line": 1,
    "column": 52,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 55
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2372",
    "line": 33,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 33,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2373",
    "line": 35,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 35,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2296",
    "line": 37,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2374",
    "line": 40,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 40,
    "endColumn": 17
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2223",
    "line": 61,
    "column": 6,
    "nodeType": "2023",
    "endLine": 61,
    "endColumn": 30,
    "suggestions": "2375"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2142",
    "line": 65,
    "column": 6,
    "nodeType": "2023",
    "endLine": 65,
    "endColumn": 16,
    "suggestions": "2376"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2377",
    "line": 161,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 161,
    "endColumn": 25
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 200,
    "column": 16,
    "nodeType": "2029",
    "endLine": 200,
    "endColumn": 19
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 209,
    "column": 16,
    "nodeType": "2029",
    "endLine": 209,
    "endColumn": 19
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 309,
    "column": 30,
    "nodeType": "2029",
    "endLine": 309,
    "endColumn": 33
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 339,
    "column": 30,
    "nodeType": "2029",
    "endLine": 339,
    "endColumn": 33
  },
  {
    "ruleId": "2378",
    "severity": 1,
    "message": "2379",
    "line": 591,
    "column": 1,
    "nodeType": "2380",
    "messageId": "2381",
    "endLine": 608,
    "endColumn": 2
  },
  {
    "ruleId": "2378",
    "severity": 1,
    "message": "2379",
    "line": 609,
    "column": 1,
    "nodeType": "2380",
    "messageId": "2381",
    "endLine": 643,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 1,
    "column": 30,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2371",
    "line": 1,
    "column": 37,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 43
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2296",
    "line": 39,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 39,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2374",
    "line": 42,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2382",
    "line": 58,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 58,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2383",
    "line": 59,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 59,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2384",
    "line": 60,
    "column": 19,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 60,
    "endColumn": 29
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2223",
    "line": 63,
    "column": 6,
    "nodeType": "2023",
    "endLine": 63,
    "endColumn": 30,
    "suggestions": "2385"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2142",
    "line": 67,
    "column": 6,
    "nodeType": "2023",
    "endLine": 67,
    "endColumn": 16,
    "suggestions": "2386"
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 226,
    "column": 16,
    "nodeType": "2029",
    "endLine": 226,
    "endColumn": 19
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 235,
    "column": 16,
    "nodeType": "2029",
    "endLine": 235,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2387",
    "line": 240,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 240,
    "endColumn": 23
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 341,
    "column": 30,
    "nodeType": "2029",
    "endLine": 341,
    "endColumn": 33
  },
  {
    "ruleId": "2329",
    "severity": 1,
    "message": "2388",
    "line": 356,
    "column": 34,
    "nodeType": "2331",
    "messageId": "2332",
    "endLine": 356,
    "endColumn": 36
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 375,
    "column": 30,
    "nodeType": "2029",
    "endLine": 375,
    "endColumn": 33
  },
  {
    "ruleId": "2329",
    "severity": 1,
    "message": "2388",
    "line": 587,
    "column": 37,
    "nodeType": "2331",
    "messageId": "2332",
    "endLine": 587,
    "endColumn": 39
  },
  {
    "ruleId": "2378",
    "severity": 1,
    "message": "2379",
    "line": 620,
    "column": 1,
    "nodeType": "2380",
    "messageId": "2381",
    "endLine": 721,
    "endColumn": 2
  },
  {
    "ruleId": "2378",
    "severity": 1,
    "message": "2379",
    "line": 723,
    "column": 1,
    "nodeType": "2380",
    "messageId": "2381",
    "endLine": 740,
    "endColumn": 2
  },
  {
    "ruleId": "2378",
    "severity": 1,
    "message": "2379",
    "line": 741,
    "column": 1,
    "nodeType": "2380",
    "messageId": "2381",
    "endLine": 775,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2389",
    "line": 5,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 26
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2390",
    "line": 58,
    "column": 6,
    "nodeType": "2023",
    "endLine": 58,
    "endColumn": 54,
    "suggestions": "2391"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2293",
    "line": 1,
    "column": 18,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 1,
    "column": 30,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2294",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2392",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2393",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 22,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2394",
    "line": 28,
    "column": 7,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 28,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2133",
    "line": 81,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 81,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2395",
    "line": 5,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2396",
    "line": 24,
    "column": 9,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 18
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2397",
    "line": 46,
    "column": 6,
    "nodeType": "2023",
    "endLine": 46,
    "endColumn": 21,
    "suggestions": "2398"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 3,
    "column": 22,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2035",
    "line": 2,
    "column": 31,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 38
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2399",
    "line": 24,
    "column": 6,
    "nodeType": "2023",
    "endLine": 24,
    "endColumn": 18,
    "suggestions": "2400"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2401",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2278",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2402",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2371",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2403",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2404",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 16
  },
  {
    "ruleId": "2008",
    "replacedBy": "2405"
  },
  {
    "ruleId": "2010",
    "replacedBy": "2406"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 2,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2407",
    "line": 11,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2408",
    "line": 11,
    "column": 21,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 33
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2409",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2409",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 2,
    "column": 42,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 48
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2410",
    "line": 5,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2035",
    "line": 6,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2210",
    "line": 7,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2411",
    "line": 7,
    "column": 20,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 25
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 1,
    "column": 1,
    "nodeType": "2040",
    "endLine": 25,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2173",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2174",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2171",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 5
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2172",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2243",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2242",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2238",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2239",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2253",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2252",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2237",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2236",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2235",
    "line": 17,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2249",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2248",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2247",
    "line": 20,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2233",
    "line": 21,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 6
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2257",
    "line": 22,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2241",
    "line": 23,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2258",
    "line": 24,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2240",
    "line": 25,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2232",
    "line": 26,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 26,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2234",
    "line": 27,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 27,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2227",
    "line": 28,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 28,
    "endColumn": 16
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 41,
    "column": 1,
    "nodeType": "2040",
    "endLine": 86,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2412",
    "line": 47,
    "column": 11,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 47,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2175",
    "line": 2,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2232",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2233",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 6
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2234",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2171",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 5
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2235",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2236",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2237",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2238",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2239",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2172",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2240",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2241",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2242",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2243",
    "line": 20,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 24,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2227",
    "line": 26,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 26,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2173",
    "line": 27,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 27,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2247",
    "line": 28,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 28,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2248",
    "line": 29,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2249",
    "line": 30,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 30,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2252",
    "line": 34,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 34,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2253",
    "line": 35,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 35,
    "endColumn": 7
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 37,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2413",
    "line": 38,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2257",
    "line": 39,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 39,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2258",
    "line": 40,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 40,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2146",
    "line": 41,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 41,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2174",
    "line": 42,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 42,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2414",
    "line": 54,
    "column": 7,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 54,
    "endColumn": 25
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 76,
    "column": 1,
    "nodeType": "2040",
    "endLine": 95,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2415",
    "line": 2,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 22
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2416",
    "line": 2,
    "column": 24,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 32
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2371",
    "line": 2,
    "column": 34,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 40
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2417",
    "line": 25,
    "column": 6,
    "nodeType": "2023",
    "endLine": 25,
    "endColumn": 8,
    "suggestions": "2418"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 1,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 1,
    "column": 28,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 36
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 1,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2419",
    "line": 2,
    "column": 43,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 53
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2127",
    "line": 4,
    "column": 26,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 43
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2420",
    "line": 6,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2421",
    "line": 37,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2422",
    "line": 38,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2423",
    "line": 39,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 39,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2424",
    "line": 40,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 40,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2425",
    "line": 41,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 41,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2409",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2295",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2273",
    "line": 12,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2426",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2427",
    "line": 12,
    "column": 26,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 44
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2142",
    "line": 16,
    "column": 6,
    "nodeType": "2023",
    "endLine": 16,
    "endColumn": 22,
    "suggestions": "2428"
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2429",
    "line": 20,
    "column": 6,
    "nodeType": "2023",
    "endLine": 20,
    "endColumn": 8,
    "suggestions": "2430"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2431",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2223",
    "line": 8,
    "column": 6,
    "nodeType": "2023",
    "endLine": 8,
    "endColumn": 8,
    "suggestions": "2432"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2270",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 14
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 23,
    "column": 23,
    "nodeType": "2029",
    "endLine": 23,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2273",
    "line": 3,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2106",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2413",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2433",
    "line": 18,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2434",
    "line": 27,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 27,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2435",
    "line": 28,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 28,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2436",
    "line": 29,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2437",
    "line": 30,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 30,
    "endColumn": 30
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2438",
    "line": 31,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 31,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2421",
    "line": 37,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2422",
    "line": 38,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2423",
    "line": 39,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 39,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2424",
    "line": 40,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 40,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2425",
    "line": 41,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 41,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2439",
    "line": 47,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 47,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2440",
    "line": 48,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 48,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2441",
    "line": 49,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 49,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2442",
    "line": 54,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 54,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2443",
    "line": 54,
    "column": 22,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 54,
    "endColumn": 38
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2444",
    "line": 54,
    "column": 40,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 54,
    "endColumn": 56
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2445",
    "line": 19,
    "column": 6,
    "nodeType": "2023",
    "endLine": 19,
    "endColumn": 28,
    "suggestions": "2446"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 2,
    "column": 16,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 2,
    "endColumn": 21
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2447",
    "line": 13,
    "column": 6,
    "nodeType": "2023",
    "endLine": 13,
    "endColumn": 30,
    "suggestions": "2448"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 7,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2125",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2420",
    "line": 3,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 23
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2449",
    "line": 20,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 16
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2450",
    "line": 27,
    "column": 6,
    "nodeType": "2023",
    "endLine": 27,
    "endColumn": 32,
    "suggestions": "2451"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2449",
    "line": 13,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 16
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2452",
    "line": 20,
    "column": 6,
    "nodeType": "2023",
    "endLine": 20,
    "endColumn": 32,
    "suggestions": "2453"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2454",
    "line": 4,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2125",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2125",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2270",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2372",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 14
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 24,
    "column": 23,
    "nodeType": "2029",
    "endLine": 24,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2455",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 16
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 15,
    "column": 1,
    "nodeType": "2040",
    "endLine": 36,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 21,
    "column": 6,
    "nodeType": "2023",
    "endLine": 21,
    "endColumn": 8,
    "suggestions": "2456"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2457",
    "line": 23,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 23,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2458",
    "line": 25,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2459",
    "line": 26,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 26,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2460",
    "line": 28,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 28,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2101",
    "line": 4,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 14
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 49,
    "column": 23,
    "nodeType": "2029",
    "endLine": 49,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2229",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2125",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2295",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 14
  },
  {
    "ruleId": "2261",
    "severity": 1,
    "message": "2262",
    "line": 42,
    "column": 23,
    "nodeType": "2029",
    "endLine": 42,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2455",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2461",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 19
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 16,
    "column": 1,
    "nodeType": "2040",
    "endLine": 37,
    "endColumn": 2
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2025",
    "line": 22,
    "column": 6,
    "nodeType": "2023",
    "endLine": 22,
    "endColumn": 8,
    "suggestions": "2462"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 1,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 8
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2463",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 10
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2464",
    "line": 14,
    "column": 26,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 40
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2273",
    "line": 18,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 19,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2454",
    "line": 19,
    "column": 23,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 32
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2465",
    "line": 22,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2466",
    "line": 22,
    "column": 19,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 31
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2467",
    "line": 29,
    "column": 7,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 29,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2468",
    "line": 47,
    "column": 5,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 47,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2124",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2469",
    "line": 21,
    "column": 7,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 21,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2470",
    "line": 43,
    "column": 24,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 43,
    "endColumn": 39
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2471",
    "line": 44,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 44,
    "endColumn": 19
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2472",
    "line": 44,
    "column": 21,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 44,
    "endColumn": 33
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2473",
    "line": 102,
    "column": 6,
    "nodeType": "2023",
    "endLine": 102,
    "endColumn": 44,
    "suggestions": "2474"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2229",
    "line": 3,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2125",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2295",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2270",
    "line": 10,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 10,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2106",
    "line": 11,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 11,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2146",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2113",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 17,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 17,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2116",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2161",
    "line": 19,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 19,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2454",
    "line": 20,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2160",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2101",
    "line": 4,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2113",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2116",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2161",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2160",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 15,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2100",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2103",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2106",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2165",
    "line": 8,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 8,
    "endColumn": 12
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2119",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2113",
    "line": 12,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 12,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 13,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 13,
    "endColumn": 14
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2115",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2116",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2161",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2159",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2293",
    "line": 1,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 27
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 1,
    "column": 29,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2475",
    "line": 1,
    "column": 44,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 52
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2278",
    "line": 1,
    "column": 54,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 60
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2162",
    "line": 3,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 3,
    "column": 28,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 36
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2476",
    "line": 4,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 31
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2477",
    "line": 5,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2127",
    "line": 5,
    "column": 26,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 43
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2478",
    "line": 6,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2479",
    "line": 7,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 24
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2099",
    "line": 16,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 16,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2098",
    "line": 18,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 18,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2102",
    "line": 22,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 35,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 35,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2480",
    "line": 37,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 19
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2481",
    "line": 20,
    "column": 6,
    "nodeType": "2023",
    "endLine": 20,
    "endColumn": 8,
    "suggestions": "2482"
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 3,
    "column": 1,
    "nodeType": "2040",
    "endLine": 9,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2271",
    "line": 4,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2483",
    "line": 22,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 22,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2483",
    "line": 47,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 47,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2099",
    "line": 3,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 9
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2098",
    "line": 5,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 5,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2102",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2114",
    "line": 14,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 14,
    "endColumn": 14
  },
  {
    "ruleId": "2038",
    "severity": 1,
    "message": "2039",
    "line": 20,
    "column": 1,
    "nodeType": "2040",
    "endLine": 116,
    "endColumn": 2
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2484",
    "line": 1,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 13
  },
  {
    "ruleId": "2021",
    "severity": 1,
    "message": "2223",
    "line": 17,
    "column": 6,
    "nodeType": "2023",
    "endLine": 17,
    "endColumn": 44,
    "suggestions": "2485"
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2071",
    "line": 1,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2293",
    "line": 1,
    "column": 18,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 28
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2154",
    "line": 1,
    "column": 30,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 1,
    "endColumn": 35
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2144",
    "line": 3,
    "column": 17,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 3,
    "endColumn": 25
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2167",
    "line": 4,
    "column": 8,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 4,
    "endColumn": 16
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2294",
    "line": 6,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 6,
    "endColumn": 20
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2392",
    "line": 7,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 7,
    "endColumn": 15
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2393",
    "line": 9,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 9,
    "endColumn": 17
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2102",
    "line": 15,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 15,
    "endColumn": 11
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2486",
    "line": 20,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 20,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2295",
    "line": 24,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 24,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2124",
    "line": 25,
    "column": 3,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 25,
    "endColumn": 13
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2034",
    "line": 35,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 35,
    "endColumn": 21
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2487",
    "line": 36,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 36,
    "endColumn": 26
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2164",
    "line": 37,
    "column": 10,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 37,
    "endColumn": 18
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2296",
    "line": 38,
    "column": 20,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 38,
    "endColumn": 33
  },
  {
    "ruleId": "2012",
    "severity": 1,
    "message": "2394",
    "line": 40,
    "column": 7,
    "nodeType": "2014",
    "messageId": "2015",
    "endLine": 40,
    "endColumn": 18
  },
  "no-native-reassign",
  [
    "2488"
  ],
  "no-negated-in-lhs",
  [
    "2489"
  ],
  "no-unused-vars",
  "'Login' is defined but never used.",
  "Identifier",
  "unusedVar",
  "'addData' is defined but never used.",
  "'selectMenuSlice' is defined but never used.",
  "'Reports' is defined but never used.",
  "'ExcelExporter' is defined but never used.",
  "'uid' is assigned a value but never used.",
  "react-hooks/exhaustive-deps",
  "React Hook useEffect has a missing dependency: 'updateInfo'. Either include it or remove the dependency array.",
  "ArrayExpression",
  [
    "2490"
  ],
  "React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",
  [
    "2491"
  ],
  "jsx-a11y/alt-text",
  "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
  "JSXOpeningElement",
  "'replace' is defined but never used.",
  "'replaceArrayData' is defined but never used.",
  "'selectUserSlice' is defined but never used.",
  "'userSlice' is defined but never used.",
  "'useSelector' is defined but never used.",
  "'getData' is defined but never used.",
  "React Hook useEffect has a missing dependency: 'loadModules'. Either include it or remove the dependency array.",
  [
    "2492"
  ],
  "import/no-anonymous-default-export",
  "Unexpected default export of anonymous function",
  "ExportDefaultDeclaration",
  "'GoogleButton' is defined but never used.",
  "'provider' is defined but never used.",
  "'Background' is defined but never used.",
  "'GoogleContainer' is defined but never used.",
  "'Description' is defined but never used.",
  "'background' is defined but never used.",
  "'user' is assigned a value but never used.",
  "'errorCode' is assigned a value but never used.",
  "'errorMessage' is assigned a value but never used.",
  [
    "2493"
  ],
  "'ScheduleComponent' is defined but never used.",
  "'Table' is defined but never used.",
  "'toolbarOptions' is defined but never used.",
  "'editSettings' is defined but never used.",
  [
    "2494"
  ],
  [
    "2495"
  ],
  [
    "2496"
  ],
  "'setLoading' is assigned a value but never used.",
  [
    "2497"
  ],
  "'token' is assigned a value but never used.",
  "'email' is assigned a value but never used.",
  "'credential' is assigned a value but never used.",
  "'MASTER_DATA' is defined but never used.",
  "'Products' is defined but never used.",
  "'AnalyticsTransaction' is defined but never used.",
  [
    "2498"
  ],
  "'ToggleBody' is defined but never used.",
  "'ToggleButton' is defined but never used.",
  "'ToggleContainer' is defined but never used.",
  "'FilteringPanel' is defined but never used.",
  "'Button' is defined but never used.",
  "'ScheduleServices' is defined but never used.",
  "'ProductServices' is defined but never used.",
  "'Progress' is defined but never used.",
  "'isToggled' is assigned a value but never used.",
  "'setIsToggled' is assigned a value but never used.",
  "'percent' is assigned a value but never used.",
  "'success' is assigned a value but never used.",
  "'errorList' is assigned a value but never used.",
  [
    "2499"
  ],
  "'handleScheduler' is assigned a value but never used.",
  "'handleImport' is assigned a value but never used.",
  "'renewedData' is assigned a value but never used.",
  [
    "2500"
  ],
  "'PAYMENT_TRANSACTION' is defined but never used.",
  [
    "2501"
  ],
  "'DIRECT_AND_THIRD_PARTY' is defined but never used.",
  "'DirectAndThirdParty' is defined but never used.",
  [
    "2502"
  ],
  [
    "2503"
  ],
  "'useDispatch' is defined but never used.",
  "'navigateTo' is defined but never used.",
  "'DASHBOARD' is defined but never used.",
  "'clearTable' is defined but never used.",
  "'setTable' is defined but never used.",
  "'updateTable' is defined but never used.",
  "'db' is defined but never used.",
  "'ACCOUNT_NAME' is defined but never used.",
  "'BRANCH' is defined but never used.",
  "'CONTACT_NUMBER' is defined but never used.",
  "'CUSTOMER' is defined but never used.",
  "'DATE_END' is defined but never used.",
  "'DATE_ORDER_PLACED' is defined but never used.",
  "'LABELS' is defined but never used.",
  "'MENU_GROUP_HEADERS' is defined but never used.",
  "'ORDER_NO' is defined but never used.",
  "'UTAK_NO' is defined but never used.",
  "'SCHEDULES' is defined but never used.",
  "'normalizeHour' is defined but never used.",
  "'formatDate' is defined but never used.",
  "'getAmount' is defined but never used.",
  "'calculateSubTotal' is defined but never used.",
  "'ACCOUNT_NUMBER' is defined but never used.",
  "'AMOUNT_PAID' is defined but never used.",
  "'DATE_PAYMENT' is defined but never used.",
  "'MODE_PAYMENT' is defined but never used.",
  "'OTHERS_DEDUCTION' is defined but never used.",
  "'PAYMENT_LABELS' is defined but never used.",
  "'SOURCE' is defined but never used.",
  "'menu' is defined but never used.",
  "'useGetProducts' is defined but never used.",
  "'useGetDropdowns' is defined but never used.",
  "'PaymentTransactionTable' is defined but never used.",
  "'formatTime' is defined but never used.",
  "'formatDateFromDatabase' is defined but never used.",
  "'identity' is defined but never used.",
  "'ArrowLeftOutlined' is defined but never used.",
  "'columnWidth' is assigned a value but never used.",
  "'sortSettings' is assigned a value but never used.",
  "'REPORTS' is defined but never used.",
  [
    "2504"
  ],
  "'react' is defined but never used.",
  "'setWithMerge' is assigned a value but never used.",
  "'fs' is defined but never used.",
  "no-useless-escape",
  "Unnecessary escape character: \\[.",
  "Literal",
  "unnecessaryEscape",
  [
    "2505",
    "2506"
  ],
  [
    "2507",
    "2508"
  ],
  "'getBranch' is assigned a value but never used.",
  "React Hook useEffect has a missing dependency: 'loadDropdowns'. Either include it or remove the dependency array.",
  [
    "2509"
  ],
  "'useState' is defined but never used.",
  "'Timepicker' is defined but never used.",
  "'STATUS' is defined but never used.",
  "'TextBoxComponent' is defined but never used.",
  "'PARTNER_MERCHANT_ORDER_NO' is defined but never used.",
  "'REMARKS' is defined but never used.",
  "'clearOrderNos' is defined but never used.",
  "'setOrderViaField' is defined but never used.",
  "'INPUT' is defined but never used.",
  "'useGetDropdownGroup' is defined but never used.",
  "'Input' is defined but never used.",
  "'OrderVia' is defined but never used.",
  "React Hook useEffect has missing dependencies: 'countLibis' and 'countRonac'. Either include them or remove the dependency array.",
  [
    "2510"
  ],
  "'testFunc' is assigned a value but never used.",
  "'Space' is defined but never used.",
  "'Tag' is defined but never used.",
  "'REF_NO' is defined but never used.",
  "'useEffect' is defined but never used.",
  "'CODE' is defined but never used.",
  "'QUANTITY' is defined but never used.",
  "'ORDER_VIA' is defined but never used.",
  "'Controllers' is defined but never used.",
  "'Services' is defined but never used.",
  "Assign arrow function to a variable before exporting as module default",
  "'DragAndDrop' is defined but never used.",
  "'Resize' is defined but never used.",
  "'BC' is defined but never used.",
  "'BC_HALF' is defined but never used.",
  "'EIGHT' is defined but never used.",
  "'TWELVE' is defined but never used.",
  "'DROPDOWN_DATAS' is defined but never used.",
  "'identifyDateRange' is defined but never used.",
  "'getDaysInMonthUTC' is defined but never used.",
  "'Backdrop' is defined but never used.",
  "'CustomButton' is defined but never used.",
  "'getWeekOfDate' is defined but never used.",
  "'schedulerOpenedIdSlice' is assigned a value but never used.",
  "'setDataSource' is assigned a value but never used.",
  "'branchSelection' is assigned a value but never used.",
  "'setBranchSelection' is assigned a value but never used.",
  "'orderSlipData' is assigned a value but never used.",
  "React Hook useEffect has missing dependencies: 'eventSettings' and 'stop'. Either include them or remove the dependency array. You can also do a functional update 'setEventSettings(e => ...)' if you only need 'eventSettings' in the 'setEventSettings' call.",
  [
    "2511"
  ],
  "React Hook useEffect has a missing dependency: 'eventSettings'. Either include it or remove the dependency array. You can also do a functional update 'setEventSettings(e => ...)' if you only need 'eventSettings' in the 'setEventSettings' call.",
  [
    "2512"
  ],
  "React Hook useEffect has missing dependencies: 'dispatch', 'navigate.currentView', 'setLoading', 'userComponentSlice.branches', 'userComponentSlice.displayName', and 'userComponentSlice.email'. Either include them or remove the dependency array. If 'setLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
  [
    "2513"
  ],
  [
    "2514"
  ],
  "'onNavigation' is assigned a value but never used.",
  "'branchColors' is assigned a value but never used.",
  "'partnerMerchant' is assigned a value but never used.",
  "'orderVia' is assigned a value but never used.",
  "'ContextMenu' is defined but never used.",
  "'PdfExport' is defined but never used.",
  "'Search' is defined but never used.",
  "'IoMdClose' is defined but never used.",
  "'update' is defined but never used.",
  "'sourceSummary' is assigned a value but never used.",
  "'Footer' is defined but never used.",
  "'handleChange' is assigned a value but never used.",
  "'DailyReportType' is defined but never used.",
  "jsx-a11y/img-redundant-alt",
  "Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",
  "'deleteData' is defined but never used.",
  "'updateData' is defined but never used.",
  "'BRANCHES' is defined but never used.",
  "'CheckboxGroup' is defined but never used.",
  "'PartnerMerchantModal' is defined but never used.",
  "React Hook React.useEffect has missing dependencies: 'checkboxValues' and 'loadData'. Either include them or remove the dependency array.",
  [
    "2515"
  ],
  "'onChange' is assigned a value but never used.",
  "no-useless-constructor",
  "Useless constructor.",
  "MethodDefinition",
  "noUselessConstructor",
  "'INDICATE_REASON' is defined but never used.",
  "'orderSlipConfig' is defined but never used.",
  "'DESCRIPTION' is defined but never used.",
  "React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",
  [
    "2516"
  ],
  "React Hook useEffect has a missing dependency: 'loadDisplayedSetting'. Either include it or remove the dependency array.",
  [
    "2517"
  ],
  "'DELIVERY_DATE' is defined but never used.",
  "'Label2' is defined but never used.",
  "'Divider' is defined but never used.",
  "'triggeredClicked' is assigned a value but never used.",
  "'BLANK_FIELD' is defined but never used.",
  "'ATCHARA' is defined but never used.",
  "'BAO' is defined but never used.",
  "'BASTING_SAUCE' is defined but never used.",
  "'BCJ_1' is defined but never used.",
  "'BCJ_2' is defined but never used.",
  "'BCJ_4' is defined but never used.",
  "'BC_2' is defined but never used.",
  "'BC_4' is defined but never used.",
  "'BC_SAUCE' is defined but never used.",
  "'CHILI_OIL' is defined but never used.",
  "'CH_12' is defined but never used.",
  "'CH_8' is defined but never used.",
  "'CH_8_PS' is defined but never used.",
  "'CL_12' is defined but never used.",
  "'CL_8' is defined but never used.",
  "'FBC_4' is defined but never used.",
  "'FCH_12' is defined but never used.",
  "'FCH_8' is defined but never used.",
  "'ID' is defined but never used.",
  "'JV_1' is defined but never used.",
  "'JV_2' is defined but never used.",
  "'JV_4' is defined but never used.",
  "'M_A' is defined but never used.",
  "'M_B' is defined but never used.",
  "'PRT' is defined but never used.",
  "'REPAER' is defined but never used.",
  "'SPICED_VINEGAR' is defined but never used.",
  "'TOTAL' is defined but never used.",
  "Assign array to a variable before exporting as module default",
  "jsx-a11y/anchor-is-valid",
  "The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",
  "'Grid' is defined but never used.",
  "'documentPrintInfo' is assigned a value but never used.",
  "React Hook useEffect has missing dependencies: 'productLabels' and 'products'. Either include them or remove the dependency array. You can also do a functional update 'setProducts(p => ...)' if you only need 'products' in the 'setProducts' call.",
  [
    "2518"
  ],
  [
    "2519"
  ],
  "React Hook useEffect has a missing dependency: 'loadProducts'. Either include it or remove the dependency array.",
  [
    "2520"
  ],
  "'DATE_START' is defined but never used.",
  "'formatDateDash' is defined but never used.",
  "'setSourceSummary' is assigned a value but never used.",
  "'sumArray' is defined but never used.",
  "'FilteringPanelMethods' is defined but never used.",
  "'PrintMethods' is defined but never used.",
  "'ExcelExport' is defined but never used.",
  "'Group' is defined but never used.",
  "'Select' is defined but never used.",
  "'userSlice' is assigned a value but never used.",
  "'setBranch' is assigned a value but never used.",
  "'dataFetched' is assigned a value but never used.",
  "'branchDatasource' is assigned a value but never used.",
  "'setBranchDatasource' is assigned a value but never used.",
  "eqeqeq",
  "Expected '===' and instead saw '=='.",
  "BinaryExpression",
  "unexpected",
  "React Hook useEffect has missing dependencies: 'checkedChange' and 'checkedIds'. Either include them or remove the dependency array.",
  [
    "2521"
  ],
  "no-dupe-keys",
  "Duplicate key 'datePayment'.",
  "ObjectExpression",
  "'DatePicker' is defined but never used.",
  "'AiFillCloseCircle' is defined but never used.",
  "'formatDateSlash' is defined but never used.",
  "'sumArrayDatas' is defined but never used.",
  "'dateOrderPlaced' is assigned a value but never used.",
  "'dateStart' is assigned a value but never used.",
  "'result' is assigned a value but never used.",
  "React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",
  [
    "2522"
  ],
  "'DATE_PICKER' is defined but never used.",
  "'CustomDialog' is defined but never used.",
  [
    "2523"
  ],
  "'dataList' is assigned a value but never used.",
  "React Hook useEffect has missing dependencies: 'calculateBalance' and 'formFields'. Either include them or remove the dependency array.",
  [
    "2524"
  ],
  "React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.",
  "MemberExpression",
  "'handleOthers' is assigned a value but never used.",
  "'formatNumber' is defined but never used.",
  "'dummy' is defined but never used.",
  "'calculateTotalAmountPaid' is defined but never used.",
  "'_productGroupHeader' is assigned a value but never used.",
  "'_endTime' is assigned a value but never used.",
  "'isPartnerMerchant' is assigned a value but never used.",
  "'setPartnerMerchant' is assigned a value but never used.",
  [
    "2525"
  ],
  "'classes' is defined but never used.",
  "'GRILL_RESERVATION' is defined but never used.",
  "'SideNavView' is defined but never used.",
  "'selectedMenu' is assigned a value but never used.",
  "'sort' is defined but never used.",
  "'Col' is defined but never used.",
  "'Row' is defined but never used.",
  "'lessData' is defined but never used.",
  "'lessValue' is assigned a value but never used.",
  "'dataObj' is assigned a value but never used.",
  "array-callback-return",
  "Array.prototype.find() expects a value to be returned at the end of arrow function.",
  "ArrowFunctionExpression",
  "expectedAtEnd",
  "'others' is assigned a value but never used.",
  "'findRowDataByRRNo' is assigned a value but never used.",
  "'Radio' is defined but never used.",
  "'Slider' is defined but never used.",
  "'DateTimePicker' is defined but never used.",
  "'TextArea' is assigned a value but never used.",
  "React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",
  [
    "2526"
  ],
  "'isDisplayed' is assigned a value but never used.",
  [
    "2527"
  ],
  "'handleOrderVia' is assigned a value but never used.",
  [
    "2528"
  ],
  "'thousandsSeparators' is defined but never used.",
  "React Hook useEffect has a missing dependency: 'loadServices'. Either include it or remove the dependency array.",
  [
    "2529"
  ],
  "React Hook useEffect has a missing dependency: 'loadLedgers'. Either include it or remove the dependency array.",
  [
    "2530"
  ],
  "React Hook useEffect has a missing dependency: 'reportData?.items'. Either include it or remove the dependency array.",
  [
    "2531"
  ],
  "'Option' is defined but never used.",
  "'ReceivingReportServices' is defined but never used.",
  "'generatedNoString' is defined but never used.",
  [
    "2532"
  ],
  "'produceStateProperty' is assigned a value but never used.",
  "'userComponentSlice' is assigned a value but never used.",
  "React Hook useEffect has a missing dependency: 'loadProductList'. Either include it or remove the dependency array.",
  [
    "2533"
  ],
  "react/jsx-no-duplicate-props",
  "No duplicate props allowed",
  "JSXAttribute",
  "'useSelectMenus' is defined but never used.",
  "'SubMenu' is assigned a value but never used.",
  "React Hook useEffect has an unnecessary dependency: 'menuRef.current'. Either exclude it or remove the dependency array. Mutable values like 'menuRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",
  [
    "2534"
  ],
  "'originalReportList' is assigned a value but never used.",
  "'setOriginalReportList' is assigned a value but never used.",
  "React Hook useEffect has a missing dependency: 'loadReports'. Either include it or remove the dependency array.",
  [
    "2535"
  ],
  "'Switch' is defined but never used.",
  "'ORDER_VIA_PARTNER' is defined but never used.",
  "'LiquidChart' is defined but never used.",
  "'checkDate' is defined but never used.",
  [
    "2536"
  ],
  [
    "2537"
  ],
  "'calculatePercent' is assigned a value but never used.",
  "no-lone-blocks",
  "Block is redundant.",
  "BlockStatement",
  "redundantBlock",
  "'targetAmount' is assigned a value but never used.",
  "'isSwitch' is assigned a value but never used.",
  "'setTargets' is assigned a value but never used.",
  [
    "2538"
  ],
  [
    "2539"
  ],
  "'getPageMargins' is assigned a value but never used.",
  "Array.prototype.filter() expects a value to be returned at the end of arrow function.",
  "'useFindDataHandler' is defined but never used.",
  "React Hook useEffect has a missing dependency: 'switchHandler'. Either include it or remove the dependency array.",
  [
    "2540"
  ],
  "'AiFillFilter' is defined but never used.",
  "'AiOutlineClose' is defined but never used.",
  "'defaultDate' is assigned a value but never used.",
  "'AiOutlinePlus' is defined but never used.",
  "'handleAdd' is assigned a value but never used.",
  "React Hook useEffect has a missing dependency: 'fieldNames'. Either include it or remove the dependency array. You can also do a functional update 'setFieldNames(f => ...)' if you only need 'fieldNames' in the 'setFieldNames' call.",
  [
    "2541"
  ],
  "React Hook useEffect has a missing dependency: 'loadUploads'. Either include it or remove the dependency array.",
  [
    "2542"
  ],
  "'Modal' is defined but never used.",
  "'Card' is defined but never used.",
  "'Alert' is defined but never used.",
  "'PrinterFilled' is defined but never used.",
  [
    "2488"
  ],
  [
    "2489"
  ],
  "'rangeData' is assigned a value but never used.",
  "'setRangeData' is assigned a value but never used.",
  "'formatDateDashWithTime' is defined but never used.",
  "'Tags' is defined but never used.",
  "'ROLES' is defined but never used.",
  "'modifiedBy' is assigned a value but never used.",
  "'PAYMENT_MODE' is defined but never used.",
  "'checkIfValidNumber' is assigned a value but never used.",
  "'Avatar' is defined but never used.",
  "'Dropdown' is defined but never used.",
  "React Hook useEffect has missing dependencies: 'branchValues' and 'roleValues'. Either include them or remove the dependency array. If 'setValues' needs the current value of 'branchValues', you can also switch to useReducer instead of useState and read 'branchValues' in the reducer.",
  [
    "2543"
  ],
  "'Typography' is defined but never used.",
  "'useDirectOrders' is defined but never used.",
  "'partnerOrderData' is assigned a value but never used.",
  "'summaryOfSource' is assigned a value but never used.",
  "'grandTotal' is assigned a value but never used.",
  "'grandTotalSourceSum' is assigned a value but never used.",
  "'handlePartnerOrderData' is assigned a value but never used.",
  "'sumArrayOfObjectsGrouping' is defined but never used.",
  "'saveGroupDropdowns' is assigned a value but never used.",
  [
    "2544"
  ],
  "React Hook useEffect has missing dependencies: 'props.list' and 'props.name'. Either include them or remove the dependency array. If 'setName' needs the current value of 'props.name', you can also switch to useReducer instead of useState and read 'props.name' in the reducer.",
  [
    "2545"
  ],
  "'isEditable' is defined but never used.",
  [
    "2546"
  ],
  "'moment' is defined but never used.",
  "'directData' is assigned a value but never used.",
  "'directSummaryOfSource' is assigned a value but never used.",
  "'directGrandTotal' is assigned a value but never used.",
  "'directHrandTotalSourceSum' is assigned a value but never used.",
  "'directHandleData' is assigned a value but never used.",
  "'dailySummaryData' is assigned a value but never used.",
  "'handleDailySummaryData' is assigned a value but never used.",
  "'dailySummaryGrandTotal' is assigned a value but never used.",
  "'sourceData' is assigned a value but never used.",
  "'handleSourceData' is assigned a value but never used.",
  "'sourceGrandTotal' is assigned a value but never used.",
  "React Hook useEffect has missing dependencies: 'dateList' and 'handleSummaryData'. Either include them or remove the dependency array.",
  [
    "2547"
  ],
  "React Hook useEffect has a missing dependency: 'handleData'. Either include it or remove the dependency array.",
  [
    "2548"
  ],
  "'handleExcel' is assigned a value but never used.",
  "React Hook useEffect has missing dependencies: 'handlePartnerOrderData' and 'orderViaPartner'. Either include them or remove the dependency array.",
  [
    "2549"
  ],
  "React Hook useEffect has a missing dependency: 'handleDirectOrderData'. Either include it or remove the dependency array.",
  [
    "2550"
  ],
  "'TOTAL_DUE' is defined but never used.",
  "'DAILY_REPORTS' is defined but never used.",
  [
    "2551"
  ],
  "'FadeIn' is defined but never used.",
  "'SlideOutRight' is defined but never used.",
  "'Wobble' is defined but never used.",
  "'useRef' is defined but never used.",
  "'CUSTOMER_REPORTS' is defined but never used.",
  [
    "2552"
  ],
  "'Tooltip' is defined but never used.",
  "'FilterOutlined' is defined but never used.",
  "'Animate' is defined but never used.",
  "'SlideInRight' is defined but never used.",
  "'numbeStyle' is assigned a value but never used.",
  "'filteredData' is assigned a value but never used.",
  "'sortFunct' is assigned a value but never used.",
  "'setFilteredData' is assigned a value but never used.",
  "'otherList' is assigned a value but never used.",
  "'setOtherList' is assigned a value but never used.",
  "React Hook useEffect has a missing dependency: 'defaultDiscountState'. Either include it or remove the dependency array.",
  [
    "2553"
  ],
  "'Checkbox' is defined but never used.",
  "'useDashboardTransaction' is defined but never used.",
  "'SearchOutlined' is defined but never used.",
  "'GroupPayments' is defined but never used.",
  "'PaginateCommands' is defined but never used.",
  "'usePaginate' is defined but never used.",
  "React Hook useEffect has missing dependencies: 'defaultDate' and 'rangeProps'. Either include them or remove the dependency array.",
  [
    "2554"
  ],
  "'dateFromD' is assigned a value but never used.",
  "'React' is defined but never used.",
  [
    "2555"
  ],
  "'RangePicker' is defined but never used.",
  "'selectTableSlice' is defined but never used.",
  "no-global-assign",
  "no-unsafe-negation",
  {
    "desc": "2556",
    "fix": "2557"
  },
  {
    "desc": "2558",
    "fix": "2559"
  },
  {
    "desc": "2560",
    "fix": "2561"
  },
  {
    "desc": "2562",
    "fix": "2563"
  },
  {
    "desc": "2562",
    "fix": "2564"
  },
  {
    "desc": "2562",
    "fix": "2565"
  },
  {
    "desc": "2566",
    "fix": "2567"
  },
  {
    "desc": "2562",
    "fix": "2568"
  },
  {
    "desc": "2562",
    "fix": "2569"
  },
  {
    "desc": "2562",
    "fix": "2570"
  },
  {
    "desc": "2562",
    "fix": "2571"
  },
  {
    "desc": "2562",
    "fix": "2572"
  },
  {
    "desc": "2562",
    "fix": "2573"
  },
  {
    "desc": "2566",
    "fix": "2574"
  },
  {
    "desc": "2562",
    "fix": "2575"
  },
  {
    "messageId": "2576",
    "fix": "2577",
    "desc": "2578"
  },
  {
    "messageId": "2579",
    "fix": "2580",
    "desc": "2581"
  },
  {
    "messageId": "2576",
    "fix": "2582",
    "desc": "2578"
  },
  {
    "messageId": "2579",
    "fix": "2583",
    "desc": "2581"
  },
  {
    "desc": "2584",
    "fix": "2585"
  },
  {
    "desc": "2586",
    "fix": "2587"
  },
  {
    "desc": "2588",
    "fix": "2589"
  },
  {
    "desc": "2590",
    "fix": "2591"
  },
  {
    "desc": "2592",
    "fix": "2593"
  },
  {
    "desc": "2562",
    "fix": "2594"
  },
  {
    "desc": "2595",
    "fix": "2596"
  },
  {
    "desc": "2597",
    "fix": "2598"
  },
  {
    "desc": "2599",
    "fix": "2600"
  },
  {
    "desc": "2601",
    "fix": "2602"
  },
  {
    "desc": "2603",
    "fix": "2604"
  },
  {
    "desc": "2605",
    "fix": "2606"
  },
  {
    "desc": "2607",
    "fix": "2608"
  },
  {
    "desc": "2609",
    "fix": "2610"
  },
  {
    "desc": "2611",
    "fix": "2612"
  },
  {
    "desc": "2613",
    "fix": "2614"
  },
  {
    "desc": "2599",
    "fix": "2615"
  },
  {
    "desc": "2616",
    "fix": "2617"
  },
  {
    "desc": "2599",
    "fix": "2618"
  },
  {
    "desc": "2619",
    "fix": "2620"
  },
  {
    "desc": "2621",
    "fix": "2622"
  },
  {
    "desc": "2623",
    "fix": "2624"
  },
  {
    "desc": "2625",
    "fix": "2626"
  },
  {
    "desc": "2625",
    "fix": "2627"
  },
  {
    "desc": "2628",
    "fix": "2629"
  },
  {
    "desc": "2630",
    "fix": "2631"
  },
  {
    "desc": "2632",
    "fix": "2633"
  },
  {
    "desc": "2634",
    "fix": "2635"
  },
  {
    "desc": "2636",
    "fix": "2637"
  },
  {
    "desc": "2634",
    "fix": "2638"
  },
  {
    "desc": "2636",
    "fix": "2639"
  },
  {
    "desc": "2640",
    "fix": "2641"
  },
  {
    "desc": "2642",
    "fix": "2643"
  },
  {
    "desc": "2644",
    "fix": "2645"
  },
  {
    "desc": "2646",
    "fix": "2647"
  },
  {
    "desc": "2648",
    "fix": "2649"
  },
  {
    "desc": "2650",
    "fix": "2651"
  },
  {
    "desc": "2619",
    "fix": "2652"
  },
  {
    "desc": "2653",
    "fix": "2654"
  },
  {
    "desc": "2655",
    "fix": "2656"
  },
  {
    "desc": "2657",
    "fix": "2658"
  },
  {
    "desc": "2659",
    "fix": "2660"
  },
  {
    "desc": "2562",
    "fix": "2661"
  },
  {
    "desc": "2562",
    "fix": "2662"
  },
  {
    "desc": "2663",
    "fix": "2664"
  },
  {
    "desc": "2665",
    "fix": "2666"
  },
  {
    "desc": "2667",
    "fix": "2668"
  },
  "Update the dependencies array to be: [updateInfo]",
  {
    "range": "2669",
    "text": "2670"
  },
  "Update the dependencies array to be: [dispatch, menu]",
  {
    "range": "2671",
    "text": "2672"
  },
  "Update the dependencies array to be: [loadModules, roles]",
  {
    "range": "2673",
    "text": "2674"
  },
  "Update the dependencies array to be: [dispatch]",
  {
    "range": "2675",
    "text": "2676"
  },
  {
    "range": "2677",
    "text": "2676"
  },
  {
    "range": "2678",
    "text": "2676"
  },
  "Update the dependencies array to be: [dispatch, props?.breadcrumbs]",
  {
    "range": "2679",
    "text": "2680"
  },
  {
    "range": "2681",
    "text": "2676"
  },
  {
    "range": "2682",
    "text": "2676"
  },
  {
    "range": "2683",
    "text": "2676"
  },
  {
    "range": "2684",
    "text": "2676"
  },
  {
    "range": "2685",
    "text": "2676"
  },
  {
    "range": "2686",
    "text": "2676"
  },
  {
    "range": "2687",
    "text": "2680"
  },
  {
    "range": "2688",
    "text": "2676"
  },
  "removeEscape",
  {
    "range": "2689",
    "text": "2690"
  },
  "Remove the `\\`. This maintains the current functionality.",
  "escapeBackslash",
  {
    "range": "2691",
    "text": "2692"
  },
  "Replace the `\\` with `\\\\` to include the actual backslash character.",
  {
    "range": "2693",
    "text": "2690"
  },
  {
    "range": "2694",
    "text": "2692"
  },
  "Update the dependencies array to be: [loadDropdowns]",
  {
    "range": "2695",
    "text": "2696"
  },
  "Update the dependencies array to be: [countLibis, countRonac, dataSource, props]",
  {
    "range": "2697",
    "text": "2698"
  },
  "Update the dependencies array to be: [userComponentSlice, dataSource, stop, eventSettings]",
  {
    "range": "2699",
    "text": "2700"
  },
  "Update the dependencies array to be: [eventSettings, schedulerComponentSlice.dataSource]",
  {
    "range": "2701",
    "text": "2702"
  },
  "Update the dependencies array to be: [dispatch, navigate.currentView, navigate?.dateRange, setLoading, userComponentSlice.branches, userComponentSlice.displayName, userComponentSlice.email]",
  {
    "range": "2703",
    "text": "2704"
  },
  {
    "range": "2705",
    "text": "2676"
  },
  "Update the dependencies array to be: [checkboxValues, loadData, tableSlice]",
  {
    "range": "2706",
    "text": "2707"
  },
  "Update the dependencies array to be: [props?.id, products, loadData]",
  {
    "range": "2708",
    "text": "2709"
  },
  "Update the dependencies array to be: [loadDisplayedSetting, orderComponentSlice.orderViaField]",
  {
    "range": "2710",
    "text": "2711"
  },
  "Update the dependencies array to be: [props.documentPrintInfo, props.branch, products, productLabels]",
  {
    "range": "2712",
    "text": "2713"
  },
  "Update the dependencies array to be: [dispatch, total]",
  {
    "range": "2714",
    "text": "2715"
  },
  "Update the dependencies array to be: [loadProducts]",
  {
    "range": "2716",
    "text": "2717"
  },
  "Update the dependencies array to be: [checkedChange, checkedIds, columns, dataFiltered, visible]",
  {
    "range": "2718",
    "text": "2719"
  },
  "Update the dependencies array to be: [visible, productList, props]",
  {
    "range": "2720",
    "text": "2721"
  },
  "Update the dependencies array to be: [props?.subTotal, props?.id, dropdowns, loadData]",
  {
    "range": "2722",
    "text": "2723"
  },
  "Update the dependencies array to be: [calculateBalance, formFields, others]",
  {
    "range": "2724",
    "text": "2725"
  },
  {
    "range": "2726",
    "text": "2711"
  },
  "Update the dependencies array to be: [props, props.formFields, visible]",
  {
    "range": "2727",
    "text": "2728"
  },
  {
    "range": "2729",
    "text": "2711"
  },
  "Update the dependencies array to be: [loadData]",
  {
    "range": "2730",
    "text": "2731"
  },
  "Update the dependencies array to be: [loadServices, productList]",
  {
    "range": "2732",
    "text": "2733"
  },
  "Update the dependencies array to be: [loadLedgers, props]",
  {
    "range": "2734",
    "text": "2735"
  },
  "Update the dependencies array to be: [reportData?.items]",
  {
    "range": "2736",
    "text": "2737"
  },
  {
    "range": "2738",
    "text": "2737"
  },
  "Update the dependencies array to be: [loadProductList, visible]",
  {
    "range": "2739",
    "text": "2740"
  },
  "Update the dependencies array to be: []",
  {
    "range": "2741",
    "text": "2742"
  },
  "Update the dependencies array to be: [loadReports]",
  {
    "range": "2743",
    "text": "2744"
  },
  "Update the dependencies array to be: [Services, date, dateTo, loadData]",
  {
    "range": "2745",
    "text": "2746"
  },
  "Update the dependencies array to be: [Services, loadDropdowns]",
  {
    "range": "2747",
    "text": "2748"
  },
  {
    "range": "2749",
    "text": "2746"
  },
  {
    "range": "2750",
    "text": "2748"
  },
  "Update the dependencies array to be: [rangeHandlerFilteredData.searchData, isChecked, switchHandler]",
  {
    "range": "2751",
    "text": "2752"
  },
  "Update the dependencies array to be: [fieldNames, props?.others]",
  {
    "range": "2753",
    "text": "2754"
  },
  "Update the dependencies array to be: [documentId, loadUploads]",
  {
    "range": "2755",
    "text": "2756"
  },
  "Update the dependencies array to be: [branchValues, roleValues]",
  {
    "range": "2757",
    "text": "2758"
  },
  "Update the dependencies array to be: [collectionName, loadDropdowns]",
  {
    "range": "2759",
    "text": "2760"
  },
  "Update the dependencies array to be: [props.list, props.name]",
  {
    "range": "2761",
    "text": "2762"
  },
  {
    "range": "2763",
    "text": "2731"
  },
  "Update the dependencies array to be: [dateList, filteredData, handleSummaryData, source]",
  {
    "range": "2764",
    "text": "2765"
  },
  "Update the dependencies array to be: [filteredData, dateList, handleData]",
  {
    "range": "2766",
    "text": "2767"
  },
  "Update the dependencies array to be: [filteredData, dateString, handlePartnerOrderData, orderViaPartner]",
  {
    "range": "2768",
    "text": "2769"
  },
  "Update the dependencies array to be: [filteredData, dateString, handleDirectOrderData]",
  {
    "range": "2770",
    "text": "2771"
  },
  {
    "range": "2772",
    "text": "2676"
  },
  {
    "range": "2773",
    "text": "2676"
  },
  "Update the dependencies array to be: [defaultDiscountState, rangeHandlerFilteredData?.searchData]",
  {
    "range": "2774",
    "text": "2775"
  },
  "Update the dependencies array to be: [defaultDate, rangeProps]",
  {
    "range": "2776",
    "text": "2777"
  },
  "Update the dependencies array to be: [lastVisible, loadData, userComponent?.branches]",
  {
    "range": "2778",
    "text": "2779"
  },
  [
    2846,
    2848
  ],
  "[updateInfo]",
  [
    2908,
    2914
  ],
  "[dispatch, menu]",
  [
    1303,
    1310
  ],
  "[loadModules, roles]",
  [
    5172,
    5174
  ],
  "[dispatch]",
  [
    1343,
    1345
  ],
  [
    1932,
    1934
  ],
  [
    688,
    708
  ],
  "[dispatch, props?.breadcrumbs]",
  [
    1160,
    1162
  ],
  [
    861,
    863
  ],
  [
    1835,
    1837
  ],
  [
    713,
    715
  ],
  [
    902,
    904
  ],
  [
    997,
    999
  ],
  [
    690,
    710
  ],
  [
    987,
    989
  ],
  [
    105,
    106
  ],
  "",
  [
    105,
    105
  ],
  "\\",
  [
    130,
    131
  ],
  [
    130,
    130
  ],
  [
    1440,
    1442
  ],
  "[loadDropdowns]",
  [
    2036,
    2055
  ],
  "[countLibis, countRonac, dataSource, props]",
  [
    3386,
    3418
  ],
  "[userComponentSlice, dataSource, stop, eventSettings]",
  [
    3584,
    3620
  ],
  "[eventSettings, schedulerComponentSlice.dataSource]",
  [
    5781,
    5802
  ],
  "[dispatch, navigate.currentView, navigate?.dateRange, setLoading, userComponentSlice.branches, userComponentSlice.displayName, userComponentSlice.email]",
  [
    6477,
    6479
  ],
  [
    3376,
    3388
  ],
  "[checkboxValues, loadData, tableSlice]",
  [
    1731,
    1752
  ],
  "[props?.id, products, loadData]",
  [
    575,
    610
  ],
  "[loadDisplayedSetting, orderComponentSlice.orderViaField]",
  [
    992,
    1031
  ],
  "[props.documentPrintInfo, props.branch, products, productLabels]",
  [
    2628,
    2635
  ],
  "[dispatch, total]",
  [
    4001,
    4003
  ],
  "[loadProducts]",
  [
    6601,
    6633
  ],
  "[checkedChange, checkedIds, columns, dataFiltered, visible]",
  [
    2288,
    2310
  ],
  "[visible, productList, props]",
  [
    1713,
    1752
  ],
  "[props?.subTotal, props?.id, dropdowns, loadData]",
  [
    3369,
    3402
  ],
  "[calculateBalance, formFields, others]",
  [
    1834,
    1869
  ],
  [
    1407,
    1434
  ],
  "[props, props.formFields, visible]",
  [
    1191,
    1226
  ],
  [
    239,
    241
  ],
  "[loadData]",
  [
    483,
    496
  ],
  "[loadServices, productList]",
  [
    1197,
    1204
  ],
  "[loadLedgers, props]",
  [
    706,
    708
  ],
  "[reportData?.items]",
  [
    914,
    916
  ],
  [
    1363,
    1372
  ],
  "[loadProductList, visible]",
  [
    1243,
    1260
  ],
  "[]",
  [
    1384,
    1386
  ],
  "[loadReports]",
  [
    2117,
    2141
  ],
  "[Services, date, dateTo, loadData]",
  [
    2193,
    2203
  ],
  "[Services, loadDropdowns]",
  [
    2207,
    2231
  ],
  [
    2283,
    2293
  ],
  [
    2263,
    2311
  ],
  "[rangeHandlerFilteredData.searchData, isChecked, switchHandler]",
  [
    1196,
    1211
  ],
  "[fieldNames, props?.others]",
  [
    722,
    734
  ],
  "[documentId, loadUploads]",
  [
    745,
    747
  ],
  "[branchValues, roleValues]",
  [
    639,
    655
  ],
  "[collectionName, loadDropdowns]",
  [
    775,
    777
  ],
  "[props.list, props.name]",
  [
    240,
    242
  ],
  [
    577,
    599
  ],
  "[dateList, filteredData, handleSummaryData, source]",
  [
    568,
    592
  ],
  "[filteredData, dateList, handleData]",
  [
    739,
    765
  ],
  "[filteredData, dateString, handlePartnerOrderData, orderViaPartner]",
  [
    566,
    592
  ],
  "[filteredData, dateString, handleDirectOrderData]",
  [
    743,
    745
  ],
  [
    762,
    764
  ],
  [
    3289,
    3327
  ],
  "[defaultDiscountState, rangeHandlerFilteredData?.searchData]",
  [
    875,
    877
  ],
  "[defaultDate, rangeProps]",
  [
    754,
    792
  ],
  "[lastVisible, loadData, userComponent?.branches]"
]
